MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:47:29" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 19, 2019
Time:                15:47:29
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1CUEW49 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1CUEW49 new;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
40997      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
40998      set EMWS1.Neural2_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_OUTKEY;
40999      if upcase(ROLE) in('HIDDEN', 'STANDARD');
MPRINT(EM_DIAGRAM):   if upcase(ROLE) in('HIDDEN', 'STANDARD');
41000      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 30 observations read from the data set EMWS1.NEURAL2_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41001      filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41002      *------------------------------------------------------------*;
41003      * Neural2: Scoring DATA data;
41004      *------------------------------------------------------------*;
41005      data EMWS1.Neural2_TRAIN
41006      / view=EMWS1.Neural2_TRAIN
41007      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_TRAIN / view=EMWS1.Neural2_TRAIN ;
41008      set EMWS1.Part4_TRAIN
41009      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part4_TRAIN ;
41010      %inc emflow;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
MPRINT(EM_DIAGRAM):   label Age_group16_to_24 = 'Dummy: Age_group=16 to 24' ;
MPRINT(EM_DIAGRAM):   label Age_group25_to_44 = 'Dummy: Age_group=25 to 44' ;
MPRINT(EM_DIAGRAM):   label Age_group45_to_64 = 'Dummy: Age_group=45 to 64' ;
MPRINT(EM_DIAGRAM):   label Date2000 = 'Dummy: Date=2000' ;
MPRINT(EM_DIAGRAM):   label Date2001 = 'Dummy: Date=2001' ;
MPRINT(EM_DIAGRAM):   label Date2002 = 'Dummy: Date=2002' ;
MPRINT(EM_DIAGRAM):   label Date2003 = 'Dummy: Date=2003' ;
MPRINT(EM_DIAGRAM):   label Date2004 = 'Dummy: Date=2004' ;
MPRINT(EM_DIAGRAM):   label Date2005 = 'Dummy: Date=2005' ;
MPRINT(EM_DIAGRAM):   label Date2006 = 'Dummy: Date=2006' ;
MPRINT(EM_DIAGRAM):   label Date2007 = 'Dummy: Date=2007' ;
MPRINT(EM_DIAGRAM):   label Date2008 = 'Dummy: Date=2008' ;
MPRINT(EM_DIAGRAM):   label Date2009 = 'Dummy: Date=2009' ;
MPRINT(EM_DIAGRAM):   label Date2010 = 'Dummy: Date=2010' ;
MPRINT(EM_DIAGRAM):   label Date2011 = 'Dummy: Date=2011' ;
MPRINT(EM_DIAGRAM):   label Date2012 = 'Dummy: Date=2012' ;
MPRINT(EM_DIAGRAM):   label Genderboth_sexes = 'Dummy: Gender=both sexes' ;
MPRINT(EM_DIAGRAM):   label Genderfemale = 'Dummy: Gender=female' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label P_Population_in_thousands = 'Predicted: Population_in_thousands' ;
MPRINT(EM_DIAGRAM):   label R_Population_in_thousands = 'Residual: Population_in_thousands' ;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   drop Age_group16_to_24 Age_group25_to_44 Age_group45_to_64 ;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = .;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = .;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm19 = '65+' then do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = -1;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = -1;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 1;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '45 TO 64' then do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 1;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = .;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = .;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Date ;
MPRINT(EM_DIAGRAM):   drop Date2000 Date2001 Date2002 Date2003 Date2004 Date2005 Date2006 Date2007 Date2008 Date2009 Date2010 Date2011 Date2012 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   Date2000 = 0;
MPRINT(EM_DIAGRAM):   Date2001 = 0;
MPRINT(EM_DIAGRAM):   Date2002 = 0;
MPRINT(EM_DIAGRAM):   Date2003 = 0;
MPRINT(EM_DIAGRAM):   Date2004 = 0;
MPRINT(EM_DIAGRAM):   Date2005 = 0;
MPRINT(EM_DIAGRAM):   Date2006 = 0;
MPRINT(EM_DIAGRAM):   Date2007 = 0;
MPRINT(EM_DIAGRAM):   Date2008 = 0;
MPRINT(EM_DIAGRAM):   Date2009 = 0;
MPRINT(EM_DIAGRAM):   Date2010 = 0;
MPRINT(EM_DIAGRAM):   Date2011 = 0;
MPRINT(EM_DIAGRAM):   Date2012 = 0;
MPRINT(EM_DIAGRAM):   if missing( Date ) then do;
MPRINT(EM_DIAGRAM):   Date2000 = .;
MPRINT(EM_DIAGRAM):   Date2001 = .;
MPRINT(EM_DIAGRAM):   Date2002 = .;
MPRINT(EM_DIAGRAM):   Date2003 = .;
MPRINT(EM_DIAGRAM):   Date2004 = .;
MPRINT(EM_DIAGRAM):   Date2005 = .;
MPRINT(EM_DIAGRAM):   Date2006 = .;
MPRINT(EM_DIAGRAM):   Date2007 = .;
MPRINT(EM_DIAGRAM):   Date2008 = .;
MPRINT(EM_DIAGRAM):   Date2009 = .;
MPRINT(EM_DIAGRAM):   Date2010 = .;
MPRINT(EM_DIAGRAM):   Date2011 = .;
MPRINT(EM_DIAGRAM):   Date2012 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
MPRINT(DMNORMCP):   _dm10=dmnorm(Date,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2006' then do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2003' then do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2001' then do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2000' then do;
MPRINT(EM_DIAGRAM):   Date2000 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2001' then do;
MPRINT(EM_DIAGRAM):   Date2001 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2002' then do;
MPRINT(EM_DIAGRAM):   Date2002 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2003' then do;
MPRINT(EM_DIAGRAM):   Date2003 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2005' then do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2004' then do;
MPRINT(EM_DIAGRAM):   Date2004 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2005' then do;
MPRINT(EM_DIAGRAM):   Date2005 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2006' then do;
MPRINT(EM_DIAGRAM):   Date2006 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2010' then do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2008' then do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2007' then do;
MPRINT(EM_DIAGRAM):   Date2007 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2008' then do;
MPRINT(EM_DIAGRAM):   Date2008 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2009' then do;
MPRINT(EM_DIAGRAM):   Date2009 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2010' then do;
MPRINT(EM_DIAGRAM):   Date2010 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2012' then do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2011' then do;
MPRINT(EM_DIAGRAM):   Date2011 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2012' then do;
MPRINT(EM_DIAGRAM):   Date2012 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2013' then do;
MPRINT(EM_DIAGRAM):   Date2000 = -1;
MPRINT(EM_DIAGRAM):   Date2001 = -1;
MPRINT(EM_DIAGRAM):   Date2002 = -1;
MPRINT(EM_DIAGRAM):   Date2003 = -1;
MPRINT(EM_DIAGRAM):   Date2004 = -1;
MPRINT(EM_DIAGRAM):   Date2005 = -1;
MPRINT(EM_DIAGRAM):   Date2006 = -1;
MPRINT(EM_DIAGRAM):   Date2007 = -1;
MPRINT(EM_DIAGRAM):   Date2008 = -1;
MPRINT(EM_DIAGRAM):   Date2009 = -1;
MPRINT(EM_DIAGRAM):   Date2010 = -1;
MPRINT(EM_DIAGRAM):   Date2011 = -1;
MPRINT(EM_DIAGRAM):   Date2012 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   Date2000 = .;
MPRINT(EM_DIAGRAM):   Date2001 = .;
MPRINT(EM_DIAGRAM):   Date2002 = .;
MPRINT(EM_DIAGRAM):   Date2003 = .;
MPRINT(EM_DIAGRAM):   Date2004 = .;
MPRINT(EM_DIAGRAM):   Date2005 = .;
MPRINT(EM_DIAGRAM):   Date2006 = .;
MPRINT(EM_DIAGRAM):   Date2007 = .;
MPRINT(EM_DIAGRAM):   Date2008 = .;
MPRINT(EM_DIAGRAM):   Date2009 = .;
MPRINT(EM_DIAGRAM):   Date2010 = .;
MPRINT(EM_DIAGRAM):   Date2011 = .;
MPRINT(EM_DIAGRAM):   Date2012 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Gender ;
MPRINT(EM_DIAGRAM):   drop Genderboth_sexes Genderfemale ;
MPRINT(EM_DIAGRAM):   if missing( Gender ) then do;
MPRINT(EM_DIAGRAM):   Genderboth_sexes = .;
MPRINT(EM_DIAGRAM):   Genderfemale = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
MPRINT(EM_DIAGRAM):   _dm10 = put( Gender , $CHAR10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm10 = 'FEMALE' then do;
MPRINT(EM_DIAGRAM):   Genderboth_sexes = 0;
MPRINT(EM_DIAGRAM):   Genderfemale = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MALE' then do;
MPRINT(EM_DIAGRAM):   Genderboth_sexes = -1;
MPRINT(EM_DIAGRAM):   Genderfemale = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BOTH SEXES' then do;
MPRINT(EM_DIAGRAM):   Genderboth_sexes = 1;
MPRINT(EM_DIAGRAM):   Genderfemale = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Genderboth_sexes = .;
MPRINT(EM_DIAGRAM):   Genderfemale = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = 2.80451581665555 * Age_group16_to_24 + 2.66257618857886 * Age_group25_to_44 + 2.27428042621142 * Age_group45_to_64 + 0.47125292322736 * Date2000 + 0.23311851428843 * Date2001 + 0.54902464433691 * Date2002 + -0.15346735222469 * 
Date2003 + 0.46944685861628 * Date2004 + 0.37604954513678 * Date2005 + 0.39061416762273 * Date2006 + -0.24695161265506 * Date2007 + -0.0940988910836 * Date2008 + 0.0228204870683 * Date2009 + 0.61252140974112 * Date2010 + 0.16504723185446 * Date2011 + 
0.23086005632781 * Date2012 + -0.5597343477957 * Genderboth_sexes + -0.52754157640117 * Genderfemale ;
MPRINT(EM_DIAGRAM):   H12 = -6.52971491740447 * Age_group16_to_24 + 0.28569861827114 * Age_group25_to_44 + -0.00982281623129 * Age_group45_to_64 + -0.30625236358766 * Date2000 + -1.21137798020402 * Date2001 + -1.51645564020364 * Date2002 + 
0.86299496720353 * Date2003 + -0.93498774344571 * Date2004 + 0.6242111488688 * Date2005 + -2.36836348342809 * Date2006 + 1.12449399595682 * Date2007 + 1.85047727439571 * Date2008 + 1.70776212926759 * Date2009 + -1.41962995460536 * Date2010 + 
1.62083296703886 * Date2011 + 1.4873652063756 * Date2012 + -0.03519221005738 * Genderboth_sexes + -2.3955157311532 * Genderfemale ;
MPRINT(EM_DIAGRAM):   H13 = 7.06158999344795 * Age_group16_to_24 + 0.57048096601117 * Age_group25_to_44 + 2.63895819015121 * Age_group45_to_64 + -0.16828253491725 * Date2000 + -1.28332184684902 * Date2001 + 0.50133567355546 * Date2002 + -0.77559399613047 
* Date2003 + 0.78813284182853 * Date2004 + 0.41238962207276 * Date2005 + -0.5968396858171 * Date2006 + -0.66033245840418 * Date2007 + -1.37018067368506 * Date2008 + 0.08381409125405 * Date2009 + -0.75540384347548 * Date2010 + -0.02835506626351 * Date2011 
+ -0.49849084530149 * Date2012 + 1.13117701174471 * Genderboth_sexes + 1.64736127034363 * Genderfemale ;
MPRINT(EM_DIAGRAM):   H14 = 3.4630872113265 * Age_group16_to_24 + 4.47136694021352 * Age_group25_to_44 + 2.72605263191296 * Age_group45_to_64 + 0.74703333016594 * Date2000 + 0.56768441734246 * Date2001 + 1.1194903343746 * Date2002 + 0.35057468036228 * 
Date2003 + 0.81946953762189 * Date2004 + 0.72110714351831 * Date2005 + 0.88434900503026 * Date2006 + -0.06920733547316 * Date2007 + -0.15761719875234 * Date2008 + 0.58373614901827 * Date2009 + 0.52761282361936 * Date2010 + 0.59835393969457 * Date2011 + 
-0.03571345430143 * Date2012 + -1.59476884959088 * Genderboth_sexes + -1.01398015589094 * Genderfemale ;
MPRINT(EM_DIAGRAM):   H15 = -8.58338025897798 * Age_group16_to_24 + 1.73431130182411 * Age_group25_to_44 + -2.50959190344774 * Age_group45_to_64 + -2.01062257249017 * Date2000 + -1.65707328817157 * Date2001 + -0.45538932981411 * Date2002 + 
-1.16471188125424 * Date2003 + -3.28879121393757 * Date2004 + -0.47862384065246 * Date2005 + -1.01023576957189 * Date2006 + 1.29345923113314 * Date2007 + 3.00513118567611 * Date2008 + -0.0493540201805 * Date2009 + 0.59692696836937 * Date2010 + 
0.58089574713768 * Date2011 + 1.85854307287315 * Date2012 + -0.84076518654861 * Genderboth_sexes + 1.94410703586789 * Genderfemale ;
MPRINT(EM_DIAGRAM):   H11 = 2.48053561642249 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = 1.79073624896972 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = 2.85387370456884 + H13 ;
MPRINT(EM_DIAGRAM):   H14 = 3.49449374745814 + H14 ;
MPRINT(EM_DIAGRAM):   H15 = 1.94199856063024 + H15 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_Population_in_thousands = 1205.29793130634 * H11 + 1161.95461367712 * H12 + -3343.15103184733 * H13 + -2016.50607171174 * H14 + 5915.28044708513 * H15 ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = -295059.596508757 * H11 + 1200951.00495338 * H12 + -622386.835301285 * H13 + -467275.30556996 * H14 + 1356666.24875043 * H15 ;
MPRINT(EM_DIAGRAM):   P_Population_in_thousands = P_Population_in_thousands + 728.718562311591 * Age_group16_to_24 + 13881.1646508779 * Age_group25_to_44 + 11891.1993266939 * Age_group45_to_64 + -734.876069986509 * Date2000 + -1005.44966893069 * Date2001 
+ -196.729378741228 * Date2002 + -548.124329064577 * Date2003 + -706.153079137373 * Date2004 + -393.473056965343 * Date2005 + -450.137223833081 * Date2006 + -554.78332702273 * Date2007 + -258.442730517595 * Date2008 + -103.62092126527 * Date2009 + 
-200.510083639569 * Date2010 + 406.714770016742 * Date2011 + -474.646386339079 * Date2012 + 18344.9984154323 * Genderboth_sexes + 1012.85516998176 * Genderfemale ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = P_Sum_Labor_Force_Pop + 1381575.51824344 * Age_group16_to_24 + 5606191.01745719 * Age_group25_to_44 + 4011210.80381704 * Age_group45_to_64 + -25961.8994106242 * Date2000 + -119891.686127416 * Date2001 + 
59716.3277166119 * Date2002 + 104896.712470764 * Date2003 + -71742.1586759904 * Date2004 + 71167.8765069561 * Date2005 + -29647.3704495667 * Date2006 + 186857.778701065 * Date2007 + 121123.726203765 * Date2008 + 106127.807854169 * Date2009 + 
-10559.2515420828 * Date2010 + 129158.867206917 * Date2011 + 76664.9084844277 * Date2012 + 226995.438713328 * Genderboth_sexes + -3400.00464106612 * Genderfemale ;
MPRINT(EM_DIAGRAM):   P_Population_in_thousands = 38841.2806487802 + P_Population_in_thousands ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 6927309.52378857 + P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_Population_in_thousands = 38841.2806488095;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 6927309.52380952;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *****************************;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** ******************************;
MPRINT(EM_DIAGRAM):   IF MISSING( Population_in_thousands ) THEN R_Population_in_thousands = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Population_in_thousands = Population_in_thousands - P_Population_in_thousands ;
MPRINT(EM_DIAGRAM):   IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Sum_Labor_Force_Pop = Sum_Labor_Force_Pop - P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
MPRINT(EM_DIAGRAM):   run;
41455      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
41456      quit;
41457      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
41458      filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41459      *------------------------------------------------------------*;
41460      * Neural2: Scoring VALIDATE data;
41461      *------------------------------------------------------------*;
41462      data EMWS1.Neural2_VALIDATE
41463      / view=EMWS1.Neural2_VALIDATE
41464      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_VALIDATE / view=EMWS1.Neural2_VALIDATE ;
41465      set EMWS1.Part4_VALIDATE
41466      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part4_VALIDATE ;
41467      %inc emflow;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
MPRINT(EM_DIAGRAM):   label Age_group16_to_24 = 'Dummy: Age_group=16 to 24' ;
MPRINT(EM_DIAGRAM):   label Age_group25_to_44 = 'Dummy: Age_group=25 to 44' ;
MPRINT(EM_DIAGRAM):   label Age_group45_to_64 = 'Dummy: Age_group=45 to 64' ;
MPRINT(EM_DIAGRAM):   label Date2000 = 'Dummy: Date=2000' ;
MPRINT(EM_DIAGRAM):   label Date2001 = 'Dummy: Date=2001' ;
MPRINT(EM_DIAGRAM):   label Date2002 = 'Dummy: Date=2002' ;
MPRINT(EM_DIAGRAM):   label Date2003 = 'Dummy: Date=2003' ;
MPRINT(EM_DIAGRAM):   label Date2004 = 'Dummy: Date=2004' ;
MPRINT(EM_DIAGRAM):   label Date2005 = 'Dummy: Date=2005' ;
MPRINT(EM_DIAGRAM):   label Date2006 = 'Dummy: Date=2006' ;
MPRINT(EM_DIAGRAM):   label Date2007 = 'Dummy: Date=2007' ;
MPRINT(EM_DIAGRAM):   label Date2008 = 'Dummy: Date=2008' ;
MPRINT(EM_DIAGRAM):   label Date2009 = 'Dummy: Date=2009' ;
MPRINT(EM_DIAGRAM):   label Date2010 = 'Dummy: Date=2010' ;
MPRINT(EM_DIAGRAM):   label Date2011 = 'Dummy: Date=2011' ;
MPRINT(EM_DIAGRAM):   label Date2012 = 'Dummy: Date=2012' ;
MPRINT(EM_DIAGRAM):   label Genderboth_sexes = 'Dummy: Gender=both sexes' ;
MPRINT(EM_DIAGRAM):   label Genderfemale = 'Dummy: Gender=female' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label P_Population_in_thousands = 'Predicted: Population_in_thousands' ;
MPRINT(EM_DIAGRAM):   label R_Population_in_thousands = 'Residual: Population_in_thousands' ;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   drop Age_group16_to_24 Age_group25_to_44 Age_group45_to_64 ;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = .;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = .;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm19 = '65+' then do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = -1;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = -1;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 1;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '45 TO 64' then do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 1;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = .;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = .;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Date ;
MPRINT(EM_DIAGRAM):   drop Date2000 Date2001 Date2002 Date2003 Date2004 Date2005 Date2006 Date2007 Date2008 Date2009 Date2010 Date2011 Date2012 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   Date2000 = 0;
MPRINT(EM_DIAGRAM):   Date2001 = 0;
MPRINT(EM_DIAGRAM):   Date2002 = 0;
MPRINT(EM_DIAGRAM):   Date2003 = 0;
MPRINT(EM_DIAGRAM):   Date2004 = 0;
MPRINT(EM_DIAGRAM):   Date2005 = 0;
MPRINT(EM_DIAGRAM):   Date2006 = 0;
MPRINT(EM_DIAGRAM):   Date2007 = 0;
MPRINT(EM_DIAGRAM):   Date2008 = 0;
MPRINT(EM_DIAGRAM):   Date2009 = 0;
MPRINT(EM_DIAGRAM):   Date2010 = 0;
MPRINT(EM_DIAGRAM):   Date2011 = 0;
MPRINT(EM_DIAGRAM):   Date2012 = 0;
MPRINT(EM_DIAGRAM):   if missing( Date ) then do;
MPRINT(EM_DIAGRAM):   Date2000 = .;
MPRINT(EM_DIAGRAM):   Date2001 = .;
MPRINT(EM_DIAGRAM):   Date2002 = .;
MPRINT(EM_DIAGRAM):   Date2003 = .;
MPRINT(EM_DIAGRAM):   Date2004 = .;
MPRINT(EM_DIAGRAM):   Date2005 = .;
MPRINT(EM_DIAGRAM):   Date2006 = .;
MPRINT(EM_DIAGRAM):   Date2007 = .;
MPRINT(EM_DIAGRAM):   Date2008 = .;
MPRINT(EM_DIAGRAM):   Date2009 = .;
MPRINT(EM_DIAGRAM):   Date2010 = .;
MPRINT(EM_DIAGRAM):   Date2011 = .;
MPRINT(EM_DIAGRAM):   Date2012 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
MPRINT(DMNORMCP):   _dm10=dmnorm(Date,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2006' then do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2003' then do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2001' then do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2000' then do;
MPRINT(EM_DIAGRAM):   Date2000 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2001' then do;
MPRINT(EM_DIAGRAM):   Date2001 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2002' then do;
MPRINT(EM_DIAGRAM):   Date2002 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2003' then do;
MPRINT(EM_DIAGRAM):   Date2003 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2005' then do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2004' then do;
MPRINT(EM_DIAGRAM):   Date2004 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2005' then do;
MPRINT(EM_DIAGRAM):   Date2005 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2006' then do;
MPRINT(EM_DIAGRAM):   Date2006 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2010' then do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2008' then do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2007' then do;
MPRINT(EM_DIAGRAM):   Date2007 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2008' then do;
MPRINT(EM_DIAGRAM):   Date2008 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2009' then do;
MPRINT(EM_DIAGRAM):   Date2009 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2010' then do;
MPRINT(EM_DIAGRAM):   Date2010 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 <= '2012' then do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2011' then do;
MPRINT(EM_DIAGRAM):   Date2011 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2012' then do;
MPRINT(EM_DIAGRAM):   Date2012 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm10 = '2013' then do;
MPRINT(EM_DIAGRAM):   Date2000 = -1;
MPRINT(EM_DIAGRAM):   Date2001 = -1;
MPRINT(EM_DIAGRAM):   Date2002 = -1;
MPRINT(EM_DIAGRAM):   Date2003 = -1;
MPRINT(EM_DIAGRAM):   Date2004 = -1;
MPRINT(EM_DIAGRAM):   Date2005 = -1;
MPRINT(EM_DIAGRAM):   Date2006 = -1;
MPRINT(EM_DIAGRAM):   Date2007 = -1;
MPRINT(EM_DIAGRAM):   Date2008 = -1;
MPRINT(EM_DIAGRAM):   Date2009 = -1;
MPRINT(EM_DIAGRAM):   Date2010 = -1;
MPRINT(EM_DIAGRAM):   Date2011 = -1;
MPRINT(EM_DIAGRAM):   Date2012 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   Date2000 = .;
MPRINT(EM_DIAGRAM):   Date2001 = .;
MPRINT(EM_DIAGRAM):   Date2002 = .;
MPRINT(EM_DIAGRAM):   Date2003 = .;
MPRINT(EM_DIAGRAM):   Date2004 = .;
MPRINT(EM_DIAGRAM):   Date2005 = .;
MPRINT(EM_DIAGRAM):   Date2006 = .;
MPRINT(EM_DIAGRAM):   Date2007 = .;
MPRINT(EM_DIAGRAM):   Date2008 = .;
MPRINT(EM_DIAGRAM):   Date2009 = .;
MPRINT(EM_DIAGRAM):   Date2010 = .;
MPRINT(EM_DIAGRAM):   Date2011 = .;
MPRINT(EM_DIAGRAM):   Date2012 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Gender ;
MPRINT(EM_DIAGRAM):   drop Genderboth_sexes Genderfemale ;
MPRINT(EM_DIAGRAM):   if missing( Gender ) then do;
MPRINT(EM_DIAGRAM):   Genderboth_sexes = .;
MPRINT(EM_DIAGRAM):   Genderfemale = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
MPRINT(EM_DIAGRAM):   _dm10 = put( Gender , $CHAR10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm10 = 'FEMALE' then do;
MPRINT(EM_DIAGRAM):   Genderboth_sexes = 0;
MPRINT(EM_DIAGRAM):   Genderfemale = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MALE' then do;
MPRINT(EM_DIAGRAM):   Genderboth_sexes = -1;
MPRINT(EM_DIAGRAM):   Genderfemale = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BOTH SEXES' then do;
MPRINT(EM_DIAGRAM):   Genderboth_sexes = 1;
MPRINT(EM_DIAGRAM):   Genderfemale = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Genderboth_sexes = .;
MPRINT(EM_DIAGRAM):   Genderfemale = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = 2.80451581665555 * Age_group16_to_24 + 2.66257618857886 * Age_group25_to_44 + 2.27428042621142 * Age_group45_to_64 + 0.47125292322736 * Date2000 + 0.23311851428843 * Date2001 + 0.54902464433691 * Date2002 + -0.15346735222469 * 
Date2003 + 0.46944685861628 * Date2004 + 0.37604954513678 * Date2005 + 0.39061416762273 * Date2006 + -0.24695161265506 * Date2007 + -0.0940988910836 * Date2008 + 0.0228204870683 * Date2009 + 0.61252140974112 * Date2010 + 0.16504723185446 * Date2011 + 
0.23086005632781 * Date2012 + -0.5597343477957 * Genderboth_sexes + -0.52754157640117 * Genderfemale ;
MPRINT(EM_DIAGRAM):   H12 = -6.52971491740447 * Age_group16_to_24 + 0.28569861827114 * Age_group25_to_44 + -0.00982281623129 * Age_group45_to_64 + -0.30625236358766 * Date2000 + -1.21137798020402 * Date2001 + -1.51645564020364 * Date2002 + 
0.86299496720353 * Date2003 + -0.93498774344571 * Date2004 + 0.6242111488688 * Date2005 + -2.36836348342809 * Date2006 + 1.12449399595682 * Date2007 + 1.85047727439571 * Date2008 + 1.70776212926759 * Date2009 + -1.41962995460536 * Date2010 + 
1.62083296703886 * Date2011 + 1.4873652063756 * Date2012 + -0.03519221005738 * Genderboth_sexes + -2.3955157311532 * Genderfemale ;
MPRINT(EM_DIAGRAM):   H13 = 7.06158999344795 * Age_group16_to_24 + 0.57048096601117 * Age_group25_to_44 + 2.63895819015121 * Age_group45_to_64 + -0.16828253491725 * Date2000 + -1.28332184684902 * Date2001 + 0.50133567355546 * Date2002 + -0.77559399613047 
* Date2003 + 0.78813284182853 * Date2004 + 0.41238962207276 * Date2005 + -0.5968396858171 * Date2006 + -0.66033245840418 * Date2007 + -1.37018067368506 * Date2008 + 0.08381409125405 * Date2009 + -0.75540384347548 * Date2010 + -0.02835506626351 * Date2011 
+ -0.49849084530149 * Date2012 + 1.13117701174471 * Genderboth_sexes + 1.64736127034363 * Genderfemale ;
MPRINT(EM_DIAGRAM):   H14 = 3.4630872113265 * Age_group16_to_24 + 4.47136694021352 * Age_group25_to_44 + 2.72605263191296 * Age_group45_to_64 + 0.74703333016594 * Date2000 + 0.56768441734246 * Date2001 + 1.1194903343746 * Date2002 + 0.35057468036228 * 
Date2003 + 0.81946953762189 * Date2004 + 0.72110714351831 * Date2005 + 0.88434900503026 * Date2006 + -0.06920733547316 * Date2007 + -0.15761719875234 * Date2008 + 0.58373614901827 * Date2009 + 0.52761282361936 * Date2010 + 0.59835393969457 * Date2011 + 
-0.03571345430143 * Date2012 + -1.59476884959088 * Genderboth_sexes + -1.01398015589094 * Genderfemale ;
MPRINT(EM_DIAGRAM):   H15 = -8.58338025897798 * Age_group16_to_24 + 1.73431130182411 * Age_group25_to_44 + -2.50959190344774 * Age_group45_to_64 + -2.01062257249017 * Date2000 + -1.65707328817157 * Date2001 + -0.45538932981411 * Date2002 + 
-1.16471188125424 * Date2003 + -3.28879121393757 * Date2004 + -0.47862384065246 * Date2005 + -1.01023576957189 * Date2006 + 1.29345923113314 * Date2007 + 3.00513118567611 * Date2008 + -0.0493540201805 * Date2009 + 0.59692696836937 * Date2010 + 
0.58089574713768 * Date2011 + 1.85854307287315 * Date2012 + -0.84076518654861 * Genderboth_sexes + 1.94410703586789 * Genderfemale ;
MPRINT(EM_DIAGRAM):   H11 = 2.48053561642249 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = 1.79073624896972 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = 2.85387370456884 + H13 ;
MPRINT(EM_DIAGRAM):   H14 = 3.49449374745814 + H14 ;
MPRINT(EM_DIAGRAM):   H15 = 1.94199856063024 + H15 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_Population_in_thousands = 1205.29793130634 * H11 + 1161.95461367712 * H12 + -3343.15103184733 * H13 + -2016.50607171174 * H14 + 5915.28044708513 * H15 ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = -295059.596508757 * H11 + 1200951.00495338 * H12 + -622386.835301285 * H13 + -467275.30556996 * H14 + 1356666.24875043 * H15 ;
MPRINT(EM_DIAGRAM):   P_Population_in_thousands = P_Population_in_thousands + 728.718562311591 * Age_group16_to_24 + 13881.1646508779 * Age_group25_to_44 + 11891.1993266939 * Age_group45_to_64 + -734.876069986509 * Date2000 + -1005.44966893069 * Date2001 
+ -196.729378741228 * Date2002 + -548.124329064577 * Date2003 + -706.153079137373 * Date2004 + -393.473056965343 * Date2005 + -450.137223833081 * Date2006 + -554.78332702273 * Date2007 + -258.442730517595 * Date2008 + -103.62092126527 * Date2009 + 
-200.510083639569 * Date2010 + 406.714770016742 * Date2011 + -474.646386339079 * Date2012 + 18344.9984154323 * Genderboth_sexes + 1012.85516998176 * Genderfemale ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = P_Sum_Labor_Force_Pop + 1381575.51824344 * Age_group16_to_24 + 5606191.01745719 * Age_group25_to_44 + 4011210.80381704 * Age_group45_to_64 + -25961.8994106242 * Date2000 + -119891.686127416 * Date2001 + 
59716.3277166119 * Date2002 + 104896.712470764 * Date2003 + -71742.1586759904 * Date2004 + 71167.8765069561 * Date2005 + -29647.3704495667 * Date2006 + 186857.778701065 * Date2007 + 121123.726203765 * Date2008 + 106127.807854169 * Date2009 + 
-10559.2515420828 * Date2010 + 129158.867206917 * Date2011 + 76664.9084844277 * Date2012 + 226995.438713328 * Genderboth_sexes + -3400.00464106612 * Genderfemale ;
MPRINT(EM_DIAGRAM):   P_Population_in_thousands = 38841.2806487802 + P_Population_in_thousands ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 6927309.52378857 + P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_Population_in_thousands = 38841.2806488095;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 6927309.52380952;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *****************************;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** ******************************;
MPRINT(EM_DIAGRAM):   IF MISSING( Population_in_thousands ) THEN R_Population_in_thousands = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Population_in_thousands = Population_in_thousands - P_Population_in_thousands ;
MPRINT(EM_DIAGRAM):   IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Sum_Labor_Force_Pop = Sum_Labor_Force_Pop - P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
41912      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
41913      quit;
41914      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
41915      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
41916      * Neural2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural2: Computing metadata for TRAIN data;
41917      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural2_TRAIN out=WORK.M09ZXGC3 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M09ZXGC3;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M09ZXGC3(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M09ZXGC3;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M09ZXGC3;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1_E41BS NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1_E41BS;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_E41BS;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0LDD8TF(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_E41BS;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1_E41BS;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_E41BS;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1_E41BS;
MPRINT(EMADVISECOLUMNS):   set WORK.M1_E41BS;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part4_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part4_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural2";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("P_SUM_LABOR_FORCE_POP") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("R_SUM_LABOR_FORCE_POP") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("POPULATION_IN_THOUSANDS") model = "Neural2";
MPRINT(EM_DIAGRAM):   when("SUM_LABOR_FORCE_POP") model = "Neural2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
42267      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
42268      set EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO;
42269      where DATA='Neural2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
42270      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE (DATA='Neural2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

42271      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMINFO;
42272      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
42273      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
42274      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL2_EMINFO has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
42281      run;
42282      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMINFO;
42283      set EMWS1.Neural2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO WORK.MODELTEMP_INFO;
42284      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

42285      proc sort data = EMWS1.Neural2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural2_EMINFO NOTHREADS;
42286      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
42287      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

42288      proc sort data = EMWS1.Ids4_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids4_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
42289      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
42290      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set EMWS1.IDS4_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

42291      proc sort data = EMWS1.Neural2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
42292      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
42293      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

42294      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMINFO;
42295      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
42296      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
42297      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 6 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 7 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

42298      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
42299      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
42300      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
42301      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      
NOTE: View EMWS1.NEURAL2_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
