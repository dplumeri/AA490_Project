MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 14, 
2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:24:05" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 14, 2019
Time:                16:24:05
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O34OB03L "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O34OB03L new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 14, 
2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:24:05" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 14, 
2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:24:05" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\EMRUNSTATUS.xml' encoding="UTF-8" 
NOBOM;
75616      proc freq data=EMWS1.Tree2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree2_VariableSet noprint;
75617      table ROLE*LEVEL/out=WORK.Tree2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Tree2META;
75618      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

75619      proc print data=WORK.Tree2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree2META label noobs;
75620      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
75621      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
75621    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
75621    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
75622      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
75623      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
75624      run;

NOTE: There were 3 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 35.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

75625      title10;
MPRINT(EM_DIAGRAM):   title10;
75626      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Part3_TRAIN EMWS1.Part3_TRAIN 
EMWS1.Part3_TRAIN EMWS1.Part3_TRAIN EMWS1 Part3_TRAIN 
EMWS1.Part3_TRAIN EMWS1.Part3_TRAIN 
EMWS1.Part3_TRAIN EMWS1.Part3_TRAIN EMWS1 Part3_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Part3_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class Age_group(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Age_group";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=Age_group));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Age_group";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids3_Age_group_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by Age_group;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by Age_group;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
75655      data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
75656      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
75657      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
75657    ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
75657    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
75658         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
75658    ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
75658    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
75659      set EMWS1.IDS3_AGE_GROUP_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS3_AGE_GROUP_DM( where=(_TYPE_="TARGET"));
75660      NumLevels=5;
MPRINT(EM_DIAGRAM):   NumLevels=5;
75661      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
75662      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
75663      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
75664      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
75665      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
75666      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
75667      end;
MPRINT(EM_DIAGRAM):   end;
75668      output;
MPRINT(EM_DIAGRAM):   output;
75669      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS3_AGE_GROUP_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

75670      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
75671      proc print data=WORK.Tree2_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree2_EVENT noobs label;
75672      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
75673      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
75674      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
75675      run;

NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 36.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

75676      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "Age_group"." 
75677      proc print data = EMWS1.Ids3_Age_group_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids3_Age_group_DM noobs label;
75678      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
75679      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
75680      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
75680    ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
75680    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
75681      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
75682      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
75683      run;

NOTE: There were 13 observations read from the data set EMWS1.IDS3_AGE_GROUP_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 37.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

75684      title10;
MPRINT(EM_DIAGRAM):   title10;
75685      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Age_group(type=PROFIT label= Age_group);
MPRINT(EM_DIAGRAM):   label DECISION1= "85+";
MPRINT(EM_DIAGRAM):   label DECISION2= "65-84";
MPRINT(EM_DIAGRAM):   label DECISION3= "25-44";
MPRINT(EM_DIAGRAM):   label DECISION4= "18-24";
MPRINT(EM_DIAGRAM):   label DECISION5= "0-17";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree2: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Age_group;
MPRINT(EM_DECDATA):   length Age_group $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 
DECISION1 8 DECISION2 8 DECISION3 8 DECISION4 8 DECISION5 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "85+" DECISION2= "65-84" 
DECISION3= "25-44" DECISION4= "18-24" DECISION5= "0-17" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   Age_group="85+";
MPRINT(EM_DECDATA):   COUNT=315;
MPRINT(EM_DECDATA):   DATAPRIOR=0.2;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.2;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   DECISION3=0;
MPRINT(EM_DECDATA):   DECISION4=0;
MPRINT(EM_DECDATA):   DECISION5=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Age_group="65-84";
MPRINT(EM_DECDATA):   COUNT=315;
MPRINT(EM_DECDATA):   DATAPRIOR=0.2;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.2;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   DECISION3=0;
MPRINT(EM_DECDATA):   DECISION4=0;
MPRINT(EM_DECDATA):   DECISION5=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Age_group="25-44";
MPRINT(EM_DECDATA):   COUNT=315;
MPRINT(EM_DECDATA):   DATAPRIOR=0.2;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.2;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   DECISION3=1;
MPRINT(EM_DECDATA):   DECISION4=0;
MPRINT(EM_DECDATA):   DECISION5=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Age_group="18-24";
MPRINT(EM_DECDATA):   COUNT=315;
MPRINT(EM_DECDATA):   DATAPRIOR=0.2;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.2;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   DECISION3=0;
MPRINT(EM_DECDATA):   DECISION4=1;
MPRINT(EM_DECDATA):   DECISION5=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Age_group="0-17";
MPRINT(EM_DECDATA):   COUNT=315;
MPRINT(EM_DECDATA):   DATAPRIOR=0.2;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.2;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   DECISION3=0;
MPRINT(EM_DECDATA):   DECISION4=0;
MPRINT(EM_DECDATA):   DECISION5=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Age_group(type=PROFIT label= Age_group);
MPRINT(EM_DECDATA):   label DECISION1= '85+';
MPRINT(EM_DECDATA):   label DECISION2= '65-84';
MPRINT(EM_DECDATA):   label DECISION3= '25-44';
MPRINT(EM_DECDATA):   label DECISION4= '18-24';
MPRINT(EM_DECDATA):   label DECISION5= '0-17';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Age_group(type=PROFIT label= Age_group);
MPRINT(EM_DIAGRAM):   label DECISION1= "85+";
MPRINT(EM_DIAGRAM):   label DECISION2= "65-84";
MPRINT(EM_DIAGRAM):   label DECISION3= "25-44";
MPRINT(EM_DIAGRAM):   label DECISION4= "18-24";
MPRINT(EM_DIAGRAM):   label DECISION5= "0-17";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids3_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Age_group";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids3_Age_group_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids3_Age_group_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Age_group";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids3_Age_group_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids3_Age_group_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
76226      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
76227      * Tree2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree2: Generation of macros and macro variables;
76228      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
76229      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

76230      %let EMEXCEPTIONSTRING=;
76231      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
76232      * TRAIN: Tree2;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree2;
76233      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
76234      %let EM_ACTION = TRAIN;
76235      %let syscc = 0;
76236      %macro main;
76237      
76238        %if %upcase(&EM_ACTION) = CREATE %then %do;
76239          filename temp catalog 'sashelp.emmodl.tree_create.source';
76240          %include temp;
76241          filename temp;
76242      
76243          %em_tree_create;
76244        %end;
76245      
76246         %else
76247         %if %upcase(&EM_ACTION) = TRAIN %then %do;
76248      
76249             filename temp catalog 'sashelp.emmodl.tree_train.source';
76250             %include temp;
76251             filename temp;
76252             %em_tree_train;
76253         %end;
76254      
76255        %else
76256        %if %upcase(&EM_ACTION) = SCORE %then %do;
76257          filename temp catalog 'sashelp.emmodl.tree_score.source';
76258          %include temp;
76259          filename temp;
76260      
76261          %em_tree_score;
76262      
76263        %end;
76264      
76265        %else
76266        %if %upcase(&EM_ACTION) = REPORT %then %do;
76267      
76268             filename temp catalog 'sashelp.emmodl.tree_report.source';
76269             %include temp;
76270             filename temp;
76271      
76272             %em_tree_report;
76273         %end;
76274      
76275        %else
76276        %if %upcase(&EM_ACTION) = OPENINT %then %do;
76277      
76278             filename temp catalog 'sashelp.emmodl.tree_actions.source';
76279             %include temp;
76280             filename temp;
76281             %EM_TREE_OPENTREEVIEWER;
76282      
76283         %end;
76284      
76285        %else
76286        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
76287      
76288             filename temp catalog 'sashelp.emmodl.tree_actions.source';
76289             %include temp;
76290             filename temp;
76291             %EM_TREE_CLOSETREEVIEWER;
76292      
76293         %end;
76294      
76295      
76296         %doendm:
76297      %mend main;
76298      
76299      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
76301     +%macro em_tree_train;
76303     +   %if &EM_IMPORT_DATA eq %then %do;
76304     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
76305     +       %put &em_codebar;
76306     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
76306    !+NOQUOTE));
76307     +       %put &errormsg;
76308     +       %put &em_codebar;
76309     +       %goto doendm;
76310     +   %end;
76311     +   %else
76312     +       %let EMEXCEPTIONSTRING =;
76314     +   %if  &EM_NUM_TARGET lt 1 %then %do;
76315     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
76316     +        %put &em_codebar;
76317     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
76317    !+NOQUOTE));
76318     +        %put &errormsg;
76319     +        %put &em_codebar;
76320     +        %goto doendm;
76321     +   %end;
76323     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
76323    !+(&EM_NUM_ORDINAL_INPUT < 1)
76324     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and
76324    !+(&EM_NUM_BINARY_REJECTED <1)
76325     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then
76325    !+%do;
76326     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
76327     +        %put &em_codebar;
76328     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
76328    !+;
76329     +        %put &errormsg;
76330     +        %put &em_codebar;
76331     +        %goto doendm;
76332     +   %end;
76334     +   /* Initialize property macro variables */
76335     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
76336     +   %include temp;
76337     +   filename temp;
76339     +   %EM_SetProperties;
76341     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
76342     +   %EM_GETNAME(key=EMTREE, type=DATA);
76343     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
76344     +     /* if import eq Y and no importtable defined, throw an exception */
76345     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
76346     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
76347     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR ,
76347    !+NOQUOTE));
76348     +         %put &em_codebar;
76349     +         %put &errmsg;
76350     +         %put &em_codebar;
76351     +         %goto doendm;
76352     +      %end;
76353     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
76354     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
76355     +         %put &em_codebar;
76356     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
76356    !+emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
76357     +         %put &errormsg;
76358     +         %put &em_codebar;
76359     +         %goto doendm;
76360     +      %end;
76361     +      %else %do;
76362     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
76363     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
76364     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
76365     +         %let varnumX = %sysfunc(varnum(&dsid,X));
76366     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
76367     +         %let dsid = %sysfunc(close(&dsid));
76368     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
76369     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET
76369    !+;
76370     +            %put &em_codebar;
76371     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
76371    !+emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
76372     +            %put &errormsg;
76373     +            %put &em_codebar;
76374     +            %goto doendm;
76375     +         %end;
76376     +      %end;
76377     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and
76377    !+(%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then
76377    !+%do;
76378     +         proc delete data=&EM_USER_EMTREE;
76379     +         run;
76380     +      %end;
76381     +   %end;
76382     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or
76382    !+%sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
76383     +      proc delete data=&EM_USER_EMTREE;
76384     +      run;
76385     +   %end;
76387     +   /* load tree macros */
76388     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
76389     +   %include temp;
76390     +   filename temp;
76392     +   /* data sets */
76393     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
76394     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
76395     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
76397     +   /* files */
76398     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
76400     +   /* check actual num of target levels */
76401     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
76402     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
76403     +                              nLevel=_nTargetLevel );
76404     +      %if &_nTargetLevel  > 2 %then %do;
76405     +        %let EMEXCEPTIONSTRING =
76405    !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
76406     +        %put &em_codebar;
76407     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
76407    !+NOQUOTE));
76408     +        %put &errormsg;
76409     +        %put &em_codebar;
76410     +        %goto doendm;
76411     +      %end;
76412     +   %end;
76414     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
76415     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
76416     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
76417     +        %let costflag=0;
76418     +        data _null_;
76419     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND
76419    !+^missing(COST) )) end=eof;
76420     +          if eof then call symput("costflag", _N_);
76421     +        run;
76422     +        %if &costflag gt 0 %then %do;
76423     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
76424     +          %put &em_codebar;
76425     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
76425    !+costnotvalidwithusedecisions_note_err, NOQUOTE));
76426     +          %put &errormsg;
76427     +          %put &em_codebar;
76428     +          %goto doendm;
76429     +       %end;
76430     +     %end;
76431     +   %end;
76433     +   /* determine if multiple targets will be processed */
76434     +   %let em_tree_multipleTargets=N;
76435     +   %let em_tree_numTarget = 1;
76436     +   %let em_tree_targetVars=;
76438     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
76439     +      /* determine if there are any ordinal target variables - if so, multiple
76439    !+targets are not supported */
76440     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
76441     +         %let em_tree_multipleTargets=N;
76442     +      %end;
76443     +      %else %do;
76444     +         /* create macro array of targets  */
76445     +         data _null_;
76446     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'))
76446    !+end=eof;
76447     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
76448     +           if eof then
76449     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
76450     +        run;
76452     +        %if &em_tree_numTarget gt 1 %then %do;
76453     +           %let em_tree_multipleTargets=Y;
76454     +        %end;
76455     +      %end;
76456     +   %end;
76458     +   /* create view of only necessary variable for performance reasons */
76459     +   %let tempData = &EM_LIB..em_&EM_NODEID;
76460     +   data &tempData / view=&tempData;
76461     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
76462     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
76463     +       %EM_TARGET
76464     +     %end;
76465     +     %else %do;
76466     +       %if &em_tree_numTarget ne 0 %then %do;
76467     +         %do i=1 %to &em_tree_numTarget;
76468     +            &&em_tree_targetVars&i
76469     +         %end;
76470     +       %end;
76471     +     %end;
76472     +     );
76473     +   run;
76475     +   /* run Tree procedure */
76476     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets)
76476    !+;
76478     +   /* Check return code and throw exception if error is detected */
76479     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
76480     +   %if &syserr %then %do;
76481     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
76482     +     %goto doendm;
76483     +   %end;
76485     +   /* add decision score code if multiple targets are processed */
76486     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
76487     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N)
76487    !+;
76488     +   %end;
76490     +   /* create outfit dataset if multiple score statements have been executed */
76491     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
76493     +   /* create English Rules */
76494     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
76495     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
76496     +       %em_tree_makeEnglishRules;
76498     +       /* English Rules */
76499     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL,
76499    !+description=ENGLISHRULES, autodisplay=N);
76501     +     %end;
76502     +   filename x;
76504     +   %doendm:
76505     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
76506     +%macro EM_SetProperties;
76508     +   /* train properties */
76509     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
76510     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
76511     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
76512     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
76513     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ,
76513    !+global=Y);
76514     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
76515     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
76516     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
76517     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
76518     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
76519     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
76520     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
76521     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
76522     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
76523     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
76524     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
76525     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH,
76525    !+global=Y);
76526     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
76527     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT,
76527    !+global=Y);
76528     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
76529     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS,
76529    !+global=Y);
76530     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
76531     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
76532     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
76533     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
76534     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
76535     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
76536     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
76537     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
76538     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
76539     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
76540     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
76541     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
76542     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
76543     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
76544     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
76545     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
76546     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
76547     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
76548     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
76549     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
76551     +   /* properties for interactive sample */
76552     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
76553     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
76554     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
76555     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
76557     +   /* report properties */
76558     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
76559     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
76560     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN,
76560    !+global=Y);
76561     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
76562     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
76563     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
76564     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
76565     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
76566     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
76567     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
76568     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
76569     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
76570     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
76572     +   /* score properties */
76573     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
76574     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
76576     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS1.Tree2_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;

NOTE: Deleting EMWS1.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
76578     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
76579     +  %global &nLevel;
76580     +  proc dmdb batch data=&indata
76581     +    classout=_tmp_dmdbout;
76582     +    class &target;
76583     +  run;
76584     +  data _tmp_dmdbout;
76585     +    set _tmp_dmdbout;
76586     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
76587     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
76588     +  run;
76589     +  data _null_;
76590     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
76591     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
76592     +    %let dsid = %sysfunc(close(&dsid));
76593     +     call symput("&nLevel", put(&_obs, Best12.));
76594     +  run;
76596     +  proc datasets lib=work nolist;
76597     +     delete _tmp_dmdbout;
76598     +  run;
76599     +  quit;
76600     +%Mend EM_CheckBinaryTargetLevel;
76603     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
76605     +  /* determine the number of obs in training data */
76606     +  proc sql;
76607     +    reset noprint;
76608     +    select count(*) into :em_nobs from &indata;
76609     +  quit;
76611     +  /* determine the number of input variables */
76612     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +
76612    !+&EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
76613     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED +
76613    !+&EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
76615     +  /* retrieve targetEvent from decmeta */
76616     +  %let targetEvent=;
76617     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
76618     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
76619     +      data _null_;
76620     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
76621     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
76622     +      run;
76623     +    %end;
76624     +  %end;
76626     +  /* create targetTable if multipleTar eq Y */
76627     +  data temptarget;
76628     +    set &EM_DATA_VARIABLESET;
76629     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
76630     +  run;
76632     + /* data sets */
76633     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
76634     + %EM_GETNAME(key=EMTREE,        type=DATA);
76635     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
76636     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
76637     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
76638     + %EM_GETNAME(key=OUTNODES,      type=DATA);
76639     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
76640     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
76641     + %EM_GETNAME(key=OUTPATH,       type=DATA);
76642     + %EM_GETNAME(key=OUTRULES,      type=DATA);
76644     + /* files */
76645     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
76646     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
76648     + /* turn on pmml if requested */
76649     + %let nnpmml=0;
76650     + %if %symexist(EM_PMML) %then %do;
76651     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
76652     +       %let nnpmml=1;
76654     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
76655     +   %end;
76656     +%end;
76658     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET +
76658    !+&EM_NUM_ORDINAL_TARGET);
76660     +%if &nnpmml or &numClassTarget %then %do;
76662     +    /* create dmdb needed for pmml generation */
76663     +    %let tree_maxlevel = 512;
76664     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
76665     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
76666     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
76667     +      %end;
76668     +    %end;
76669     +    %if &tree_maxlevel gt 0 %then %do;
76670     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
76671     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
76672     +    %end;
76674     +    %let targetOrderString =;
76675     +    %let targetString = ;
76676     +    data _null_;
76677     +       length orderString nameString $10000;
76678     +       retain orderString nameString;
76679     +       set &em_data_variableset end=eof;
76680     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then
76680    !+ %do;
76681     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
76682     +       %end;
76683     +       %else %do;
76684     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE
76684    !+='Y';
76685     +       %end;          select(order);
76686     +         when('')        order ='DESC';
76687     +         when('FMTASC')  order='ASCFMT';
76688     +         when('FMTDESC') order='DESFMT';
76689     +         otherwise;
76690     +       end;
76691     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
76692     +       nameString = trim(nameString)!!' '!!trim(NAME);
76694     +       if eof then do;
76695     +          call symput('targetOrderString', trim(orderString));
76696     +          call symput('targetString', trim(nameString));
76697     +       end;
76698     +    run;
76700     +    %let arborkluge= "work._treeDMDB";
76702     +    proc dmdb batch data=&indata
76703     +    %if &nnpmml %then %do;
76704     +        PMML
76705     +    %end;
76706     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
76708     +      %if &nnpmml %then %do;
76709     +           %if "%EM_ID" ne "" %then %do;
76710     +             id %EM_ID;
76711     +           %end;
76712     +           %if &EM_NUM_CLASS gt 0 %then %do;
76713     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
76714     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
76715     +                  &targetOrderString;
76716     +           %end;
76717     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
76718     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
76719     +           %end;
76720     +           target &targetString %EM_INTERVAL_TARGET;
76721     +           %if "%EM_FREQ" ne "" %then %do;
76722     +             freq %EM_FREQ;
76723     +           %end;
76724     +      %end;
76725     +      %else %do;
76726     +         class  &targetOrderString;
76727     +         target &targetString %EM_INTERVAL_TARGET;
76728     +      %end;
76729     +    run;
76730     +    quit;
76732     +    proc datasets lib=work nolist;
76733     +       delete classout varout;
76734     +    run;
76735     +    quit;
76737     + %end;
76740     + /* run Arbor procedure */
76741     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
76742     +  proc arbor data=&INDATA
76744     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
76745     +    Leafsize = &EM_PROPERTY_LEAFSIZE
76746     +  %end;
76748     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs))
76748    !+%then %do;
76749     +    Splitsize = &EM_PROPERTY_SPLITSIZE
76750     +  %end;
76752     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
76753     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
76754     +  %end;
76756     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
76757     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
76758     +  %end;
76760     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
76761     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
76762     +  %end;
76764     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then
76764    !+%do;
76765     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
76766     +  %end;
76767     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
76768     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
76769     +  %end;
76770     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
76771     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
76772     +  %end;
76774     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
76775     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
76776     +      alpha = &EM_PROPERTY_SIGLEVEL
76777     +    %end;
76778     +  %end;
76780     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or
76780    !+("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
76781     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion"
76781    !+ eq "DEFAULT")) %then %do;
76782     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
76783     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
76784     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
76786     +        padjust =
76787     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
76788     +          &chaid
76789     +        %end;
76790     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
76791     +          DEPTH
76792     +        %end;
76793     +      %end;
76794     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
76795     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
76796     +         pvars = &num_inputs
76797     +      %end;
76798     +    %end;
76799     +  %end;
76800     +  %else %do;
76801     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR
76801    !+("&Criterion" eq "DEFAULT")) %then %do;
76802     +         padjust = NONE
76803     +      %end;
76804     +  %end;
76806     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
76807     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
76808     +    Maxrules = &num_nrules
76809     +  %end;
76811     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
76812     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
76813     +    Maxsurrs = &num_nsurrs
76814     +  %end;
76816     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
76817     +     Missing=&EM_PROPERTY_MISSINGVALUE
76818     +  %end;
76820     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
76821     +     USEVARONCE
76822     +  %end;
76824     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
76825     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
76826     +  %end;
76829     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
76830     +    event = "&targetEvent"
76831     +  %end;
76833     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
76834     +     DECSEARCH
76835     +  %end;
76837     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
76838     +     PRIORSSEARCH
76839     +  %end;
76841     +  %if &arbor_1 ne %then %do;
76842     +    &arbor_1
76843     +  %end;
76845     +  %if &em_arbor ne %then %do;
76846     +     &em_arbor
76847     +  %end;
76848     +  ;
76849     + %end;
76850     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
76851     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
76852     +       Performance &EM_PROPERTY_PERFORMANCE
76853     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
76854     +         nodesize=&EM_PROPERTY_NODESAMPLE
76855     +       %end;
76856     +       ;
76857     +       interact;
76858     + %end;
76859     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
76860     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
76861     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
76862     +    %put &em_codebar;
76863     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
76863    !+NOQUOTE));
76864     +    %put &errormsg;
76865     +    %put &em_codebar;
76866     +    %goto doendm;
76867     +   %end;
76868     +   %else %do;
76869     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
76870     +       Performance &EM_PROPERTY_PERFORMANCE
76871     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
76872     +         nodesize=&EM_PROPERTY_NODESAMPLE
76873     +       %end;
76874     +       ;
76875     +       interact;
76876     +   %end;
76877     + %end;
76879     + %else %do;
76880     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
76881     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
76882     +    %put &em_codebar;
76883     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
76883    !+NOQUOTE));
76884     +    %put &errormsg;
76885     +    %put &em_codebar;
76886     +    %goto doendm;
76887     +   %end;
76888     +   %else %do;
76889     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
76890     +       Performance &EM_PROPERTY_PERFORMANCE
76891     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
76892     +         nodesize=&EM_PROPERTY_NODESAMPLE
76893     +       %end;
76894     +       ;
76895     +        interact;
76896     +   %end;
76897     + %end;
76899     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
76900     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
76901     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
76902     +    %end;
76904     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
76905     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
76906     +    %end;
76908     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
76909     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
76910     +    %end;
76912     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
76913     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
76914     +    %end;
76916     +    %if "%EM_FREQ" ne "" %then %do;
76917     +       freq %EM_FREQ;
76918     +    %end;
76920     +    %if "&multipleTar" eq "Y" %then %do;
76921     +       /* cycle through all target vars in variableset */
76922     +       %let tdsid = %sysfunc(open(temptarget));
76923     +       %if &tdsid %then %do;
76924     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
76925     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
76926     +          %do %while(^ %sysfunc(fetch(&tdsid)));
76927     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
76928     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
76929     +             target &var / level = &lvl
76930     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
76931     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
76932     +             %end;
76933     +             %else %if "&lvl" eq "INTERVAL" %then %do;
76934     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
76935     +             %end;
76936     +             %else %if "&lvl" eq "ORDINAL" %then %do;
76937     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
76938     +             %end;
76939     +          %end;
76940     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
76941     +       %end;
76942     +       useTarget variable = %EM_TARGET;
76943     +    %end;
76944     +    %else %do;
76945     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
76946     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL"))
76946    !+%then %do;
76947     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
76948     +      %end;
76949     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
76950     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
76951     +      %end;
76952     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
76953     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
76954     +      %end;
76955     +    %end;
76957     +    %if "&multipleTar" eq "N" %then %do;
76958     +      &EM_DEC_STATEMENT;
76959     +    %end;
76961     +    Performance &EM_PROPERTY_PERFORMANCE
76962     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
76963     +      nodesize=&EM_PROPERTY_NODESAMPLE
76964     +    %end;
76965     +    ;
76967     +    %if "&intFlag" eq "Y" %then %do;
76968     +       INTERACT Largest;
76969     +       Train maxnewdepth=0;
76970     +    %end;
76972     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
76973     +         Assess
76974     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND
76974    !+(%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW))
76974    !+)) %then %do;
76975     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
76976     +              %put &em_codebar;
76977     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
76977    !+novalidationwithcv_note, NOQUOTE));
76978     +              %put &errormsg;
76979     +              %put &em_codebar;
76980     +            %end;
76981     +            %else %do;
76982     +               Validata=&EM_IMPORT_VALIDATE
76983     +            %end;
76984     +         %end;
76985     +         %else %do;
76986     +           NoValidata
76987     +         %end;
76988     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
76989     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
76990     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
76991     +               %if &dsid %then %do;
76992     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
76993     +                 %do %while(^ %sysfunc(fetch(&dsid)));
76994     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
76995     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
76996     +                   %else %do;
76997     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
76998     +                      %else %let measure= MISC;
76999     +                   %end;
77000     +                 %end;
77001     +               %end;
77002     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
77003     +            %end;
77004     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
77005     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
77006     +                 %let measure=ASE;
77007     +              %end;
77008     +              %else %do;
77009     +                 %let measure=MISC;
77010     +              %end;
77011     +            %end;
77012     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
77013     +              %let measure=ASE;
77014     +            %end;
77015     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
77016     +               %let measure = LIFT;
77017     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
77018     +               %if &dsid %then %do;
77019     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
77020     +                 %do %while(^ %sysfunc(fetch(&dsid)));
77021     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
77022     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
77023     +                 %end;
77024     +               %end;
77025     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
77026     +            %end;
77027     +            measure=&measure
77028     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL"))
77028    !+%then %do;
77029     +               event = "&targetEvent"
77030     +            %end;
77031     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
77032     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
77033     +            %end;
77034     +         %end;
77035     +         %if "&multipleTar" eq "N" %then %do;
77036     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
77037     +               CV
77038     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
77039     +                 CVNITer = &EM_PROPERTY_CVNITER
77040     +               %end;
77041     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
77042     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
77043     +               %end;
77044     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
77045     +                 CVSeed = &EM_PROPERTY_CVSEED
77046     +               %end;
77047     +            %end;
77048     +         %end;
77049     +       %end;
77050     +      ;
77052     +      %if "&intFlag" ne "Y" %then %do;
77053     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
77054     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
77055     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
77056     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
77058     +          SUBTREE &subtree
77059     +          %if "&subtree" eq "NLEAVES" %then %do;
77060     +            =&EM_PROPERTY_NSUBTREE
77061     +          %end;
77062     +          ;
77063     +        %end;
77065     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then
77065    !+ %do;
77066     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
77067     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP
77067    !+nvars=&EM_PROPERTY_NUMSINGLEIMP;
77068     +          %end;
77069     +       %end;
77070     +      %end;
77071     + %end;
77074     + MakeMacro nleaves = nleaves;
77075     + save
77076     + %if "&EM_USER_EMTREE" ne "" %then %do;
77077     +   MODEL=&EM_USER_EMTREE
77078     + %end;
77079     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
77080     +   SEQUENCE=&EM_USER_OUTSEQ
77081     + %end;
77082     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
77083     +   IMPORTANCE=&EM_USER_OUTIMPORT
77084     + %end;
77085     + %if "&EM_USER_OUTNODES" ne "" %then %do;
77086     +   NODESTAT=&EM_USER_OUTNODES
77087     + %end;
77088     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
77089     +   SUMMARY=&EM_USER_OUTSUMMARY
77090     + %end;
77091     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
77092     +   STATSBYNODE=&EM_USER_OUTSTATS
77093     + %end;
77094     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
77095     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
77096     + %end;
77097     + %if "&EM_USER_OUTPATH" ne "" %then %do;
77098     +   Pathlistnonmissing=&EM_USER_OUTPATH
77099     + %end;
77100     + %if "&EM_USER_OUTRULES" ne "" %then %do;
77101     +   RULES = &EM_USER_OUTRULES
77102     + %end;
77103     + ;
77105     + %if "&intFlag" ne "Y" %then %do;
77107     +   %let lookupString = ;
77108     +   %if ^%symexist(EM_OPTION) %then
77109     +      %let EM_OPTION=;
77111     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or
77111    !+%sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
77112     +      %let lookupString = LOOKUP=SELECT;
77113     +   %end;
77115     +   %let codetext=;
77116     +   %let norescodetxt=;
77118     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
77119     +     %let codetext=&codetext DUMMY;
77120     +     %let norescodetxt=&norescodetxt DUMMY;
77121     +   %end;
77122     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
77123     +     %let codetext=&codetext NOLEAFID;
77124     +     %let norescodetxt=&norescodetxt NOLEAFID;
77125     +   %end;
77126     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
77127     +     %let norescodetxt=&norescodetxt NOPRED;
77128     +   %end;
77130     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
77131     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid
77131    !+&lookupString;
77133     +   %if &nnpmml %then %do;
77134     +     code pmml;
77135     +   %end;
77137     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
77138     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
77139     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
77140     +   %end;
77141     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
77142     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
77143     +   %end;
77144     + %end;
77146     + run;
77147     + quit;
77149     + /*%em_checkerror(); */
77150     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
77151     +   /* Delete DMDB catalog */
77152     +   proc datasets lib=work nolist;
77153     +       delete _treeDMDB / mt=cat;
77154     +  run;
77155     +  %end;
77157     + %if &nnpmml %then %do;
77158     +    ods pmml close;
77159     + %end;
77161     +  %doendm:
77163     +%mend em_tree_runTreeProcedure;
77165     +%macro em_tree_createFitStats( multipleTar= );
77168     +  /* create targetTable is multipleTar eq Y */
77169     +  data temptarget;
77170     +    set &EM_DATA_VARIABLESET;
77171     +    where ROLE="TARGET";
77172     +  run;
77174     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
77175     +   data &EM_USER_EMOUTFIT;
77176     +     length target $32;
77177     +     merge work.fit_train
77178     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
77179     +       work.fit_valid
77180     +     %end;
77181     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
77182     +       work.fit_test
77183     +     %end;
77184     +     ;
77185     +     %if "&multipleTar" eq "N" %then %do;
77186     +       target="%EM_TARGET";
77187     +     %end;
77188     +     %else %do;
77189     +       target = _TARGET_;
77190     +     %end;
77191     +     drop _NW_ _SUMW_
77192     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
77193     +        _VSUMW_
77194     +     %end;
77195     +     ;
77196     +   run;
77198     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
77199     +     proc datasets library=work nolist;
77200     +       delete fit_valid;
77201     +     run;
77202     +   %end;
77203     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
77204     +     proc datasets library=work nolist;
77205     +       delete fit_test;
77206     +     run;
77207     +   %end;
77209     +%mend em_tree_createFitStats;
77212     +%macro em_tree_makeEnglishRules;
77214     +  %EM_GETNAME(key=OUTNODES, type=DATA);
77215     +  %EM_GETNAME(key=OUTPATH, type=DATA);
77217     +  /* verify that necessary tables exist and if not, skip processing */
77218     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
77219     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
77220     +    %goto doendm;
77221     +  %end;
77222     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
77223     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
77224     +    %goto doendm;
77225     +  %end;
77227     +  /* determine length of variable in outpath dataset */
77228     +  %let vlength= ;
77229     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
77230     +  %if &dsid ne %then %do;
77231     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
77232     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
77233     +  %end;
77234     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
77236     +  data tempoutpath;
77237     +    length varname $&vlength;
77238     +    retain varname;
77239     +    set &EM_USER_OUTPATH;
77241     +    if ^missing(variable) then varname=variable;
77242     +    else if ^missing(var_name) then varname=var_name;
77243     +    output;
77244     +  run;
77246     +  /* create an array of generated predicted variable names */
77247     +  %let tree_pred_vars = ;
77248     +  %let tree_pred_label = ;
77249     +  %let numpred= 0;
77250     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
77252     +    data _null_;
77253     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
77254     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
77255     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)),
77255    !+strip(tranwrd(LABEL,'"','""')));
77256     +     if eof then
77257     +       call symput('numpred', strip(put(_N_, BEST.)));
77258     +    run;
77259     +  %end;
77261     +  /* determine if NPRIORS exists in outnodes  */
77262     +  %local nprior_flag;
77263     +  data _null_;
77264     +    set &EM_USER_OUTNODES(obs=2) end=eof;
77265     +    if eof then do;
77266     +      call symput('nprior_flag', strip(put(npriors, best.)));
77267     +    end;
77268     +  run;
77270     +  proc sort data=tempoutpath; by node; run;
77271     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
77273     +  data tempoutpath;
77274     +    merge tempoutpath(in=_a) outnodes(keep= node
77275     +    %if "&nprior_flag" ne "." %then %do;
77276     +      NPRIORS
77277     +    %end;
77278     +    %else %do;
77279     +      N
77280     +    %end;
77281     +    %if &numpred gt 0 %then %do;
77282     +      %do i=1 %to &numpred;
77283     +        &&tree_pred_vars&i
77284     +      %end;
77285     +    %end;
77286     +    );
77287     +    by node;
77288     +    if _a;
77289     +  run;
77291     +  proc sort data=tempoutpath; by node descending varname descending numeric_value;
77291    !+run;
77293     +  data _null_;
77294     +    file x;
77295     +    set tempoutpath;
77296     +    by node descending varname;
77297     +    retain origvar oldnode string;
77298     +    length origvar $32 oldnode 8 string $200;
77300     +    if _N_ = 1 then do;
77301     +      origvar = varname;
77302     +      oldnode = node;
77303     +    end;
77305     +    if first.node then do;
77306     +       put "&EM_CODEBAR";
77307     +       put " Node = " node;
77308     +       put "&EM_CODEBAR";
77309     +    end;
77311     +      if first.varname then do;
77312     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
77313     +            if MISSING(CHARACTER_VALUE) then do;
77314     +             if NUMERIC_VALUE ne .  then do;
77315     +              if ^first.node then do;
77316     +                string= "AND "|| strip(varname)||" "||strip(relation)||"
77316    !+"||strip(numeric_value);
77317     +              end;
77318     +              else do;
77319     +                string= "if "|| strip(varname)||" "||strip(relation)||"
77319    !+"||strip(numeric_value);
77320     +              end;
77321     +             end;
77322     +            end;
77323     +            else do;
77324     +              if ^first.node then do;
77325     +                string= "AND "|| strip(varname)||" "||strip(relation)||"
77325    !+"||strip(character_value);
77326     +              end;
77327     +              else do;
77328     +                string= "if "|| strip(varname)||" "||strip(relation)||"
77328    !+"||strip(character_value);
77329     +              end;
77330     +             end;
77331     +         end;
77332     +         else if RELATION in ("=") then do;
77333     +            if ^first.node then do;
77334     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
77335     +            end;
77336     +            else do;
77337     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
77338     +            end;
77339     +         end;
77340     +         else if RELATION in ("ISMISSING") then do;
77341     +            if ^first.node then do;
77342     +              string = " AND "|| strip(varname) || " equals Missing";
77343     +            end;
77344     +            else do;
77345     +              string = "if "|| strip(varname) ||" equals Missing";
77346     +            end;
77347     +         end;
77348     +         else if RELATION in ("ISNOTMISSING") then do;
77349     +            if ^first.node then do;
77350     +              string = " AND "|| strip(varname) || " equals All Values";
77351     +            end;
77352     +            else do;
77353     +              string = "if "|| strip(varname) ||" equals All Values";
77354     +            end;
77355     +         end;
77356     +         if ^missing(varname) then origvar = varname;
77357     +         oldnode=node;
77359     +      end;
77360     +      else do;
77361     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
77362     +          if MISSING(CHARACTER_VALUE) then do;
77363     +           if  NUMERIC_VALUE ne .  then do;
77364     +            if ^MISSING(string) then
77365     +              string= strip(string)||" AND "|| strip(varname)||"
77365    !+"||strip(relation)||" "||strip(numeric_value);
77366     +            else
77367     +              string= " if "|| strip(varname)||" "||strip(relation)||"
77367    !+"||strip(numeric_value);
77368     +           end;
77369     +          end;
77370     +          else do;
77371     +            if ^MISSING(string) then
77372     +              string= strip(string)||" AND "|| strip(varname)||"
77372    !+"||strip(relation)||" "||strip(character_value);
77373     +            else
77374     +              string= " if "|| strip(varname)||" "||strip(relation)||"
77374    !+"||strip(character_value);
77375     +          end;
77377     +         end;
77378     +         else if RELATION in ("=") then do;
77379     +           string = strip(string)||", "||strip(character_value);
77380     +         end;
77381     +         else if RELATION in ("ISMISSING") then do;
77383     +         end;
77384     +         if ^missing(varname) then origvar = varname;
77385     +         oldnode=node;
77386     +      end;
77387     +      if last.varname then do;
77388     +         if RELATION in ("ISMISSING") then do;
77389     +           if ^first.varname then do;
77390     +             string = strip(string) || " or MISSING";
77391     +           end;
77392     +         end;
77393     +         put string;
77394     +         if ^missing(varname) then origvar = varname;
77395     +         oldnode=node;
77396     +      end;
77398     +      if last.node then do;
77399     +         put "then ";
77400     +         put " Tree Node Identifier   = " node;
77402     +         %if "&nprior_flag" ne "." %then %do;
77403     +           put " Number of Observations = " NPRIORS;
77404     +         %end;
77405     +         %else %do;
77406     +           put " Number of Observations = " N;
77407     +         %end;
77409     +         %if &numpred gt 0 %then %do;
77410     +           %do i=1 %to &numpred;
77411     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
77412     +           %end;
77413     +         %end;
77415     +         put " ";
77416     +         if ^missing(varname) then origvar = varname;
77417     +         oldnode=node;
77418     +      end;
77420     +  run;
77422     +  proc datasets lib=work nolist;
77423     +    delete tempoutpath outnodes;
77424     +  run;
77426     +  %doendm:
77427     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 
property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree2 / view=EMWS1.em_Tree2;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Part3_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =OG_Cases_in_Thousands Projected_Sum_Pop Age_group Age_group );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS1.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree2;
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: There were 943 observations read from the data set EMWS1.PART3_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Ids3_Age_group_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS3_AGE_GROUP_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree2_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   length orderString nameString $10000;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   retain orderString nameString;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree2_VariableSet end=eof;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", 
"ORDINAL") and USE ='Y';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select(order);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('') order ='DESC';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTASC') order='ASCFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTDESC') order='DESFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   otherwise;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   orderString = trim(orderString)!!' 
'!!trim(NAME)!!'('!!trim(order)!!')';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   nameString = trim(nameString)!!' '!!trim(NAME);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   if eof then do;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetOrderString', trim(orderString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetString', trim(nameString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc dmdb batch data=EMWS1.em_Tree2 dmdbcat=_treeDMDB 
classout=classout varout=varout maxlevel=513;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   class Age_group(DESC);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target Age_group
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Records processed = 943   Memory used = 511K.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 943 observations read from the data set EMWS1.PART3_TRAIN.
NOTE: There were 943 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 5 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete classout varout;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree2 Leafsize = 50 MinCatSize = 
5 MaxBranch = 2 MaxDepth = 6
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 2 
Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   event = "85+" ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   OG_Cases_in_Thousands Projected_Sum_Pop
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   Age_group
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   NOMINAL
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBCHISQ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.Part3_VALIDATE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   measure=MISC
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1573506 kilobytes of physical memory.
NOTE: Will use 943 out of 943 training cases.
NOTE: Using memory pool with 33631232 bytes.
NOTE: Passed training data 6 times.
NOTE: Training used 87960 bytes of work memory.
NOTE: The subtree sequence contains 5 subtrees. The largest has 9 nodes and 5 leaves.
NOTE: Using subtree with 9 nodes and 5 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 9 nodes and 5 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 5.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree2_EMTREE SEQUENCE=EMWS1.Tree2_OUTSEQ 
IMPORTANCE=EMWS1.Tree2_OUTIMPORT NODESTAT=EMWS1.Tree2_OUTNODES SUMMARY=EMWS1.Tree2_OUTSUMMARY 
STATSBYNODE=EMWS1.Tree2_OUTSTATS TOPOLOGY=EMWS1.Tree2_OUTTOPOLOGY 
Pathlistnonmissing=EMWS1.Tree2_OUTPATH RULES = EMWS1.Tree2_OUTRULES ;
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 2 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_EMTREE has 342 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTNODES has 9 observations and 33 variables.
NOTE: The data set EMWS1.TREE2_OUTPATH has 12 observations and 7 variables.
NOTE: The data set EMWS1.TREE2_OUTRULES has 44 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 5 observations and 20 variables.
NOTE: The data set EMWS1.TREE2_OUTSTATS has 117 observations and 5 variables.
NOTE: The data set EMWS1.TREE2_OUTSUMMARY has 48 observations and 9 variables.
NOTE: The data set EMWS1.TREE2_OUTTOPOLOGY has 9 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\TREEFLOW.sas" res group=Tree2 ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base 
      Model\Workspaces\EMWS1\Tree2\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas" nores group=Tree2 ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base 
      Model\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree2 out=_NULL_ outfit=work.fit_train 
role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: There were 943 observations read from the data set EMWS1.PART3_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part3_VALIDATE out=_NULL_ 
outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.18 seconds
      
NOTE: There were 943 observations read from the data set EMWS1.PART3_TRAIN.
NOTE: There were 943 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 5 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.21 seconds
      cpu time            0.20 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete _treeDMDB / mt=cat;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree2_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree2_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "Age_group";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt" encoding='utf-8' 
NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $21;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree2_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 12 observations read from the data set EMWS1.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Ids3_Age_group_DM(where=(_TYPE_="PREDICTED")) 
end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), 
strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), 
strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 5 observations read from the data set EMWS1.IDS3_AGE_GROUP_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree2_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree2_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 9 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 9 observations and 33 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node NPRIORS 
P_Age_group85_ P_Age_group65_84 P_Age_group25_44 P_Age_group18_24 P_Age_group0_17 );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 9 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put 
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put 
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" 
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" 
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" 
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" 
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: 
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: 
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| 
strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" 
"||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| 
strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" 
"||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " NPRIORS;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Age_group=85+ = " P_Age_group85_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Age_group=65-84 = " P_Age_group65_84;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Age_group=25-44 = " P_Age_group25_44;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Age_group=18-24 = " P_Age_group18_24;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Age_group=0-17 = " P_Age_group0_17;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: 
      (Line):(Column).
      236:176   246:190   392:191   399:195   
NOTE: The file X is:
      
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base 
      Model\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=14Nov2019:16:24:07,
      Create Time=14Nov2019:15:52:36

NOTE: 65 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 74.
NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56574775630875;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77429      
77430      *------------------------------------------------------------*;
77431      * End TRAIN: Tree2;
77432      *------------------------------------------------------------*;

77433      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
77434      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
77435      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77436      ;
MPRINT(EM_DIAGRAM):   ;
77437      ;
MPRINT(EM_DIAGRAM):   ;
77438      ;
MPRINT(EM_DIAGRAM):   ;
77439      ;
MPRINT(EM_DIAGRAM):   ;
77440      quit;
MPRINT(EM_DIAGRAM):   quit;
77441      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77442      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
77443      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
77444      /*; *"; *'; */
77445      ;
MPRINT(EM_DIAGRAM):   ;
77446      run;
MPRINT(EM_DIAGRAM):   run;
77447      quit;
MPRINT(EM_DIAGRAM):   quit;
77448      /* Reset EM Options */
77449      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
77450      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
77451      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
77452      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
77453      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
77454      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
