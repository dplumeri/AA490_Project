MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 14, 
2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:23:54" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 14, 2019
Time:                16:23:54
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0JPIARL "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0JPIARL new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 14, 
2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:23:54" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 14, 
2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:23:54" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMRUNSTATUS.xml' encoding="UTF-8" 
NOBOM;
57250      proc freq data=EMWS1.Boost_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Boost_VariableSet noprint;
57251      table ROLE*LEVEL/out=WORK.BoostMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.BoostMETA;
57252      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.BOOST_VARIABLESET.
NOTE: The data set WORK.BOOSTMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

57253      proc print data=WORK.BoostMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.BoostMETA label noobs;
57254      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
57255      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
57255    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
57255    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
57256      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
57257      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
57258      run;

NOTE: There were 3 observations read from the data set WORK.BOOSTMETA.
NOTE: The PROCEDURE PRINT printed page 26.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

57259      title10;
MPRINT(EM_DIAGRAM):   title10;
57260      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Part3_TRAIN EMWS1.Part3_TRAIN 
EMWS1.Part3_TRAIN EMWS1.Part3_TRAIN EMWS1 Part3_TRAIN 
EMWS1.Part3_TRAIN EMWS1.Part3_TRAIN 
EMWS1.Part3_TRAIN EMWS1.Part3_TRAIN EMWS1 Part3_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Part3_TRAIN 
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class Age_group(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Age_group";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY 
NMISSPERCENT rename=(LEVEL=Age_group));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Age_group";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids3_Age_group_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by Age_group;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by Age_group;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
57289      data WORK.Boost_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Boost_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
57290      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
57291      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
57291    ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
57291    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
57292         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
57292    ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
57292    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" 
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
57293      set EMWS1.IDS3_AGE_GROUP_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS3_AGE_GROUP_DM( where=(_TYPE_="TARGET"));
57294      NumLevels=5;
MPRINT(EM_DIAGRAM):   NumLevels=5;
57295      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
57296      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
57297      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
57298      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
57299      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
57300      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
57301      end;
MPRINT(EM_DIAGRAM):   end;
57302      output;
MPRINT(EM_DIAGRAM):   output;
57303      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS3_AGE_GROUP_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.BOOST_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

57304      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
57305      proc print data=WORK.Boost_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Boost_EVENT noobs label;
57306      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
57307      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
57308      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
57309      run;

NOTE: There were 1 observations read from the data set WORK.BOOST_EVENT.
NOTE: The PROCEDURE PRINT printed page 27.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

57310      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "Age_group"." 
57311      proc print data = EMWS1.Ids3_Age_group_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids3_Age_group_DM noobs label;
57312      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
57313      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 
'DECPRIOR');
57314      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
57314    ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
57314    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
57315      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
57316      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
57317      run;

NOTE: There were 13 observations read from the data set EMWS1.IDS3_AGE_GROUP_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 28.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

57318      title10;
MPRINT(EM_DIAGRAM):   title10;
57319      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Age_group(type=PROFIT label= Age_group);
MPRINT(EM_DIAGRAM):   label DECISION1= "85+";
MPRINT(EM_DIAGRAM):   label DECISION2= "65-84";
MPRINT(EM_DIAGRAM):   label DECISION3= "25-44";
MPRINT(EM_DIAGRAM):   label DECISION4= "18-24";
MPRINT(EM_DIAGRAM):   label DECISION5= "0-17";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Boost: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Age_group;
MPRINT(EM_DECDATA):   length Age_group $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 
DECISION1 8 DECISION2 8 DECISION3 8 DECISION4 8 DECISION5 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= 
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "85+" DECISION2= "65-84" 
DECISION3= "25-44" DECISION4= "18-24" DECISION5= "0-17" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   Age_group="85+";
MPRINT(EM_DECDATA):   COUNT=315;
MPRINT(EM_DECDATA):   DATAPRIOR=0.2;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.2;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   DECISION3=0;
MPRINT(EM_DECDATA):   DECISION4=0;
MPRINT(EM_DECDATA):   DECISION5=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Age_group="65-84";
MPRINT(EM_DECDATA):   COUNT=315;
MPRINT(EM_DECDATA):   DATAPRIOR=0.2;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.2;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   DECISION3=0;
MPRINT(EM_DECDATA):   DECISION4=0;
MPRINT(EM_DECDATA):   DECISION5=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Age_group="25-44";
MPRINT(EM_DECDATA):   COUNT=315;
MPRINT(EM_DECDATA):   DATAPRIOR=0.2;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.2;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   DECISION3=1;
MPRINT(EM_DECDATA):   DECISION4=0;
MPRINT(EM_DECDATA):   DECISION5=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Age_group="18-24";
MPRINT(EM_DECDATA):   COUNT=315;
MPRINT(EM_DECDATA):   DATAPRIOR=0.2;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.2;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   DECISION3=0;
MPRINT(EM_DECDATA):   DECISION4=1;
MPRINT(EM_DECDATA):   DECISION5=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Age_group="0-17";
MPRINT(EM_DECDATA):   COUNT=315;
MPRINT(EM_DECDATA):   DATAPRIOR=0.2;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.2;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   DECISION3=0;
MPRINT(EM_DECDATA):   DECISION4=0;
MPRINT(EM_DECDATA):   DECISION5=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Age_group(type=PROFIT label= Age_group);
MPRINT(EM_DECDATA):   label DECISION1= '85+';
MPRINT(EM_DECDATA):   label DECISION2= '65-84';
MPRINT(EM_DECDATA):   label DECISION3= '25-44';
MPRINT(EM_DECDATA):   label DECISION4= '18-24';
MPRINT(EM_DECDATA):   label DECISION5= '0-17';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Age_group(type=PROFIT label= Age_group);
MPRINT(EM_DIAGRAM):   label DECISION1= "85+";
MPRINT(EM_DIAGRAM):   label DECISION2= "65-84";
MPRINT(EM_DIAGRAM):   label DECISION3= "25-44";
MPRINT(EM_DIAGRAM):   label DECISION4= "18-24";
MPRINT(EM_DIAGRAM):   label DECISION5= "0-17";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids3_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Age_group";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids3_Age_group_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids3_Age_group_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Age_group";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids3_Age_group_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids3_Age_group_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
57802      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
57803      * Boost: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Boost: Generation of macros and macro variables;
57804      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE 
or _ALL_;
57805      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

57806      %let EMEXCEPTIONSTRING=;
57807      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
57808      * TRAIN: Boost;
MPRINT(EM_DIAGRAM):   * TRAIN: Boost;
57809      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
57810      %let EM_ACTION = TRAIN;
57811      %let syscc = 0;
57812      %macro main;
57813      
57814        filename temp catalog 'sashelp.emmodl.boost_macros.source';
57815        %include temp;
57816        filename temp;
57817      
57818        %setProperties;
57819      
57820        %if %upcase(&EM_ACTION) = CREATE %then %do;
57821          filename temp catalog 'sashelp.emmodl.boost_create.source';
57822          %include temp;
57823          filename temp;
57824      
57825          %create;
57826        %end;
57827      
57828         %else
57829         %if %upcase(&EM_ACTION) = TRAIN %then %do;
57830      
57831             filename temp catalog 'sashelp.emmodl.boost_train.source';
57832             %include temp;
57833             filename temp;
57834             %train;
57835         %end;
57836      
57837        %else
57838        %if %upcase(&EM_ACTION) = SCORE %then %do;
57839          filename temp catalog 'sashelp.emmodl.boost_score.source';
57840          %include temp;
57841          filename temp;
57842      
57843          %score;
57844      
57845        %end;
57846      
57847        %else
57848        %if %upcase(&EM_ACTION) = REPORT %then %do;
57849      
57850             filename temp catalog 'sashelp.emmodl.boost_report.source';
57851             %include temp;
57852             filename temp;
57853      
57854             %report;
57855         %end;
57856      
57857         %doendm:
57858      %mend main;
57859      
57860      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
57861     +
57862     +%macro SetProperties;
57863     +
57864     +     /* boost options */
57865     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
57866     +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
57867     +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
57868     +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
57869     +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
57870     +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
57871     +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
57872     +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
57873     +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
57874     +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
57875     +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
57876     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
57877     +
57878     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
57879     +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
57880     +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
57881     +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
57882     +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
57883     +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
57884     +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
57885     +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
57886     +
57887     +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
57888     +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
57889     +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
57890     +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
57891     +
57892     +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
57893     +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
57894     +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
57895     +
57896     +%mend SetProperties;
57897     +
57898     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
57900     +%macro train;
57902     +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
57903     +   %include temp;
57904     +   filename temp;
57906     +   %if &EM_IMPORT_DATA eq %then %do;
57907     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
57908     +       %put &em_codebar;
57909     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
57909    !+NOQUOTE));
57910     +       %put &errormsg;
57911     +       %put &em_codebar;
57912     +       %goto doendm;
57913     +   %end;
57914     +   %else
57915     +       %let EMEXCEPTIONSTRING =;
57917     +   %if  &EM_NUM_TARGET ne 1 %then %do;
57918     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
57919     +        %put &em_codebar;
57920     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
57920    !+NOQUOTE));
57921     +        %put &errormsg;
57922     +        %put &em_codebar;
57923     +        %goto doendm;
57924     +   %end;
57926     +   %let target_level = %EM_TARGET_LEVEL;
57927     +   %let target_var = %EM_TARGET;
57929     +   %if ("&target_Level" ne "INTERVAL") %then %do;
57930     +       %em_boost_makeDMDB(indata=&EM_IMPORT_DATA, target=&target_Var,
57931     +                             nLevel=_nTargetLevel);
57932     +   %end;
57934     +   /* check actual num of target levels */
57935     +   %if (&target_Level eq BINARY) %then %do;
57936     +      %if &_nTargetLevel  > 2 %then %do;
57937     +        %let EMEXCEPTIONSTRING =
57937    !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
57938     +        %put &em_codebar;
57939     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
57939    !+NOQUOTE));
57940     +        %put &errormsg;
57941     +        %put &em_codebar;
57942     +        %goto doendm;
57943     +      %end;
57944     +   %end;
57946     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
57946    !+(&EM_NUM_ORDINAL_INPUT < 1)
57947     +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
57948     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
57949     +        %put &em_codebar;
57950     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
57950    !+;
57951     +        %put &errormsg;
57952     +        %put &em_codebar;
57953     +        %goto doendm;
57954     +   %end;
57956     +   /* Initialize property macro variables */
57957     +   %SetProperties;
57959     +   /* data sets */
57960     +   %EM_GETNAME(key=MODEL, type=DATA);
57961     +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
57962     +   %EM_GETNAME(key=SUBFIT, type=DATA);
57963     +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
57965     +   /* files
57966     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
57968     +   /* retrieve target information */
57969     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
57971     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
57972     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
57973     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
57974     +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
57975     +   %do %while(^ %sysfunc(fetch(&dsid)));
57976     +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
57977     +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
57978     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
57979     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
57980     +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
57981     +   %end;
57982     +   %let dsid = %sysfunc(close(&dsid));
57984     +   /* if target level is ORDINAL, throw run time exception -- proc boost does not
57984    !+support ordinal target */
57985     +   %if &Target_Level eq ORDINAL %then %do;
57986     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
57987     +        %put &em_codebar;
57988     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
57988    !+error_invalidordinaltarget_note, NOQUOTE));
57989     +        %put &errormsg;
57990     +        %put &em_codebar;
57991     +        %goto doendm;
57992     +   %end;
57994     +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be
57994    !+thrown */
57995     +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq .
57995    !+)) %then %do;
57996     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
57997     +        %put &em_codebar;
57998     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note,
57998    !+NOQUOTE));
57999     +        %put &errormsg;
58000     +        %put &em_codebar;
58001     +        %goto doendm;
58002     +   %end;
58004     +   %runBoostProcedure;
58007     +   %doendm:
58008     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
58009     +%Macro em_boost_makeDMDB(indata=, target=,  nLevel= );
58010     +  %global &nLevel;
58012     +  %let targetLevel=;
58013     +  data _null_;
58014     +     length orderString $64;
58015     +     set &em_data_variableset end=eof;
58016     +     where NAME="&target";
58017     +     select(order);
58018     +            when('')        order ='DESC';
58019     +            when('FMTASC')  order='ASCFMT';
58020     +            when('FMTDESC') order='DESFMT';
58021     +            otherwise;
58022     +     end;
58023     +     if eof then do;
58024     +        call symput("targetOrder", trim(order));
58025     +        call symput("targetLevel", trim(Level));
58026     +     end;
58027     +  run;
58029     +  %if "&targetLevel" ne "INTERVAL" %then %do;
58030     +  proc dmdb batch data=&indata dmdbCat=_BoostDMDB
58031     +    classout=_tmp_dmdbout;
58032     +    class &target(&targetOrder);
58033     +    target &target;
58034     +  run;
58035     +  data _tmp_dmdbout;
58036     +    set _tmp_dmdbout;
58037     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
58038     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
58039     +  run;
58040     +  data _null_;
58041     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
58042     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
58043     +    %let dsid = %sysfunc(close(&dsid));
58044     +     call symput("&nLevel", put(&_obs, Best12.));
58045     +  run;
58047     +  proc datasets lib=work nolist;
58048     +     delete _tmp_dmdbout;
58049     +  run;
58050     +  quit;
58051     +  %end;
58053     +%Mend em_boost_makeDMDB;
58055     +%macro runBoostProcedure;
58057     +  proc sql;
58058     +    reset noprint;
58059     +    select count(*) into :nobs from &EM_IMPORT_DATA;
58060     +  quit;
58062     +  %let arborkluge= "work._BoostDMDB";
58063     +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
58065     +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
58066     +      iterations = &EM_PROPERTY_ITERATIONS
58067     +    %end;
58069     +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
58070     +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
58071     +       trainproportion = &tprop
58072     +    %end;
58074     +    %if &EM_PROPERTY_SEED ne %then %do;
58075     +       seed = &EM_PROPERTY_SEED
58076     +    %end;
58078     +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
58079     +       shrinkage = &EM_PROPERTY_SHRINKAGE
58080     +    %end;
58082     +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
58083     +      leaffraction = &EM_PROPERTY_LEAFFRACTION
58084     +    %end;
58086     +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
58087     +    %if &splitsize ge &nobs %then %do;
58088     +       %let splitsize= .;
58089     +    %end;
58090     +    %if &splitsize ne . %then %do;
58091     +      splitsize = &splitsize
58092     +    %end;
58094     +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
58095     +      mincatsize = &EM_PROPERTY_MINCATSIZE
58096     +    %end;
58098     +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
58099     +       maxbranch = &EM_PROPERTY_MAXBRANCH
58100     +    %end;
58102     +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
58103     +       maxdepth = &EM_PROPERTY_MAXDEPTH
58104     +    %end;
58106     +    %let nsurrs = ;
58107     +    %if &EM_PROPERTY_NSURRS ne %then %do;
58108     +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT +
58108    !+&EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
58109     +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
58110     +      maxsurrs = &nsurrs
58111     +    %end;
58113     +    %if &EM_PROPERTY_MISSING ne %then %do;
58114     +      Missing = &EM_PROPERTY_MISSING
58115     +    %end;
58117     +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
58118     +      reusevar = &EM_PROPERTY_REUSEVAR
58119     +    %end;
58120     +/*
58121     +    %if &EM_PROPERTY_PRECISION ne %then %do;
58122     +      intervaldecimals=&EM_PROPERTY_PRECISION
58123     +    %end;
58124     +*/
58125     +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
58126     +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
58127     +    %end;
58129     +    %if &Target_Event ne %then %do;
58130     +      Event="&Target_Event"
58131     +    %end;
58133     +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
58134     +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
58135     +    %end;
58137     +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
58138     +      IntervalBins = &EM_PROPERTY_INTERVALBINS
58139     +    %end;
58141     +    %if &TARGET_LEVEL eq INTERVAL %then %do;
58142     +      %if &EM_PROPERTY_HUBER ne %then %do;
58143     +        Huber=&EM_PROPERTY_HUBER
58144     +      %end;
58145     +    %end;
58146     +    ;
58148     +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
58149     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
58150     +    %end;
58152     +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED
58152    !+ne  %then %do;
58153     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT
58153    !+%EM_NOMINAL_REJECTED / level = nominal;
58154     +    %end;
58156     +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
58157     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
58158     +    %end;
58160     +    %if %EM_FREQ ne %then %do;
58161     +       freq %EM_FREQ;
58162     +    %end;
58164     +    target %EM_TARGET / level = &TARGET_LEVEL;
58166     +    &EM_DEC_STATEMENT;
58168     +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
58169     +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
58170     +    %end;
58171     +    %if &EM_PROPERTY_NODESIZE ne %then %do;
58172     +       nodesize = &EM_PROPERTY_NODESIZE
58173     +    %end;
58174     +    ;
58175     +    save model=&EM_USER_MODEL;
58176     +  run;
58177     +  quit;
58178     +  %em_checkerror();
58180     +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_BOOST_MAKEDMDB):   data _null_;
MPRINT(EM_BOOST_MAKEDMDB):   length orderString $64;
MPRINT(EM_BOOST_MAKEDMDB):   set EMWS1.Boost_VariableSet end=eof;
MPRINT(EM_BOOST_MAKEDMDB):   where NAME="Age_group";
MPRINT(EM_BOOST_MAKEDMDB):   select(order);
MPRINT(EM_BOOST_MAKEDMDB):   when('') order ='DESC';
MPRINT(EM_BOOST_MAKEDMDB):   when('FMTASC') order='ASCFMT';
MPRINT(EM_BOOST_MAKEDMDB):   when('FMTDESC') order='DESFMT';
MPRINT(EM_BOOST_MAKEDMDB):   otherwise;
MPRINT(EM_BOOST_MAKEDMDB):   end;
MPRINT(EM_BOOST_MAKEDMDB):   if eof then do;
MPRINT(EM_BOOST_MAKEDMDB):   call symput("targetOrder", trim(order));
MPRINT(EM_BOOST_MAKEDMDB):   call symput("targetLevel", trim(Level));
MPRINT(EM_BOOST_MAKEDMDB):   end;
MPRINT(EM_BOOST_MAKEDMDB):   run;

NOTE: Variable orderString is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.BOOST_VARIABLESET.
      WHERE NAME='Age_group';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_BOOST_MAKEDMDB):   proc dmdb batch data=EMWS1.Part3_TRAIN dmdbCat=_BoostDMDB 
classout=_tmp_dmdbout;
MPRINT(EM_BOOST_MAKEDMDB):   class Age_group(DESC);
MPRINT(EM_BOOST_MAKEDMDB):   target Age_group;
MPRINT(EM_BOOST_MAKEDMDB):   run;

NOTE: Records processed = 943   Memory used = 511K.
NOTE: There were 943 observations read from the data set EMWS1.PART3_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 5 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_BOOST_MAKEDMDB):   data _tmp_dmdbout;
MPRINT(EM_BOOST_MAKEDMDB):   set _tmp_dmdbout;
MPRINT(EM_BOOST_MAKEDMDB):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(EM_BOOST_MAKEDMDB):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(EM_BOOST_MAKEDMDB):   run;

NOTE: There were 5 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_BOOST_MAKEDMDB):   data _null_;
MPRINT(EM_BOOST_MAKEDMDB):   call symput("_nTargetLevel", put(5, Best12.));
MPRINT(EM_BOOST_MAKEDMDB):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_BOOST_MAKEDMDB):   proc datasets lib=work nolist;
MPRINT(EM_BOOST_MAKEDMDB):   delete _tmp_dmdbout;
MPRINT(EM_BOOST_MAKEDMDB):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(EM_BOOST_MAKEDMDB):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(RUNBOOSTPROCEDURE):   proc sql;
MPRINT(RUNBOOSTPROCEDURE):   reset noprint;
MPRINT(RUNBOOSTPROCEDURE):   select count(*) into :nobs from EMWS1.Part3_TRAIN;
MPRINT(RUNBOOSTPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(RUNBOOSTPROCEDURE):   proc arbor proc=treeboost data=EMWS1.Part3_TRAIN iterations = 50 
trainproportion = 0.6 seed = 12345 shrinkage = 0.1 leaffraction = 0.1 mincatsize = 5 maxbranch 
= 2 maxdepth = 10 maxsurrs = 1 Missing = USEINSEARCH reusevar = 1 Exhaustive = 5000 Event="85+ 
                            " CategoricalBins = 30 IntervalBins = 100 ;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   OG_Cases_in_Thousands Projected_Sum_Pop
MPRINT(RUNBOOSTPROCEDURE):  / level = interval;
MPRINT(RUNBOOSTPROCEDURE):   target
MPRINT(EM_TARGET):   Age_group
MPRINT(RUNBOOSTPROCEDURE):   / level = NOMINAL;
MPRINT(RUNBOOSTPROCEDURE):   ;
MPRINT(RUNBOOSTPROCEDURE):   performance workdatalocation = DISK nodesize = 20000 ;
MPRINT(RUNBOOSTPROCEDURE):   save model=EMWS1.Boost_MODEL;
NOTE: 1627682 kilobytes of physical memory.
NOTE: Will use 943 out of 943 training cases.
NOTE: Using memory pool with 45349888 bytes.
NOTE: Passed training data 690 times.
NOTE: Current TREEBOOST model contains 50 terms with a total of 250 trees.
NOTE: Training used 168200 bytes of work memory.
NOTE: The data set EMWS1.BOOST_MODEL has 50675 observations and 4 variables.
MPRINT(RUNBOOSTPROCEDURE):   run;

MPRINT(RUNBOOSTPROCEDURE):   quit;

NOTE: There were 943 observations read from the data set EMWS1.PART3_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.60 seconds
      cpu time            1.56 seconds
      

MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

58183      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(RUNBOOSTPROCEDURE):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Boost;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
58184      *------------------------------------------------------------*;
58185      * End TRAIN: Boost;
58186      *------------------------------------------------------------*;
58187      

58188      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
58189      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
58190      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
58191      ;
MPRINT(EM_DIAGRAM):   ;
58192      ;
MPRINT(EM_DIAGRAM):   ;
58193      ;
MPRINT(EM_DIAGRAM):   ;
58194      ;
MPRINT(EM_DIAGRAM):   ;
58195      quit;
MPRINT(EM_DIAGRAM):   quit;
58196      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
58197      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
58198      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
58199      /*; *"; *'; */
58200      ;
MPRINT(EM_DIAGRAM):   ;
58201      run;
MPRINT(EM_DIAGRAM):   run;
58202      quit;
MPRINT(EM_DIAGRAM):   quit;
58203      /* Reset EM Options */
58204      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
58205      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
58206      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
