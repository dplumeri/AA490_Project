MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:47:39" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 19, 2019
Time:                15:47:39
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2KZYWAI "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2KZYWAI new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:47:39" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:47:39" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
72427      proc freq data=EMWS1.Tree3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree3_VariableSet noprint;
72428      table ROLE*LEVEL/out=WORK.Tree3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Tree3META;
72429      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.TREE3META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

72430      proc print data=WORK.Tree3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree3META label noobs;
72431      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
72432      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
72433      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
72434      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
72435      run;

NOTE: There were 4 observations read from the data set WORK.TREE3META.
NOTE: The PROCEDURE PRINT printed page 26.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

72436      title10;
MPRINT(EM_DIAGRAM):   title10;
72437      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Part4_TRAIN EMWS1.Part4_TRAIN 
EMWS1.Part4_TRAIN EMWS1.Part4_TRAIN EMWS1 Part4_TRAIN 
EMWS1.Part4_TRAIN EMWS1.Part4_TRAIN 
EMWS1.Part4_TRAIN EMWS1.Part4_TRAIN EMWS1 Part4_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "Sum_Labor_Force_Pop"." 
72438      proc print data = EMWS1.Ids4_Sum_Labor_Force__DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids4_Sum_Labor_Force__DM noobs label;
72439      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
72440      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
72441      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
72442      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
72443      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
72444      run;

NOTE: There were 3 observations read from the data set EMWS1.IDS4_SUM_LABOR_FORCE__DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 27.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

72445      title10;
MPRINT(EM_DIAGRAM):   title10;
72446      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree3: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Sum_Labor_Force_Pop(label="Sum_Labor_Force_Pop");
MPRINT(EM_DECDATA):   length Sum_Labor_Force_Pop 8 ;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=225000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=25077000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=12651000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids4_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids4_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids4_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids4_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids4_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
72947      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
72948      * Tree3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree3: Generation of macros and macro variables;
72949      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
72950      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

72951      %let EMEXCEPTIONSTRING=;
72952      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
72953      * TRAIN: Tree3;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree3;
72954      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
72955      %let EM_ACTION = TRAIN;
72956      %let syscc = 0;
72957      %macro main;
72958      
72959        %if %upcase(&EM_ACTION) = CREATE %then %do;
72960          filename temp catalog 'sashelp.emmodl.tree_create.source';
72961          %include temp;
72962          filename temp;
72963      
72964          %em_tree_create;
72965        %end;
72966      
72967         %else
72968         %if %upcase(&EM_ACTION) = TRAIN %then %do;
72969      
72970             filename temp catalog 'sashelp.emmodl.tree_train.source';
72971             %include temp;
72972             filename temp;
72973             %em_tree_train;
72974         %end;
72975      
72976        %else
72977        %if %upcase(&EM_ACTION) = SCORE %then %do;
72978          filename temp catalog 'sashelp.emmodl.tree_score.source';
72979          %include temp;
72980          filename temp;
72981      
72982          %em_tree_score;
72983      
72984        %end;
72985      
72986        %else
72987        %if %upcase(&EM_ACTION) = REPORT %then %do;
72988      
72989             filename temp catalog 'sashelp.emmodl.tree_report.source';
72990             %include temp;
72991             filename temp;
72992      
72993             %em_tree_report;
72994         %end;
72995      
72996        %else
72997        %if %upcase(&EM_ACTION) = OPENINT %then %do;
72998      
72999             filename temp catalog 'sashelp.emmodl.tree_actions.source';
73000             %include temp;
73001             filename temp;
73002             %EM_TREE_OPENTREEVIEWER;
73003      
73004         %end;
73005      
73006        %else
73007        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
73008      
73009             filename temp catalog 'sashelp.emmodl.tree_actions.source';
73010             %include temp;
73011             filename temp;
73012             %EM_TREE_CLOSETREEVIEWER;
73013      
73014         %end;
73015      
73016      
73017         %doendm:
73018      %mend main;
73019      
73020      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
73022     +%macro em_tree_train;
73024     +   %if &EM_IMPORT_DATA eq %then %do;
73025     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
73026     +       %put &em_codebar;
73027     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
73028     +       %put &errormsg;
73029     +       %put &em_codebar;
73030     +       %goto doendm;
73031     +   %end;
73032     +   %else
73033     +       %let EMEXCEPTIONSTRING =;
73035     +   %if  &EM_NUM_TARGET lt 1 %then %do;
73036     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
73037     +        %put &em_codebar;
73038     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
73039     +        %put &errormsg;
73040     +        %put &em_codebar;
73041     +        %goto doendm;
73042     +   %end;
73044     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
73045     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
73046     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
73047     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
73048     +        %put &em_codebar;
73049     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
73050     +        %put &errormsg;
73051     +        %put &em_codebar;
73052     +        %goto doendm;
73053     +   %end;
73055     +   /* Initialize property macro variables */
73056     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
73057     +   %include temp;
73058     +   filename temp;
73060     +   %EM_SetProperties;
73062     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
73063     +   %EM_GETNAME(key=EMTREE, type=DATA);
73064     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
73065     +     /* if import eq Y and no importtable defined, throw an exception */
73066     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
73067     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
73068     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
73069     +         %put &em_codebar;
73070     +         %put &errmsg;
73071     +         %put &em_codebar;
73072     +         %goto doendm;
73073     +      %end;
73074     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
73075     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
73076     +         %put &em_codebar;
73077     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
73078     +         %put &errormsg;
73079     +         %put &em_codebar;
73080     +         %goto doendm;
73081     +      %end;
73082     +      %else %do;
73083     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
73084     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
73085     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
73086     +         %let varnumX = %sysfunc(varnum(&dsid,X));
73087     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
73088     +         %let dsid = %sysfunc(close(&dsid));
73089     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
73090     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
73091     +            %put &em_codebar;
73092     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
73093     +            %put &errormsg;
73094     +            %put &em_codebar;
73095     +            %goto doendm;
73096     +         %end;
73097     +      %end;
73098     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
73099     +         proc delete data=&EM_USER_EMTREE;
73100     +         run;
73101     +      %end;
73102     +   %end;
73103     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
73104     +      proc delete data=&EM_USER_EMTREE;
73105     +      run;
73106     +   %end;
73108     +   /* load tree macros */
73109     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
73110     +   %include temp;
73111     +   filename temp;
73113     +   /* data sets */
73114     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
73115     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
73116     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
73118     +   /* files */
73119     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
73121     +   /* check actual num of target levels */
73122     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
73123     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
73124     +                              nLevel=_nTargetLevel );
73125     +      %if &_nTargetLevel  > 2 %then %do;
73126     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
73127     +        %put &em_codebar;
73128     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
73129     +        %put &errormsg;
73130     +        %put &em_codebar;
73131     +        %goto doendm;
73132     +      %end;
73133     +   %end;
73135     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
73136     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
73137     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
73138     +        %let costflag=0;
73139     +        data _null_;
73140     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
73141     +          if eof then call symput("costflag", _N_);
73142     +        run;
73143     +        %if &costflag gt 0 %then %do;
73144     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
73145     +          %put &em_codebar;
73146     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
73147     +          %put &errormsg;
73148     +          %put &em_codebar;
73149     +          %goto doendm;
73150     +       %end;
73151     +     %end;
73152     +   %end;
73154     +   /* determine if multiple targets will be processed */
73155     +   %let em_tree_multipleTargets=N;
73156     +   %let em_tree_numTarget = 1;
73157     +   %let em_tree_targetVars=;
73159     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
73160     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
73161     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
73162     +         %let em_tree_multipleTargets=N;
73163     +      %end;
73164     +      %else %do;
73165     +         /* create macro array of targets  */
73166     +         data _null_;
73167     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
73168     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
73169     +           if eof then
73170     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
73171     +        run;
73173     +        %if &em_tree_numTarget gt 1 %then %do;
73174     +           %let em_tree_multipleTargets=Y;
73175     +        %end;
73176     +      %end;
73177     +   %end;
73179     +   /* create view of only necessary variable for performance reasons */
73180     +   %let tempData = &EM_LIB..em_&EM_NODEID;
73181     +   data &tempData / view=&tempData;
73182     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
73183     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
73184     +       %EM_TARGET
73185     +     %end;
73186     +     %else %do;
73187     +       %if &em_tree_numTarget ne 0 %then %do;
73188     +         %do i=1 %to &em_tree_numTarget;
73189     +            &&em_tree_targetVars&i
73190     +         %end;
73191     +       %end;
73192     +     %end;
73193     +     );
73194     +   run;
73196     +   /* run Tree procedure */
73197     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
73199     +   /* Check return code and throw exception if error is detected */
73200     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
73201     +   %if &syserr %then %do;
73202     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
73203     +     %goto doendm;
73204     +   %end;
73206     +   /* add decision score code if multiple targets are processed */
73207     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
73208     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
73209     +   %end;
73211     +   /* create outfit dataset if multiple score statements have been executed */
73212     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
73214     +   /* create English Rules */
73215     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
73216     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
73217     +       %em_tree_makeEnglishRules;
73219     +       /* English Rules */
73220     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
73222     +     %end;
73223     +   filename x;
73225     +   %doendm:
73226     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
73227     +%macro EM_SetProperties;
73229     +   /* train properties */
73230     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
73231     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
73232     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
73233     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
73234     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
73235     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
73236     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
73237     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
73238     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
73239     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
73240     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
73241     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
73242     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
73243     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
73244     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
73245     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
73246     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
73247     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
73248     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
73249     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
73250     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
73251     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
73252     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
73253     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
73254     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
73255     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
73256     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
73257     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
73258     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
73259     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
73260     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
73261     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
73262     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
73263     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
73264     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
73265     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
73266     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
73267     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
73268     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
73269     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
73270     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
73272     +   /* properties for interactive sample */
73273     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
73274     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
73275     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
73276     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
73278     +   /* report properties */
73279     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
73280     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
73281     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
73282     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
73283     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
73284     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
73285     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
73286     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
73287     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
73288     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
73289     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
73290     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
73291     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
73293     +   /* score properties */
73294     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
73295     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
73297     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS1.Tree3_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;

NOTE: Deleting EMWS1.TREE3_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
73299     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
73300     +  %global &nLevel;
73301     +  proc dmdb batch data=&indata
73302     +    classout=_tmp_dmdbout;
73303     +    class &target;
73304     +  run;
73305     +  data _tmp_dmdbout;
73306     +    set _tmp_dmdbout;
73307     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
73308     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
73309     +  run;
73310     +  data _null_;
73311     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
73312     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
73313     +    %let dsid = %sysfunc(close(&dsid));
73314     +     call symput("&nLevel", put(&_obs, Best12.));
73315     +  run;
73317     +  proc datasets lib=work nolist;
73318     +     delete _tmp_dmdbout;
73319     +  run;
73320     +  quit;
73321     +%Mend EM_CheckBinaryTargetLevel;
73324     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
73326     +  /* determine the number of obs in training data */
73327     +  proc sql;
73328     +    reset noprint;
73329     +    select count(*) into :em_nobs from &indata;
73330     +  quit;
73332     +  /* determine the number of input variables */
73333     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
73334     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
73336     +  /* retrieve targetEvent from decmeta */
73337     +  %let targetEvent=;
73338     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
73339     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
73340     +      data _null_;
73341     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
73342     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
73343     +      run;
73344     +    %end;
73345     +  %end;
73347     +  /* create targetTable if multipleTar eq Y */
73348     +  data temptarget;
73349     +    set &EM_DATA_VARIABLESET;
73350     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
73351     +  run;
73353     + /* data sets */
73354     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
73355     + %EM_GETNAME(key=EMTREE,        type=DATA);
73356     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
73357     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
73358     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
73359     + %EM_GETNAME(key=OUTNODES,      type=DATA);
73360     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
73361     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
73362     + %EM_GETNAME(key=OUTPATH,       type=DATA);
73363     + %EM_GETNAME(key=OUTRULES,      type=DATA);
73365     + /* files */
73366     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
73367     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
73369     + /* turn on pmml if requested */
73370     + %let nnpmml=0;
73371     + %if %symexist(EM_PMML) %then %do;
73372     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
73373     +       %let nnpmml=1;
73375     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
73376     +   %end;
73377     +%end;
73379     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
73381     +%if &nnpmml or &numClassTarget %then %do;
73383     +    /* create dmdb needed for pmml generation */
73384     +    %let tree_maxlevel = 512;
73385     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
73386     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
73387     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
73388     +      %end;
73389     +    %end;
73390     +    %if &tree_maxlevel gt 0 %then %do;
73391     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
73392     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
73393     +    %end;
73395     +    %let targetOrderString =;
73396     +    %let targetString = ;
73397     +    data _null_;
73398     +       length orderString nameString $10000;
73399     +       retain orderString nameString;
73400     +       set &em_data_variableset end=eof;
73401     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
73402     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
73403     +       %end;
73404     +       %else %do;
73405     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
73406     +       %end;          select(order);
73407     +         when('')        order ='DESC';
73408     +         when('FMTASC')  order='ASCFMT';
73409     +         when('FMTDESC') order='DESFMT';
73410     +         otherwise;
73411     +       end;
73412     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
73413     +       nameString = trim(nameString)!!' '!!trim(NAME);
73415     +       if eof then do;
73416     +          call symput('targetOrderString', trim(orderString));
73417     +          call symput('targetString', trim(nameString));
73418     +       end;
73419     +    run;
73421     +    %let arborkluge= "work._treeDMDB";
73423     +    proc dmdb batch data=&indata
73424     +    %if &nnpmml %then %do;
73425     +        PMML
73426     +    %end;
73427     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
73429     +      %if &nnpmml %then %do;
73430     +           %if "%EM_ID" ne "" %then %do;
73431     +             id %EM_ID;
73432     +           %end;
73433     +           %if &EM_NUM_CLASS gt 0 %then %do;
73434     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
73435     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
73436     +                  &targetOrderString;
73437     +           %end;
73438     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
73439     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
73440     +           %end;
73441     +           target &targetString %EM_INTERVAL_TARGET;
73442     +           %if "%EM_FREQ" ne "" %then %do;
73443     +             freq %EM_FREQ;
73444     +           %end;
73445     +      %end;
73446     +      %else %do;
73447     +         class  &targetOrderString;
73448     +         target &targetString %EM_INTERVAL_TARGET;
73449     +      %end;
73450     +    run;
73451     +    quit;
73453     +    proc datasets lib=work nolist;
73454     +       delete classout varout;
73455     +    run;
73456     +    quit;
73458     + %end;
73461     + /* run Arbor procedure */
73462     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
73463     +  proc arbor data=&INDATA
73465     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
73466     +    Leafsize = &EM_PROPERTY_LEAFSIZE
73467     +  %end;
73469     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
73470     +    Splitsize = &EM_PROPERTY_SPLITSIZE
73471     +  %end;
73473     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
73474     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
73475     +  %end;
73477     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
73478     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
73479     +  %end;
73481     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
73482     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
73483     +  %end;
73485     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
73486     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
73487     +  %end;
73488     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
73489     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
73490     +  %end;
73491     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
73492     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
73493     +  %end;
73495     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
73496     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
73497     +      alpha = &EM_PROPERTY_SIGLEVEL
73498     +    %end;
73499     +  %end;
73501     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
73502     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
73503     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
73504     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
73505     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
73507     +        padjust =
73508     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
73509     +          &chaid
73510     +        %end;
73511     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
73512     +          DEPTH
73513     +        %end;
73514     +      %end;
73515     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
73516     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
73517     +         pvars = &num_inputs
73518     +      %end;
73519     +    %end;
73520     +  %end;
73521     +  %else %do;
73522     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
73523     +         padjust = NONE
73524     +      %end;
73525     +  %end;
73527     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
73528     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
73529     +    Maxrules = &num_nrules
73530     +  %end;
73532     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
73533     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
73534     +    Maxsurrs = &num_nsurrs
73535     +  %end;
73537     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
73538     +     Missing=&EM_PROPERTY_MISSINGVALUE
73539     +  %end;
73541     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
73542     +     USEVARONCE
73543     +  %end;
73545     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
73546     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
73547     +  %end;
73550     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
73551     +    event = "&targetEvent"
73552     +  %end;
73554     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
73555     +     DECSEARCH
73556     +  %end;
73558     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
73559     +     PRIORSSEARCH
73560     +  %end;
73562     +  %if &arbor_1 ne %then %do;
73563     +    &arbor_1
73564     +  %end;
73566     +  %if &em_arbor ne %then %do;
73567     +     &em_arbor
73568     +  %end;
73569     +  ;
73570     + %end;
73571     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
73572     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
73573     +       Performance &EM_PROPERTY_PERFORMANCE
73574     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
73575     +         nodesize=&EM_PROPERTY_NODESAMPLE
73576     +       %end;
73577     +       ;
73578     +       interact;
73579     + %end;
73580     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
73581     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
73582     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
73583     +    %put &em_codebar;
73584     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
73585     +    %put &errormsg;
73586     +    %put &em_codebar;
73587     +    %goto doendm;
73588     +   %end;
73589     +   %else %do;
73590     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
73591     +       Performance &EM_PROPERTY_PERFORMANCE
73592     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
73593     +         nodesize=&EM_PROPERTY_NODESAMPLE
73594     +       %end;
73595     +       ;
73596     +       interact;
73597     +   %end;
73598     + %end;
73600     + %else %do;
73601     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
73602     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
73603     +    %put &em_codebar;
73604     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
73605     +    %put &errormsg;
73606     +    %put &em_codebar;
73607     +    %goto doendm;
73608     +   %end;
73609     +   %else %do;
73610     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
73611     +       Performance &EM_PROPERTY_PERFORMANCE
73612     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
73613     +         nodesize=&EM_PROPERTY_NODESAMPLE
73614     +       %end;
73615     +       ;
73616     +        interact;
73617     +   %end;
73618     + %end;
73620     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
73621     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
73622     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
73623     +    %end;
73625     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
73626     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
73627     +    %end;
73629     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
73630     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
73631     +    %end;
73633     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
73634     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
73635     +    %end;
73637     +    %if "%EM_FREQ" ne "" %then %do;
73638     +       freq %EM_FREQ;
73639     +    %end;
73641     +    %if "&multipleTar" eq "Y" %then %do;
73642     +       /* cycle through all target vars in variableset */
73643     +       %let tdsid = %sysfunc(open(temptarget));
73644     +       %if &tdsid %then %do;
73645     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
73646     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
73647     +          %do %while(^ %sysfunc(fetch(&tdsid)));
73648     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
73649     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
73650     +             target &var / level = &lvl
73651     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
73652     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
73653     +             %end;
73654     +             %else %if "&lvl" eq "INTERVAL" %then %do;
73655     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
73656     +             %end;
73657     +             %else %if "&lvl" eq "ORDINAL" %then %do;
73658     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
73659     +             %end;
73660     +          %end;
73661     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
73662     +       %end;
73663     +       useTarget variable = %EM_TARGET;
73664     +    %end;
73665     +    %else %do;
73666     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
73667     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
73668     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
73669     +      %end;
73670     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
73671     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
73672     +      %end;
73673     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
73674     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
73675     +      %end;
73676     +    %end;
73678     +    %if "&multipleTar" eq "N" %then %do;
73679     +      &EM_DEC_STATEMENT;
73680     +    %end;
73682     +    Performance &EM_PROPERTY_PERFORMANCE
73683     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
73684     +      nodesize=&EM_PROPERTY_NODESAMPLE
73685     +    %end;
73686     +    ;
73688     +    %if "&intFlag" eq "Y" %then %do;
73689     +       INTERACT Largest;
73690     +       Train maxnewdepth=0;
73691     +    %end;
73693     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
73694     +         Assess
73695     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
73696     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
73697     +              %put &em_codebar;
73698     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
73699     +              %put &errormsg;
73700     +              %put &em_codebar;
73701     +            %end;
73702     +            %else %do;
73703     +               Validata=&EM_IMPORT_VALIDATE
73704     +            %end;
73705     +         %end;
73706     +         %else %do;
73707     +           NoValidata
73708     +         %end;
73709     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
73710     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
73711     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
73712     +               %if &dsid %then %do;
73713     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
73714     +                 %do %while(^ %sysfunc(fetch(&dsid)));
73715     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
73716     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
73717     +                   %else %do;
73718     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
73719     +                      %else %let measure= MISC;
73720     +                   %end;
73721     +                 %end;
73722     +               %end;
73723     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
73724     +            %end;
73725     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
73726     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
73727     +                 %let measure=ASE;
73728     +              %end;
73729     +              %else %do;
73730     +                 %let measure=MISC;
73731     +              %end;
73732     +            %end;
73733     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
73734     +              %let measure=ASE;
73735     +            %end;
73736     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
73737     +               %let measure = LIFT;
73738     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
73739     +               %if &dsid %then %do;
73740     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
73741     +                 %do %while(^ %sysfunc(fetch(&dsid)));
73742     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
73743     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
73744     +                 %end;
73745     +               %end;
73746     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
73747     +            %end;
73748     +            measure=&measure
73749     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
73750     +               event = "&targetEvent"
73751     +            %end;
73752     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
73753     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
73754     +            %end;
73755     +         %end;
73756     +         %if "&multipleTar" eq "N" %then %do;
73757     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
73758     +               CV
73759     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
73760     +                 CVNITer = &EM_PROPERTY_CVNITER
73761     +               %end;
73762     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
73763     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
73764     +               %end;
73765     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
73766     +                 CVSeed = &EM_PROPERTY_CVSEED
73767     +               %end;
73768     +            %end;
73769     +         %end;
73770     +       %end;
73771     +      ;
73773     +      %if "&intFlag" ne "Y" %then %do;
73774     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
73775     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
73776     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
73777     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
73779     +          SUBTREE &subtree
73780     +          %if "&subtree" eq "NLEAVES" %then %do;
73781     +            =&EM_PROPERTY_NSUBTREE
73782     +          %end;
73783     +          ;
73784     +        %end;
73786     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
73787     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
73788     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
73789     +          %end;
73790     +       %end;
73791     +      %end;
73792     + %end;
73795     + MakeMacro nleaves = nleaves;
73796     + save
73797     + %if "&EM_USER_EMTREE" ne "" %then %do;
73798     +   MODEL=&EM_USER_EMTREE
73799     + %end;
73800     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
73801     +   SEQUENCE=&EM_USER_OUTSEQ
73802     + %end;
73803     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
73804     +   IMPORTANCE=&EM_USER_OUTIMPORT
73805     + %end;
73806     + %if "&EM_USER_OUTNODES" ne "" %then %do;
73807     +   NODESTAT=&EM_USER_OUTNODES
73808     + %end;
73809     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
73810     +   SUMMARY=&EM_USER_OUTSUMMARY
73811     + %end;
73812     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
73813     +   STATSBYNODE=&EM_USER_OUTSTATS
73814     + %end;
73815     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
73816     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
73817     + %end;
73818     + %if "&EM_USER_OUTPATH" ne "" %then %do;
73819     +   Pathlistnonmissing=&EM_USER_OUTPATH
73820     + %end;
73821     + %if "&EM_USER_OUTRULES" ne "" %then %do;
73822     +   RULES = &EM_USER_OUTRULES
73823     + %end;
73824     + ;
73826     + %if "&intFlag" ne "Y" %then %do;
73828     +   %let lookupString = ;
73829     +   %if ^%symexist(EM_OPTION) %then
73830     +      %let EM_OPTION=;
73832     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
73833     +      %let lookupString = LOOKUP=SELECT;
73834     +   %end;
73836     +   %let codetext=;
73837     +   %let norescodetxt=;
73839     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
73840     +     %let codetext=&codetext DUMMY;
73841     +     %let norescodetxt=&norescodetxt DUMMY;
73842     +   %end;
73843     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
73844     +     %let codetext=&codetext NOLEAFID;
73845     +     %let norescodetxt=&norescodetxt NOLEAFID;
73846     +   %end;
73847     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
73848     +     %let norescodetxt=&norescodetxt NOPRED;
73849     +   %end;
73851     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
73852     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
73854     +   %if &nnpmml %then %do;
73855     +     code pmml;
73856     +   %end;
73858     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
73859     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
73860     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
73861     +   %end;
73862     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
73863     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
73864     +   %end;
73865     + %end;
73867     + run;
73868     + quit;
73870     + /*%em_checkerror(); */
73871     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
73872     +   /* Delete DMDB catalog */
73873     +   proc datasets lib=work nolist;
73874     +       delete _treeDMDB / mt=cat;
73875     +  run;
73876     +  %end;
73878     + %if &nnpmml %then %do;
73879     +    ods pmml close;
73880     + %end;
73882     +  %doendm:
73884     +%mend em_tree_runTreeProcedure;
73886     +%macro em_tree_createFitStats( multipleTar= );
73889     +  /* create targetTable is multipleTar eq Y */
73890     +  data temptarget;
73891     +    set &EM_DATA_VARIABLESET;
73892     +    where ROLE="TARGET";
73893     +  run;
73895     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
73896     +   data &EM_USER_EMOUTFIT;
73897     +     length target $32;
73898     +     merge work.fit_train
73899     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
73900     +       work.fit_valid
73901     +     %end;
73902     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
73903     +       work.fit_test
73904     +     %end;
73905     +     ;
73906     +     %if "&multipleTar" eq "N" %then %do;
73907     +       target="%EM_TARGET";
73908     +     %end;
73909     +     %else %do;
73910     +       target = _TARGET_;
73911     +     %end;
73912     +     drop _NW_ _SUMW_
73913     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
73914     +        _VSUMW_
73915     +     %end;
73916     +     ;
73917     +   run;
73919     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
73920     +     proc datasets library=work nolist;
73921     +       delete fit_valid;
73922     +     run;
73923     +   %end;
73924     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
73925     +     proc datasets library=work nolist;
73926     +       delete fit_test;
73927     +     run;
73928     +   %end;
73930     +%mend em_tree_createFitStats;
73933     +%macro em_tree_makeEnglishRules;
73935     +  %EM_GETNAME(key=OUTNODES, type=DATA);
73936     +  %EM_GETNAME(key=OUTPATH, type=DATA);
73938     +  /* verify that necessary tables exist and if not, skip processing */
73939     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
73940     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
73941     +    %goto doendm;
73942     +  %end;
73943     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
73944     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
73945     +    %goto doendm;
73946     +  %end;
73948     +  /* determine length of variable in outpath dataset */
73949     +  %let vlength= ;
73950     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
73951     +  %if &dsid ne %then %do;
73952     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
73953     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
73954     +  %end;
73955     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
73957     +  data tempoutpath;
73958     +    length varname $&vlength;
73959     +    retain varname;
73960     +    set &EM_USER_OUTPATH;
73962     +    if ^missing(variable) then varname=variable;
73963     +    else if ^missing(var_name) then varname=var_name;
73964     +    output;
73965     +  run;
73967     +  /* create an array of generated predicted variable names */
73968     +  %let tree_pred_vars = ;
73969     +  %let tree_pred_label = ;
73970     +  %let numpred= 0;
73971     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
73973     +    data _null_;
73974     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
73975     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
73976     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
73977     +     if eof then
73978     +       call symput('numpred', strip(put(_N_, BEST.)));
73979     +    run;
73980     +  %end;
73982     +  /* determine if NPRIORS exists in outnodes  */
73983     +  %local nprior_flag;
73984     +  data _null_;
73985     +    set &EM_USER_OUTNODES(obs=2) end=eof;
73986     +    if eof then do;
73987     +      call symput('nprior_flag', strip(put(npriors, best.)));
73988     +    end;
73989     +  run;
73991     +  proc sort data=tempoutpath; by node; run;
73992     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
73994     +  data tempoutpath;
73995     +    merge tempoutpath(in=_a) outnodes(keep= node
73996     +    %if "&nprior_flag" ne "." %then %do;
73997     +      NPRIORS
73998     +    %end;
73999     +    %else %do;
74000     +      N
74001     +    %end;
74002     +    %if &numpred gt 0 %then %do;
74003     +      %do i=1 %to &numpred;
74004     +        &&tree_pred_vars&i
74005     +      %end;
74006     +    %end;
74007     +    );
74008     +    by node;
74009     +    if _a;
74010     +  run;
74012     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
74014     +  data _null_;
74015     +    file x;
74016     +    set tempoutpath;
74017     +    by node descending varname;
74018     +    retain origvar oldnode string;
74019     +    length origvar $32 oldnode 8 string $200;
74021     +    if _N_ = 1 then do;
74022     +      origvar = varname;
74023     +      oldnode = node;
74024     +    end;
74026     +    if first.node then do;
74027     +       put "&EM_CODEBAR";
74028     +       put " Node = " node;
74029     +       put "&EM_CODEBAR";
74030     +    end;
74032     +      if first.varname then do;
74033     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
74034     +            if MISSING(CHARACTER_VALUE) then do;
74035     +             if NUMERIC_VALUE ne .  then do;
74036     +              if ^first.node then do;
74037     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
74038     +              end;
74039     +              else do;
74040     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
74041     +              end;
74042     +             end;
74043     +            end;
74044     +            else do;
74045     +              if ^first.node then do;
74046     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
74047     +              end;
74048     +              else do;
74049     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
74050     +              end;
74051     +             end;
74052     +         end;
74053     +         else if RELATION in ("=") then do;
74054     +            if ^first.node then do;
74055     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
74056     +            end;
74057     +            else do;
74058     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
74059     +            end;
74060     +         end;
74061     +         else if RELATION in ("ISMISSING") then do;
74062     +            if ^first.node then do;
74063     +              string = " AND "|| strip(varname) || " equals Missing";
74064     +            end;
74065     +            else do;
74066     +              string = "if "|| strip(varname) ||" equals Missing";
74067     +            end;
74068     +         end;
74069     +         else if RELATION in ("ISNOTMISSING") then do;
74070     +            if ^first.node then do;
74071     +              string = " AND "|| strip(varname) || " equals All Values";
74072     +            end;
74073     +            else do;
74074     +              string = "if "|| strip(varname) ||" equals All Values";
74075     +            end;
74076     +         end;
74077     +         if ^missing(varname) then origvar = varname;
74078     +         oldnode=node;
74080     +      end;
74081     +      else do;
74082     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
74083     +          if MISSING(CHARACTER_VALUE) then do;
74084     +           if  NUMERIC_VALUE ne .  then do;
74085     +            if ^MISSING(string) then
74086     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
74087     +            else
74088     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
74089     +           end;
74090     +          end;
74091     +          else do;
74092     +            if ^MISSING(string) then
74093     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
74094     +            else
74095     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
74096     +          end;
74098     +         end;
74099     +         else if RELATION in ("=") then do;
74100     +           string = strip(string)||", "||strip(character_value);
74101     +         end;
74102     +         else if RELATION in ("ISMISSING") then do;
74104     +         end;
74105     +         if ^missing(varname) then origvar = varname;
74106     +         oldnode=node;
74107     +      end;
74108     +      if last.varname then do;
74109     +         if RELATION in ("ISMISSING") then do;
74110     +           if ^first.varname then do;
74111     +             string = strip(string) || " or MISSING";
74112     +           end;
74113     +         end;
74114     +         put string;
74115     +         if ^missing(varname) then origvar = varname;
74116     +         oldnode=node;
74117     +      end;
74119     +      if last.node then do;
74120     +         put "then ";
74121     +         put " Tree Node Identifier   = " node;
74123     +         %if "&nprior_flag" ne "." %then %do;
74124     +           put " Number of Observations = " NPRIORS;
74125     +         %end;
74126     +         %else %do;
74127     +           put " Number of Observations = " N;
74128     +         %end;
74130     +         %if &numpred gt 0 %then %do;
74131     +           %do i=1 %to &numpred;
74132     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
74133     +           %end;
74134     +         %end;
74136     +         put " ";
74137     +         if ^missing(varname) then origvar = varname;
74138     +         oldnode=node;
74139     +      end;
74141     +  run;
74143     +  proc datasets lib=work nolist;
74144     +    delete tempoutpath outnodes;
74145     +  run;
74147     +  %doendm:
74148     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree3 / view=EMWS1.em_Tree3;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Part4_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =Age_group Date Gender Sum_Labor_Force_Pop Sum_Labor_Force_Pop );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS1.EM_TREE3.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree3;
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 504 observations read from the data set EMWS1.PART4_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree3_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 2 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree3 Leafsize = 50 MinCatSize = 5 MaxBranch = 2 MaxDepth = 6
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 3 Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Age_group Date Gender
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   Sum_Labor_Force_Pop
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   INTERVAL
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBF;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.Part4_VALIDATE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   measure=ASE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1572997 kilobytes of physical memory.
NOTE: Will use 504 out of 504 training cases.
NOTE: Using memory pool with 26894336 bytes.
NOTE: Passed training data 5 times.
NOTE: Training used 58520 bytes of work memory.
NOTE: The subtree sequence contains 4 subtrees. The largest has 7 nodes and 4 leaves.
NOTE: Using subtree with 5 nodes and 3 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 5 nodes and 3 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 3.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree3_EMTREE SEQUENCE=EMWS1.Tree3_OUTSEQ IMPORTANCE=EMWS1.Tree3_OUTIMPORT NODESTAT=EMWS1.Tree3_OUTNODES SUMMARY=EMWS1.Tree3_OUTSUMMARY STATSBYNODE=EMWS1.Tree3_OUTSTATS TOPOLOGY=EMWS1.Tree3_OUTTOPOLOGY 
Pathlistnonmissing=EMWS1.Tree3_OUTPATH RULES = EMWS1.Tree3_OUTRULES ;
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 3 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_EMTREE has 196 observations and 4 variables.
NOTE: The data set EMWS1.TREE3_OUTNODES has 5 observations and 16 variables.
NOTE: The data set EMWS1.TREE3_OUTPATH has 6 observations and 7 variables.
NOTE: The data set EMWS1.TREE3_OUTRULES has 25 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 4 observations and 18 variables.
NOTE: The data set EMWS1.TREE3_OUTSTATS has 30 observations and 4 variables.
NOTE: The data set EMWS1.TREE3_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE3_OUTTOPOLOGY has 5 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\TREEFLOW.sas" res group=Tree3 ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\TREEPUBLISH.sas" nores group=Tree3 ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree3 out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: There were 504 observations read from the data set EMWS1.PART4_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part4_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.11 seconds
      
NOTE: There were 504 observations read from the data set EMWS1.PART4_TRAIN.
NOTE: There were 504 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.17 seconds
      cpu time            0.12 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree3_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 2 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree3_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "Sum_Labor_Force_Pop";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $23;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree3_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE3_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Ids4_Sum_Labor_Force__DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS4_SUM_LABOR_FORCE__DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree3_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree3_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 5 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 5 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node N P_Sum_Labor_Force_Pop );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 5 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " N;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Sum_Labor_Force_Pop = " P_Sum_Labor_Force_Pop;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195   
NOTE: The file X is:
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=19Nov2019:15:47:40,
      Create Time=19Nov2019:13:25:01

NOTE: 27 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.34674419432261;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
74150      
74151      *------------------------------------------------------------*;
74152      * End TRAIN: Tree3;
74153      *------------------------------------------------------------*;

74154      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
74155      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
74156      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
74157      ;
MPRINT(EM_DIAGRAM):   ;
74158      ;
MPRINT(EM_DIAGRAM):   ;
74159      ;
MPRINT(EM_DIAGRAM):   ;
74160      ;
MPRINT(EM_DIAGRAM):   ;
74161      quit;
MPRINT(EM_DIAGRAM):   quit;
74162      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
74163      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
74164      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
74165      /*; *"; *'; */
74166      ;
MPRINT(EM_DIAGRAM):   ;
74167      run;
MPRINT(EM_DIAGRAM):   run;
74168      quit;
MPRINT(EM_DIAGRAM):   quit;
74169      /* Reset EM Options */
74170      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
74171      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
74172      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
74173      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
74174      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
74175      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
