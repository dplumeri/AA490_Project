MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 14, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:23:50" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 14, 2019
Time:                16:23:50
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0KZXQUC "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0KZXQUC new;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
41597      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
41598      set EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTKEY;
41599      if upcase(ROLE) in('HIDDEN', 'STANDARD');
MPRINT(EM_DIAGRAM):   if upcase(ROLE) in('HIDDEN', 'STANDARD');
41600      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 31 observations read from the data set EMWS1.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

41601      filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41602      *------------------------------------------------------------*;
41603      * Neural: Scoring DATA data;
41604      *------------------------------------------------------------*;
41605      data EMWS1.Neural_TRAIN
41606      / view=EMWS1.Neural_TRAIN
41607      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TRAIN / view=EMWS1.Neural_TRAIN ;
41608      set EMWS1.Part3_TRAIN
41609      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part3_TRAIN ;
41610      %inc emflow;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Age_group $ 19 I_Age_group $ 19 U_Age_group $ 19 ;
MPRINT(EM_DIAGRAM):   label S_OG_Cases_in_Thousands = 'Standard: OG_Cases_in_Thousands' ;
MPRINT(EM_DIAGRAM):   label S_Projected_Sum_Pop = 'Standard: Projected_Sum_Pop' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label I_Age_group = 'Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label F_Age_group = 'From: Age_group' ;
MPRINT(EM_DIAGRAM):   label U_Age_group = 'Unnormalized Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label P_Age_group85_ = 'Predicted: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label R_Age_group85_ = 'Residual: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label P_Age_group65_84 = 'Predicted: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label R_Age_group65_84 = 'Residual: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label P_Age_group25_44 = 'Predicted: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label R_Age_group25_44 = 'Residual: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label P_Age_group18_24 = 'Predicted: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label R_Age_group18_24 = 'Residual: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label P_Age_group0_17 = 'Predicted: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label R_Age_group0_17 = 'Residual: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( OG_Cases_in_Thousands , Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_OG_Cases_in_Thousands = -0.63459664513109 + 0.00004618214454 * OG_Cases_in_Thousands ;
MPRINT(EM_DIAGRAM):   S_Projected_Sum_Pop = -1.6917760112809 + 1.2200486734119E-6 * Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( OG_Cases_in_Thousands ) THEN S_OG_Cases_in_Thousands = . ;
MPRINT(EM_DIAGRAM):   ELSE S_OG_Cases_in_Thousands = -0.63459664513109 + 0.00004618214454 * OG_Cases_in_Thousands ;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN S_Projected_Sum_Pop = . ;
MPRINT(EM_DIAGRAM):   ELSE S_Projected_Sum_Pop = -1.6917760112809 + 1.2200486734119E-6 * Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = 0.76453864537454 * S_OG_Cases_in_Thousands + -4.96385161058997 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   H12 = 0.3097251533603 * S_OG_Cases_in_Thousands + -0.594616452979 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   H13 = 1.001352052502 * S_OG_Cases_in_Thousands + -3.81399410249906 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   H14 = -2.90241534494368 * S_OG_Cases_in_Thousands + -2.245237780565 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   H15 = -0.4057073628923 * S_OG_Cases_in_Thousands + -5.91678440126499 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   H11 = -6.02332729328379 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = 1.67996942875322 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = -1.27147330976278 + H13 ;
MPRINT(EM_DIAGRAM):   H14 = 3.07275869578323 + H14 ;
MPRINT(EM_DIAGRAM):   H15 = 2.84950159675774 + H15 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node Age_group ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   drop Age_group85_ Age_group65_84 Age_group25_44 Age_group18_24 Age_group0_17 ;
MPRINT(EM_DIAGRAM):   label F_Age_group = 'From: Age_group' ;
MPRINT(EM_DIAGRAM):   length F_Age_group $ 19;
MPRINT(DMNORMCP):   F_Age_group=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   Age_group85_ = 0;
MPRINT(EM_DIAGRAM):   Age_group65_84 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group18_24 = 0;
MPRINT(EM_DIAGRAM):   Age_group0_17 = 0;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   Age_group85_ = .;
MPRINT(EM_DIAGRAM):   Age_group65_84 = .;
MPRINT(EM_DIAGRAM):   Age_group25_44 = .;
MPRINT(EM_DIAGRAM):   Age_group18_24 = .;
MPRINT(EM_DIAGRAM):   Age_group0_17 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_Age_group = '25-44' then do;
MPRINT(EM_DIAGRAM):   Age_group25_44 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '65-84' then do;
MPRINT(EM_DIAGRAM):   Age_group65_84 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '85+' then do;
MPRINT(EM_DIAGRAM):   Age_group85_ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '18-24' then do;
MPRINT(EM_DIAGRAM):   Age_group18_24 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '0-17' then do;
MPRINT(EM_DIAGRAM):   Age_group0_17 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Age_group85_ = .;
MPRINT(EM_DIAGRAM):   Age_group65_84 = .;
MPRINT(EM_DIAGRAM):   Age_group25_44 = .;
MPRINT(EM_DIAGRAM):   Age_group18_24 = .;
MPRINT(EM_DIAGRAM):   Age_group0_17 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 7.43616755483059 * H11 + -0.60345012237028 * H12 + 7.09617287325171 * H13 + -0.55447843924182 * H14 + 0.25054821943193 * H15 ;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0.72053872980745 * H11 + -1.92023706556335 * H12 + 0.23893655440879 * H13 + -6.15899461570346 * H14 + -3.19893085845603 * H15 ;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 1.03975079539109 * H11 + -2.27374219652146 * H12 + 0.21418440526117 * H13 + 3.88385039849894 * H14 + -7.26411534255337 * H15 ;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 1.11496635314694 * H11 + 0.86659642025819 * H12 + 7.17506239611277 * H13 + 0.09076644290866 * H14 + 0.49837696874627 * H15 ;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = P_Age_group85_ + 0.04546483780756 * S_OG_Cases_in_Thousands + -5.22097969305735 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = P_Age_group65_84 + 1.74827655859679 * S_OG_Cases_in_Thousands + 3.12017287293122 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = P_Age_group25_44 + -1.54094188978032 * S_OG_Cases_in_Thousands + 3.21868764169841 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = P_Age_group18_24 + -0.72909828664336 * S_OG_Cases_in_Thousands + -1.19037744543653 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = -0.34657015870063 + P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = -1.16407786251628 + P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = -1.57576346659085 + P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = -1.23055686466775 + P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Age_group85_ , P_Age_group65_84 , P_Age_group25_44 , P_Age_group18_24 , P_Age_group0_17 );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = EXP(P_Age_group85_ - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = EXP(P_Age_group65_84 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = EXP(P_Age_group25_44 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = EXP(P_Age_group18_24 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = EXP(P_Age_group0_17 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = P_Age_group85_ / _SUM_;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = P_Age_group65_84 / _SUM_;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = P_Age_group25_44 / _SUM_;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = P_Age_group18_24 / _SUM_;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = P_Age_group0_17 / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = .;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = .;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = .;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = .;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 0.20454545454545;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0.20454545454545;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 0.20454545454545;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 0.19047619047619;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0.19588744588744;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *****************************;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Age_group ;
MPRINT(EM_DIAGRAM):   *** ******************************;
MPRINT(EM_DIAGRAM):   IF MISSING( Age_group85_ ) THEN R_Age_group85_ = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Age_group85_ = Age_group85_ - P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age_group65_84 ) THEN R_Age_group65_84 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Age_group65_84 = Age_group65_84 - P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age_group25_44 ) THEN R_Age_group25_44 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Age_group25_44 = Age_group25_44 - P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age_group18_24 ) THEN R_Age_group18_24 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Age_group18_24 = Age_group18_24 - P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age_group0_17 ) THEN R_Age_group0_17 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Age_group0_17 = Age_group0_17 - P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_Age_group AND U_Age_group ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   I_Age_group = "85+                " ;
MPRINT(EM_DIAGRAM):   U_Age_group = "85+                " ;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Age_group65_84 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   I_Age_group = "65-84              " ;
MPRINT(EM_DIAGRAM):   U_Age_group = "65-84              " ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Age_group25_44 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   I_Age_group = "25-44              " ;
MPRINT(EM_DIAGRAM):   U_Age_group = "25-44              " ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Age_group18_24 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   I_Age_group = "18-24              " ;
MPRINT(EM_DIAGRAM):   U_Age_group = "18-24              " ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Age_group0_17 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   I_Age_group = "0-17               " ;
MPRINT(EM_DIAGRAM):   U_Age_group = "0-17               " ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop S_OG_Cases_in_Thousands S_Projected_Sum_Pop H11 H12 H13 H14 H15 ;
MPRINT(EM_DIAGRAM):   run;
41890      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
41891      quit;
41892      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
41893      filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41894      *------------------------------------------------------------*;
41895      * Neural: Scoring VALIDATE data;
41896      *------------------------------------------------------------*;
41897      data EMWS1.Neural_VALIDATE
41898      / view=EMWS1.Neural_VALIDATE
41899      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_VALIDATE / view=EMWS1.Neural_VALIDATE ;
41900      set EMWS1.Part3_VALIDATE
41901      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part3_VALIDATE ;
41902      %inc emflow;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Age_group $ 19 I_Age_group $ 19 U_Age_group $ 19 ;
MPRINT(EM_DIAGRAM):   label S_OG_Cases_in_Thousands = 'Standard: OG_Cases_in_Thousands' ;
MPRINT(EM_DIAGRAM):   label S_Projected_Sum_Pop = 'Standard: Projected_Sum_Pop' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label I_Age_group = 'Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label F_Age_group = 'From: Age_group' ;
MPRINT(EM_DIAGRAM):   label U_Age_group = 'Unnormalized Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label P_Age_group85_ = 'Predicted: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label R_Age_group85_ = 'Residual: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label P_Age_group65_84 = 'Predicted: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label R_Age_group65_84 = 'Residual: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label P_Age_group25_44 = 'Predicted: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label R_Age_group25_44 = 'Residual: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label P_Age_group18_24 = 'Predicted: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label R_Age_group18_24 = 'Residual: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label P_Age_group0_17 = 'Predicted: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label R_Age_group0_17 = 'Residual: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( OG_Cases_in_Thousands , Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_OG_Cases_in_Thousands = -0.63459664513109 + 0.00004618214454 * OG_Cases_in_Thousands ;
MPRINT(EM_DIAGRAM):   S_Projected_Sum_Pop = -1.6917760112809 + 1.2200486734119E-6 * Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( OG_Cases_in_Thousands ) THEN S_OG_Cases_in_Thousands = . ;
MPRINT(EM_DIAGRAM):   ELSE S_OG_Cases_in_Thousands = -0.63459664513109 + 0.00004618214454 * OG_Cases_in_Thousands ;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN S_Projected_Sum_Pop = . ;
MPRINT(EM_DIAGRAM):   ELSE S_Projected_Sum_Pop = -1.6917760112809 + 1.2200486734119E-6 * Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = 0.76453864537454 * S_OG_Cases_in_Thousands + -4.96385161058997 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   H12 = 0.3097251533603 * S_OG_Cases_in_Thousands + -0.594616452979 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   H13 = 1.001352052502 * S_OG_Cases_in_Thousands + -3.81399410249906 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   H14 = -2.90241534494368 * S_OG_Cases_in_Thousands + -2.245237780565 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   H15 = -0.4057073628923 * S_OG_Cases_in_Thousands + -5.91678440126499 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   H11 = -6.02332729328379 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = 1.67996942875322 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = -1.27147330976278 + H13 ;
MPRINT(EM_DIAGRAM):   H14 = 3.07275869578323 + H14 ;
MPRINT(EM_DIAGRAM):   H15 = 2.84950159675774 + H15 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node Age_group ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   drop Age_group85_ Age_group65_84 Age_group25_44 Age_group18_24 Age_group0_17 ;
MPRINT(EM_DIAGRAM):   label F_Age_group = 'From: Age_group' ;
MPRINT(EM_DIAGRAM):   length F_Age_group $ 19;
MPRINT(DMNORMCP):   F_Age_group=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   Age_group85_ = 0;
MPRINT(EM_DIAGRAM):   Age_group65_84 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group18_24 = 0;
MPRINT(EM_DIAGRAM):   Age_group0_17 = 0;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   Age_group85_ = .;
MPRINT(EM_DIAGRAM):   Age_group65_84 = .;
MPRINT(EM_DIAGRAM):   Age_group25_44 = .;
MPRINT(EM_DIAGRAM):   Age_group18_24 = .;
MPRINT(EM_DIAGRAM):   Age_group0_17 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_Age_group = '25-44' then do;
MPRINT(EM_DIAGRAM):   Age_group25_44 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '65-84' then do;
MPRINT(EM_DIAGRAM):   Age_group65_84 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '85+' then do;
MPRINT(EM_DIAGRAM):   Age_group85_ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '18-24' then do;
MPRINT(EM_DIAGRAM):   Age_group18_24 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '0-17' then do;
MPRINT(EM_DIAGRAM):   Age_group0_17 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Age_group85_ = .;
MPRINT(EM_DIAGRAM):   Age_group65_84 = .;
MPRINT(EM_DIAGRAM):   Age_group25_44 = .;
MPRINT(EM_DIAGRAM):   Age_group18_24 = .;
MPRINT(EM_DIAGRAM):   Age_group0_17 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 7.43616755483059 * H11 + -0.60345012237028 * H12 + 7.09617287325171 * H13 + -0.55447843924182 * H14 + 0.25054821943193 * H15 ;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0.72053872980745 * H11 + -1.92023706556335 * H12 + 0.23893655440879 * H13 + -6.15899461570346 * H14 + -3.19893085845603 * H15 ;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 1.03975079539109 * H11 + -2.27374219652146 * H12 + 0.21418440526117 * H13 + 3.88385039849894 * H14 + -7.26411534255337 * H15 ;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 1.11496635314694 * H11 + 0.86659642025819 * H12 + 7.17506239611277 * H13 + 0.09076644290866 * H14 + 0.49837696874627 * H15 ;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = P_Age_group85_ + 0.04546483780756 * S_OG_Cases_in_Thousands + -5.22097969305735 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = P_Age_group65_84 + 1.74827655859679 * S_OG_Cases_in_Thousands + 3.12017287293122 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = P_Age_group25_44 + -1.54094188978032 * S_OG_Cases_in_Thousands + 3.21868764169841 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = P_Age_group18_24 + -0.72909828664336 * S_OG_Cases_in_Thousands + -1.19037744543653 * S_Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = -0.34657015870063 + P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = -1.16407786251628 + P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = -1.57576346659085 + P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = -1.23055686466775 + P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Age_group85_ , P_Age_group65_84 , P_Age_group25_44 , P_Age_group18_24 , P_Age_group0_17 );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = EXP(P_Age_group85_ - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = EXP(P_Age_group65_84 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = EXP(P_Age_group25_44 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = EXP(P_Age_group18_24 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = EXP(P_Age_group0_17 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = P_Age_group85_ / _SUM_;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = P_Age_group65_84 / _SUM_;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = P_Age_group25_44 / _SUM_;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = P_Age_group18_24 / _SUM_;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = P_Age_group0_17 / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = .;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = .;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = .;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = .;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 0.20454545454545;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0.20454545454545;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 0.20454545454545;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 0.19047619047619;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0.19588744588744;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *****************************;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Age_group ;
MPRINT(EM_DIAGRAM):   *** ******************************;
MPRINT(EM_DIAGRAM):   IF MISSING( Age_group85_ ) THEN R_Age_group85_ = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Age_group85_ = Age_group85_ - P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age_group65_84 ) THEN R_Age_group65_84 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Age_group65_84 = Age_group65_84 - P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age_group25_44 ) THEN R_Age_group25_44 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Age_group25_44 = Age_group25_44 - P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age_group18_24 ) THEN R_Age_group18_24 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Age_group18_24 = Age_group18_24 - P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age_group0_17 ) THEN R_Age_group0_17 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_Age_group0_17 = Age_group0_17 - P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_Age_group AND U_Age_group ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   I_Age_group = "85+                " ;
MPRINT(EM_DIAGRAM):   U_Age_group = "85+                " ;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Age_group65_84 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   I_Age_group = "65-84              " ;
MPRINT(EM_DIAGRAM):   U_Age_group = "65-84              " ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Age_group25_44 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   I_Age_group = "25-44              " ;
MPRINT(EM_DIAGRAM):   U_Age_group = "25-44              " ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Age_group18_24 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   I_Age_group = "18-24              " ;
MPRINT(EM_DIAGRAM):   U_Age_group = "18-24              " ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Age_group0_17 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   I_Age_group = "0-17               " ;
MPRINT(EM_DIAGRAM):   U_Age_group = "0-17               " ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop S_OG_Cases_in_Thousands S_Projected_Sum_Pop H11 H12 H13 H14 H15 ;
42182      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
42183      quit;
42184      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
42185      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42186      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
42187      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural_TRAIN out=WORK.M3R0YHTN noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3R0YHTN;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3R0YHTN(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3R0YHTN;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3R0YHTN;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M02H961Y NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M02H961Y;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M02H961Y;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KCMNJM(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M02H961Y;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M02H961Y;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M02H961Y;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M02H961Y;
MPRINT(EMADVISECOLUMNS):   set WORK.M02H961Y;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("AGE_GROUP") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
42533      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
42534      set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
42535      where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
42536      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE (DATA='Neural') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

42537      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMINFO;
42538      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
42539      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
42540      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
42544      run;
42545      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
42546      set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
42547      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

42548      proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
42549      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
42550      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

42551      proc sort data = EMWS1.Ids3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
42552      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
42553      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.IDS3_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

42554      proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
42555      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
42556      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

42557      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
42558      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
42559      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
42560      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

42561      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
42562      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
42563      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
42564      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
