*------------------------------------------------------------*
User:                student
Date:                November 19, 2019
Time:                15:55:54
Site:                70082322
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:55:51" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 19, 2019
Time:                15:55:51
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O21718BK "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O21718BK new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:55:51" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:55:51" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
23230      proc freq data=EMWS1.MdlComp2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.MdlComp2_VariableSet noprint;
23231      table ROLE*LEVEL/out=WORK.MdlComp2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.MdlComp2META;
23232      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.MDLCOMP2_VARIABLESET.
NOTE: The data set WORK.MDLCOMP2META has 1 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
23233      proc print data=WORK.MdlComp2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.MdlComp2META label noobs;
23234      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
23235      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
23236      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
23237      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
23238      run;
 
NOTE: There were 1 observations read from the data set WORK.MDLCOMP2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23239      title10;
MPRINT(EM_DIAGRAM):   title10;
23240      %let _hpflow = 0;
23241      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
23242      set EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO;
23243      where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
23244      call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
23245      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE key='HPDMSAMPLE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23246      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
23247      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
23248      where upcase(NODEID) = upcase("Neural2");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural2");
23249      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
23250      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL2';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23251      data EMWS1.MdlComp2_EMRANK;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp2_EMRANK;
23252      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
23253      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
23253    ! TARGETLABEL =
23254         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGETLABEL = "Target Label";
23255      retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network" TARGETLABEL "";
23256      set EMWS1.Neural2_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMRANK;
23257      where upcase(TARGET) = upcase("Population_in_thousands");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Population_in_thousands");
23258      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL2_EMRANK.
      WHERE UPCASE(TARGET)='POPULATION_IN_THOUSANDS';
NOTE: The data set EMWS1.MDLCOMP2_EMRANK has 40 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23259      data EMWS1.MdlComp2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp2_EMSCOREDIST;
23260      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
23261      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
23261    ! TARGETLABEL =
23262         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGETLABEL = "Target Label";
23263      retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network" TARGETLABEL "";
23264      set EMWS1.Neural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMSCOREDIST;
23265      where upcase(TARGET) = upcase("Population_in_thousands");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Population_in_thousands");
23266      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 38 observations read from the data set EMWS1.NEURAL2_EMSCOREDIST.
      WHERE UPCASE(TARGET)='POPULATION_IN_THOUSANDS';
NOTE: The data set EMWS1.MDLCOMP2_EMSCOREDIST has 38 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23267      data WORK.Neural2_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Neural2_OUTFIT;
23268      set EMWS1.Neural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMOUTFIT;
23269      where TARGET = "Population_in_thousands";
MPRINT(EM_DIAGRAM):   where TARGET = "Population_in_thousands";
23270      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMOUTFIT.
      WHERE TARGET='Population_in_thousands';
NOTE: The data set WORK.NEURAL2_OUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE (TARGET='Population_in_thousands') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO433NSDQ1 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE (TARGET='Population_in_thousands') and (KEY='DECDATA');
NOTE: The data set WORK.EMINFO433NSDQ1 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
23271      data WORK.Neural2_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Neural2_OUTFIT;
23272      set WORK.Neural2_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Neural2_OUTFIT;
23273      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.NEURAL2_OUTFIT.
NOTE: The data set WORK.NEURAL2_OUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23274      data EMWS1.MdlComp2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp2_EMOUTFIT;
23275      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
23276      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
23276    ! TARGETLABEL =
23277         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGETLABEL = "Target Label";
23278      retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network" TARGETLABEL "";
23279      set WORK.Neural2_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Neural2_OUTFIT;
23280      where upcase(TARGET) = upcase("Population_in_thousands");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Population_in_thousands");
23281      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.NEURAL2_OUTFIT.
      WHERE UPCASE(TARGET)='POPULATION_IN_THOUSANDS';
NOTE: The data set EMWS1.MDLCOMP2_EMOUTFIT has 1 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23282      data EMWS1.MdlComp2_EMRESIDUAL;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp2_EMRESIDUAL;
23283      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
23284      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
23284    ! TARGETLABEL =
23285         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGETLABEL = "Target Label";
23286      retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network" TARGETLABEL "";
23287      set EMWS1.Neural2_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMRESIDUAL;
23288      where upcase(TARGET) = upcase("Population_in_thousands");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Population_in_thousands");
23289      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL2_EMRESIDUAL.
      WHERE UPCASE(TARGET)='POPULATION_IN_THOUSANDS';
NOTE: The data set EMWS1.MDLCOMP2_EMRESIDUAL has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* "Compute assessment statistics"
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural2");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural2" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids4_Population_in_th_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural2_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Population_in_thousands") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Population_in_thousands") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Population_in_thousands _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Population_in_thousands") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Population_in_thousands") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Population_in_thousands Population_in_thousands _tmpfreqvar_ WHERE = (Population_in_thousands > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Population_in_thousands ;
MPRINT(EM_ASSESS):   VAR Population_in_thousands ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural2" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural2" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids4_Population_in_th_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural2_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Population_in_thousands") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Population_in_thousands") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Population_in_thousands _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Population_in_thousands") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Population_in_thousands") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Population_in_thousands Population_in_thousands _tmpfreqvar_ WHERE = (Population_in_thousands > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Population_in_thousands ;
MPRINT(EM_ASSESS):   VAR Population_in_thousands ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
23341      proc sort data=EMWS1.MdlComp2_EMOUTFIT NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.MdlComp2_EMOUTFIT NOTHREADS;
23342      by model target;
MPRINT(EM_DIAGRAM):   by model target;
23343      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP2_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP2_EMOUTFIT has 1 observations and 39 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23344      data EMWS1.MdlComp2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp2_EMOUTFIT;
23345      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200 _CRITERION_ 8;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200 _CRITERION_ 8;
23346      set EMWS1.MdlComp2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_EMOUTFIT;
23347      label _CRITERION_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_selectioncriterion_vlabel ,  NOQUOTE, %nrbquote(Valid: Average Squared Error)))";
MPRINT(EM_DIAGRAM):   label _CRITERION_ = "Selection Criterion: Valid: Average Squared Error";
23348      _CRITERION_ = _VASE_;
MPRINT(EM_DIAGRAM):   _CRITERION_ = _VASE_;
23349      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP2_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP2_EMOUTFIT has 1 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23350      data EMWS1.MdlComp2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp2_EMOUTFIT;
23351      length USE $1;
MPRINT(EM_DIAGRAM):   length USE $1;
23352      label USE= "%sysfunc(sasmsg(sashelp.dmine, rpt_selmodel_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label USE= "Selected Model";
23353      set EMWS1.MdlComp2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_EMOUTFIT;
23354      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable USE is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP2_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP2_EMOUTFIT has 1 observations and 41 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23355      proc sort data = EMWS1.MdlComp2_EMOUTFIT NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.MdlComp2_EMOUTFIT NOTHREADS;
23356      by
23357      _VASE_
23358      _VMISC_ _ASE_ _MISC_;
MPRINT(EM_DIAGRAM):   by _VASE_ _VMISC_ _ASE_ _MISC_;
23359      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP2_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP2_EMOUTFIT has 1 observations and 41 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23360      %let EM_AUTOMODEL = %str();
23361      data EMWS1.MdlComp2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp2_EMOUTFIT;
23362      set EMWS1.MdlComp2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_EMOUTFIT;
23363      drop found;
MPRINT(EM_DIAGRAM):   drop found;
23364      retain found 0;
MPRINT(EM_DIAGRAM):   retain found 0;
23365      if found = 0 and _VASE_ ne . then do;
MPRINT(EM_DIAGRAM):   if found = 0 and _VASE_ ne . then do;
23366      use = 'Y';
MPRINT(EM_DIAGRAM):   use = 'Y';
23367      found = 1;
MPRINT(EM_DIAGRAM):   found = 1;
23368      call symput('EM_AUTOMODEL', model);
MPRINT(EM_DIAGRAM):   call symput('EM_AUTOMODEL', model);
23369      end;
MPRINT(EM_DIAGRAM):   end;
23370      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP2_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP2_EMOUTFIT has 1 observations and 41 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23371      title ' ';
MPRINT(EM_DIAGRAM):    title ' ';
23372      proc print data=EMWS1.MdlComp2_EMOUTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.MdlComp2_EMOUTFIT noobs label;
23373      var
23374      USE
23375      MODEL
23376      MODELDESCRIPTION
23377      _VASE_
23378      _ASE_
23379      _MISC_
23380      ;
MPRINT(EM_DIAGRAM):   var USE MODEL MODELDESCRIPTION _VASE_ _ASE_ _MISC_ ;
23381      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title,        NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Fit Statistics";
23382      title10 "Model Selection based on Valid: Average Squared Error (_VASE_)";
MPRINT(EM_DIAGRAM):   title10 "Model Selection based on Valid: Average Squared Error (_VASE_)";
MPRINT(EM_DIAGRAM):   run;
23383      run;
 
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP2_EMOUTFIT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23384      title9;
MPRINT(EM_DIAGRAM):   title9;
23385      title10;
MPRINT(EM_DIAGRAM):   title10;
23386      proc transpose data=EMWS1.MdlComp2_EMOUTFIT out= work.modelstats(rename=(_LABEL_=Label _NAME_=STAT));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.MdlComp2_EMOUTFIT out= work.modelstats(rename=(_LABEL_=Label _NAME_=STAT));
23387      ID model;
MPRINT(EM_DIAGRAM):   ID model;
23388      by target targetLabel;
MPRINT(EM_DIAGRAM):   by target targetLabel;
23389      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP2_EMOUTFIT.
NOTE: The data set WORK.MODELSTATS has 35 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23390      data work.modelstats;
MPRINT(EM_DIAGRAM):   data work.modelstats;
23391      set work.modelstats;
MPRINT(EM_DIAGRAM):   set work.modelstats;
23392      if substr(STAT, 1, 2) = '_V' or STAT='VKS' then do;
MPRINT(EM_DIAGRAM):   if substr(STAT, 1, 2) = '_V' or STAT='VKS' then do;
23393      NumRole=2;
MPRINT(EM_DIAGRAM):   NumRole=2;
23394      end;
MPRINT(EM_DIAGRAM):   end;
23395      else if substr(STAT, 1, 2) = '_T' or STAT='TKS' then do;
MPRINT(EM_DIAGRAM):   else if substr(STAT, 1, 2) = '_T' or STAT='TKS' then do;
23396      NumRole=3;
MPRINT(EM_DIAGRAM):   NumRole=3;
23397      end;
MPRINT(EM_DIAGRAM):   end;
23398      else if substr(STAT, 1, 1) = '_' or STAT in('KS', 'BINNED_KS_PROB_CUTOFF') then do;
MPRINT(EM_DIAGRAM):   else if substr(STAT, 1, 1) = '_' or STAT in('KS', 'BINNED_KS_PROB_CUTOFF') then do;
23399      NumRole=1;
MPRINT(EM_DIAGRAM):   NumRole=1;
23400      end;
MPRINT(EM_DIAGRAM):   end;
23401      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.MODELSTATS.
NOTE: The data set WORK.MODELSTATS has 35 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23402      proc sort data=work.modelstats out=work.modelstats;
MPRINT(EM_DIAGRAM):   proc sort data=work.modelstats out=work.modelstats;
23403      by NumRole STAT;
MPRINT(EM_DIAGRAM):   by NumRole STAT;
23404      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.MODELSTATS.
NOTE: The data set WORK.MODELSTATS has 35 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23405      proc format;
MPRINT(EM_DIAGRAM):   proc format;
23406      value RoleFmt 1='Train' 2='Valid' 3='Test';
MPRINT(EM_DIAGRAM):   value RoleFmt 1='Train' 2='Valid' 3='Test';
NOTE: Format ROLEFMT has been output.
MPRINT(EM_DIAGRAM):   run;
23407      run;
 
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23408      proc print data= work.modelstats(drop=STAT target targetLabel) noobs label;
MPRINT(EM_DIAGRAM):   proc print data= work.modelstats(drop=STAT target targetLabel) noobs label;
23409      label Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_statistics_vlabel, NOQUOTE))" NumRole= "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "Statistics" NumRole= "Data Role";
23410      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_fittable_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Fit Statistics Table";
23411      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_target_title,   NOQUOTE, Population_in_thousands))";
MPRINT(EM_DIAGRAM):   title10 "Target: Population_in_thousands";
MPRINT(EM_DIAGRAM):   by NumRole;
MPRINT(EM_DIAGRAM):   format NumRole RoleFmt.;
MPRINT(EM_DIAGRAM):   run;
23412      by NumRole;
23413      format NumRole RoleFmt.;
23414      run;
 
NOTE: There were 35 observations read from the data set WORK.MODELSTATS.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23415      title9;
MPRINT(EM_DIAGRAM):   title9;
23416      title10;
MPRINT(EM_DIAGRAM):   title10;
23417      data EMWS1.MdlComp2_COMPAREFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp2_COMPAREFIT;
23418      length DataRole Target $32 targetlabel $200;
MPRINT(EM_DIAGRAM):   length DataRole Target $32 targetlabel $200;
23419      label DataRole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" STAT = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_vlabel,   NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_statlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DataRole = "Data Role" STAT = "Fit Statistics" LABEL = "Statistics Label";
23420      set work.modelstats;
MPRINT(EM_DIAGRAM):   set work.modelstats;
23421      DataRole = strip(put(NumRole, Rolefmt.));
MPRINT(EM_DIAGRAM):   DataRole = strip(put(NumRole, Rolefmt.));
23422      drop NumRole;
MPRINT(EM_DIAGRAM):   drop NumRole;
23423      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.MODELSTATS.
NOTE: The data set EMWS1.MDLCOMP2_COMPAREFIT has 35 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23424      %macro ReportFit;
23425      proc transpose data= EMWS1.MdlComp2_EMOUTFIT(obs=1) out=tempFit;
23426      run;
23427      data _null_;
23428      set tempfit end=eof;
23429      retain statCount 0;
23430      if substr(_NAME_,1,2) ^in('_V', '_T', 'TK', 'VK') then do;
23431      statCount + 1;
23432      call symput('statName'!!strip(put(statCount,best.)), _NAME_);
23433      call symput('statLabel'!!strip(put(statCount,best.)), scan(_LABEL_,2, ':'));
23434      end;
23435      if eof then do;
23436      call symput('statCount', strip(put(statCount,best.)));
23437      end;
23438      run;
23439      data EMWS1.MdlComp2_EMREPORTFIT;
23440      set EMWS1.MdlComp2_EMOUTFIT;
23441      length FitStat $41 Label $40;
23442      label FitStat = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_vlabel,   NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_statlabel_vlabel, NOQUOTE))";
23443      %do i=1 %to &statCount;
23444      FitStat="&&StatName&i";
23445      Label="&&StatLabel&i";
23446      Train =&&StatName&i;
23447      %if &&StatName&i= KS %then %do;
23448      Validate = VKS;
23449      Test = TKS;
23450      %end;
23451      %else %if &&StatName&i= BINNED_KS_PROB_CUTOFF %then %do;
23452      Validate = _VBINNED_KS_PROB_CUTOFF_;
23453      Test = _TBINNED_KS_PROB_CUTOFF_;
23454      %end;
23455      %else %do;
23456      %let VstatName= _V%substr(&&StatName&i,2);
23457      %let TstatName= _T%substr(&&StatName&i,2);
23458      Validate=&VStatName;
23459      Test=&TStatName;
23460      %end;
23461      output;
23462      %end;
23463      keep Parent Model Target TargetLabel FitStat Label Train Validate Test;
23464      run;
23465      %mend;
23466      %reportFit;
MPRINT(EM_DIAGRAM):
MPRINT(REPORTFIT):   proc transpose data= EMWS1.MdlComp2_EMOUTFIT(obs=1) out=tempFit;
MPRINT(REPORTFIT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP2_EMOUTFIT.
NOTE: The data set WORK.TEMPFIT has 35 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORTFIT):   data _null_;
MPRINT(REPORTFIT):   set tempfit end=eof;
MPRINT(REPORTFIT):   retain statCount 0;
MPRINT(REPORTFIT):   if substr(_NAME_,1,2) ^in('_V', '_T', 'TK', 'VK') then do;
MPRINT(REPORTFIT):   statCount + 1;
MPRINT(REPORTFIT):   call symput('statName'!!strip(put(statCount,best.)), _NAME_);
MPRINT(REPORTFIT):   call symput('statLabel'!!strip(put(statCount,best.)), scan(_LABEL_,2, ':'));
MPRINT(REPORTFIT):   end;
MPRINT(REPORTFIT):   if eof then do;
MPRINT(REPORTFIT):   call symput('statCount', strip(put(statCount,best.)));
MPRINT(REPORTFIT):   end;
MPRINT(REPORTFIT):   run;
 
NOTE: There were 35 observations read from the data set WORK.TEMPFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORTFIT):   data EMWS1.MdlComp2_EMREPORTFIT;
MPRINT(REPORTFIT):   set EMWS1.MdlComp2_EMOUTFIT;
MPRINT(REPORTFIT):   length FitStat $41 Label $40;
MPRINT(REPORTFIT):   label FitStat = "Fit Statistics" LABEL = "Statistics Label";
MPRINT(REPORTFIT):   FitStat="_CRITERION_";
MPRINT(REPORTFIT):   Label=" Valid";
MPRINT(REPORTFIT):   Train =_CRITERION_;
MPRINT(REPORTFIT):   Validate=_VCRITERION_;
MPRINT(REPORTFIT):   Test=_TCRITERION_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DFT_      ";
MPRINT(REPORTFIT):   Label=" Total Degrees of Freedom                  ";
MPRINT(REPORTFIT):   Train =_DFT_ ;
MPRINT(REPORTFIT):   Validate=_VDFT_;
MPRINT(REPORTFIT):   Test=_TDFT_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DFE_      ";
MPRINT(REPORTFIT):   Label=" Degrees of Freedom for Error              ";
MPRINT(REPORTFIT):   Train =_DFE_ ;
MPRINT(REPORTFIT):   Validate=_VDFE_;
MPRINT(REPORTFIT):   Test=_TDFE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DFM_      ";
MPRINT(REPORTFIT):   Label=" Model Degrees of Freedom                  ";
MPRINT(REPORTFIT):   Train =_DFM_ ;
MPRINT(REPORTFIT):   Validate=_VDFM_;
MPRINT(REPORTFIT):   Test=_TDFM_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_NW_       ";
MPRINT(REPORTFIT):   Label=" Number of Estimated Weights               ";
MPRINT(REPORTFIT):   Train =_NW_ ;
MPRINT(REPORTFIT):   Validate=_VNW_;
MPRINT(REPORTFIT):   Test=_TNW_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_AIC_      ";
MPRINT(REPORTFIT):   Label=" Akaike's Information Criterion            ";
MPRINT(REPORTFIT):   Train =_AIC_ ;
MPRINT(REPORTFIT):   Validate=_VAIC_;
MPRINT(REPORTFIT):   Test=_TAIC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_SBC_      ";
MPRINT(REPORTFIT):   Label=" Schwarz's Bayesian Criterion              ";
MPRINT(REPORTFIT):   Train =_SBC_ ;
MPRINT(REPORTFIT):   Validate=_VSBC_;
MPRINT(REPORTFIT):   Test=_TSBC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_ASE_      ";
MPRINT(REPORTFIT):   Label=" Average Squared Error                     ";
MPRINT(REPORTFIT):   Train =_ASE_ ;
MPRINT(REPORTFIT):   Validate=_VASE_;
MPRINT(REPORTFIT):   Test=_TASE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_MAX_      ";
MPRINT(REPORTFIT):   Label=" Maximum Absolute Error                    ";
MPRINT(REPORTFIT):   Train =_MAX_ ;
MPRINT(REPORTFIT):   Validate=_VMAX_;
MPRINT(REPORTFIT):   Test=_TMAX_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DIV_      ";
MPRINT(REPORTFIT):   Label=" Divisor for ASE                           ";
MPRINT(REPORTFIT):   Train =_DIV_ ;
MPRINT(REPORTFIT):   Validate=_VDIV_;
MPRINT(REPORTFIT):   Test=_TDIV_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_NOBS_     ";
MPRINT(REPORTFIT):   Label=" Sum of Frequencies                        ";
MPRINT(REPORTFIT):   Train =_NOBS_ ;
MPRINT(REPORTFIT):   Validate=_VNOBS_;
MPRINT(REPORTFIT):   Test=_TNOBS_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RASE_     ";
MPRINT(REPORTFIT):   Label=" Root Average Squared Error                ";
MPRINT(REPORTFIT):   Train =_RASE_ ;
MPRINT(REPORTFIT):   Validate=_VRASE_;
MPRINT(REPORTFIT):   Test=_TRASE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_SSE_      ";
MPRINT(REPORTFIT):   Label=" Sum of Squared Errors                     ";
MPRINT(REPORTFIT):   Train =_SSE_ ;
MPRINT(REPORTFIT):   Validate=_VSSE_;
MPRINT(REPORTFIT):   Test=_TSSE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_SUMW_     ";
MPRINT(REPORTFIT):   Label=" Sum of Case Weights Times Freq            ";
MPRINT(REPORTFIT):   Train =_SUMW_ ;
MPRINT(REPORTFIT):   Validate=_VSUMW_;
MPRINT(REPORTFIT):   Test=_TSUMW_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_FPE_      ";
MPRINT(REPORTFIT):   Label=" Final Prediction Error                    ";
MPRINT(REPORTFIT):   Train =_FPE_ ;
MPRINT(REPORTFIT):   Validate=_VFPE_;
MPRINT(REPORTFIT):   Test=_TFPE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_MSE_      ";
MPRINT(REPORTFIT):   Label=" Mean Squared Error                        ";
MPRINT(REPORTFIT):   Train =_MSE_ ;
MPRINT(REPORTFIT):   Validate=_VMSE_;
MPRINT(REPORTFIT):   Test=_TMSE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RFPE_     ";
MPRINT(REPORTFIT):   Label=" Root Final Prediction Error               ";
MPRINT(REPORTFIT):   Train =_RFPE_ ;
MPRINT(REPORTFIT):   Validate=_VRFPE_;
MPRINT(REPORTFIT):   Test=_TRFPE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RMSE_     ";
MPRINT(REPORTFIT):   Label=" Root Mean Squared Error                   ";
MPRINT(REPORTFIT):   Train =_RMSE_ ;
MPRINT(REPORTFIT):   Validate=_VRMSE_;
MPRINT(REPORTFIT):   Test=_TRMSE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_AVERR_    ";
MPRINT(REPORTFIT):   Label=" Average Error Function                    ";
MPRINT(REPORTFIT):   Train =_AVERR_ ;
MPRINT(REPORTFIT):   Validate=_VAVERR_;
MPRINT(REPORTFIT):   Test=_TAVERR_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_ERR_      ";
MPRINT(REPORTFIT):   Label=" Error Function                            ";
MPRINT(REPORTFIT):   Train =_ERR_ ;
MPRINT(REPORTFIT):   Validate=_VERR_;
MPRINT(REPORTFIT):   Test=_TERR_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_MISC_     ";
MPRINT(REPORTFIT):   Label=" Misclassification Rate                    ";
MPRINT(REPORTFIT):   Train =_MISC_ ;
MPRINT(REPORTFIT):   Validate=_VMISC_;
MPRINT(REPORTFIT):   Test=_TMISC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_WRONG_    ";
MPRINT(REPORTFIT):   Label=" Number of Wrong Classifications           ";
MPRINT(REPORTFIT):   Train =_WRONG_ ;
MPRINT(REPORTFIT):   Validate=_VWRONG_;
MPRINT(REPORTFIT):   Test=_TWRONG_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   keep Parent Model Target TargetLabel FitStat Label Train Validate Test;
MPRINT(REPORTFIT):   run;
 
NOTE: Variable _VCRITERION_ is uninitialized.
NOTE: Variable _TCRITERION_ is uninitialized.
NOTE: Variable _VDFT_ is uninitialized.
NOTE: Variable _TDFT_ is uninitialized.
NOTE: Variable _VDFE_ is uninitialized.
NOTE: Variable _TDFE_ is uninitialized.
NOTE: Variable _VDFM_ is uninitialized.
NOTE: Variable _TDFM_ is uninitialized.
NOTE: Variable _VNW_ is uninitialized.
NOTE: Variable _TNW_ is uninitialized.
NOTE: Variable _VAIC_ is uninitialized.
NOTE: Variable _TAIC_ is uninitialized.
NOTE: Variable _VSBC_ is uninitialized.
NOTE: Variable _TSBC_ is uninitialized.
NOTE: Variable _TASE_ is uninitialized.
NOTE: Variable _TMAX_ is uninitialized.
NOTE: Variable _TDIV_ is uninitialized.
NOTE: Variable _TNOBS_ is uninitialized.
NOTE: Variable _TRASE_ is uninitialized.
NOTE: Variable _TSSE_ is uninitialized.
NOTE: Variable _TSUMW_ is uninitialized.
NOTE: Variable _VFPE_ is uninitialized.
NOTE: Variable _TFPE_ is uninitialized.
NOTE: Variable _TMSE_ is uninitialized.
NOTE: Variable _VRFPE_ is uninitialized.
NOTE: Variable _TRFPE_ is uninitialized.
NOTE: Variable _TRMSE_ is uninitialized.
NOTE: Variable _TAVERR_ is uninitialized.
NOTE: Variable _TERR_ is uninitialized.
NOTE: Variable _TMISC_ is uninitialized.
NOTE: Variable _TWRONG_ is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP2_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP2_EMREPORTFIT has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
23467      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
23468      modify MdlComp2_EMRANK;
MPRINT(EM_DIAGRAM):   modify MdlComp2_EMRANK;
23469      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" TARGET =
23470         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   run;
23471      run;
 
NOTE: MODIFY was successful for EMWS1.MDLCOMP2_EMRANK.DATA.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
23472      proc sort data=EMWS1.MdlComp2_EMRANK NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp2_EMRANK NOTHREADS;
23473      by descending model target;
MPRINT(EM_DIAGRAM):   by descending model target;
23474      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.MDLCOMP2_EMRANK.
NOTE: The data set EMWS1.MDLCOMP2_EMRANK has 40 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23475      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
23476      modify MdlComp2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify MdlComp2_EMSCOREDIST;
23477      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" TARGET =
23478         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   run;
23479      run;
 
NOTE: MODIFY was successful for EMWS1.MDLCOMP2_EMSCOREDIST.DATA.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
23480      proc sort data=EMWS1.MdlComp2_EMSCOREDIST NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp2_EMSCOREDIST NOTHREADS;
23481      by descending model target;
MPRINT(EM_DIAGRAM):   by descending model target;
23482      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 38 observations read from the data set EMWS1.MDLCOMP2_EMSCOREDIST.
NOTE: The data set EMWS1.MDLCOMP2_EMSCOREDIST has 38 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:55:53" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 19, 2019
Time:                15:55:53
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3X378SS "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3X378SS new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
23584      /* Generate assessment metadata, which will be used to generate assessment data step */
23585      /* code, such as retrieving names of temporary variables and summary variables,      */
23586      /* labels, etc.  It is used in almost all the assessment computations such as lift,  */
23587      /* roc, index, scoreDist and could be thought as a global variable in assessment     */
23588      /* computation.                                                                      */
23589      data work.ASSESS_1HCRE79_assessMeta_GlYFLK;
MPRINT(EM_DIAGRAM):    data work.ASSESS_1HCRE79_assessMeta_GlYFLK;
23590      length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32
23590    ! RESULT_MAX_LABEL
23591         $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX
$32 RESULT_MAX_LABEL $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
23592      VARIABLE = "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VARIABLE = "Population_in_thousands";
23593      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
23594      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
23595      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
23596      LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
23597      PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
23598      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
23599      LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
23600      GEN_VAR_IN_TEMP_DATA = "Population_in_thousands";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "Population_in_thousands";
23601      RESULT_MEAN = "_targetMean_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_targetMean_";
23602      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Target";
23603      RESULT_MIN = "_targetMin_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_targetMin_";
23604      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Target";
23605      MIN_ADJUSTED = "Populati_minAdjusted_VJIwSPT2C";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "Populati_minAdjusted_VJIwSPT2C";
23606      RESULT_MAX = "_targetMax_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_targetMax_";
23607      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Target";
23608      MAX_ADJUSTED = "Populati_maxAdjusted_ySiMuKghc";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "Populati_maxAdjusted_ySiMuKghc";
23609      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
23610      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
23611      TEMPORARY_VARIABLE = "Population_in_th_VxgR_WraXQAh99A";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "Population_in_th_VxgR_WraXQAh99A";
23612      output;
MPRINT(EM_DIAGRAM):   output;
23613      VARIABLE = "P_Population_in_thousands";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_Population_in_thousands";
23614      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
23615      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
23616      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
23617      LEVEL = "";
MPRINT(EM_DIAGRAM):   LEVEL = "";
23618      PROPERTY = "PREDICTED";
MPRINT(EM_DIAGRAM):   PROPERTY = "PREDICTED";
23619      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
23620      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
23621      GEN_VAR_IN_TEMP_DATA = "P_Population_in_thousands";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_Population_in_thousands";
23622      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
23623      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Predicted";
23624      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
23625      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
23626      MIN_ADJUSTED = "P_Popula_minAdjusted_xdDVwWMB5";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_Popula_minAdjusted_xdDVwWMB5";
23627      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
23628      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
23629      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Predicted";
23630      MAX_ADJUSTED = "max_adjusted";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "max_adjusted";
23631      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
23632      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
23633      TEMPORARY_VARIABLE = "P_Population_in__SgyZU_K_iKD4iYG";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_Population_in__SgyZU_K_iKD4iYG";
23634      output;
MPRINT(EM_DIAGRAM):   output;
23635      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.ASSESS_1HCRE79_ASSESSMETA_GLYFLK has 2 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23636      /* Generate temporary dataset and obtain summary statistics such as total number of   */
23637      /* obserations, frequency of target.  However, summary statistics for class reporting */
23638      /* variabels are not computed here since if there exist class reporting variables,    */
23639      /* then PROC DMDB will be called. And there is no need to compute interval reporting  */
23640      /* summary statisitcs, if any.                                                        */
23641      data work.ASSESS_1HCRE79_normSD_XJVhRG(drop=
23642      _numberOfObservation_
23643      _intervalTargetMin_ _intervalTargetMax_
23644      )
23645      work.ASSESS_1HCRE79_meansAndTi_SGwhyM (keep=
23646      _numberOfObservation_
23647      _intervalTargetMin_ _intervalTargetMax_
23648      );
MPRINT(EM_DIAGRAM):    data work.ASSESS_1HCRE79_normSD_XJVhRG(drop= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ ) work.ASSESS_1HCRE79_meansAndTi_SGwhyM (keep= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ );
23649      set EMWS1.Neural2_TRAIN(
23650      where=(
23651      (Population_in_thousands ^= .)
23652      and (P_Population_in_thousands ^= .)
23653      )
23654      ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_TRAIN( where=( (Population_in_thousands ^= .) and (P_Population_in_thousands ^= .) ) ) end=_lastObservation_;
23655      keep frequency_HItYO7;
MPRINT(EM_DIAGRAM):   keep frequency_HItYO7;
23656      frequency_HItYO7 = 1;
MPRINT(EM_DIAGRAM):   frequency_HItYO7 = 1;
23657      keep Population_in_thousands;
MPRINT(EM_DIAGRAM):   keep Population_in_thousands;
23658      keep P_Population_in_thousands;
MPRINT(EM_DIAGRAM):   keep P_Population_in_thousands;
23659      output work.ASSESS_1HCRE79_normSD_XJVhRG;
MPRINT(EM_DIAGRAM):   output work.ASSESS_1HCRE79_normSD_XJVhRG;
23660      keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
23661      retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
23662      _numberOfObservation_ + frequency_HItYO7;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_HItYO7;
23663      keep _intervalTargetMin_ _intervalTargetMax_;
MPRINT(EM_DIAGRAM):   keep _intervalTargetMin_ _intervalTargetMax_;
23664      retain _intervalTargetMin_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMin_ .;
23665      retain _intervalTargetMax_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMax_ .;
23666      if (_n_ = 1) then do;
MPRINT(EM_DIAGRAM):   if (_n_ = 1) then do;
23667      _intervalTargetMin_ = P_Population_in_thousands;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Population_in_thousands;
23668      _intervalTargetMax_ = P_Population_in_thousands;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Population_in_thousands;
23669      end;
MPRINT(EM_DIAGRAM):   end;
23670      else do;
MPRINT(EM_DIAGRAM):   else do;
23671      if (_intervalTargetMin_ > P_Population_in_thousands) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMin_ > P_Population_in_thousands) then do;
23672      _intervalTargetMin_ = P_Population_in_thousands;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Population_in_thousands;
23673      end;
MPRINT(EM_DIAGRAM):   end;
23674      if (_intervalTargetMax_ < P_Population_in_thousands) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMax_ < P_Population_in_thousands) then do;
23675      _intervalTargetMax_ = P_Population_in_thousands;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Population_in_thousands;
23676      end;
MPRINT(EM_DIAGRAM):   end;
23677      end;
MPRINT(EM_DIAGRAM):   end;
23678      if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
23679      output work.ASSESS_1HCRE79_meansAndTi_SGwhyM;
MPRINT(EM_DIAGRAM):   output work.ASSESS_1HCRE79_meansAndTi_SGwhyM;
23680      end;
MPRINT(EM_DIAGRAM):   end;
23681      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 504 observations read from the data set EMWS1.PART4_TRAIN.
NOTE: There were 504 observations read from the data set EMWS1.NEURAL2_TRAIN.
      WHERE (Population_in_thousands not = .) and (P_Population_in_thousands not = .);
NOTE: The data set WORK.ASSESS_1HCRE79_NORMSD_XJVHRG has 504 observations and 3 variables.
NOTE: The data set WORK.ASSESS_1HCRE79_MEANSANDTI_SGWHYM has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
23682      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
23683      set EMWS1.MdlComp2_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_EMRANK;
23684      where MODEL = "Neural2" and TARGET = "Population_in_thousands" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Neural2" and TARGET = "Population_in_thousands" and dataRole="TRAIN";
23685      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.MDLCOMP2_EMRANK.
      WHERE (MODEL='Neural2') and (TARGET='Population_in_thousands') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23686      data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
23687      do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
23688      DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
23689      output;
MPRINT(EM_DIAGRAM):   output;
23690      end;
MPRINT(EM_DIAGRAM):   end;
23691      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23692      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
23693      merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
23694      by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
23695      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23696      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
23697      set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
23698      retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
23699      retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
23700      keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
23701      if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
23702      bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
23703      _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
23704      if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
23705      /* tied */
23706      _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
23707      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
23708      end;
MPRINT(EM_DIAGRAM):   end;
23709      else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
23710      /* next tied */
23711      _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
23712      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ ));
23713      end;
MPRINT(EM_DIAGRAM):   end;
23714      output;
MPRINT(EM_DIAGRAM):   output;
23715      *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
23716      * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
23717      *end;
MPRINT(EM_DIAGRAM):   *end;
23718      if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
23719      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
23720      end;
MPRINT(EM_DIAGRAM):   end;
23721      else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
23722      if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
23723      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
23724      end;
MPRINT(EM_DIAGRAM):   end;
23725      end;
MPRINT(EM_DIAGRAM):   end;
23726      bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
23727      /* correct the previous change */
23728      end;
MPRINT(EM_DIAGRAM):   end;
23729      if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
23730      _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
23731      output;
MPRINT(EM_DIAGRAM):   output;
23732      end;
MPRINT(EM_DIAGRAM):   end;
23733      _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
23734      _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
23735      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23736      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
23737      set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
23738      by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
23739      retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
23740      if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
23741      _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
23742      end;
MPRINT(EM_DIAGRAM):   end;
23743      if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
23744      _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
23745      output;
MPRINT(EM_DIAGRAM):   output;
23746      end;
MPRINT(EM_DIAGRAM):   end;
23747      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
23748      filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp2: Scoring NEURAL2_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23749      *------------------------------------------------------------*;
23750      * MdlComp2: Scoring NEURAL2_TRAIN data;
23751      *------------------------------------------------------------*;
23752      data EMWS1.MdlComp2_TRAIN
23753      / view=EMWS1.MdlComp2_TRAIN
23754      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp2_TRAIN / view=EMWS1.MdlComp2_TRAIN ;
23755      set EMWS1.Neural2_TRAIN
23756      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_TRAIN ;
23757      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas.
23758     +if (P_Population_in_thousands ge 73345.5958813221) then do;
MPRINT(EM_DIAGRAM):   if (P_Population_in_thousands ge 73345.5958813221) then do;
23759     +b_Population_in_th = 1;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 1;
23760     +end;
MPRINT(EM_DIAGRAM):   end;
23761     +else
23762     +if (P_Population_in_thousands ge 63549.9703592953) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 63549.9703592953) then do;
23763     +b_Population_in_th = 2;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 2;
23764     +end;
MPRINT(EM_DIAGRAM):   end;
23765     +else
23766     +if (P_Population_in_thousands ge 59513.896483804) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 59513.896483804) then do;
23767     +b_Population_in_th = 3;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 3;
23768     +end;
MPRINT(EM_DIAGRAM):   end;
23769     +else
23770     +if (P_Population_in_thousands ge 56139.4932157775) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 56139.4932157775) then do;
23771     +b_Population_in_th = 4;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 4;
23772     +end;
MPRINT(EM_DIAGRAM):   end;
23773     +else
23774     +if (P_Population_in_thousands ge 54199.6523007248) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 54199.6523007248) then do;
23775     +b_Population_in_th = 5;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 5;
23776     +end;
MPRINT(EM_DIAGRAM):   end;
23777     +else
23778     +if (P_Population_in_thousands ge 51699.0387624403) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 51699.0387624403) then do;
23779     +b_Population_in_th = 6;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 6;
23780     +end;
MPRINT(EM_DIAGRAM):   end;
23781     +else
23782     +if (P_Population_in_thousands ge 46484.7601404305) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 46484.7601404305) then do;
23783     +b_Population_in_th = 7;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 7;
23784     +end;
MPRINT(EM_DIAGRAM):   end;
23785     +else
23786     +if (P_Population_in_thousands ge 43279.4996245372) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 43279.4996245372) then do;
23787     +b_Population_in_th = 8;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 8;
23788     +end;
MPRINT(EM_DIAGRAM):   end;
23789     +else
23790     +if (P_Population_in_thousands ge 41442.7961529277) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 41442.7961529277) then do;
23791     +b_Population_in_th = 9;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 9;
23792     +end;
MPRINT(EM_DIAGRAM):   end;
23793     +else
23794     +if (P_Population_in_thousands ge 38995.5279012171) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 38995.5279012171) then do;
23795     +b_Population_in_th = 10;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 10;
23796     +end;
MPRINT(EM_DIAGRAM):   end;
23797     +else
23798     +if (P_Population_in_thousands ge 36482.2536953926) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 36482.2536953926) then do;
23799     +b_Population_in_th = 11;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 11;
23800     +end;
MPRINT(EM_DIAGRAM):   end;
23801     +else
23802     +if (P_Population_in_thousands ge 29154.4120203551) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 29154.4120203551) then do;
23803     +b_Population_in_th = 12;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 12;
23804     +end;
MPRINT(EM_DIAGRAM):   end;
23805     +else
23806     +if (P_Population_in_thousands ge 28724.0283181155) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 28724.0283181155) then do;
23807     +b_Population_in_th = 13;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 13;
23808     +end;
MPRINT(EM_DIAGRAM):   end;
23809     +else
23810     +if (P_Population_in_thousands ge 24354.96245556) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 24354.96245556) then do;
23811     +b_Population_in_th = 14;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 14;
23812     +end;
MPRINT(EM_DIAGRAM):   end;
23813     +else
23814     +if (P_Population_in_thousands ge 23953.9530595373) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 23953.9530595373) then do;
23815     +b_Population_in_th = 15;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 15;
23816     +end;
MPRINT(EM_DIAGRAM):   end;
23817     +else
23818     +if (P_Population_in_thousands ge 22102.788540459) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 22102.788540459) then do;
23819     +b_Population_in_th = 16;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 16;
23820     +end;
MPRINT(EM_DIAGRAM):   end;
23821     +else
23822     +if (P_Population_in_thousands ge 9424.27590782892) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 9424.27590782892) then do;
23823     +b_Population_in_th = 17;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 17;
23824     +end;
MPRINT(EM_DIAGRAM):   end;
23825     +else
23826     +if (P_Population_in_thousands ge 8267.9987442528) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 8267.9987442528) then do;
23827     +b_Population_in_th = 18;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 18;
23828     +end;
MPRINT(EM_DIAGRAM):   end;
23829     +else
23830     +if (P_Population_in_thousands ge 3751.11686117438) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 3751.11686117438) then do;
23831     +b_Population_in_th = 19;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 19;
23832     +end;
MPRINT(EM_DIAGRAM):   end;
23833     +else
23834     +do;
MPRINT(EM_DIAGRAM):   else do;
23835     +b_Population_in_th = 20;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 20;
23836     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
23837      run;
 
NOTE: DATA STEP view saved on file EMWS1.MDLCOMP2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
23838      quit;
23839      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23840      filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp2: Scoring NEURAL2_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23841      *------------------------------------------------------------*;
23842      * MdlComp2: Scoring NEURAL2_VALIDATE data;
23843      *------------------------------------------------------------*;
23844      data EMWS1.MdlComp2_VALIDATE
23845      / view=EMWS1.MdlComp2_VALIDATE
23846      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp2_VALIDATE / view=EMWS1.MdlComp2_VALIDATE ;
23847      set EMWS1.Neural2_VALIDATE
23848      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_VALIDATE ;
23849      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMFLOWSCORE.sas.
23850     +if (P_Population_in_thousands ge 73345.5958813221) then do;
MPRINT(EM_DIAGRAM):   if (P_Population_in_thousands ge 73345.5958813221) then do;
23851     +b_Population_in_th = 1;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 1;
23852     +end;
MPRINT(EM_DIAGRAM):   end;
23853     +else
23854     +if (P_Population_in_thousands ge 63549.9703592953) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 63549.9703592953) then do;
23855     +b_Population_in_th = 2;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 2;
23856     +end;
MPRINT(EM_DIAGRAM):   end;
23857     +else
23858     +if (P_Population_in_thousands ge 59513.896483804) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 59513.896483804) then do;
23859     +b_Population_in_th = 3;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 3;
23860     +end;
MPRINT(EM_DIAGRAM):   end;
23861     +else
23862     +if (P_Population_in_thousands ge 56139.4932157775) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 56139.4932157775) then do;
23863     +b_Population_in_th = 4;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 4;
23864     +end;
MPRINT(EM_DIAGRAM):   end;
23865     +else
23866     +if (P_Population_in_thousands ge 54199.6523007248) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 54199.6523007248) then do;
23867     +b_Population_in_th = 5;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 5;
23868     +end;
MPRINT(EM_DIAGRAM):   end;
23869     +else
23870     +if (P_Population_in_thousands ge 51699.0387624403) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 51699.0387624403) then do;
23871     +b_Population_in_th = 6;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 6;
23872     +end;
MPRINT(EM_DIAGRAM):   end;
23873     +else
23874     +if (P_Population_in_thousands ge 46484.7601404305) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 46484.7601404305) then do;
23875     +b_Population_in_th = 7;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 7;
23876     +end;
MPRINT(EM_DIAGRAM):   end;
23877     +else
23878     +if (P_Population_in_thousands ge 43279.4996245372) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 43279.4996245372) then do;
23879     +b_Population_in_th = 8;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 8;
23880     +end;
MPRINT(EM_DIAGRAM):   end;
23881     +else
23882     +if (P_Population_in_thousands ge 41442.7961529277) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 41442.7961529277) then do;
23883     +b_Population_in_th = 9;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 9;
23884     +end;
MPRINT(EM_DIAGRAM):   end;
23885     +else
23886     +if (P_Population_in_thousands ge 38995.5279012171) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 38995.5279012171) then do;
23887     +b_Population_in_th = 10;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 10;
23888     +end;
MPRINT(EM_DIAGRAM):   end;
23889     +else
23890     +if (P_Population_in_thousands ge 36482.2536953926) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 36482.2536953926) then do;
23891     +b_Population_in_th = 11;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 11;
23892     +end;
MPRINT(EM_DIAGRAM):   end;
23893     +else
23894     +if (P_Population_in_thousands ge 29154.4120203551) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 29154.4120203551) then do;
23895     +b_Population_in_th = 12;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 12;
23896     +end;
MPRINT(EM_DIAGRAM):   end;
23897     +else
23898     +if (P_Population_in_thousands ge 28724.0283181155) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 28724.0283181155) then do;
23899     +b_Population_in_th = 13;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 13;
23900     +end;
MPRINT(EM_DIAGRAM):   end;
23901     +else
23902     +if (P_Population_in_thousands ge 24354.96245556) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 24354.96245556) then do;
23903     +b_Population_in_th = 14;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 14;
23904     +end;
MPRINT(EM_DIAGRAM):   end;
23905     +else
23906     +if (P_Population_in_thousands ge 23953.9530595373) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 23953.9530595373) then do;
23907     +b_Population_in_th = 15;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 15;
23908     +end;
MPRINT(EM_DIAGRAM):   end;
23909     +else
23910     +if (P_Population_in_thousands ge 22102.788540459) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 22102.788540459) then do;
23911     +b_Population_in_th = 16;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 16;
23912     +end;
MPRINT(EM_DIAGRAM):   end;
23913     +else
23914     +if (P_Population_in_thousands ge 9424.27590782892) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 9424.27590782892) then do;
23915     +b_Population_in_th = 17;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 17;
23916     +end;
MPRINT(EM_DIAGRAM):   end;
23917     +else
23918     +if (P_Population_in_thousands ge 8267.9987442528) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 8267.9987442528) then do;
23919     +b_Population_in_th = 18;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 18;
23920     +end;
MPRINT(EM_DIAGRAM):   end;
23921     +else
23922     +if (P_Population_in_thousands ge 3751.11686117438) then do;
MPRINT(EM_DIAGRAM):   else if (P_Population_in_thousands ge 3751.11686117438) then do;
23923     +b_Population_in_th = 19;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 19;
23924     +end;
MPRINT(EM_DIAGRAM):   end;
23925     +else
23926     +do;
MPRINT(EM_DIAGRAM):   else do;
23927     +b_Population_in_th = 20;
MPRINT(EM_DIAGRAM):   b_Population_in_th = 20;
23928     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
23929      run;
 
NOTE: DATA STEP view saved on file EMWS1.MDLCOMP2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
23930      quit;
23931      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23932      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23933      * MdlComp2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp2: Computing metadata for TRAIN data;
23934      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.MDLCOMP2_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.MdlComp2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.MdlComp2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.MdlComp2_TRAIN out=WORK.M04UXSUZ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04UXSUZ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M04UXSUZ(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04UXSUZ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M04UXSUZ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M24N7E0H NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M24N7E0H;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M24N7E0H;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KWMNCO(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M24N7E0H;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M24N7E0H;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M24N7E0H;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M24N7E0H;
MPRINT(EMADVISECOLUMNS):   set WORK.M24N7E0H;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp2";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.MDLCOMP2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS1.MDLCOMP2_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:55:54" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                November 19, 2019
Time:                15:55:54
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2HNO8BT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\MdlComp2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2HNO8BT new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
