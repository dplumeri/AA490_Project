MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 21, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:19:23" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 21, 2019
Time:                16:19:23
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1RBAHDH "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1RBAHDH new;
MPRINT(EM_DIAGRAM):   run;
111002     %let EMEXCEPTIONSTRING=;
111003     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
111004     * SCORE: Tree;
MPRINT(EM_DIAGRAM):   * SCORE: Tree;
111005     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
111006     %let EM_ACTION = SCORE;
111007     %let syscc = 0;
111008     %macro main;
111009     
111010       %if %upcase(&EM_ACTION) = CREATE %then %do;
111011         filename temp catalog 'sashelp.emmodl.tree_create.source';
111012         %include temp;
111013         filename temp;
111014     
111015         %em_tree_create;
111016       %end;
111017     
111018        %else
111019        %if %upcase(&EM_ACTION) = TRAIN %then %do;
111020     
111021            filename temp catalog 'sashelp.emmodl.tree_train.source';
111022            %include temp;
111023            filename temp;
111024            %em_tree_train;
111025        %end;
111026     
111027       %else
111028       %if %upcase(&EM_ACTION) = SCORE %then %do;
111029         filename temp catalog 'sashelp.emmodl.tree_score.source';
111030         %include temp;
111031         filename temp;
111032     
111033         %em_tree_score;
111034     
111035       %end;
111036     
111037       %else
111038       %if %upcase(&EM_ACTION) = REPORT %then %do;
111039     
111040            filename temp catalog 'sashelp.emmodl.tree_report.source';
111041            %include temp;
111042            filename temp;
111043     
111044            %em_tree_report;
111045        %end;
111046     
111047       %else
111048       %if %upcase(&EM_ACTION) = OPENINT %then %do;
111049     
111050            filename temp catalog 'sashelp.emmodl.tree_actions.source';
111051            %include temp;
111052            filename temp;
111053            %EM_TREE_OPENTREEVIEWER;
111054     
111055        %end;
111056     
111057       %else
111058       %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
111059     
111060            filename temp catalog 'sashelp.emmodl.tree_actions.source';
111061            %include temp;
111062            filename temp;
111063            %EM_TREE_CLOSETREEVIEWER;
111064     
111065        %end;
111066     
111067     
111068        %doendm:
111069     %mend main;
111070     
111071     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
111073    +%macro em_tree_score;
111075    +   /* determine if multiple targets will be processed */
111076    +   %let em_tree_multipleTargets=N;
111077    +   %let em_tree_numTarget=1;
111078    +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
111079    +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
111080    +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
111081    +         %let em_tree_multipleTargets=N;
111082    +      %end;
111083    +      %else %do;
111084    +         /* create macro array of targets  */
111085    +         data _null_;
111086    +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
111087    +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
111088    +           if eof then
111089    +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
111090    +        run;
111092    +        %if &em_tree_numTarget gt 1 %then %do;
111093    +           %let em_tree_multipleTargets=Y;
111094    +        %end;
111095    +      %end;
111096    +   %end;
111098    +   /* build flow and publish scoring code */
111099    +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
111100    +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
111102    +   filename treeflow "&EM_USER_TREEFLOW";
111103    +   filename treepub "&EM_USER_TREEPUBLISH";
111105    +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
111106    +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
111108    +   %em_copyfile(infref=treeflow, outfref=flowref);
111109    +   %em_copyfile(infref=treepub, outfref=pubref);
111111    +   filename treeflow;
111112    +   filename treepub;
111114    +   /* if priors are used, add code to generate unadjusted residuals in export */
111115    +   %let useAdjPriors = N;
111116    +   data _null_;
111117    +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
111118    +     if USE="Y" then call symput('useAdjPriors', 'Y');
111119    +   run;
111120    +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
111121    +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
111122    +      %include temp;
111123    +      filename temp;
111125    +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
111126    +      filename adjref "&EM_USER_adjResidualCode";
111127    +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
111129    +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
111131    +      filename adjref;
111132    +   %end;
111134    +   /* LEAF */
111135    +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
111136    +      data _null_;
111137    +        file flowref mod;
111138    +        put 'drop _LEAF_;';
111139    +      run;
111141    +      data _null_;
111142    +        file pubref mod;
111143    +        put 'drop _LEAF_;';
111144    +      run;
111146    +   %end;
111148    +   filename flowref;
111149    +   filename pubref;
111151    +   /* em_metachange code */
111152    +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
111153    +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
111154    +   %end;
111156    +   /* variable selection based on importance stat    */
111157    +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
111158    +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
111159    +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
111160    +     %let varnum = %sysfunc(varnum(&dsid, NAME));
111161    +     %let obs = %sysfunc(fetch(&dsid));
111162    +     %do %while(&obs=0);
111163    +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
111164    +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
111165    +       %EM_METACHANGE(name=&varname, role=REJECTED);
111166    +       %let obs = %sysfunc(fetch(&dsid));
111167    +     %end;
111168    +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
111169    +   %end;
111171    +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
111172    +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
111173    +    %let tree_pred_vars = ;
111174    +    %let tree_pred_lvl =;
111175    +    %let numpred= 0;
111177    +    data _null_;
111178    +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
111179    +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
111180    +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
111181    +     if eof then
111182    +       call symput('numpred', strip(put(_N_, BEST.)));
111183    +    run;
111184    +   %end;
111186    +   %if &numpred ne 0 %then %do;
111187    +    %do i=1 %to &numpred;
111188    +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
111189    +      %EM_METACHANGE(name=&qpred, role=ASSESS);
111190    +    %end;
111191    +   %end;
111193    +   /* determine if multiple targets will be processed */
111194    +   %let em_tree_multipleTargets=N;
111195    +   %let em_tree_numTarget=1;
111196    +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
111197    +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
111198    +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
111199    +         %let em_tree_multipleTargets=N;
111200    +      %end;
111201    +      %else %do;
111202    +        data _null_;
111203    +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
111204    +          if eof then
111205    +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
111206    +        run;
111208    +        %if &em_tree_numTarget gt 1 %then %do;
111209    +           %let em_tree_multipleTargets=Y;
111210    +        %end;
111211    +     %end;
111212    +   %end;
111214    +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
111215    +   %if "&em_tree_multipleTargets" eq "N" %then %do;
111217    +      /* variable importance */
111218    +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
111219    +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
111221    +         %let validexist=0;
111222    +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
111223    +           %let validexist=1;
111224    +         %end;
111226    +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
111227    +         /* and the columns may not be generated                                                                                 */
111228    +         %let em_tree_cvexists=;
111229    +         %let em_tree_surrexists=.;
111230    +         data _null_;
111231    +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
111232    +            if eof then do ;
111233    +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
111234    +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
111235    +            end;
111236    +         run;
111238    +         data &EM_USER_OUTIMPORT;
111239    +            set &EM_USER_OUTIMPORT;
111241    +            /* format columns based on Precison value specified */
111242    +            format importance 15.&EM_PROPERTY_PRECISION
111243    +                 %if &validexist %then %do;
111244    +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
111245    +                 %end;
111246    +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
111247    +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
111248    +                 %end;
111249    +            ;
111250    +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
111251    +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
111252    +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
111253    +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
111254    +                 %if "&em_tree_surrexists" ne "" %then %do;
111255    +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
111256    +                 %end;
111257    +                 %if &validexist %then %do;
111258    +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
111259    +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
111260    +                 %end;
111261    +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
111262    +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
111263    +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
111264    +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
111265    +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
111266    +                 %end;
111267    +            ;
111268    +         run;
111270    +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
111271    +      %end;
111272    +   %end;
111274    +   %doendm:
111275    +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file FLOWREF is:
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Nov2019:16:19:23,
      Create Time=19Nov2019:15:57:35

NOTE: 133 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file PUBREF is:
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=21Nov2019:16:19:23,
      Create Time=19Nov2019:15:57:35

NOTE: 128 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW has been deassigned.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS2.Ids_Sum_Labor_Force__DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;

NOTE: There were 0 observations read from the data set EMWS2.IDS_SUM_LABOR_FORCE__DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;

NOTE: The file FLOWREF is:
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4357,
      Last Modified=21Nov2019:16:19:23,
      Create Time=19Nov2019:15:57:35

NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;

NOTE: The file PUBREF is:
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4107,
      Last Modified=21Nov2019:16:19:23,
      Create Time=19Nov2019:15:57:35

NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;

NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS2.Ids_Sum_Labor_Force__DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;

NOTE: There were 1 observations read from the data set EMWS2.IDS_SUM_LABOR_FORCE__DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Sum_Labor_Force_Pop");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS2.Tree_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_SCORE):   if eof then do ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_SCORE):   end;
MPRINT(EM_TREE_SCORE):   run;

NOTE: Variable cvimportance is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   data EMWS2.Tree_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   set EMWS2.Tree_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_SCORE):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training 
Importance" VIMPORTANCE = "Validation Importance" CVIMPORTANCE = "Relative Importance" CVRULES= "Number of Rules in CV Trees" RATIO = "Ratio of Validation to Training Importance" ;
MPRINT(EM_TREE_SCORE):   run;

NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: The data set EMWS2.TREE_OUTIMPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
The SAS System

MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24513019958749;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
111276     
111277     *------------------------------------------------------------*;
111278     * End SCORE: Tree;
111279     *------------------------------------------------------------*;

111280     proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
111281     by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
111282     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

111283     filename x "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\CDELTA_TRAIN.sas";
111284     data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
111285     file x;
MPRINT(EM_DIAGRAM):   file x;
111286     put 'if upcase(NAME) = "Q_SUM_LABOR_FORCE_POP" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_SUM_LABOR_FORCE_POP" then do;';
111287     put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
111288     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
111289     put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
111290     put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
111291     put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
111292     put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
111293     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
111294     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file X is:
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=21Nov2019:16:19:23,
      Create Time=19Nov2019:15:57:35

NOTE: 8 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

111295     filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
111296     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
111297     *------------------------------------------------------------*;
111298     * Tree: Scoring DATA data;
111299     *------------------------------------------------------------*;
111300     data EMWS2.Tree_TRAIN
111301     / view=EMWS2.Tree_TRAIN
111302     ;
MPRINT(EM_DIAGRAM):   data EMWS2.Tree_TRAIN / view=EMWS2.Tree_TRAIN ;
111303     set EMWS2.Part_TRAIN
111304     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Part_TRAIN ;
111305     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas.
111306    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111307    +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
111308    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111309    +
111310    +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
111311    +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
111312    +
111313    +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
111314    +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
111315    +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
111316    +label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
111317    +label V_Sum_Labor_Force_Pop = 'Validated: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label V_Sum_Labor_Force_Pop = 'Validated: Sum_Labor_Force_Pop' ;
111318    +label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
111319    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
111320    +
111321    +
111322    +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
111323    +LENGTH _ARBFMT_19 $     19; DROP _ARBFMT_19;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_19 $ 19;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_19;
111324    +_ARBFMT_19 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = ' ';
111325    +LENGTH _ARBFMT_10 $     10; DROP _ARBFMT_10;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_10 $ 10;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_10;
111326    +_ARBFMT_10 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = ' ';
111327    +
111328    +
111329    +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
111330    +
111331    + DROP _BRANCH_;
MPRINT(EM_DIAGRAM):   DROP _BRANCH_;
111332    +_BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
111333    +_ARBFMT_19 = PUT( Age_group , $19.);
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = PUT( Age_group , $19.);
111334    + %DMNORMIP( _ARBFMT_19);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_19,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111335    +  IF _ARBFMT_19 IN ('16 TO 24' ,'65+' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_19 IN ('16 TO 24' ,'65+' ) THEN DO;
111336    +   _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111337    +  END;
MPRINT(EM_DIAGRAM):   END;
111338    +  ELSE IF _ARBFMT_19 IN ('25 TO 44' ,'45 TO 64' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_19 IN ('25 TO 44' ,'45 TO 64' ) THEN DO;
111339    +   _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111340    +  END;
MPRINT(EM_DIAGRAM):   END;
111341    +IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
111342    +  _ARBFMT_10 = PUT( Date , $10.);
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Date , $10.);
111343    +   %DMNORMIP( _ARBFMT_10);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111344    +    IF _ARBFMT_10 IN ('2001' ,'2004' ,'2005' ,'2008' ,'2009' ,'2010' ,'2011' ,
111345    +    '2013' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('2001' ,'2004' ,'2005' ,'2008' ,'2009' ,'2010' ,'2011' , '2013' ) THEN DO;
111346    +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111347    +    END;
MPRINT(EM_DIAGRAM):   END;
111348    +    ELSE IF _ARBFMT_10 IN ('2000' ,'2002' ,'2003' ,'2006' ,'2007' ,'2012' )
111349    +     THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_10 IN ('2000' ,'2002' ,'2003' ,'2006' ,'2007' ,'2012' ) THEN DO;
111350    +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111351    +    END;
MPRINT(EM_DIAGRAM):   END;
111352    +  END;
MPRINT(EM_DIAGRAM):   END;
111353    +IF _BRANCH_ LT 0 THEN _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
111354    +
111355    +IF _BRANCH_ EQ    2 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 2 THEN DO;
111356    +
111357    +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
111358    +  _ARBFMT_19 = PUT( Age_group , $19.);
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = PUT( Age_group , $19.);
111359    +   %DMNORMIP( _ARBFMT_19);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_19,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111360    +    IF _ARBFMT_19 IN ('25 TO 44' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_19 IN ('25 TO 44' ) THEN DO;
111361    +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111362    +    END;
MPRINT(EM_DIAGRAM):   END;
111363    +    ELSE IF _ARBFMT_19 IN ('45 TO 64' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_19 IN ('45 TO 64' ) THEN DO;
111364    +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111365    +    END;
MPRINT(EM_DIAGRAM):   END;
111366    +  IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
111367    +    _ARBFMT_10 = PUT( Date , $10.);
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Date , $10.);
111368    +     %DMNORMIP( _ARBFMT_10);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111369    +      IF _ARBFMT_10 IN ('2001' ,'2002' ,'2005' ,'2006' ,'2007' ,'2009' ,
111370    +      '2010' ,'2011' ,'2012' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('2001' ,'2002' ,'2005' ,'2006' ,'2007' ,'2009' , '2010' ,'2011' ,'2012' ) THEN DO;
111371    +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111372    +      END;
MPRINT(EM_DIAGRAM):   END;
111373    +      ELSE IF _ARBFMT_10 IN ('2000' ,'2003' ,'2004' ,'2008' ,'2013' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_10 IN ('2000' ,'2003' ,'2004' ,'2008' ,'2013' ) THEN DO;
111374    +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111375    +      END;
MPRINT(EM_DIAGRAM):   END;
111376    +    END;
MPRINT(EM_DIAGRAM):   END;
111377    +  IF _BRANCH_ LT 0 THEN _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
111378    +
111379    +  IF _BRANCH_ EQ    2 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 2 THEN DO;
111380    +    _NODE_  =                    7;
MPRINT(EM_DIAGRAM):   _NODE_ = 7;
111381    +    _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
111382    +    P_Sum_Labor_Force_Pop  =              9464920;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 9464920;
111383    +    V_Sum_Labor_Force_Pop  =     9773026.66666666;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 9773026.66666666;
111384    +    END;
MPRINT(EM_DIAGRAM):   END;
111385    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
111386    +    _NODE_  =                    6;
MPRINT(EM_DIAGRAM):   _NODE_ = 6;
111387    +    _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
111388    +    P_Sum_Labor_Force_Pop  =     12847651.6853932;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 12847651.6853932;
111389    +    V_Sum_Labor_Force_Pop  =             13104950;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 13104950;
111390    +    END;
MPRINT(EM_DIAGRAM):   END;
111391    +  END;
MPRINT(EM_DIAGRAM):   END;
111392    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
111393    +
111394    +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
111395    +  _ARBFMT_19 = PUT( Age_group , $19.);
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = PUT( Age_group , $19.);
111396    +   %DMNORMIP( _ARBFMT_19);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_19,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111397    +    IF _ARBFMT_19 IN ('16 TO 24' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_19 IN ('16 TO 24' ) THEN DO;
111398    +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111399    +    END;
MPRINT(EM_DIAGRAM):   END;
111400    +    ELSE IF _ARBFMT_19 IN ('65+' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_19 IN ('65+' ) THEN DO;
111401    +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111402    +    END;
MPRINT(EM_DIAGRAM):   END;
111403    +  IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
111404    +    _ARBFMT_10 = PUT( Date , $10.);
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Date , $10.);
111405    +     %DMNORMIP( _ARBFMT_10);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111406    +      IF _ARBFMT_10 IN ('2000' ,'2003' ,'2005' ,'2006' ,'2008' ,'2010' ,
111407    +      '2012' ,'2013' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('2000' ,'2003' ,'2005' ,'2006' ,'2008' ,'2010' , '2012' ,'2013' ) THEN DO;
111408    +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111409    +      END;
MPRINT(EM_DIAGRAM):   END;
111410    +      ELSE IF _ARBFMT_10 IN ('2001' ,'2002' ,'2004' ,'2007' ,'2009' ,'2011' )
111411    +       THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_10 IN ('2001' ,'2002' ,'2004' ,'2007' ,'2009' ,'2011' ) THEN DO;
111412    +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111413    +      END;
MPRINT(EM_DIAGRAM):   END;
111414    +    END;
MPRINT(EM_DIAGRAM):   END;
111415    +  IF _BRANCH_ LT 0 THEN _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 2;
111416    +
111417    +  IF _BRANCH_ EQ    1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 1 THEN DO;
111418    +    _NODE_  =                    4;
MPRINT(EM_DIAGRAM):   _NODE_ = 4;
111419    +    _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
111420    +    P_Sum_Labor_Force_Pop  =     3744154.76190476;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 3744154.76190476;
111421    +    V_Sum_Labor_Force_Pop  =      3618372.5490196;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 3618372.5490196;
111422    +    END;
MPRINT(EM_DIAGRAM):   END;
111423    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
111424    +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
111425    +    _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
111426    +    P_Sum_Labor_Force_Pop  =     1083534.09090909;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 1083534.09090909;
111427    +    V_Sum_Labor_Force_Pop  =     1123984.84848484;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 1123984.84848484;
111428    +    END;
MPRINT(EM_DIAGRAM):   END;
111429    +  END;
MPRINT(EM_DIAGRAM):   END;
111430    +
111431    +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
111432    +IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop  = .;
MPRINT(EM_DIAGRAM):   IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop = .;
111433    +ELSE R_Sum_Labor_Force_Pop  = Sum_Labor_Force_Pop  - P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   ELSE R_Sum_Labor_Force_Pop = Sum_Labor_Force_Pop - P_Sum_Labor_Force_Pop ;
111434    +
111435    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111436    +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
111437    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111438    +
111439    +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
111440     run;

NOTE: DATA STEP view saved on file EMWS2.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
111441     quit;
111442     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
111443     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
111444     *------------------------------------------------------------*;
111445     * Tree: Scoring VALIDATE data;
111446     *------------------------------------------------------------*;
111447     data EMWS2.Tree_VALIDATE
111448     / view=EMWS2.Tree_VALIDATE
111449     ;
MPRINT(EM_DIAGRAM):   data EMWS2.Tree_VALIDATE / view=EMWS2.Tree_VALIDATE ;
111450     set EMWS2.Part_VALIDATE
111451     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Part_VALIDATE ;
111452     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas.
111453    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111454    +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
111455    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111456    +
111457    +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
111458    +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
111459    +
111460    +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
111461    +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
111462    +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
111463    +label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
111464    +label V_Sum_Labor_Force_Pop = 'Validated: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label V_Sum_Labor_Force_Pop = 'Validated: Sum_Labor_Force_Pop' ;
111465    +label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
111466    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
111467    +
111468    +
111469    +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
111470    +LENGTH _ARBFMT_19 $     19; DROP _ARBFMT_19;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_19 $ 19;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_19;
111471    +_ARBFMT_19 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = ' ';
111472    +LENGTH _ARBFMT_10 $     10; DROP _ARBFMT_10;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_10 $ 10;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_10;
111473    +_ARBFMT_10 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = ' ';
111474    +
111475    +
111476    +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
111477    +
111478    + DROP _BRANCH_;
MPRINT(EM_DIAGRAM):   DROP _BRANCH_;
111479    +_BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
111480    +_ARBFMT_19 = PUT( Age_group , $19.);
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = PUT( Age_group , $19.);
111481    + %DMNORMIP( _ARBFMT_19);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_19,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111482    +  IF _ARBFMT_19 IN ('16 TO 24' ,'65+' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_19 IN ('16 TO 24' ,'65+' ) THEN DO;
111483    +   _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111484    +  END;
MPRINT(EM_DIAGRAM):   END;
111485    +  ELSE IF _ARBFMT_19 IN ('25 TO 44' ,'45 TO 64' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_19 IN ('25 TO 44' ,'45 TO 64' ) THEN DO;
111486    +   _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111487    +  END;
MPRINT(EM_DIAGRAM):   END;
111488    +IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
111489    +  _ARBFMT_10 = PUT( Date , $10.);
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Date , $10.);
111490    +   %DMNORMIP( _ARBFMT_10);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111491    +    IF _ARBFMT_10 IN ('2001' ,'2004' ,'2005' ,'2008' ,'2009' ,'2010' ,'2011' ,
111492    +    '2013' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('2001' ,'2004' ,'2005' ,'2008' ,'2009' ,'2010' ,'2011' , '2013' ) THEN DO;
111493    +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111494    +    END;
MPRINT(EM_DIAGRAM):   END;
111495    +    ELSE IF _ARBFMT_10 IN ('2000' ,'2002' ,'2003' ,'2006' ,'2007' ,'2012' )
111496    +     THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_10 IN ('2000' ,'2002' ,'2003' ,'2006' ,'2007' ,'2012' ) THEN DO;
111497    +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111498    +    END;
MPRINT(EM_DIAGRAM):   END;
111499    +  END;
MPRINT(EM_DIAGRAM):   END;
111500    +IF _BRANCH_ LT 0 THEN _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
111501    +
111502    +IF _BRANCH_ EQ    2 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 2 THEN DO;
111503    +
111504    +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
111505    +  _ARBFMT_19 = PUT( Age_group , $19.);
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = PUT( Age_group , $19.);
111506    +   %DMNORMIP( _ARBFMT_19);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_19,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111507    +    IF _ARBFMT_19 IN ('25 TO 44' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_19 IN ('25 TO 44' ) THEN DO;
111508    +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111509    +    END;
MPRINT(EM_DIAGRAM):   END;
111510    +    ELSE IF _ARBFMT_19 IN ('45 TO 64' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_19 IN ('45 TO 64' ) THEN DO;
111511    +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111512    +    END;
MPRINT(EM_DIAGRAM):   END;
111513    +  IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
111514    +    _ARBFMT_10 = PUT( Date , $10.);
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Date , $10.);
111515    +     %DMNORMIP( _ARBFMT_10);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111516    +      IF _ARBFMT_10 IN ('2001' ,'2002' ,'2005' ,'2006' ,'2007' ,'2009' ,
111517    +      '2010' ,'2011' ,'2012' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('2001' ,'2002' ,'2005' ,'2006' ,'2007' ,'2009' , '2010' ,'2011' ,'2012' ) THEN DO;
111518    +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111519    +      END;
MPRINT(EM_DIAGRAM):   END;
111520    +      ELSE IF _ARBFMT_10 IN ('2000' ,'2003' ,'2004' ,'2008' ,'2013' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_10 IN ('2000' ,'2003' ,'2004' ,'2008' ,'2013' ) THEN DO;
111521    +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111522    +      END;
MPRINT(EM_DIAGRAM):   END;
111523    +    END;
MPRINT(EM_DIAGRAM):   END;
111524    +  IF _BRANCH_ LT 0 THEN _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
111525    +
111526    +  IF _BRANCH_ EQ    2 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 2 THEN DO;
111527    +    _NODE_  =                    7;
MPRINT(EM_DIAGRAM):   _NODE_ = 7;
111528    +    _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
111529    +    P_Sum_Labor_Force_Pop  =              9464920;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 9464920;
111530    +    V_Sum_Labor_Force_Pop  =     9773026.66666666;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 9773026.66666666;
111531    +    END;
MPRINT(EM_DIAGRAM):   END;
111532    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
111533    +    _NODE_  =                    6;
MPRINT(EM_DIAGRAM):   _NODE_ = 6;
111534    +    _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
111535    +    P_Sum_Labor_Force_Pop  =     12847651.6853932;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 12847651.6853932;
111536    +    V_Sum_Labor_Force_Pop  =             13104950;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 13104950;
111537    +    END;
MPRINT(EM_DIAGRAM):   END;
111538    +  END;
MPRINT(EM_DIAGRAM):   END;
111539    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
111540    +
111541    +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
111542    +  _ARBFMT_19 = PUT( Age_group , $19.);
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = PUT( Age_group , $19.);
111543    +   %DMNORMIP( _ARBFMT_19);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_19,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111544    +    IF _ARBFMT_19 IN ('16 TO 24' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_19 IN ('16 TO 24' ) THEN DO;
111545    +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111546    +    END;
MPRINT(EM_DIAGRAM):   END;
111547    +    ELSE IF _ARBFMT_19 IN ('65+' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_19 IN ('65+' ) THEN DO;
111548    +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111549    +    END;
MPRINT(EM_DIAGRAM):   END;
111550    +  IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
111551    +    _ARBFMT_10 = PUT( Date , $10.);
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Date , $10.);
111552    +     %DMNORMIP( _ARBFMT_10);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111553    +      IF _ARBFMT_10 IN ('2000' ,'2003' ,'2005' ,'2006' ,'2008' ,'2010' ,
111554    +      '2012' ,'2013' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('2000' ,'2003' ,'2005' ,'2006' ,'2008' ,'2010' , '2012' ,'2013' ) THEN DO;
111555    +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111556    +      END;
MPRINT(EM_DIAGRAM):   END;
111557    +      ELSE IF _ARBFMT_10 IN ('2001' ,'2002' ,'2004' ,'2007' ,'2009' ,'2011' )
111558    +       THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_10 IN ('2001' ,'2002' ,'2004' ,'2007' ,'2009' ,'2011' ) THEN DO;
111559    +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111560    +      END;
MPRINT(EM_DIAGRAM):   END;
111561    +    END;
MPRINT(EM_DIAGRAM):   END;
111562    +  IF _BRANCH_ LT 0 THEN _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 2;
111563    +
111564    +  IF _BRANCH_ EQ    1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 1 THEN DO;
111565    +    _NODE_  =                    4;
MPRINT(EM_DIAGRAM):   _NODE_ = 4;
111566    +    _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
111567    +    P_Sum_Labor_Force_Pop  =     3744154.76190476;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 3744154.76190476;
111568    +    V_Sum_Labor_Force_Pop  =      3618372.5490196;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 3618372.5490196;
111569    +    END;
MPRINT(EM_DIAGRAM):   END;
111570    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
111571    +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
111572    +    _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
111573    +    P_Sum_Labor_Force_Pop  =     1083534.09090909;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 1083534.09090909;
111574    +    V_Sum_Labor_Force_Pop  =     1123984.84848484;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 1123984.84848484;
111575    +    END;
MPRINT(EM_DIAGRAM):   END;
111576    +  END;
MPRINT(EM_DIAGRAM):   END;
111577    +
111578    +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
111579    +IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop  = .;
MPRINT(EM_DIAGRAM):   IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop = .;
111580    +ELSE R_Sum_Labor_Force_Pop  = Sum_Labor_Force_Pop  - P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   ELSE R_Sum_Labor_Force_Pop = Sum_Labor_Force_Pop - P_Sum_Labor_Force_Pop ;
111581    +
111582    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111583    +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
111584    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111585    +
111586    +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
111587     run;

NOTE: DATA STEP view saved on file EMWS2.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
111588     quit;
111589     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
111590     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
111591     *------------------------------------------------------------*;
111592     * Tree: Scoring TEST data;
111593     *------------------------------------------------------------*;
111594     data EMWS2.Tree_TEST
111595     / view=EMWS2.Tree_TEST
111596     ;
MPRINT(EM_DIAGRAM):   data EMWS2.Tree_TEST / view=EMWS2.Tree_TEST ;
111597     set EMWS2.Part_TEST
111598     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Part_TEST ;
111599     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas.
111600    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111601    +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
111602    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111603    +
111604    +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
111605    +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
111606    +
111607    +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
111608    +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
111609    +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
111610    +label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
111611    +label V_Sum_Labor_Force_Pop = 'Validated: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label V_Sum_Labor_Force_Pop = 'Validated: Sum_Labor_Force_Pop' ;
111612    +label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
111613    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
111614    +
111615    +
111616    +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
111617    +LENGTH _ARBFMT_19 $     19; DROP _ARBFMT_19;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_19 $ 19;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_19;
111618    +_ARBFMT_19 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = ' ';
111619    +LENGTH _ARBFMT_10 $     10; DROP _ARBFMT_10;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_10 $ 10;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_10;
111620    +_ARBFMT_10 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = ' ';
111621    +
111622    +
111623    +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
111624    +
111625    + DROP _BRANCH_;
MPRINT(EM_DIAGRAM):   DROP _BRANCH_;
111626    +_BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
111627    +_ARBFMT_19 = PUT( Age_group , $19.);
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = PUT( Age_group , $19.);
111628    + %DMNORMIP( _ARBFMT_19);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_19,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111629    +  IF _ARBFMT_19 IN ('16 TO 24' ,'65+' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_19 IN ('16 TO 24' ,'65+' ) THEN DO;
111630    +   _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111631    +  END;
MPRINT(EM_DIAGRAM):   END;
111632    +  ELSE IF _ARBFMT_19 IN ('25 TO 44' ,'45 TO 64' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_19 IN ('25 TO 44' ,'45 TO 64' ) THEN DO;
111633    +   _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111634    +  END;
MPRINT(EM_DIAGRAM):   END;
111635    +IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
111636    +  _ARBFMT_10 = PUT( Date , $10.);
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Date , $10.);
111637    +   %DMNORMIP( _ARBFMT_10);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111638    +    IF _ARBFMT_10 IN ('2001' ,'2004' ,'2005' ,'2008' ,'2009' ,'2010' ,'2011' ,
111639    +    '2013' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('2001' ,'2004' ,'2005' ,'2008' ,'2009' ,'2010' ,'2011' , '2013' ) THEN DO;
111640    +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111641    +    END;
MPRINT(EM_DIAGRAM):   END;
111642    +    ELSE IF _ARBFMT_10 IN ('2000' ,'2002' ,'2003' ,'2006' ,'2007' ,'2012' )
111643    +     THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_10 IN ('2000' ,'2002' ,'2003' ,'2006' ,'2007' ,'2012' ) THEN DO;
111644    +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111645    +    END;
MPRINT(EM_DIAGRAM):   END;
111646    +  END;
MPRINT(EM_DIAGRAM):   END;
111647    +IF _BRANCH_ LT 0 THEN _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
111648    +
111649    +IF _BRANCH_ EQ    2 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 2 THEN DO;
111650    +
111651    +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
111652    +  _ARBFMT_19 = PUT( Age_group , $19.);
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = PUT( Age_group , $19.);
111653    +   %DMNORMIP( _ARBFMT_19);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_19,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111654    +    IF _ARBFMT_19 IN ('25 TO 44' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_19 IN ('25 TO 44' ) THEN DO;
111655    +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111656    +    END;
MPRINT(EM_DIAGRAM):   END;
111657    +    ELSE IF _ARBFMT_19 IN ('45 TO 64' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_19 IN ('45 TO 64' ) THEN DO;
111658    +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111659    +    END;
MPRINT(EM_DIAGRAM):   END;
111660    +  IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
111661    +    _ARBFMT_10 = PUT( Date , $10.);
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Date , $10.);
111662    +     %DMNORMIP( _ARBFMT_10);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111663    +      IF _ARBFMT_10 IN ('2001' ,'2002' ,'2005' ,'2006' ,'2007' ,'2009' ,
111664    +      '2010' ,'2011' ,'2012' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('2001' ,'2002' ,'2005' ,'2006' ,'2007' ,'2009' , '2010' ,'2011' ,'2012' ) THEN DO;
111665    +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111666    +      END;
MPRINT(EM_DIAGRAM):   END;
111667    +      ELSE IF _ARBFMT_10 IN ('2000' ,'2003' ,'2004' ,'2008' ,'2013' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_10 IN ('2000' ,'2003' ,'2004' ,'2008' ,'2013' ) THEN DO;
111668    +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111669    +      END;
MPRINT(EM_DIAGRAM):   END;
111670    +    END;
MPRINT(EM_DIAGRAM):   END;
111671    +  IF _BRANCH_ LT 0 THEN _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
111672    +
111673    +  IF _BRANCH_ EQ    2 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 2 THEN DO;
111674    +    _NODE_  =                    7;
MPRINT(EM_DIAGRAM):   _NODE_ = 7;
111675    +    _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
111676    +    P_Sum_Labor_Force_Pop  =              9464920;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 9464920;
111677    +    V_Sum_Labor_Force_Pop  =     9773026.66666666;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 9773026.66666666;
111678    +    END;
MPRINT(EM_DIAGRAM):   END;
111679    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
111680    +    _NODE_  =                    6;
MPRINT(EM_DIAGRAM):   _NODE_ = 6;
111681    +    _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
111682    +    P_Sum_Labor_Force_Pop  =     12847651.6853932;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 12847651.6853932;
111683    +    V_Sum_Labor_Force_Pop  =             13104950;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 13104950;
111684    +    END;
MPRINT(EM_DIAGRAM):   END;
111685    +  END;
MPRINT(EM_DIAGRAM):   END;
111686    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
111687    +
111688    +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
111689    +  _ARBFMT_19 = PUT( Age_group , $19.);
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = PUT( Age_group , $19.);
111690    +   %DMNORMIP( _ARBFMT_19);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_19,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111691    +    IF _ARBFMT_19 IN ('16 TO 24' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_19 IN ('16 TO 24' ) THEN DO;
111692    +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111693    +    END;
MPRINT(EM_DIAGRAM):   END;
111694    +    ELSE IF _ARBFMT_19 IN ('65+' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_19 IN ('65+' ) THEN DO;
111695    +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111696    +    END;
MPRINT(EM_DIAGRAM):   END;
111697    +  IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Date ) THEN DO;
111698    +    _ARBFMT_10 = PUT( Date , $10.);
MPRINT(EM_DIAGRAM):   _ARBFMT_10 = PUT( Date , $10.);
111699    +     %DMNORMIP( _ARBFMT_10);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
111700    +      IF _ARBFMT_10 IN ('2000' ,'2003' ,'2005' ,'2006' ,'2008' ,'2010' ,
111701    +      '2012' ,'2013' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_10 IN ('2000' ,'2003' ,'2005' ,'2006' ,'2008' ,'2010' , '2012' ,'2013' ) THEN DO;
111702    +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
111703    +      END;
MPRINT(EM_DIAGRAM):   END;
111704    +      ELSE IF _ARBFMT_10 IN ('2001' ,'2002' ,'2004' ,'2007' ,'2009' ,'2011' )
111705    +       THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_10 IN ('2001' ,'2002' ,'2004' ,'2007' ,'2009' ,'2011' ) THEN DO;
111706    +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
111707    +      END;
MPRINT(EM_DIAGRAM):   END;
111708    +    END;
MPRINT(EM_DIAGRAM):   END;
111709    +  IF _BRANCH_ LT 0 THEN _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 2;
111710    +
111711    +  IF _BRANCH_ EQ    1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 1 THEN DO;
111712    +    _NODE_  =                    4;
MPRINT(EM_DIAGRAM):   _NODE_ = 4;
111713    +    _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
111714    +    P_Sum_Labor_Force_Pop  =     3744154.76190476;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 3744154.76190476;
111715    +    V_Sum_Labor_Force_Pop  =      3618372.5490196;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 3618372.5490196;
111716    +    END;
MPRINT(EM_DIAGRAM):   END;
111717    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
111718    +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
111719    +    _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
111720    +    P_Sum_Labor_Force_Pop  =     1083534.09090909;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 1083534.09090909;
111721    +    V_Sum_Labor_Force_Pop  =     1123984.84848484;
MPRINT(EM_DIAGRAM):   V_Sum_Labor_Force_Pop = 1123984.84848484;
111722    +    END;
MPRINT(EM_DIAGRAM):   END;
111723    +  END;
MPRINT(EM_DIAGRAM):   END;
111724    +
111725    +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
111726    +IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop  = .;
MPRINT(EM_DIAGRAM):   IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop = .;
111727    +ELSE R_Sum_Labor_Force_Pop  = Sum_Labor_Force_Pop  - P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   ELSE R_Sum_Labor_Force_Pop = Sum_Labor_Force_Pop - P_Sum_Labor_Force_Pop ;
111728    +
111729    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111730    +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
111731    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
111732    +
111733    +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
111734     run;

NOTE: DATA STEP view saved on file EMWS2.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
111735     quit;
111736     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
111738     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
111739     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
111740     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

111741     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
111742     * Tree: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree: Computing metadata for TRAIN data;
111743     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.Tree_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.Tree_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.Tree_TRAIN out=WORK.M19HCKKB noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M19HCKKB;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M19HCKKB(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M19HCKKB;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M19HCKKB;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3E_BCN8 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3E_BCN8;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3E_BCN8;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03CEVKN(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3E_BCN8;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3E_BCN8;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3E_BCN8;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3E_BCN8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3E_BCN8;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS2.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_SUM_LABOR_FORCE_POP") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("SUM_LABOR_FORCE_POP") model = "Tree";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "Q_SUM_LABOR_FORCE_POP" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
112098     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
112099     set EMWS2.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_EMINFO;
112100     where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
112101     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS2.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

112102     data EMWS2.Tree_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS2.Tree_EMINFO;
112103     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
112104     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
112105     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS2.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
112109     run;
112110     data EMWS2.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS2.Tree_EMINFO;
112111     set EMWS2.Tree_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_EMINFO WORK.MODELTEMP_INFO;
112112     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS2.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS2.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

112113     proc sort data = EMWS2.Tree_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS2.Tree_EMINFO NOTHREADS;
112114     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
112115     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS2.TREE_EMINFO.
NOTE: The data set EMWS2.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

112116     proc sort data = EMWS2.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS2.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
112117     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
112118     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS2.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

112119     proc sort data = EMWS2.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS2.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
112120     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
112121     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS2.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

112122     data EMWS2.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS2.Tree_EMINFO;
112123     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
112124     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
112125     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS2.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

112126     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
112127     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
112128     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
112129     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS2.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS2.TREE_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
