MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:18:54" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 09, 2019
Time:                16:18:54
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O05CSQCV "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O05CSQCV new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:18:54" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:18:54" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
62836      proc freq data=EMWS2.Tree_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.Tree_VariableSet noprint;
62837      table ROLE*LEVEL/out=WORK.TreeMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TreeMETA;
62838      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS2.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

62839      proc print data=WORK.TreeMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TreeMETA label noobs;
62840      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
62841      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
62842      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
62843      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
62844      run;

NOTE: There were 4 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 18.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

62845      title10;
MPRINT(EM_DIAGRAM):   title10;
62846      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "Cases_in_1000s"." 
62847      proc print data = EMWS2.Ids2_Cases_in_1000s_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS2.Ids2_Cases_in_1000s_DM noobs label;
62848      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
62849      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
62850      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
62851      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
62852      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
62853      run;

NOTE: There were 3 observations read from the data set EMWS2.IDS2_CASES_IN_1000S_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 19.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

62854      title10;
MPRINT(EM_DIAGRAM):   title10;
62855      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Base Model 2';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Cases_in_1000s(label="Cases_in_1000s");
MPRINT(EM_DECDATA):   length Cases_in_1000s 8 ;
MPRINT(EM_DECDATA):   Cases_in_1000s=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Cases_in_1000s=801;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Cases_in_1000s=400.5;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Cases_in_1000s";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS2.Ids2_Cases_in_1000s_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS2.Ids2_Cases_in_1000s_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Cases_in_1000s";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS2.Ids2_Cases_in_1000s_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS2.Ids2_Cases_in_1000s_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
63358      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
63359      * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
63360      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
63361      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

63362      %let EMEXCEPTIONSTRING=;
63363      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
63364      * TRAIN: Tree;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree;
63365      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
63366      %let EM_ACTION = TRAIN;
63367      %let syscc = 0;
63368      %macro main;
63369      
63370        %if %upcase(&EM_ACTION) = CREATE %then %do;
63371          filename temp catalog 'sashelp.emmodl.tree_create.source';
63372          %include temp;
63373          filename temp;
63374      
63375          %em_tree_create;
63376        %end;
63377      
63378         %else
63379         %if %upcase(&EM_ACTION) = TRAIN %then %do;
63380      
63381             filename temp catalog 'sashelp.emmodl.tree_train.source';
63382             %include temp;
63383             filename temp;
63384             %em_tree_train;
63385         %end;
63386      
63387        %else
63388        %if %upcase(&EM_ACTION) = SCORE %then %do;
63389          filename temp catalog 'sashelp.emmodl.tree_score.source';
63390          %include temp;
63391          filename temp;
63392      
63393          %em_tree_score;
63394      
63395        %end;
63396      
63397        %else
63398        %if %upcase(&EM_ACTION) = REPORT %then %do;
63399      
63400             filename temp catalog 'sashelp.emmodl.tree_report.source';
63401             %include temp;
63402             filename temp;
63403      
63404             %em_tree_report;
63405         %end;
63406      
63407        %else
63408        %if %upcase(&EM_ACTION) = OPENINT %then %do;
63409      
63410             filename temp catalog 'sashelp.emmodl.tree_actions.source';
63411             %include temp;
63412             filename temp;
63413             %EM_TREE_OPENTREEVIEWER;
63414      
63415         %end;
63416      
63417        %else
63418        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
63419      
63420             filename temp catalog 'sashelp.emmodl.tree_actions.source';
63421             %include temp;
63422             filename temp;
63423             %EM_TREE_CLOSETREEVIEWER;
63424      
63425         %end;
63426      
63427      
63428         %doendm:
63429      %mend main;
63430      
63431      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
63433     +%macro em_tree_train;
63435     +   %if &EM_IMPORT_DATA eq %then %do;
63436     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
63437     +       %put &em_codebar;
63438     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
63439     +       %put &errormsg;
63440     +       %put &em_codebar;
63441     +       %goto doendm;
63442     +   %end;
63443     +   %else
63444     +       %let EMEXCEPTIONSTRING =;
63446     +   %if  &EM_NUM_TARGET lt 1 %then %do;
63447     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
63448     +        %put &em_codebar;
63449     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
63450     +        %put &errormsg;
63451     +        %put &em_codebar;
63452     +        %goto doendm;
63453     +   %end;
63455     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
63456     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
63457     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
63458     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
63459     +        %put &em_codebar;
63460     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
63461     +        %put &errormsg;
63462     +        %put &em_codebar;
63463     +        %goto doendm;
63464     +   %end;
63466     +   /* Initialize property macro variables */
63467     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
63468     +   %include temp;
63469     +   filename temp;
63471     +   %EM_SetProperties;
63473     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
63474     +   %EM_GETNAME(key=EMTREE, type=DATA);
63475     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
63476     +     /* if import eq Y and no importtable defined, throw an exception */
63477     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
63478     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
63479     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
63480     +         %put &em_codebar;
63481     +         %put &errmsg;
63482     +         %put &em_codebar;
63483     +         %goto doendm;
63484     +      %end;
63485     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
63486     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
63487     +         %put &em_codebar;
63488     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
63489     +         %put &errormsg;
63490     +         %put &em_codebar;
63491     +         %goto doendm;
63492     +      %end;
63493     +      %else %do;
63494     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
63495     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
63496     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
63497     +         %let varnumX = %sysfunc(varnum(&dsid,X));
63498     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
63499     +         %let dsid = %sysfunc(close(&dsid));
63500     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
63501     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
63502     +            %put &em_codebar;
63503     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
63504     +            %put &errormsg;
63505     +            %put &em_codebar;
63506     +            %goto doendm;
63507     +         %end;
63508     +      %end;
63509     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
63510     +         proc delete data=&EM_USER_EMTREE;
63511     +         run;
63512     +      %end;
63513     +   %end;
63514     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
63515     +      proc delete data=&EM_USER_EMTREE;
63516     +      run;
63517     +   %end;
63519     +   /* load tree macros */
63520     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
63521     +   %include temp;
63522     +   filename temp;
63524     +   /* data sets */
63525     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
63526     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
63527     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
63529     +   /* files */
63530     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
63532     +   /* check actual num of target levels */
63533     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
63534     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
63535     +                              nLevel=_nTargetLevel );
63536     +      %if &_nTargetLevel  > 2 %then %do;
63537     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
63538     +        %put &em_codebar;
63539     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
63540     +        %put &errormsg;
63541     +        %put &em_codebar;
63542     +        %goto doendm;
63543     +      %end;
63544     +   %end;
63546     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
63547     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
63548     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
63549     +        %let costflag=0;
63550     +        data _null_;
63551     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
63552     +          if eof then call symput("costflag", _N_);
63553     +        run;
63554     +        %if &costflag gt 0 %then %do;
63555     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
63556     +          %put &em_codebar;
63557     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
63558     +          %put &errormsg;
63559     +          %put &em_codebar;
63560     +          %goto doendm;
63561     +       %end;
63562     +     %end;
63563     +   %end;
63565     +   /* determine if multiple targets will be processed */
63566     +   %let em_tree_multipleTargets=N;
63567     +   %let em_tree_numTarget = 1;
63568     +   %let em_tree_targetVars=;
63570     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
63571     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
63572     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
63573     +         %let em_tree_multipleTargets=N;
63574     +      %end;
63575     +      %else %do;
63576     +         /* create macro array of targets  */
63577     +         data _null_;
63578     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
63579     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
63580     +           if eof then
63581     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
63582     +        run;
63584     +        %if &em_tree_numTarget gt 1 %then %do;
63585     +           %let em_tree_multipleTargets=Y;
63586     +        %end;
63587     +      %end;
63588     +   %end;
63590     +   /* create view of only necessary variable for performance reasons */
63591     +   %let tempData = &EM_LIB..em_&EM_NODEID;
63592     +   data &tempData / view=&tempData;
63593     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
63594     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
63595     +       %EM_TARGET
63596     +     %end;
63597     +     %else %do;
63598     +       %if &em_tree_numTarget ne 0 %then %do;
63599     +         %do i=1 %to &em_tree_numTarget;
63600     +            &&em_tree_targetVars&i
63601     +         %end;
63602     +       %end;
63603     +     %end;
63604     +     );
63605     +   run;
63607     +   /* run Tree procedure */
63608     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
63610     +   /* Check return code and throw exception if error is detected */
63611     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
63612     +   %if &syserr %then %do;
63613     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
63614     +     %goto doendm;
63615     +   %end;
63617     +   /* add decision score code if multiple targets are processed */
63618     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
63619     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
63620     +   %end;
63622     +   /* create outfit dataset if multiple score statements have been executed */
63623     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
63625     +   /* create English Rules */
63626     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
63627     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
63628     +       %em_tree_makeEnglishRules;
63630     +       /* English Rules */
63631     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
63633     +     %end;
63634     +   filename x;
63636     +   %doendm:
63637     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
63638     +%macro EM_SetProperties;
63640     +   /* train properties */
63641     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
63642     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
63643     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
63644     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
63645     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
63646     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
63647     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
63648     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
63649     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
63650     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
63651     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
63652     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
63653     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
63654     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
63655     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
63656     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
63657     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
63658     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
63659     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
63660     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
63661     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
63662     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
63663     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
63664     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
63665     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
63666     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
63667     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
63668     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
63669     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
63670     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
63671     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
63672     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
63673     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
63674     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
63675     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
63676     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
63677     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
63678     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
63679     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
63680     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
63681     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
63683     +   /* properties for interactive sample */
63684     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
63685     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
63686     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
63687     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
63689     +   /* report properties */
63690     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
63691     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
63692     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
63693     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
63694     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
63695     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
63696     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
63697     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
63698     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
63699     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
63700     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
63701     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
63702     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
63704     +   /* score properties */
63705     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
63706     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
63708     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS2.Tree_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;

NOTE: Deleting EMWS2.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
63710     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
63711     +  %global &nLevel;
63712     +  proc dmdb batch data=&indata
63713     +    classout=_tmp_dmdbout;
63714     +    class &target;
63715     +  run;
63716     +  data _tmp_dmdbout;
63717     +    set _tmp_dmdbout;
63718     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
63719     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
63720     +  run;
63721     +  data _null_;
63722     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
63723     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
63724     +    %let dsid = %sysfunc(close(&dsid));
63725     +     call symput("&nLevel", put(&_obs, Best12.));
63726     +  run;
63728     +  proc datasets lib=work nolist;
63729     +     delete _tmp_dmdbout;
63730     +  run;
63731     +  quit;
63732     +%Mend EM_CheckBinaryTargetLevel;
63735     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
63737     +  /* determine the number of obs in training data */
63738     +  proc sql;
63739     +    reset noprint;
63740     +    select count(*) into :em_nobs from &indata;
63741     +  quit;
63743     +  /* determine the number of input variables */
63744     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
63745     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
63747     +  /* retrieve targetEvent from decmeta */
63748     +  %let targetEvent=;
63749     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
63750     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
63751     +      data _null_;
63752     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
63753     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
63754     +      run;
63755     +    %end;
63756     +  %end;
63758     +  /* create targetTable if multipleTar eq Y */
63759     +  data temptarget;
63760     +    set &EM_DATA_VARIABLESET;
63761     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
63762     +  run;
63764     + /* data sets */
63765     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
63766     + %EM_GETNAME(key=EMTREE,        type=DATA);
63767     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
63768     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
63769     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
63770     + %EM_GETNAME(key=OUTNODES,      type=DATA);
63771     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
63772     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
63773     + %EM_GETNAME(key=OUTPATH,       type=DATA);
63774     + %EM_GETNAME(key=OUTRULES,      type=DATA);
63776     + /* files */
63777     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
63778     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
63780     + /* turn on pmml if requested */
63781     + %let nnpmml=0;
63782     + %if %symexist(EM_PMML) %then %do;
63783     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
63784     +       %let nnpmml=1;
63786     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
63787     +   %end;
63788     +%end;
63790     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
63792     +%if &nnpmml or &numClassTarget %then %do;
63794     +    /* create dmdb needed for pmml generation */
63795     +    %let tree_maxlevel = 512;
63796     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
63797     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
63798     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
63799     +      %end;
63800     +    %end;
63801     +    %if &tree_maxlevel gt 0 %then %do;
63802     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
63803     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
63804     +    %end;
63806     +    %let targetOrderString =;
63807     +    %let targetString = ;
63808     +    data _null_;
63809     +       length orderString nameString $10000;
63810     +       retain orderString nameString;
63811     +       set &em_data_variableset end=eof;
63812     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
63813     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
63814     +       %end;
63815     +       %else %do;
63816     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
63817     +       %end;          select(order);
63818     +         when('')        order ='DESC';
63819     +         when('FMTASC')  order='ASCFMT';
63820     +         when('FMTDESC') order='DESFMT';
63821     +         otherwise;
63822     +       end;
63823     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
63824     +       nameString = trim(nameString)!!' '!!trim(NAME);
63826     +       if eof then do;
63827     +          call symput('targetOrderString', trim(orderString));
63828     +          call symput('targetString', trim(nameString));
63829     +       end;
63830     +    run;
63832     +    %let arborkluge= "work._treeDMDB";
63834     +    proc dmdb batch data=&indata
63835     +    %if &nnpmml %then %do;
63836     +        PMML
63837     +    %end;
63838     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
63840     +      %if &nnpmml %then %do;
63841     +           %if "%EM_ID" ne "" %then %do;
63842     +             id %EM_ID;
63843     +           %end;
63844     +           %if &EM_NUM_CLASS gt 0 %then %do;
63845     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
63846     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
63847     +                  &targetOrderString;
63848     +           %end;
63849     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
63850     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
63851     +           %end;
63852     +           target &targetString %EM_INTERVAL_TARGET;
63853     +           %if "%EM_FREQ" ne "" %then %do;
63854     +             freq %EM_FREQ;
63855     +           %end;
63856     +      %end;
63857     +      %else %do;
63858     +         class  &targetOrderString;
63859     +         target &targetString %EM_INTERVAL_TARGET;
63860     +      %end;
63861     +    run;
63862     +    quit;
63864     +    proc datasets lib=work nolist;
63865     +       delete classout varout;
63866     +    run;
63867     +    quit;
63869     + %end;
63872     + /* run Arbor procedure */
63873     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
63874     +  proc arbor data=&INDATA
63876     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
63877     +    Leafsize = &EM_PROPERTY_LEAFSIZE
63878     +  %end;
63880     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
63881     +    Splitsize = &EM_PROPERTY_SPLITSIZE
63882     +  %end;
63884     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
63885     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
63886     +  %end;
63888     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
63889     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
63890     +  %end;
63892     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
63893     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
63894     +  %end;
63896     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
63897     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
63898     +  %end;
63899     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
63900     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
63901     +  %end;
63902     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
63903     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
63904     +  %end;
63906     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
63907     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
63908     +      alpha = &EM_PROPERTY_SIGLEVEL
63909     +    %end;
63910     +  %end;
63912     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
63913     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
63914     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
63915     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
63916     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
63918     +        padjust =
63919     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
63920     +          &chaid
63921     +        %end;
63922     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
63923     +          DEPTH
63924     +        %end;
63925     +      %end;
63926     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
63927     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
63928     +         pvars = &num_inputs
63929     +      %end;
63930     +    %end;
63931     +  %end;
63932     +  %else %do;
63933     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
63934     +         padjust = NONE
63935     +      %end;
63936     +  %end;
63938     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
63939     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
63940     +    Maxrules = &num_nrules
63941     +  %end;
63943     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
63944     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
63945     +    Maxsurrs = &num_nsurrs
63946     +  %end;
63948     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
63949     +     Missing=&EM_PROPERTY_MISSINGVALUE
63950     +  %end;
63952     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
63953     +     USEVARONCE
63954     +  %end;
63956     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
63957     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
63958     +  %end;
63961     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
63962     +    event = "&targetEvent"
63963     +  %end;
63965     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
63966     +     DECSEARCH
63967     +  %end;
63969     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
63970     +     PRIORSSEARCH
63971     +  %end;
63973     +  %if &arbor_1 ne %then %do;
63974     +    &arbor_1
63975     +  %end;
63977     +  %if &em_arbor ne %then %do;
63978     +     &em_arbor
63979     +  %end;
63980     +  ;
63981     + %end;
63982     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
63983     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
63984     +       Performance &EM_PROPERTY_PERFORMANCE
63985     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
63986     +         nodesize=&EM_PROPERTY_NODESAMPLE
63987     +       %end;
63988     +       ;
63989     +       interact;
63990     + %end;
63991     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
63992     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
63993     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
63994     +    %put &em_codebar;
63995     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
63996     +    %put &errormsg;
63997     +    %put &em_codebar;
63998     +    %goto doendm;
63999     +   %end;
64000     +   %else %do;
64001     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
64002     +       Performance &EM_PROPERTY_PERFORMANCE
64003     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
64004     +         nodesize=&EM_PROPERTY_NODESAMPLE
64005     +       %end;
64006     +       ;
64007     +       interact;
64008     +   %end;
64009     + %end;
64011     + %else %do;
64012     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
64013     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
64014     +    %put &em_codebar;
64015     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
64016     +    %put &errormsg;
64017     +    %put &em_codebar;
64018     +    %goto doendm;
64019     +   %end;
64020     +   %else %do;
64021     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
64022     +       Performance &EM_PROPERTY_PERFORMANCE
64023     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
64024     +         nodesize=&EM_PROPERTY_NODESAMPLE
64025     +       %end;
64026     +       ;
64027     +        interact;
64028     +   %end;
64029     + %end;
64031     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
64032     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
64033     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
64034     +    %end;
64036     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
64037     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
64038     +    %end;
64040     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
64041     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
64042     +    %end;
64044     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
64045     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
64046     +    %end;
64048     +    %if "%EM_FREQ" ne "" %then %do;
64049     +       freq %EM_FREQ;
64050     +    %end;
64052     +    %if "&multipleTar" eq "Y" %then %do;
64053     +       /* cycle through all target vars in variableset */
64054     +       %let tdsid = %sysfunc(open(temptarget));
64055     +       %if &tdsid %then %do;
64056     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
64057     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
64058     +          %do %while(^ %sysfunc(fetch(&tdsid)));
64059     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
64060     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
64061     +             target &var / level = &lvl
64062     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
64063     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
64064     +             %end;
64065     +             %else %if "&lvl" eq "INTERVAL" %then %do;
64066     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
64067     +             %end;
64068     +             %else %if "&lvl" eq "ORDINAL" %then %do;
64069     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
64070     +             %end;
64071     +          %end;
64072     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
64073     +       %end;
64074     +       useTarget variable = %EM_TARGET;
64075     +    %end;
64076     +    %else %do;
64077     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
64078     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
64079     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
64080     +      %end;
64081     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
64082     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
64083     +      %end;
64084     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
64085     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
64086     +      %end;
64087     +    %end;
64089     +    %if "&multipleTar" eq "N" %then %do;
64090     +      &EM_DEC_STATEMENT;
64091     +    %end;
64093     +    Performance &EM_PROPERTY_PERFORMANCE
64094     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
64095     +      nodesize=&EM_PROPERTY_NODESAMPLE
64096     +    %end;
64097     +    ;
64099     +    %if "&intFlag" eq "Y" %then %do;
64100     +       INTERACT Largest;
64101     +       Train maxnewdepth=0;
64102     +    %end;
64104     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
64105     +         Assess
64106     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
64107     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
64108     +              %put &em_codebar;
64109     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
64110     +              %put &errormsg;
64111     +              %put &em_codebar;
64112     +            %end;
64113     +            %else %do;
64114     +               Validata=&EM_IMPORT_VALIDATE
64115     +            %end;
64116     +         %end;
64117     +         %else %do;
64118     +           NoValidata
64119     +         %end;
64120     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
64121     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
64122     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
64123     +               %if &dsid %then %do;
64124     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
64125     +                 %do %while(^ %sysfunc(fetch(&dsid)));
64126     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
64127     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
64128     +                   %else %do;
64129     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
64130     +                      %else %let measure= MISC;
64131     +                   %end;
64132     +                 %end;
64133     +               %end;
64134     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64135     +            %end;
64136     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
64137     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
64138     +                 %let measure=ASE;
64139     +              %end;
64140     +              %else %do;
64141     +                 %let measure=MISC;
64142     +              %end;
64143     +            %end;
64144     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
64145     +              %let measure=ASE;
64146     +            %end;
64147     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
64148     +               %let measure = LIFT;
64149     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
64150     +               %if &dsid %then %do;
64151     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
64152     +                 %do %while(^ %sysfunc(fetch(&dsid)));
64153     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
64154     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
64155     +                 %end;
64156     +               %end;
64157     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64158     +            %end;
64159     +            measure=&measure
64160     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
64161     +               event = "&targetEvent"
64162     +            %end;
64163     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
64164     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
64165     +            %end;
64166     +         %end;
64167     +         %if "&multipleTar" eq "N" %then %do;
64168     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
64169     +               CV
64170     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
64171     +                 CVNITer = &EM_PROPERTY_CVNITER
64172     +               %end;
64173     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
64174     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
64175     +               %end;
64176     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
64177     +                 CVSeed = &EM_PROPERTY_CVSEED
64178     +               %end;
64179     +            %end;
64180     +         %end;
64181     +       %end;
64182     +      ;
64184     +      %if "&intFlag" ne "Y" %then %do;
64185     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
64186     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
64187     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
64188     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
64190     +          SUBTREE &subtree
64191     +          %if "&subtree" eq "NLEAVES" %then %do;
64192     +            =&EM_PROPERTY_NSUBTREE
64193     +          %end;
64194     +          ;
64195     +        %end;
64197     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
64198     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
64199     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
64200     +          %end;
64201     +       %end;
64202     +      %end;
64203     + %end;
64206     + MakeMacro nleaves = nleaves;
64207     + save
64208     + %if "&EM_USER_EMTREE" ne "" %then %do;
64209     +   MODEL=&EM_USER_EMTREE
64210     + %end;
64211     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
64212     +   SEQUENCE=&EM_USER_OUTSEQ
64213     + %end;
64214     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
64215     +   IMPORTANCE=&EM_USER_OUTIMPORT
64216     + %end;
64217     + %if "&EM_USER_OUTNODES" ne "" %then %do;
64218     +   NODESTAT=&EM_USER_OUTNODES
64219     + %end;
64220     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
64221     +   SUMMARY=&EM_USER_OUTSUMMARY
64222     + %end;
64223     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
64224     +   STATSBYNODE=&EM_USER_OUTSTATS
64225     + %end;
64226     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
64227     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
64228     + %end;
64229     + %if "&EM_USER_OUTPATH" ne "" %then %do;
64230     +   Pathlistnonmissing=&EM_USER_OUTPATH
64231     + %end;
64232     + %if "&EM_USER_OUTRULES" ne "" %then %do;
64233     +   RULES = &EM_USER_OUTRULES
64234     + %end;
64235     + ;
64237     + %if "&intFlag" ne "Y" %then %do;
64239     +   %let lookupString = ;
64240     +   %if ^%symexist(EM_OPTION) %then
64241     +      %let EM_OPTION=;
64243     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
64244     +      %let lookupString = LOOKUP=SELECT;
64245     +   %end;
64247     +   %let codetext=;
64248     +   %let norescodetxt=;
64250     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
64251     +     %let codetext=&codetext DUMMY;
64252     +     %let norescodetxt=&norescodetxt DUMMY;
64253     +   %end;
64254     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
64255     +     %let codetext=&codetext NOLEAFID;
64256     +     %let norescodetxt=&norescodetxt NOLEAFID;
64257     +   %end;
64258     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
64259     +     %let norescodetxt=&norescodetxt NOPRED;
64260     +   %end;
64262     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
64263     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
64265     +   %if &nnpmml %then %do;
64266     +     code pmml;
64267     +   %end;
64269     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
64270     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
64271     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
64272     +   %end;
64273     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
64274     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
64275     +   %end;
64276     + %end;
64278     + run;
64279     + quit;
64281     + /*%em_checkerror(); */
64282     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
64283     +   /* Delete DMDB catalog */
64284     +   proc datasets lib=work nolist;
64285     +       delete _treeDMDB / mt=cat;
64286     +  run;
64287     +  %end;
64289     + %if &nnpmml %then %do;
64290     +    ods pmml close;
64291     + %end;
64293     +  %doendm:
64295     +%mend em_tree_runTreeProcedure;
64297     +%macro em_tree_createFitStats( multipleTar= );
64300     +  /* create targetTable is multipleTar eq Y */
64301     +  data temptarget;
64302     +    set &EM_DATA_VARIABLESET;
64303     +    where ROLE="TARGET";
64304     +  run;
64306     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
64307     +   data &EM_USER_EMOUTFIT;
64308     +     length target $32;
64309     +     merge work.fit_train
64310     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
64311     +       work.fit_valid
64312     +     %end;
64313     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
64314     +       work.fit_test
64315     +     %end;
64316     +     ;
64317     +     %if "&multipleTar" eq "N" %then %do;
64318     +       target="%EM_TARGET";
64319     +     %end;
64320     +     %else %do;
64321     +       target = _TARGET_;
64322     +     %end;
64323     +     drop _NW_ _SUMW_
64324     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
64325     +        _VSUMW_
64326     +     %end;
64327     +     ;
64328     +   run;
64330     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
64331     +     proc datasets library=work nolist;
64332     +       delete fit_valid;
64333     +     run;
64334     +   %end;
64335     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
64336     +     proc datasets library=work nolist;
64337     +       delete fit_test;
64338     +     run;
64339     +   %end;
64341     +%mend em_tree_createFitStats;
64344     +%macro em_tree_makeEnglishRules;
64346     +  %EM_GETNAME(key=OUTNODES, type=DATA);
64347     +  %EM_GETNAME(key=OUTPATH, type=DATA);
64349     +  /* verify that necessary tables exist and if not, skip processing */
64350     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
64351     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
64352     +    %goto doendm;
64353     +  %end;
64354     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
64355     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
64356     +    %goto doendm;
64357     +  %end;
64359     +  /* determine length of variable in outpath dataset */
64360     +  %let vlength= ;
64361     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
64362     +  %if &dsid ne %then %do;
64363     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
64364     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
64365     +  %end;
64366     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
64368     +  data tempoutpath;
64369     +    length varname $&vlength;
64370     +    retain varname;
64371     +    set &EM_USER_OUTPATH;
64373     +    if ^missing(variable) then varname=variable;
64374     +    else if ^missing(var_name) then varname=var_name;
64375     +    output;
64376     +  run;
64378     +  /* create an array of generated predicted variable names */
64379     +  %let tree_pred_vars = ;
64380     +  %let tree_pred_label = ;
64381     +  %let numpred= 0;
64382     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
64384     +    data _null_;
64385     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
64386     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
64387     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
64388     +     if eof then
64389     +       call symput('numpred', strip(put(_N_, BEST.)));
64390     +    run;
64391     +  %end;
64393     +  /* determine if NPRIORS exists in outnodes  */
64394     +  %local nprior_flag;
64395     +  data _null_;
64396     +    set &EM_USER_OUTNODES(obs=2) end=eof;
64397     +    if eof then do;
64398     +      call symput('nprior_flag', strip(put(npriors, best.)));
64399     +    end;
64400     +  run;
64402     +  proc sort data=tempoutpath; by node; run;
64403     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
64405     +  data tempoutpath;
64406     +    merge tempoutpath(in=_a) outnodes(keep= node
64407     +    %if "&nprior_flag" ne "." %then %do;
64408     +      NPRIORS
64409     +    %end;
64410     +    %else %do;
64411     +      N
64412     +    %end;
64413     +    %if &numpred gt 0 %then %do;
64414     +      %do i=1 %to &numpred;
64415     +        &&tree_pred_vars&i
64416     +      %end;
64417     +    %end;
64418     +    );
64419     +    by node;
64420     +    if _a;
64421     +  run;
64423     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
64425     +  data _null_;
64426     +    file x;
64427     +    set tempoutpath;
64428     +    by node descending varname;
64429     +    retain origvar oldnode string;
64430     +    length origvar $32 oldnode 8 string $200;
64432     +    if _N_ = 1 then do;
64433     +      origvar = varname;
64434     +      oldnode = node;
64435     +    end;
64437     +    if first.node then do;
64438     +       put "&EM_CODEBAR";
64439     +       put " Node = " node;
64440     +       put "&EM_CODEBAR";
64441     +    end;
64443     +      if first.varname then do;
64444     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
64445     +            if MISSING(CHARACTER_VALUE) then do;
64446     +             if NUMERIC_VALUE ne .  then do;
64447     +              if ^first.node then do;
64448     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
64449     +              end;
64450     +              else do;
64451     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
64452     +              end;
64453     +             end;
64454     +            end;
64455     +            else do;
64456     +              if ^first.node then do;
64457     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
64458     +              end;
64459     +              else do;
64460     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
64461     +              end;
64462     +             end;
64463     +         end;
64464     +         else if RELATION in ("=") then do;
64465     +            if ^first.node then do;
64466     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
64467     +            end;
64468     +            else do;
64469     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
64470     +            end;
64471     +         end;
64472     +         else if RELATION in ("ISMISSING") then do;
64473     +            if ^first.node then do;
64474     +              string = " AND "|| strip(varname) || " equals Missing";
64475     +            end;
64476     +            else do;
64477     +              string = "if "|| strip(varname) ||" equals Missing";
64478     +            end;
64479     +         end;
64480     +         else if RELATION in ("ISNOTMISSING") then do;
64481     +            if ^first.node then do;
64482     +              string = " AND "|| strip(varname) || " equals All Values";
64483     +            end;
64484     +            else do;
64485     +              string = "if "|| strip(varname) ||" equals All Values";
64486     +            end;
64487     +         end;
64488     +         if ^missing(varname) then origvar = varname;
64489     +         oldnode=node;
64491     +      end;
64492     +      else do;
64493     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
64494     +          if MISSING(CHARACTER_VALUE) then do;
64495     +           if  NUMERIC_VALUE ne .  then do;
64496     +            if ^MISSING(string) then
64497     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
64498     +            else
64499     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
64500     +           end;
64501     +          end;
64502     +          else do;
64503     +            if ^MISSING(string) then
64504     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
64505     +            else
64506     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
64507     +          end;
64509     +         end;
64510     +         else if RELATION in ("=") then do;
64511     +           string = strip(string)||", "||strip(character_value);
64512     +         end;
64513     +         else if RELATION in ("ISMISSING") then do;
64515     +         end;
64516     +         if ^missing(varname) then origvar = varname;
64517     +         oldnode=node;
64518     +      end;
64519     +      if last.varname then do;
64520     +         if RELATION in ("ISMISSING") then do;
64521     +           if ^first.varname then do;
64522     +             string = strip(string) || " or MISSING";
64523     +           end;
64524     +         end;
64525     +         put string;
64526     +         if ^missing(varname) then origvar = varname;
64527     +         oldnode=node;
64528     +      end;
64530     +      if last.node then do;
64531     +         put "then ";
64532     +         put " Tree Node Identifier   = " node;
64534     +         %if "&nprior_flag" ne "." %then %do;
64535     +           put " Number of Observations = " NPRIORS;
64536     +         %end;
64537     +         %else %do;
64538     +           put " Number of Observations = " N;
64539     +         %end;
64541     +         %if &numpred gt 0 %then %do;
64542     +           %do i=1 %to &numpred;
64543     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
64544     +           %end;
64545     +         %end;
64547     +         put " ";
64548     +         if ^missing(varname) then origvar = varname;
64549     +         oldnode=node;
64550     +      end;
64552     +  run;
64554     +  proc datasets lib=work nolist;
64555     +    delete tempoutpath outnodes;
64556     +  run;
64558     +  %doendm:
64559     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS2.em_Tree / view=EMWS2.em_Tree;
MPRINT(EM_TREE_TRAIN):   set EMWS2.Part_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =Age_group Disease Gender Population_in_thousands Cases_in_1000s Cases_in_1000s );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS2.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS2.em_Tree;
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 750 observations read from the data set EMWS2.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS2.Tree_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS2.em_Tree Leafsize = 8 MinCatSize = 5 MaxBranch = 2 MaxDepth = 10
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 4 Maxsurrs = 3 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   Population_in_thousands
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Age_group Disease Gender
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   Cases_in_1000s
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   INTERVAL
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBF;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS2.Part_VALIDATE measure=ASE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1576063 kilobytes of physical memory.
NOTE: Will use 743 out of 750 training cases.
NOTE: Using memory pool with 67759104 bytes.
NOTE: Passed training data 22 times.
NOTE: Training used 106600 bytes of work memory.
NOTE: The subtree sequence contains 43 subtrees. The largest has 85 nodes and 43 leaves.
NOTE: Using subtree with 85 nodes and 43 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 85 nodes and 43 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 43.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS2.Tree_EMTREE SEQUENCE=EMWS2.Tree_OUTSEQ IMPORTANCE=EMWS2.Tree_OUTIMPORT NODESTAT=EMWS2.Tree_OUTNODES SUMMARY=EMWS2.Tree_OUTSUMMARY STATSBYNODE=EMWS2.Tree_OUTSTATS TOPOLOGY=EMWS2.Tree_OUTTOPOLOGY 
Pathlistnonmissing=EMWS2.Tree_OUTPATH RULES = EMWS2.Tree_OUTRULES ;
NOTE: The data set EMWS2.TREE_OUTIMPORT has 4 observations and 7 variables.
NOTE: The data set EMWS2.TREE_EMTREE has 2623 observations and 4 variables.
NOTE: The data set EMWS2.TREE_OUTNODES has 85 observations and 16 variables.
NOTE: The data set EMWS2.TREE_OUTPATH has 283 observations and 7 variables.
NOTE: The data set EMWS2.TREE_OUTRULES has 908 observations and 6 variables.
NOTE: The data set EMWS2.TREE_OUTSEQ has 43 observations and 18 variables.
NOTE: The data set EMWS2.TREE_OUTSTATS has 510 observations and 4 variables.
NOTE: The data set EMWS2.TREE_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS2.TREE_OUTTOPOLOGY has 85 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TREEFLOW.sas" res group=Tree ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TREEPUBLISH.sas" nores group=Tree ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TREEPUBLISH.sas opened.
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS2.em_Tree out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: There were 750 observations read from the data set EMWS2.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS2.Part_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS2.Part_TEST out=_NULL_ outfit=work.fit_test role=TEST;
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.20 seconds
      
NOTE: There were 750 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 750 observations read from the data set EMWS2.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.23 seconds
      cpu time            0.21 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS2.Tree_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS2.Tree_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid work.fit_test ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "Cases_in_1000s";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS2.TREE_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_test;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $23;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS2.Tree_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 283 observations read from the data set EMWS2.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 283 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS2.Ids2_Cases_in_1000s_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1 observations read from the data set EMWS2.IDS2_CASES_IN_1000S_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS2.Tree_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 283 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 283 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS2.Tree_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 85 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 85 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node N P_Cases_in_1000s );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 283 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 85 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 283 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 283 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 283 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " N;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Cases_in_1000s = " P_Cases_in_1000s;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195   
NOTE: The file X is:
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=09Dec2019:16:18:55,
      Create Time=19Nov2019:16:01:59

NOTE: 484 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 110.
NOTE: There were 283 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61347910650702;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64561      
64562      *------------------------------------------------------------*;
64563      * End TRAIN: Tree;
64564      *------------------------------------------------------------*;

64565      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
64566      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
64567      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64568      ;
MPRINT(EM_DIAGRAM):   ;
64569      ;
MPRINT(EM_DIAGRAM):   ;
64570      ;
MPRINT(EM_DIAGRAM):   ;
64571      ;
MPRINT(EM_DIAGRAM):   ;
64572      quit;
MPRINT(EM_DIAGRAM):   quit;
64573      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64574      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
64575      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64576      /*; *"; *'; */
64577      ;
MPRINT(EM_DIAGRAM):   ;
64578      run;
MPRINT(EM_DIAGRAM):   run;
64579      quit;
MPRINT(EM_DIAGRAM):   quit;
64580      /* Reset EM Options */
64581      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
64582      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
64583      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
64584      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
64585      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
64586      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
