MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 04, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:44:51" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 04, 2019
Time:                13:44:51
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O21YN8GX "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O21YN8GX new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 04, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:44:51" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 04, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:44:51" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
62794      proc freq data=EMWS2.Tree_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.Tree_VariableSet noprint;
62795      table ROLE*LEVEL/out=WORK.TreeMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TreeMETA;
62796      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set EMWS2.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

62797      proc print data=WORK.TreeMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TreeMETA label noobs;
62798      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
62799      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
62800      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
62801      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
62802      run;

NOTE: There were 4 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 18.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

62803      title10;
MPRINT(EM_DIAGRAM):   title10;
62804      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "Cases_in_1000s"." 
62805      proc print data = EMWS2.Ids_Cases_in_1000s_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS2.Ids_Cases_in_1000s_DM noobs label;
62806      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
62807      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
62808      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
62809      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
62810      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
62811      run;

NOTE: There were 3 observations read from the data set EMWS2.IDS_CASES_IN_1000S_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 19.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

62812      title10;
MPRINT(EM_DIAGRAM):   title10;
62813      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Base Model 2';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Cases_in_1000s(label="Cases_in_1000s");
MPRINT(EM_DECDATA):   length Cases_in_1000s 8 ;
MPRINT(EM_DECDATA):   Cases_in_1000s=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Cases_in_1000s=229;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Cases_in_1000s=114.5;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Cases_in_1000s";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS2.Ids_Cases_in_1000s_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS2.Ids_Cases_in_1000s_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Cases_in_1000s";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS2.Ids_Cases_in_1000s_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS2.Ids_Cases_in_1000s_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
63314      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
63315      * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
63316      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
63317      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

63318      %let EMEXCEPTIONSTRING=;
63319      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
63320      * TRAIN: Tree;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree;
63321      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
63322      %let EM_ACTION = TRAIN;
63323      %let syscc = 0;
63324      %macro main;
63325      
63326        %if %upcase(&EM_ACTION) = CREATE %then %do;
63327          filename temp catalog 'sashelp.emmodl.tree_create.source';
63328          %include temp;
63329          filename temp;
63330      
63331          %em_tree_create;
63332        %end;
63333      
63334         %else
63335         %if %upcase(&EM_ACTION) = TRAIN %then %do;
63336      
63337             filename temp catalog 'sashelp.emmodl.tree_train.source';
63338             %include temp;
63339             filename temp;
63340             %em_tree_train;
63341         %end;
63342      
63343        %else
63344        %if %upcase(&EM_ACTION) = SCORE %then %do;
63345          filename temp catalog 'sashelp.emmodl.tree_score.source';
63346          %include temp;
63347          filename temp;
63348      
63349          %em_tree_score;
63350      
63351        %end;
63352      
63353        %else
63354        %if %upcase(&EM_ACTION) = REPORT %then %do;
63355      
63356             filename temp catalog 'sashelp.emmodl.tree_report.source';
63357             %include temp;
63358             filename temp;
63359      
63360             %em_tree_report;
63361         %end;
63362      
63363        %else
63364        %if %upcase(&EM_ACTION) = OPENINT %then %do;
63365      
63366             filename temp catalog 'sashelp.emmodl.tree_actions.source';
63367             %include temp;
63368             filename temp;
63369             %EM_TREE_OPENTREEVIEWER;
63370      
63371         %end;
63372      
63373        %else
63374        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
63375      
63376             filename temp catalog 'sashelp.emmodl.tree_actions.source';
63377             %include temp;
63378             filename temp;
63379             %EM_TREE_CLOSETREEVIEWER;
63380      
63381         %end;
63382      
63383      
63384         %doendm:
63385      %mend main;
63386      
63387      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
63389     +%macro em_tree_train;
63391     +   %if &EM_IMPORT_DATA eq %then %do;
63392     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
63393     +       %put &em_codebar;
63394     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
63395     +       %put &errormsg;
63396     +       %put &em_codebar;
63397     +       %goto doendm;
63398     +   %end;
63399     +   %else
63400     +       %let EMEXCEPTIONSTRING =;
63402     +   %if  &EM_NUM_TARGET lt 1 %then %do;
63403     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
63404     +        %put &em_codebar;
63405     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
63406     +        %put &errormsg;
63407     +        %put &em_codebar;
63408     +        %goto doendm;
63409     +   %end;
63411     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
63412     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
63413     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
63414     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
63415     +        %put &em_codebar;
63416     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
63417     +        %put &errormsg;
63418     +        %put &em_codebar;
63419     +        %goto doendm;
63420     +   %end;
63422     +   /* Initialize property macro variables */
63423     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
63424     +   %include temp;
63425     +   filename temp;
63427     +   %EM_SetProperties;
63429     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
63430     +   %EM_GETNAME(key=EMTREE, type=DATA);
63431     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
63432     +     /* if import eq Y and no importtable defined, throw an exception */
63433     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
63434     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
63435     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
63436     +         %put &em_codebar;
63437     +         %put &errmsg;
63438     +         %put &em_codebar;
63439     +         %goto doendm;
63440     +      %end;
63441     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
63442     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
63443     +         %put &em_codebar;
63444     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
63445     +         %put &errormsg;
63446     +         %put &em_codebar;
63447     +         %goto doendm;
63448     +      %end;
63449     +      %else %do;
63450     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
63451     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
63452     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
63453     +         %let varnumX = %sysfunc(varnum(&dsid,X));
63454     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
63455     +         %let dsid = %sysfunc(close(&dsid));
63456     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
63457     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
63458     +            %put &em_codebar;
63459     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
63460     +            %put &errormsg;
63461     +            %put &em_codebar;
63462     +            %goto doendm;
63463     +         %end;
63464     +      %end;
63465     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
63466     +         proc delete data=&EM_USER_EMTREE;
63467     +         run;
63468     +      %end;
63469     +   %end;
63470     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
63471     +      proc delete data=&EM_USER_EMTREE;
63472     +      run;
63473     +   %end;
63475     +   /* load tree macros */
63476     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
63477     +   %include temp;
63478     +   filename temp;
63480     +   /* data sets */
63481     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
63482     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
63483     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
63485     +   /* files */
63486     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
63488     +   /* check actual num of target levels */
63489     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
63490     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
63491     +                              nLevel=_nTargetLevel );
63492     +      %if &_nTargetLevel  > 2 %then %do;
63493     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
63494     +        %put &em_codebar;
63495     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
63496     +        %put &errormsg;
63497     +        %put &em_codebar;
63498     +        %goto doendm;
63499     +      %end;
63500     +   %end;
63502     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
63503     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
63504     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
63505     +        %let costflag=0;
63506     +        data _null_;
63507     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
63508     +          if eof then call symput("costflag", _N_);
63509     +        run;
63510     +        %if &costflag gt 0 %then %do;
63511     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
63512     +          %put &em_codebar;
63513     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
63514     +          %put &errormsg;
63515     +          %put &em_codebar;
63516     +          %goto doendm;
63517     +       %end;
63518     +     %end;
63519     +   %end;
63521     +   /* determine if multiple targets will be processed */
63522     +   %let em_tree_multipleTargets=N;
63523     +   %let em_tree_numTarget = 1;
63524     +   %let em_tree_targetVars=;
63526     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
63527     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
63528     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
63529     +         %let em_tree_multipleTargets=N;
63530     +      %end;
63531     +      %else %do;
63532     +         /* create macro array of targets  */
63533     +         data _null_;
63534     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
63535     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
63536     +           if eof then
63537     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
63538     +        run;
63540     +        %if &em_tree_numTarget gt 1 %then %do;
63541     +           %let em_tree_multipleTargets=Y;
63542     +        %end;
63543     +      %end;
63544     +   %end;
63546     +   /* create view of only necessary variable for performance reasons */
63547     +   %let tempData = &EM_LIB..em_&EM_NODEID;
63548     +   data &tempData / view=&tempData;
63549     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
63550     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
63551     +       %EM_TARGET
63552     +     %end;
63553     +     %else %do;
63554     +       %if &em_tree_numTarget ne 0 %then %do;
63555     +         %do i=1 %to &em_tree_numTarget;
63556     +            &&em_tree_targetVars&i
63557     +         %end;
63558     +       %end;
63559     +     %end;
63560     +     );
63561     +   run;
63563     +   /* run Tree procedure */
63564     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
63566     +   /* Check return code and throw exception if error is detected */
63567     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
63568     +   %if &syserr %then %do;
63569     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
63570     +     %goto doendm;
63571     +   %end;
63573     +   /* add decision score code if multiple targets are processed */
63574     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
63575     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
63576     +   %end;
63578     +   /* create outfit dataset if multiple score statements have been executed */
63579     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
63581     +   /* create English Rules */
63582     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
63583     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
63584     +       %em_tree_makeEnglishRules;
63586     +       /* English Rules */
63587     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
63589     +     %end;
63590     +   filename x;
63592     +   %doendm:
63593     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
63594     +%macro EM_SetProperties;
63596     +   /* train properties */
63597     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
63598     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
63599     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
63600     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
63601     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
63602     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
63603     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
63604     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
63605     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
63606     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
63607     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
63608     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
63609     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
63610     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
63611     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
63612     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
63613     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
63614     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
63615     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
63616     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
63617     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
63618     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
63619     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
63620     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
63621     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
63622     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
63623     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
63624     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
63625     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
63626     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
63627     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
63628     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
63629     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
63630     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
63631     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
63632     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
63633     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
63634     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
63635     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
63636     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
63637     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
63639     +   /* properties for interactive sample */
63640     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
63641     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
63642     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
63643     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
63645     +   /* report properties */
63646     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
63647     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
63648     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
63649     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
63650     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
63651     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
63652     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
63653     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
63654     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
63655     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
63656     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
63657     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
63658     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
63660     +   /* score properties */
63661     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
63662     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
63664     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS2.Tree_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;

NOTE: Deleting EMWS2.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
63666     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
63667     +  %global &nLevel;
63668     +  proc dmdb batch data=&indata
63669     +    classout=_tmp_dmdbout;
63670     +    class &target;
63671     +  run;
63672     +  data _tmp_dmdbout;
63673     +    set _tmp_dmdbout;
63674     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
63675     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
63676     +  run;
63677     +  data _null_;
63678     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
63679     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
63680     +    %let dsid = %sysfunc(close(&dsid));
63681     +     call symput("&nLevel", put(&_obs, Best12.));
63682     +  run;
63684     +  proc datasets lib=work nolist;
63685     +     delete _tmp_dmdbout;
63686     +  run;
63687     +  quit;
63688     +%Mend EM_CheckBinaryTargetLevel;
63691     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
63693     +  /* determine the number of obs in training data */
63694     +  proc sql;
63695     +    reset noprint;
63696     +    select count(*) into :em_nobs from &indata;
63697     +  quit;
63699     +  /* determine the number of input variables */
63700     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
63701     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
63703     +  /* retrieve targetEvent from decmeta */
63704     +  %let targetEvent=;
63705     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
63706     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
63707     +      data _null_;
63708     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
63709     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
63710     +      run;
63711     +    %end;
63712     +  %end;
63714     +  /* create targetTable if multipleTar eq Y */
63715     +  data temptarget;
63716     +    set &EM_DATA_VARIABLESET;
63717     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
63718     +  run;
63720     + /* data sets */
63721     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
63722     + %EM_GETNAME(key=EMTREE,        type=DATA);
63723     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
63724     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
63725     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
63726     + %EM_GETNAME(key=OUTNODES,      type=DATA);
63727     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
63728     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
63729     + %EM_GETNAME(key=OUTPATH,       type=DATA);
63730     + %EM_GETNAME(key=OUTRULES,      type=DATA);
63732     + /* files */
63733     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
63734     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
63736     + /* turn on pmml if requested */
63737     + %let nnpmml=0;
63738     + %if %symexist(EM_PMML) %then %do;
63739     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
63740     +       %let nnpmml=1;
63742     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
63743     +   %end;
63744     +%end;
63746     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
63748     +%if &nnpmml or &numClassTarget %then %do;
63750     +    /* create dmdb needed for pmml generation */
63751     +    %let tree_maxlevel = 512;
63752     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
63753     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
63754     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
63755     +      %end;
63756     +    %end;
63757     +    %if &tree_maxlevel gt 0 %then %do;
63758     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
63759     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
63760     +    %end;
63762     +    %let targetOrderString =;
63763     +    %let targetString = ;
63764     +    data _null_;
63765     +       length orderString nameString $10000;
63766     +       retain orderString nameString;
63767     +       set &em_data_variableset end=eof;
63768     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
63769     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
63770     +       %end;
63771     +       %else %do;
63772     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
63773     +       %end;          select(order);
63774     +         when('')        order ='DESC';
63775     +         when('FMTASC')  order='ASCFMT';
63776     +         when('FMTDESC') order='DESFMT';
63777     +         otherwise;
63778     +       end;
63779     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
63780     +       nameString = trim(nameString)!!' '!!trim(NAME);
63782     +       if eof then do;
63783     +          call symput('targetOrderString', trim(orderString));
63784     +          call symput('targetString', trim(nameString));
63785     +       end;
63786     +    run;
63788     +    %let arborkluge= "work._treeDMDB";
63790     +    proc dmdb batch data=&indata
63791     +    %if &nnpmml %then %do;
63792     +        PMML
63793     +    %end;
63794     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
63796     +      %if &nnpmml %then %do;
63797     +           %if "%EM_ID" ne "" %then %do;
63798     +             id %EM_ID;
63799     +           %end;
63800     +           %if &EM_NUM_CLASS gt 0 %then %do;
63801     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
63802     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
63803     +                  &targetOrderString;
63804     +           %end;
63805     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
63806     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
63807     +           %end;
63808     +           target &targetString %EM_INTERVAL_TARGET;
63809     +           %if "%EM_FREQ" ne "" %then %do;
63810     +             freq %EM_FREQ;
63811     +           %end;
63812     +      %end;
63813     +      %else %do;
63814     +         class  &targetOrderString;
63815     +         target &targetString %EM_INTERVAL_TARGET;
63816     +      %end;
63817     +    run;
63818     +    quit;
63820     +    proc datasets lib=work nolist;
63821     +       delete classout varout;
63822     +    run;
63823     +    quit;
63825     + %end;
63828     + /* run Arbor procedure */
63829     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
63830     +  proc arbor data=&INDATA
63832     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
63833     +    Leafsize = &EM_PROPERTY_LEAFSIZE
63834     +  %end;
63836     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
63837     +    Splitsize = &EM_PROPERTY_SPLITSIZE
63838     +  %end;
63840     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
63841     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
63842     +  %end;
63844     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
63845     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
63846     +  %end;
63848     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
63849     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
63850     +  %end;
63852     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
63853     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
63854     +  %end;
63855     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
63856     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
63857     +  %end;
63858     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
63859     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
63860     +  %end;
63862     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
63863     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
63864     +      alpha = &EM_PROPERTY_SIGLEVEL
63865     +    %end;
63866     +  %end;
63868     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
63869     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
63870     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
63871     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
63872     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
63874     +        padjust =
63875     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
63876     +          &chaid
63877     +        %end;
63878     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
63879     +          DEPTH
63880     +        %end;
63881     +      %end;
63882     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
63883     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
63884     +         pvars = &num_inputs
63885     +      %end;
63886     +    %end;
63887     +  %end;
63888     +  %else %do;
63889     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
63890     +         padjust = NONE
63891     +      %end;
63892     +  %end;
63894     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
63895     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
63896     +    Maxrules = &num_nrules
63897     +  %end;
63899     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
63900     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
63901     +    Maxsurrs = &num_nsurrs
63902     +  %end;
63904     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
63905     +     Missing=&EM_PROPERTY_MISSINGVALUE
63906     +  %end;
63908     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
63909     +     USEVARONCE
63910     +  %end;
63912     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
63913     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
63914     +  %end;
63917     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
63918     +    event = "&targetEvent"
63919     +  %end;
63921     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
63922     +     DECSEARCH
63923     +  %end;
63925     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
63926     +     PRIORSSEARCH
63927     +  %end;
63929     +  %if &arbor_1 ne %then %do;
63930     +    &arbor_1
63931     +  %end;
63933     +  %if &em_arbor ne %then %do;
63934     +     &em_arbor
63935     +  %end;
63936     +  ;
63937     + %end;
63938     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
63939     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
63940     +       Performance &EM_PROPERTY_PERFORMANCE
63941     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
63942     +         nodesize=&EM_PROPERTY_NODESAMPLE
63943     +       %end;
63944     +       ;
63945     +       interact;
63946     + %end;
63947     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
63948     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
63949     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
63950     +    %put &em_codebar;
63951     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
63952     +    %put &errormsg;
63953     +    %put &em_codebar;
63954     +    %goto doendm;
63955     +   %end;
63956     +   %else %do;
63957     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
63958     +       Performance &EM_PROPERTY_PERFORMANCE
63959     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
63960     +         nodesize=&EM_PROPERTY_NODESAMPLE
63961     +       %end;
63962     +       ;
63963     +       interact;
63964     +   %end;
63965     + %end;
63967     + %else %do;
63968     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
63969     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
63970     +    %put &em_codebar;
63971     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
63972     +    %put &errormsg;
63973     +    %put &em_codebar;
63974     +    %goto doendm;
63975     +   %end;
63976     +   %else %do;
63977     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
63978     +       Performance &EM_PROPERTY_PERFORMANCE
63979     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
63980     +         nodesize=&EM_PROPERTY_NODESAMPLE
63981     +       %end;
63982     +       ;
63983     +        interact;
63984     +   %end;
63985     + %end;
63987     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
63988     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
63989     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
63990     +    %end;
63992     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
63993     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
63994     +    %end;
63996     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
63997     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
63998     +    %end;
64000     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
64001     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
64002     +    %end;
64004     +    %if "%EM_FREQ" ne "" %then %do;
64005     +       freq %EM_FREQ;
64006     +    %end;
64008     +    %if "&multipleTar" eq "Y" %then %do;
64009     +       /* cycle through all target vars in variableset */
64010     +       %let tdsid = %sysfunc(open(temptarget));
64011     +       %if &tdsid %then %do;
64012     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
64013     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
64014     +          %do %while(^ %sysfunc(fetch(&tdsid)));
64015     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
64016     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
64017     +             target &var / level = &lvl
64018     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
64019     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
64020     +             %end;
64021     +             %else %if "&lvl" eq "INTERVAL" %then %do;
64022     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
64023     +             %end;
64024     +             %else %if "&lvl" eq "ORDINAL" %then %do;
64025     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
64026     +             %end;
64027     +          %end;
64028     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
64029     +       %end;
64030     +       useTarget variable = %EM_TARGET;
64031     +    %end;
64032     +    %else %do;
64033     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
64034     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
64035     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
64036     +      %end;
64037     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
64038     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
64039     +      %end;
64040     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
64041     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
64042     +      %end;
64043     +    %end;
64045     +    %if "&multipleTar" eq "N" %then %do;
64046     +      &EM_DEC_STATEMENT;
64047     +    %end;
64049     +    Performance &EM_PROPERTY_PERFORMANCE
64050     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
64051     +      nodesize=&EM_PROPERTY_NODESAMPLE
64052     +    %end;
64053     +    ;
64055     +    %if "&intFlag" eq "Y" %then %do;
64056     +       INTERACT Largest;
64057     +       Train maxnewdepth=0;
64058     +    %end;
64060     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
64061     +         Assess
64062     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
64063     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
64064     +              %put &em_codebar;
64065     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
64066     +              %put &errormsg;
64067     +              %put &em_codebar;
64068     +            %end;
64069     +            %else %do;
64070     +               Validata=&EM_IMPORT_VALIDATE
64071     +            %end;
64072     +         %end;
64073     +         %else %do;
64074     +           NoValidata
64075     +         %end;
64076     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
64077     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
64078     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
64079     +               %if &dsid %then %do;
64080     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
64081     +                 %do %while(^ %sysfunc(fetch(&dsid)));
64082     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
64083     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
64084     +                   %else %do;
64085     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
64086     +                      %else %let measure= MISC;
64087     +                   %end;
64088     +                 %end;
64089     +               %end;
64090     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64091     +            %end;
64092     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
64093     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
64094     +                 %let measure=ASE;
64095     +              %end;
64096     +              %else %do;
64097     +                 %let measure=MISC;
64098     +              %end;
64099     +            %end;
64100     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
64101     +              %let measure=ASE;
64102     +            %end;
64103     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
64104     +               %let measure = LIFT;
64105     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
64106     +               %if &dsid %then %do;
64107     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
64108     +                 %do %while(^ %sysfunc(fetch(&dsid)));
64109     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
64110     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
64111     +                 %end;
64112     +               %end;
64113     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
64114     +            %end;
64115     +            measure=&measure
64116     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
64117     +               event = "&targetEvent"
64118     +            %end;
64119     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
64120     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
64121     +            %end;
64122     +         %end;
64123     +         %if "&multipleTar" eq "N" %then %do;
64124     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
64125     +               CV
64126     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
64127     +                 CVNITer = &EM_PROPERTY_CVNITER
64128     +               %end;
64129     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
64130     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
64131     +               %end;
64132     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
64133     +                 CVSeed = &EM_PROPERTY_CVSEED
64134     +               %end;
64135     +            %end;
64136     +         %end;
64137     +       %end;
64138     +      ;
64140     +      %if "&intFlag" ne "Y" %then %do;
64141     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
64142     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
64143     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
64144     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
64146     +          SUBTREE &subtree
64147     +          %if "&subtree" eq "NLEAVES" %then %do;
64148     +            =&EM_PROPERTY_NSUBTREE
64149     +          %end;
64150     +          ;
64151     +        %end;
64153     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
64154     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
64155     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
64156     +          %end;
64157     +       %end;
64158     +      %end;
64159     + %end;
64162     + MakeMacro nleaves = nleaves;
64163     + save
64164     + %if "&EM_USER_EMTREE" ne "" %then %do;
64165     +   MODEL=&EM_USER_EMTREE
64166     + %end;
64167     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
64168     +   SEQUENCE=&EM_USER_OUTSEQ
64169     + %end;
64170     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
64171     +   IMPORTANCE=&EM_USER_OUTIMPORT
64172     + %end;
64173     + %if "&EM_USER_OUTNODES" ne "" %then %do;
64174     +   NODESTAT=&EM_USER_OUTNODES
64175     + %end;
64176     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
64177     +   SUMMARY=&EM_USER_OUTSUMMARY
64178     + %end;
64179     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
64180     +   STATSBYNODE=&EM_USER_OUTSTATS
64181     + %end;
64182     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
64183     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
64184     + %end;
64185     + %if "&EM_USER_OUTPATH" ne "" %then %do;
64186     +   Pathlistnonmissing=&EM_USER_OUTPATH
64187     + %end;
64188     + %if "&EM_USER_OUTRULES" ne "" %then %do;
64189     +   RULES = &EM_USER_OUTRULES
64190     + %end;
64191     + ;
64193     + %if "&intFlag" ne "Y" %then %do;
64195     +   %let lookupString = ;
64196     +   %if ^%symexist(EM_OPTION) %then
64197     +      %let EM_OPTION=;
64199     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
64200     +      %let lookupString = LOOKUP=SELECT;
64201     +   %end;
64203     +   %let codetext=;
64204     +   %let norescodetxt=;
64206     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
64207     +     %let codetext=&codetext DUMMY;
64208     +     %let norescodetxt=&norescodetxt DUMMY;
64209     +   %end;
64210     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
64211     +     %let codetext=&codetext NOLEAFID;
64212     +     %let norescodetxt=&norescodetxt NOLEAFID;
64213     +   %end;
64214     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
64215     +     %let norescodetxt=&norescodetxt NOPRED;
64216     +   %end;
64218     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
64219     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
64221     +   %if &nnpmml %then %do;
64222     +     code pmml;
64223     +   %end;
64225     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
64226     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
64227     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
64228     +   %end;
64229     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
64230     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
64231     +   %end;
64232     + %end;
64234     + run;
64235     + quit;
64237     + /*%em_checkerror(); */
64238     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
64239     +   /* Delete DMDB catalog */
64240     +   proc datasets lib=work nolist;
64241     +       delete _treeDMDB / mt=cat;
64242     +  run;
64243     +  %end;
64245     + %if &nnpmml %then %do;
64246     +    ods pmml close;
64247     + %end;
64249     +  %doendm:
64251     +%mend em_tree_runTreeProcedure;
64253     +%macro em_tree_createFitStats( multipleTar= );
64256     +  /* create targetTable is multipleTar eq Y */
64257     +  data temptarget;
64258     +    set &EM_DATA_VARIABLESET;
64259     +    where ROLE="TARGET";
64260     +  run;
64262     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
64263     +   data &EM_USER_EMOUTFIT;
64264     +     length target $32;
64265     +     merge work.fit_train
64266     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
64267     +       work.fit_valid
64268     +     %end;
64269     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
64270     +       work.fit_test
64271     +     %end;
64272     +     ;
64273     +     %if "&multipleTar" eq "N" %then %do;
64274     +       target="%EM_TARGET";
64275     +     %end;
64276     +     %else %do;
64277     +       target = _TARGET_;
64278     +     %end;
64279     +     drop _NW_ _SUMW_
64280     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
64281     +        _VSUMW_
64282     +     %end;
64283     +     ;
64284     +   run;
64286     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
64287     +     proc datasets library=work nolist;
64288     +       delete fit_valid;
64289     +     run;
64290     +   %end;
64291     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
64292     +     proc datasets library=work nolist;
64293     +       delete fit_test;
64294     +     run;
64295     +   %end;
64297     +%mend em_tree_createFitStats;
64300     +%macro em_tree_makeEnglishRules;
64302     +  %EM_GETNAME(key=OUTNODES, type=DATA);
64303     +  %EM_GETNAME(key=OUTPATH, type=DATA);
64305     +  /* verify that necessary tables exist and if not, skip processing */
64306     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
64307     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
64308     +    %goto doendm;
64309     +  %end;
64310     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
64311     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
64312     +    %goto doendm;
64313     +  %end;
64315     +  /* determine length of variable in outpath dataset */
64316     +  %let vlength= ;
64317     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
64318     +  %if &dsid ne %then %do;
64319     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
64320     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
64321     +  %end;
64322     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
64324     +  data tempoutpath;
64325     +    length varname $&vlength;
64326     +    retain varname;
64327     +    set &EM_USER_OUTPATH;
64329     +    if ^missing(variable) then varname=variable;
64330     +    else if ^missing(var_name) then varname=var_name;
64331     +    output;
64332     +  run;
64334     +  /* create an array of generated predicted variable names */
64335     +  %let tree_pred_vars = ;
64336     +  %let tree_pred_label = ;
64337     +  %let numpred= 0;
64338     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
64340     +    data _null_;
64341     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
64342     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
64343     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
64344     +     if eof then
64345     +       call symput('numpred', strip(put(_N_, BEST.)));
64346     +    run;
64347     +  %end;
64349     +  /* determine if NPRIORS exists in outnodes  */
64350     +  %local nprior_flag;
64351     +  data _null_;
64352     +    set &EM_USER_OUTNODES(obs=2) end=eof;
64353     +    if eof then do;
64354     +      call symput('nprior_flag', strip(put(npriors, best.)));
64355     +    end;
64356     +  run;
64358     +  proc sort data=tempoutpath; by node; run;
64359     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
64361     +  data tempoutpath;
64362     +    merge tempoutpath(in=_a) outnodes(keep= node
64363     +    %if "&nprior_flag" ne "." %then %do;
64364     +      NPRIORS
64365     +    %end;
64366     +    %else %do;
64367     +      N
64368     +    %end;
64369     +    %if &numpred gt 0 %then %do;
64370     +      %do i=1 %to &numpred;
64371     +        &&tree_pred_vars&i
64372     +      %end;
64373     +    %end;
64374     +    );
64375     +    by node;
64376     +    if _a;
64377     +  run;
64379     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
64381     +  data _null_;
64382     +    file x;
64383     +    set tempoutpath;
64384     +    by node descending varname;
64385     +    retain origvar oldnode string;
64386     +    length origvar $32 oldnode 8 string $200;
64388     +    if _N_ = 1 then do;
64389     +      origvar = varname;
64390     +      oldnode = node;
64391     +    end;
64393     +    if first.node then do;
64394     +       put "&EM_CODEBAR";
64395     +       put " Node = " node;
64396     +       put "&EM_CODEBAR";
64397     +    end;
64399     +      if first.varname then do;
64400     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
64401     +            if MISSING(CHARACTER_VALUE) then do;
64402     +             if NUMERIC_VALUE ne .  then do;
64403     +              if ^first.node then do;
64404     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
64405     +              end;
64406     +              else do;
64407     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
64408     +              end;
64409     +             end;
64410     +            end;
64411     +            else do;
64412     +              if ^first.node then do;
64413     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
64414     +              end;
64415     +              else do;
64416     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
64417     +              end;
64418     +             end;
64419     +         end;
64420     +         else if RELATION in ("=") then do;
64421     +            if ^first.node then do;
64422     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
64423     +            end;
64424     +            else do;
64425     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
64426     +            end;
64427     +         end;
64428     +         else if RELATION in ("ISMISSING") then do;
64429     +            if ^first.node then do;
64430     +              string = " AND "|| strip(varname) || " equals Missing";
64431     +            end;
64432     +            else do;
64433     +              string = "if "|| strip(varname) ||" equals Missing";
64434     +            end;
64435     +         end;
64436     +         else if RELATION in ("ISNOTMISSING") then do;
64437     +            if ^first.node then do;
64438     +              string = " AND "|| strip(varname) || " equals All Values";
64439     +            end;
64440     +            else do;
64441     +              string = "if "|| strip(varname) ||" equals All Values";
64442     +            end;
64443     +         end;
64444     +         if ^missing(varname) then origvar = varname;
64445     +         oldnode=node;
64447     +      end;
64448     +      else do;
64449     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
64450     +          if MISSING(CHARACTER_VALUE) then do;
64451     +           if  NUMERIC_VALUE ne .  then do;
64452     +            if ^MISSING(string) then
64453     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
64454     +            else
64455     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
64456     +           end;
64457     +          end;
64458     +          else do;
64459     +            if ^MISSING(string) then
64460     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
64461     +            else
64462     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
64463     +          end;
64465     +         end;
64466     +         else if RELATION in ("=") then do;
64467     +           string = strip(string)||", "||strip(character_value);
64468     +         end;
64469     +         else if RELATION in ("ISMISSING") then do;
64471     +         end;
64472     +         if ^missing(varname) then origvar = varname;
64473     +         oldnode=node;
64474     +      end;
64475     +      if last.varname then do;
64476     +         if RELATION in ("ISMISSING") then do;
64477     +           if ^first.varname then do;
64478     +             string = strip(string) || " or MISSING";
64479     +           end;
64480     +         end;
64481     +         put string;
64482     +         if ^missing(varname) then origvar = varname;
64483     +         oldnode=node;
64484     +      end;
64486     +      if last.node then do;
64487     +         put "then ";
64488     +         put " Tree Node Identifier   = " node;
64490     +         %if "&nprior_flag" ne "." %then %do;
64491     +           put " Number of Observations = " NPRIORS;
64492     +         %end;
64493     +         %else %do;
64494     +           put " Number of Observations = " N;
64495     +         %end;
64497     +         %if &numpred gt 0 %then %do;
64498     +           %do i=1 %to &numpred;
64499     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
64500     +           %end;
64501     +         %end;
64503     +         put " ";
64504     +         if ^missing(varname) then origvar = varname;
64505     +         oldnode=node;
64506     +      end;
64508     +  run;
64510     +  proc datasets lib=work nolist;
64511     +    delete tempoutpath outnodes;
64512     +  run;
64514     +  %doendm:
64515     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS2.em_Tree / view=EMWS2.em_Tree;
MPRINT(EM_TREE_TRAIN):   set EMWS2.Part_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =Age_group Date Disease Gender Cases_in_1000s Cases_in_1000s );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS2.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS2.em_Tree;
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 378 observations read from the data set EMWS2.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS2.Tree_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS2.em_Tree Leafsize = 8 MinCatSize = 5 MaxBranch = 2 MaxDepth = 10
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 4 Maxsurrs = 3 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Age_group Date Disease Gender
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   Cases_in_1000s
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   INTERVAL
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBF;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS2.Part_VALIDATE measure=ASE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1576677 kilobytes of physical memory.
NOTE: Will use 372 out of 378 training cases.
NOTE: Using memory pool with 67759104 bytes.
NOTE: Passed training data 19 times.
NOTE: Training used 54400 bytes of work memory.
NOTE: The subtree sequence contains 19 subtrees. The largest has 37 nodes and 19 leaves.
NOTE: Using subtree with 37 nodes and 19 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 37 nodes and 19 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 19.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS2.Tree_EMTREE SEQUENCE=EMWS2.Tree_OUTSEQ IMPORTANCE=EMWS2.Tree_OUTIMPORT NODESTAT=EMWS2.Tree_OUTNODES SUMMARY=EMWS2.Tree_OUTSUMMARY STATSBYNODE=EMWS2.Tree_OUTSTATS TOPOLOGY=EMWS2.Tree_OUTTOPOLOGY 
Pathlistnonmissing=EMWS2.Tree_OUTPATH RULES = EMWS2.Tree_OUTRULES ;
NOTE: The data set EMWS2.TREE_OUTIMPORT has 4 observations and 7 variables.
NOTE: The data set EMWS2.TREE_EMTREE has 933 observations and 4 variables.
NOTE: The data set EMWS2.TREE_OUTNODES has 37 observations and 16 variables.
NOTE: The data set EMWS2.TREE_OUTPATH has 87 observations and 7 variables.
NOTE: The data set EMWS2.TREE_OUTRULES has 260 observations and 6 variables.
NOTE: The data set EMWS2.TREE_OUTSEQ has 19 observations and 18 variables.
NOTE: The data set EMWS2.TREE_OUTSTATS has 222 observations and 4 variables.
NOTE: The data set EMWS2.TREE_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS2.TREE_OUTTOPOLOGY has 37 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TREEFLOW.sas" res group=Tree ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TREEPUBLISH.sas" nores group=Tree ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TREEPUBLISH.sas opened.
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS2.em_Tree out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: There were 378 observations read from the data set EMWS2.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS2.Part_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS2.Part_TEST out=_NULL_ outfit=work.fit_test role=TEST;
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.20 seconds
      
NOTE: There were 378 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 378 observations read from the data set EMWS2.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.27 seconds
      cpu time            0.21 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS2.Tree_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS2.Tree_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid work.fit_test ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "Cases_in_1000s";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS2.TREE_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_test;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $23;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS2.Tree_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 87 observations read from the data set EMWS2.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 87 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS2.Ids_Cases_in_1000s_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1 observations read from the data set EMWS2.IDS_CASES_IN_1000S_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS2.Tree_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 87 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 87 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS2.Tree_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 37 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 37 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node N P_Cases_in_1000s );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 87 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 37 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 87 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 87 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 87 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " N;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Cases_in_1000s = " P_Cases_in_1000s;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195   
NOTE: The file X is:
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=04Dec2019:13:44:52,
      Create Time=19Nov2019:16:01:59

NOTE: 205 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 109.
NOTE: There were 87 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80916707208807;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64517      
64518      *------------------------------------------------------------*;
64519      * End TRAIN: Tree;
64520      *------------------------------------------------------------*;

64521      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
64522      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
64523      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64524      ;
MPRINT(EM_DIAGRAM):   ;
64525      ;
MPRINT(EM_DIAGRAM):   ;
64526      ;
MPRINT(EM_DIAGRAM):   ;
64527      ;
MPRINT(EM_DIAGRAM):   ;
64528      quit;
MPRINT(EM_DIAGRAM):   quit;
64529      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64530      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
64531      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64532      /*; *"; *'; */
64533      ;
MPRINT(EM_DIAGRAM):   ;
64534      run;
MPRINT(EM_DIAGRAM):   run;
64535      quit;
MPRINT(EM_DIAGRAM):   quit;
64536      /* Reset EM Options */
64537      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
64538      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
64539      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
64540      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
64541      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
64542      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
