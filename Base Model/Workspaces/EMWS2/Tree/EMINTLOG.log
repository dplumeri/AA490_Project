NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


19598      %let em_filemodtime=;
19599      data _null_;
19600      format modate best.;
19601      set sashelp.Vextfl;
19602      where fileref eq "#LN00147";
19603      call symput('EM_FILEMODTIME', put(modate, best.));
19604      run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00147';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

19605      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
19606      %let em_Train = N;
19607      %let em_Score = N;
19608      %let em_Report = N;
19609      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
19611     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
19612     +  %global &nLevel;
19613     +  proc dmdb batch data=&indata
19614     +    classout=_tmp_dmdbout;
19615     +    class &target;
19616     +  run;
19617     +  data _tmp_dmdbout;
19618     +    set _tmp_dmdbout;
19619     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
19620     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
19621     +  run;
19622     +  data _null_;
19623     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
19624     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
19625     +    %let dsid = %sysfunc(close(&dsid));
19626     +     call symput("&nLevel", put(&_obs, Best12.));
19627     +  run;
19629     +  proc datasets lib=work nolist;
19630     +     delete _tmp_dmdbout;
19631     +  run;
19632     +  quit;
19633     +%Mend EM_CheckBinaryTargetLevel;
19636     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
19638     +  /* determine the number of obs in training data */
19639     +  proc sql;
19640     +    reset noprint;
19641     +    select count(*) into :em_nobs from &indata;
19642     +  quit;
19644     +  /* determine the number of input variables */
19645     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
19646     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
19648     +  /* retrieve targetEvent from decmeta */
19649     +  %let targetEvent=;
19650     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19651     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
19652     +      data _null_;
19653     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
19654     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19655     +      run;
19656     +    %end;
19657     +  %end;
19659     +  /* create targetTable if multipleTar eq Y */
19660     +  data temptarget;
19661     +    set &EM_DATA_VARIABLESET;
19662     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
19663     +  run;
19665     + /* data sets */
19666     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
19667     + %EM_GETNAME(key=EMTREE,        type=DATA);
19668     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
19669     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
19670     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
19671     + %EM_GETNAME(key=OUTNODES,      type=DATA);
19672     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
19673     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
19674     + %EM_GETNAME(key=OUTPATH,       type=DATA);
19675     + %EM_GETNAME(key=OUTRULES,      type=DATA);
19677     + /* files */
19678     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
19679     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
19681     + /* turn on pmml if requested */
19682     + %let nnpmml=0;
19683     + %if %symexist(EM_PMML) %then %do;
19684     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
19685     +       %let nnpmml=1;
19687     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
19688     +   %end;
19689     +%end;
19691     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
19693     +%if &nnpmml or &numClassTarget %then %do;
19695     +    /* create dmdb needed for pmml generation */
19696     +    %let tree_maxlevel = 512;
19697     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
19698     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
19699     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
19700     +      %end;
19701     +    %end;
19702     +    %if &tree_maxlevel gt 0 %then %do;
19703     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
19704     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
19705     +    %end;
19707     +    %let targetOrderString =;
19708     +    %let targetString = ;
19709     +    data _null_;
19710     +       length orderString nameString $10000;
19711     +       retain orderString nameString;
19712     +       set &em_data_variableset end=eof;
19713     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
19714     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
19715     +       %end;
19716     +       %else %do;
19717     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
19718     +       %end;          select(order);
19719     +         when('')        order ='DESC';
19720     +         when('FMTASC')  order='ASCFMT';
19721     +         when('FMTDESC') order='DESFMT';
19722     +         otherwise;
19723     +       end;
19724     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
19725     +       nameString = trim(nameString)!!' '!!trim(NAME);
19727     +       if eof then do;
19728     +          call symput('targetOrderString', trim(orderString));
19729     +          call symput('targetString', trim(nameString));
19730     +       end;
19731     +    run;
19733     +    %let arborkluge= "work._treeDMDB";
19735     +    proc dmdb batch data=&indata
19736     +    %if &nnpmml %then %do;
19737     +        PMML
19738     +    %end;
19739     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
19741     +      %if &nnpmml %then %do;
19742     +           %if "%EM_ID" ne "" %then %do;
19743     +             id %EM_ID;
19744     +           %end;
19745     +           %if &EM_NUM_CLASS gt 0 %then %do;
19746     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
19747     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
19748     +                  &targetOrderString;
19749     +           %end;
19750     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
19751     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
19752     +           %end;
19753     +           target &targetString %EM_INTERVAL_TARGET;
19754     +           %if "%EM_FREQ" ne "" %then %do;
19755     +             freq %EM_FREQ;
19756     +           %end;
19757     +      %end;
19758     +      %else %do;
19759     +         class  &targetOrderString;
19760     +         target &targetString %EM_INTERVAL_TARGET;
19761     +      %end;
19762     +    run;
19763     +    quit;
19765     +    proc datasets lib=work nolist;
19766     +       delete classout varout;
19767     +    run;
19768     +    quit;
19770     + %end;
19773     + /* run Arbor procedure */
19774     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
19775     +  proc arbor data=&INDATA
19777     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
19778     +    Leafsize = &EM_PROPERTY_LEAFSIZE
19779     +  %end;
19781     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
19782     +    Splitsize = &EM_PROPERTY_SPLITSIZE
19783     +  %end;
19785     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
19786     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
19787     +  %end;
19789     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
19790     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
19791     +  %end;
19793     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
19794     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
19795     +  %end;
19797     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
19798     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
19799     +  %end;
19800     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
19801     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
19802     +  %end;
19803     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19804     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
19805     +  %end;
19807     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
19808     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
19809     +      alpha = &EM_PROPERTY_SIGLEVEL
19810     +    %end;
19811     +  %end;
19813     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
19814     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
19815     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
19816     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
19817     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
19819     +        padjust =
19820     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
19821     +          &chaid
19822     +        %end;
19823     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
19824     +          DEPTH
19825     +        %end;
19826     +      %end;
19827     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
19828     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
19829     +         pvars = &num_inputs
19830     +      %end;
19831     +    %end;
19832     +  %end;
19833     +  %else %do;
19834     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
19835     +         padjust = NONE
19836     +      %end;
19837     +  %end;
19839     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
19840     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
19841     +    Maxrules = &num_nrules
19842     +  %end;
19844     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
19845     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
19846     +    Maxsurrs = &num_nsurrs
19847     +  %end;
19849     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
19850     +     Missing=&EM_PROPERTY_MISSINGVALUE
19851     +  %end;
19853     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
19854     +     USEVARONCE
19855     +  %end;
19857     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
19858     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
19859     +  %end;
19862     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
19863     +    event = "&targetEvent"
19864     +  %end;
19866     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
19867     +     DECSEARCH
19868     +  %end;
19870     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
19871     +     PRIORSSEARCH
19872     +  %end;
19874     +  %if &arbor_1 ne %then %do;
19875     +    &arbor_1
19876     +  %end;
19878     +  %if &em_arbor ne %then %do;
19879     +     &em_arbor
19880     +  %end;
19881     +  ;
19882     + %end;
19883     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
19884     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
19885     +       Performance &EM_PROPERTY_PERFORMANCE
19886     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19887     +         nodesize=&EM_PROPERTY_NODESAMPLE
19888     +       %end;
19889     +       ;
19890     +       interact;
19891     + %end;
19892     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
19893     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
19894     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
19895     +    %put &em_codebar;
19896     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
19897     +    %put &errormsg;
19898     +    %put &em_codebar;
19899     +    %goto doendm;
19900     +   %end;
19901     +   %else %do;
19902     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
19903     +       Performance &EM_PROPERTY_PERFORMANCE
19904     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19905     +         nodesize=&EM_PROPERTY_NODESAMPLE
19906     +       %end;
19907     +       ;
19908     +       interact;
19909     +   %end;
19910     + %end;
19912     + %else %do;
19913     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
19914     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
19915     +    %put &em_codebar;
19916     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
19917     +    %put &errormsg;
19918     +    %put &em_codebar;
19919     +    %goto doendm;
19920     +   %end;
19921     +   %else %do;
19922     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
19923     +       Performance &EM_PROPERTY_PERFORMANCE
19924     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19925     +         nodesize=&EM_PROPERTY_NODESAMPLE
19926     +       %end;
19927     +       ;
19928     +        interact;
19929     +   %end;
19930     + %end;
19932     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
19933     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
19934     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
19935     +    %end;
19937     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
19938     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
19939     +    %end;
19941     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
19942     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
19943     +    %end;
19945     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
19946     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
19947     +    %end;
19949     +    %if "%EM_FREQ" ne "" %then %do;
19950     +       freq %EM_FREQ;
19951     +    %end;
19953     +    %if "&multipleTar" eq "Y" %then %do;
19954     +       /* cycle through all target vars in variableset */
19955     +       %let tdsid = %sysfunc(open(temptarget));
19956     +       %if &tdsid %then %do;
19957     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
19958     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
19959     +          %do %while(^ %sysfunc(fetch(&tdsid)));
19960     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
19961     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
19962     +             target &var / level = &lvl
19963     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
19964     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
19965     +             %end;
19966     +             %else %if "&lvl" eq "INTERVAL" %then %do;
19967     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
19968     +             %end;
19969     +             %else %if "&lvl" eq "ORDINAL" %then %do;
19970     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
19971     +             %end;
19972     +          %end;
19973     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
19974     +       %end;
19975     +       useTarget variable = %EM_TARGET;
19976     +    %end;
19977     +    %else %do;
19978     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
19979     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
19980     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
19981     +      %end;
19982     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19983     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
19984     +      %end;
19985     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
19986     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
19987     +      %end;
19988     +    %end;
19990     +    %if "&multipleTar" eq "N" %then %do;
19991     +      &EM_DEC_STATEMENT;
19992     +    %end;
19994     +    Performance &EM_PROPERTY_PERFORMANCE
19995     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19996     +      nodesize=&EM_PROPERTY_NODESAMPLE
19997     +    %end;
19998     +    ;
20000     +    %if "&intFlag" eq "Y" %then %do;
20001     +       INTERACT Largest;
20002     +       Train maxnewdepth=0;
20003     +    %end;
20005     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
20006     +         Assess
20007     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
20008     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
20009     +              %put &em_codebar;
20010     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
20011     +              %put &errormsg;
20012     +              %put &em_codebar;
20013     +            %end;
20014     +            %else %do;
20015     +               Validata=&EM_IMPORT_VALIDATE
20016     +            %end;
20017     +         %end;
20018     +         %else %do;
20019     +           NoValidata
20020     +         %end;
20021     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
20022     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
20023     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
20024     +               %if &dsid %then %do;
20025     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
20026     +                 %do %while(^ %sysfunc(fetch(&dsid)));
20027     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
20028     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
20029     +                   %else %do;
20030     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
20031     +                      %else %let measure= MISC;
20032     +                   %end;
20033     +                 %end;
20034     +               %end;
20035     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
20036     +            %end;
20037     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
20038     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
20039     +                 %let measure=ASE;
20040     +              %end;
20041     +              %else %do;
20042     +                 %let measure=MISC;
20043     +              %end;
20044     +            %end;
20045     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
20046     +              %let measure=ASE;
20047     +            %end;
20048     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
20049     +               %let measure = LIFT;
20050     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
20051     +               %if &dsid %then %do;
20052     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
20053     +                 %do %while(^ %sysfunc(fetch(&dsid)));
20054     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
20055     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
20056     +                 %end;
20057     +               %end;
20058     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
20059     +            %end;
20060     +            measure=&measure
20061     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
20062     +               event = "&targetEvent"
20063     +            %end;
20064     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
20065     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
20066     +            %end;
20067     +         %end;
20068     +         %if "&multipleTar" eq "N" %then %do;
20069     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
20070     +               CV
20071     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
20072     +                 CVNITer = &EM_PROPERTY_CVNITER
20073     +               %end;
20074     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
20075     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
20076     +               %end;
20077     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
20078     +                 CVSeed = &EM_PROPERTY_CVSEED
20079     +               %end;
20080     +            %end;
20081     +         %end;
20082     +       %end;
20083     +      ;
20085     +      %if "&intFlag" ne "Y" %then %do;
20086     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
20087     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
20088     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
20089     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
20091     +          SUBTREE &subtree
20092     +          %if "&subtree" eq "NLEAVES" %then %do;
20093     +            =&EM_PROPERTY_NSUBTREE
20094     +          %end;
20095     +          ;
20096     +        %end;
20098     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
20099     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
20100     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
20101     +          %end;
20102     +       %end;
20103     +      %end;
20104     + %end;
20107     + MakeMacro nleaves = nleaves;
20108     + save
20109     + %if "&EM_USER_EMTREE" ne "" %then %do;
20110     +   MODEL=&EM_USER_EMTREE
20111     + %end;
20112     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
20113     +   SEQUENCE=&EM_USER_OUTSEQ
20114     + %end;
20115     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
20116     +   IMPORTANCE=&EM_USER_OUTIMPORT
20117     + %end;
20118     + %if "&EM_USER_OUTNODES" ne "" %then %do;
20119     +   NODESTAT=&EM_USER_OUTNODES
20120     + %end;
20121     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
20122     +   SUMMARY=&EM_USER_OUTSUMMARY
20123     + %end;
20124     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
20125     +   STATSBYNODE=&EM_USER_OUTSTATS
20126     + %end;
20127     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
20128     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
20129     + %end;
20130     + %if "&EM_USER_OUTPATH" ne "" %then %do;
20131     +   Pathlistnonmissing=&EM_USER_OUTPATH
20132     + %end;
20133     + %if "&EM_USER_OUTRULES" ne "" %then %do;
20134     +   RULES = &EM_USER_OUTRULES
20135     + %end;
20136     + ;
20138     + %if "&intFlag" ne "Y" %then %do;
20140     +   %let lookupString = ;
20141     +   %if ^%symexist(EM_OPTION) %then
20142     +      %let EM_OPTION=;
20144     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
20145     +      %let lookupString = LOOKUP=SELECT;
20146     +   %end;
20148     +   %let codetext=;
20149     +   %let norescodetxt=;
20151     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
20152     +     %let codetext=&codetext DUMMY;
20153     +     %let norescodetxt=&norescodetxt DUMMY;
20154     +   %end;
20155     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
20156     +     %let codetext=&codetext NOLEAFID;
20157     +     %let norescodetxt=&norescodetxt NOLEAFID;
20158     +   %end;
20159     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
20160     +     %let norescodetxt=&norescodetxt NOPRED;
20161     +   %end;
20163     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
20164     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
20166     +   %if &nnpmml %then %do;
20167     +     code pmml;
20168     +   %end;
20170     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
20171     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20172     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
20173     +   %end;
20174     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
20175     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
20176     +   %end;
20177     + %end;
20179     + run;
20180     + quit;
20182     + /*%em_checkerror(); */
20183     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
20184     +   /* Delete DMDB catalog */
20185     +   proc datasets lib=work nolist;
20186     +       delete _treeDMDB / mt=cat;
20187     +  run;
20188     +  %end;
20190     + %if &nnpmml %then %do;
20191     +    ods pmml close;
20192     + %end;
20194     +  %doendm:
20196     +%mend em_tree_runTreeProcedure;
20198     +%macro em_tree_createFitStats( multipleTar= );
20201     +  /* create targetTable is multipleTar eq Y */
20202     +  data temptarget;
20203     +    set &EM_DATA_VARIABLESET;
20204     +    where ROLE="TARGET";
20205     +  run;
20207     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
20208     +   data &EM_USER_EMOUTFIT;
20209     +     length target $32;
20210     +     merge work.fit_train
20211     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20212     +       work.fit_valid
20213     +     %end;
20214     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
20215     +       work.fit_test
20216     +     %end;
20217     +     ;
20218     +     %if "&multipleTar" eq "N" %then %do;
20219     +       target="%EM_TARGET";
20220     +     %end;
20221     +     %else %do;
20222     +       target = _TARGET_;
20223     +     %end;
20224     +     drop _NW_ _SUMW_
20225     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20226     +        _VSUMW_
20227     +     %end;
20228     +     ;
20229     +   run;
20231     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20232     +     proc datasets library=work nolist;
20233     +       delete fit_valid;
20234     +     run;
20235     +   %end;
20236     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
20237     +     proc datasets library=work nolist;
20238     +       delete fit_test;
20239     +     run;
20240     +   %end;
20242     +%mend em_tree_createFitStats;
20245     +%macro em_tree_makeEnglishRules;
20247     +  %EM_GETNAME(key=OUTNODES, type=DATA);
20248     +  %EM_GETNAME(key=OUTPATH, type=DATA);
20250     +  /* verify that necessary tables exist and if not, skip processing */
20251     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
20252     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
20253     +    %goto doendm;
20254     +  %end;
20255     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
20256     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
20257     +    %goto doendm;
20258     +  %end;
20260     +  /* determine length of variable in outpath dataset */
20261     +  %let vlength= ;
20262     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
20263     +  %if &dsid ne %then %do;
20264     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
20265     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
20266     +  %end;
20267     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
20269     +  data tempoutpath;
20270     +    length varname $&vlength;
20271     +    retain varname;
20272     +    set &EM_USER_OUTPATH;
20274     +    if ^missing(variable) then varname=variable;
20275     +    else if ^missing(var_name) then varname=var_name;
20276     +    output;
20277     +  run;
20279     +  /* create an array of generated predicted variable names */
20280     +  %let tree_pred_vars = ;
20281     +  %let tree_pred_label = ;
20282     +  %let numpred= 0;
20283     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
20285     +    data _null_;
20286     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
20287     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
20288     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
20289     +     if eof then
20290     +       call symput('numpred', strip(put(_N_, BEST.)));
20291     +    run;
20292     +  %end;
20294     +  /* determine if NPRIORS exists in outnodes  */
20295     +  %local nprior_flag;
20296     +  data _null_;
20297     +    set &EM_USER_OUTNODES(obs=2) end=eof;
20298     +    if eof then do;
20299     +      call symput('nprior_flag', strip(put(npriors, best.)));
20300     +    end;
20301     +  run;
20303     +  proc sort data=tempoutpath; by node; run;
20304     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
20306     +  data tempoutpath;
20307     +    merge tempoutpath(in=_a) outnodes(keep= node
20308     +    %if "&nprior_flag" ne "." %then %do;
20309     +      NPRIORS
20310     +    %end;
20311     +    %else %do;
20312     +      N
20313     +    %end;
20314     +    %if &numpred gt 0 %then %do;
20315     +      %do i=1 %to &numpred;
20316     +        &&tree_pred_vars&i
20317     +      %end;
20318     +    %end;
20319     +    );
20320     +    by node;
20321     +    if _a;
20322     +  run;
20324     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
20326     +  data _null_;
20327     +    file x;
20328     +    set tempoutpath;
20329     +    by node descending varname;
20330     +    retain origvar oldnode string;
20331     +    length origvar $32 oldnode 8 string $200;
20333     +    if _N_ = 1 then do;
20334     +      origvar = varname;
20335     +      oldnode = node;
20336     +    end;
20338     +    if first.node then do;
20339     +       put "&EM_CODEBAR";
20340     +       put " Node = " node;
20341     +       put "&EM_CODEBAR";
20342     +    end;
20344     +      if first.varname then do;
20345     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
20346     +            if MISSING(CHARACTER_VALUE) then do;
20347     +             if NUMERIC_VALUE ne .  then do;
20348     +              if ^first.node then do;
20349     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20350     +              end;
20351     +              else do;
20352     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20353     +              end;
20354     +             end;
20355     +            end;
20356     +            else do;
20357     +              if ^first.node then do;
20358     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20359     +              end;
20360     +              else do;
20361     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20362     +              end;
20363     +             end;
20364     +         end;
20365     +         else if RELATION in ("=") then do;
20366     +            if ^first.node then do;
20367     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
20368     +            end;
20369     +            else do;
20370     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
20371     +            end;
20372     +         end;
20373     +         else if RELATION in ("ISMISSING") then do;
20374     +            if ^first.node then do;
20375     +              string = " AND "|| strip(varname) || " equals Missing";
20376     +            end;
20377     +            else do;
20378     +              string = "if "|| strip(varname) ||" equals Missing";
20379     +            end;
20380     +         end;
20381     +         else if RELATION in ("ISNOTMISSING") then do;
20382     +            if ^first.node then do;
20383     +              string = " AND "|| strip(varname) || " equals All Values";
20384     +            end;
20385     +            else do;
20386     +              string = "if "|| strip(varname) ||" equals All Values";
20387     +            end;
20388     +         end;
20389     +         if ^missing(varname) then origvar = varname;
20390     +         oldnode=node;
20392     +      end;
20393     +      else do;
20394     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
20395     +          if MISSING(CHARACTER_VALUE) then do;
20396     +           if  NUMERIC_VALUE ne .  then do;
20397     +            if ^MISSING(string) then
20398     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20399     +            else
20400     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20401     +           end;
20402     +          end;
20403     +          else do;
20404     +            if ^MISSING(string) then
20405     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20406     +            else
20407     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20408     +          end;
20410     +         end;
20411     +         else if RELATION in ("=") then do;
20412     +           string = strip(string)||", "||strip(character_value);
20413     +         end;
20414     +         else if RELATION in ("ISMISSING") then do;
20416     +         end;
20417     +         if ^missing(varname) then origvar = varname;
20418     +         oldnode=node;
20419     +      end;
20420     +      if last.varname then do;
20421     +         if RELATION in ("ISMISSING") then do;
20422     +           if ^first.varname then do;
20423     +             string = strip(string) || " or MISSING";
20424     +           end;
20425     +         end;
20426     +         put string;
20427     +         if ^missing(varname) then origvar = varname;
20428     +         oldnode=node;
20429     +      end;
20431     +      if last.node then do;
20432     +         put "then ";
20433     +         put " Tree Node Identifier   = " node;
20435     +         %if "&nprior_flag" ne "." %then %do;
20436     +           put " Number of Observations = " NPRIORS;
20437     +         %end;
20438     +         %else %do;
20439     +           put " Number of Observations = " N;
20440     +         %end;
20442     +         %if &numpred gt 0 %then %do;
20443     +           %do i=1 %to &numpred;
20444     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
20445     +           %end;
20446     +         %end;
20448     +         put " ";
20449     +         if ^missing(varname) then origvar = varname;
20450     +         oldnode=node;
20451     +      end;
20453     +  run;
20455     +  proc datasets lib=work nolist;
20456     +    delete tempoutpath outnodes;
20457     +  run;
20459     +  %doendm:
20460     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: EXPLOREOBS EMWS2.Part_TRAIN : vars= 7 : recl= 176 : max=20000 : def= 2000

NOTE: There were 255 observations read from the data set EMWS2.TREE_EMTREE.
NOTE: The data set EMWS2.TREE_BROWSETREE has 255 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


