*------------------------------------------------------------*;
* EM SCORE CODE;
* EM Version: 14.2;
* SAS Release: 9.04.01M4P110916;
* Host: 830-5CG9310VLM;
* Encoding: wlatin1;
* Locale: en_US;
* Project Path: C:\Users\student\Desktop\AA 490\Final Project\AA490_Project;
* Project Name: Base Model;
* Diagram Id: EMWS2;
* Diagram Name: Base Model 2;
* Generated by: student;
* Date: 11DEC2019:14:11:18;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* TOOL: Input Data Source;
* TYPE: SAMPLE;
* NODE: Ids2;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* TOOL: Statistics Exploration;
* TYPE: EXPLORE;
* NODE: Stat;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* TOOL: Partition Class;
* TYPE: SAMPLE;
* NODE: Part;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* TOOL: Regression;
* TYPE: MODEL;
* NODE: Reg5;
*------------------------------------------------------------*;
*************************************;
*** begin scoring code for regression;
*************************************;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;


drop _DM_BAD;
_DM_BAD=0;

*** Check Population_in_thousands for missing values ;
if missing( Population_in_thousands ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Generate dummy variables for Age_group ;
drop _0_0 _0_1 _0_2 _0_3 ;
*** encoding is sparse, initialize to zero;
_0_0 = 0;
_0_1 = 0;
_0_2 = 0;
_0_3 = 0;
if missing( Age_group ) then do;
   _0_0 = .;
   _0_1 = .;
   _0_2 = .;
   _0_3 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm19 $ 19; drop _dm19 ;
   %DMNORMCP( Age_group , _dm19 )
   if _dm19 = '85+'  then do;
      _0_0 = -1;
      _0_1 = -1;
      _0_2 = -1;
      _0_3 = -1;
   end;
   else if _dm19 = '18-24'  then do;
      _0_1 = 1;
   end;
   else if _dm19 = '25-44'  then do;
      _0_2 = 1;
   end;
   else if _dm19 = '65-84'  then do;
      _0_3 = 1;
   end;
   else if _dm19 = '0-17'  then do;
      _0_0 = 1;
   end;
   else do;
      _0_0 = .;
      _0_1 = .;
      _0_2 = .;
      _0_3 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Disease ;
drop _1_0 _1_1 _1_2 _1_3 ;
*** encoding is sparse, initialize to zero;
_1_0 = 0;
_1_1 = 0;
_1_2 = 0;
_1_3 = 0;
if missing( Disease ) then do;
   _1_0 = .;
   _1_1 = .;
   _1_2 = .;
   _1_3 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm32 $ 32; drop _dm32 ;
   %DMNORMCP( Disease , _dm32 )
   if _dm32 = 'SEPTICEMIA'  then do;
      _1_0 = -1;
      _1_1 = -1;
      _1_2 = -1;
      _1_3 = -1;
   end;
   else if _dm32 = 'ASTHMA'  then do;
      _1_0 = 1;
   end;
   else if _dm32 = 'OSTEOARTHRITIS'  then do;
      _1_3 = 1;
   end;
   else if _dm32 = 'DEMENTIA AND ALZHEIMER''S DISEASE'  then do;
      _1_2 = 1;
   end;
   else if _dm32 = 'CANCER, ALL'  then do;
      _1_1 = 1;
   end;
   else do;
      _1_0 = .;
      _1_1 = .;
      _1_2 = .;
      _1_3 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Gender ;
drop _2_0 ;
if missing( Gender ) then do;
   _2_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm10 $ 10; drop _dm10 ;
   _dm10 = put( Gender , $CHAR10. );
   %DMNORMIP( _dm10 )
   if _dm10 = 'FEMALE'  then do;
      _2_0 = 1;
   end;
   else if _dm10 = 'MALE'  then do;
      _2_0 = -1;
   end;
   else do;
      _2_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _LP0 =     40.5986013986014;
   goto REG5DR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0;
_LP0 = 0;

***  Effect: Age_group ;
_TEMP = 1;
_LP0 = _LP0 + (   -49.4672921197793) * _TEMP * _0_0;
_LP0 = _LP0 + (   -21.7313427121025) * _TEMP * _0_1;
_LP0 = _LP0 + (   -53.6209888643958) * _TEMP * _0_2;
_LP0 = _LP0 + (    102.502871018983) * _TEMP * _0_3;

***  Effect: Disease ;
_TEMP = 1;
_LP0 = _LP0 + (   -4.46131810261602) * _TEMP * _1_0;
_LP0 = _LP0 + (    44.6018779092235) * _TEMP * _1_1;
_LP0 = _LP0 + (    -31.499567699561) * _TEMP * _1_2;
_LP0 = _LP0 + (   -0.74252562940894) * _TEMP * _1_3;

***  Effect: Gender ;
_TEMP = 1;
_LP0 = _LP0 + (    4.83591864146778) * _TEMP * _2_0;

***  Effect: Population_in_thousands ;
_TEMP = Population_in_thousands ;
_LP0 = _LP0 + (    0.00198409149548 * _TEMP);

***  Effect: Age_group*Disease ;
_TEMP = 1;
_LP0 = _LP0 + (    71.4273293508684) * _TEMP * _0_0 * _1_0;
_LP0 = _LP0 + (   -53.3097718606966) * _TEMP * _0_0 * _1_1;
_LP0 = _LP0 + (    9.33786909487515) * _TEMP * _0_0 * _1_2;
_LP0 = _LP0 + (   -20.9612651485176) * _TEMP * _0_0 * _1_3;
_LP0 = _LP0 + (    10.7796593988599) * _TEMP * _0_1 * _1_0;
_LP0 = _LP0 + (   -42.0138863118082) * _TEMP * _0_1 * _1_1;
_LP0 = _LP0 + (    28.7461211911806) * _TEMP * _0_1 * _1_2;
_LP0 = _LP0 + (   -3.23521994212167) * _TEMP * _0_1 * _1_3;
_LP0 = _LP0 + (    19.7458398116809) * _TEMP * _0_2 * _1_0;
_LP0 = _LP0 + (   -10.9477828764849) * _TEMP * _0_2 * _1_1;
_LP0 = _LP0 + (    5.72008672932023) * _TEMP * _0_2 * _1_2;
_LP0 = _LP0 + (   -11.7636065735945) * _TEMP * _0_2 * _1_3;
_LP0 = _LP0 + (   -88.5356337608595) * _TEMP * _0_3 * _1_0;
_LP0 = _LP0 + (    132.966100156406) * _TEMP * _0_3 * _1_1;
_LP0 = _LP0 + (   -70.4014518863319) * _TEMP * _0_3 * _1_2;
_LP0 = _LP0 + (    45.1384291109238) * _TEMP * _0_3 * _1_3;

***  Effect: Age_group*Gender ;
_TEMP = 1;
_LP0 = _LP0 + (    -8.1862991950576) * _TEMP * _0_0 * _2_0;
_LP0 = _LP0 + (   -3.41662890780362) * _TEMP * _0_1 * _2_0;
_LP0 = _LP0 + (    2.93242200068928) * _TEMP * _0_2 * _2_0;
_LP0 = _LP0 + (    7.94278094282438) * _TEMP * _0_3 * _2_0;

***  Effect: Disease*Gender ;
_TEMP = 1;
_LP0 = _LP0 + (   -1.41400770960081) * _TEMP * _1_0 * _2_0;
_LP0 = _LP0 + (    0.16409809193528) * _TEMP * _1_1 * _2_0;
_LP0 = _LP0 + (   -2.88206456532676) * _TEMP * _1_2 * _2_0;
_LP0 = _LP0 + (    4.51528265380696) * _TEMP * _1_3 * _2_0;
*--- Intercept ---*;
_LP0 = _LP0 + (    -2.5407661803408);

REG5DR1:

*** Predicted Value;
label P_Cases_in_1000s = 'Predicted: Cases_in_1000s' ;
P_Cases_in_1000s = _LP0;


*************************************;
***** end scoring code for regression;
*************************************;
*------------------------------------------------------------*;
* TOOL: Model Compare Class;
* TYPE: ASSESS;
* NODE: MdlComp;
*------------------------------------------------------------*;
if (P_Cases_in_1000s ge 288.241624037156) then do;
b_Cases_in_1000s = 1;
end;
else
if (P_Cases_in_1000s ge 122.61877930895) then do;
b_Cases_in_1000s = 2;
end;
else
if (P_Cases_in_1000s ge 85.8827981030965) then do;
b_Cases_in_1000s = 3;
end;
else
if (P_Cases_in_1000s ge 53.8465796159833) then do;
b_Cases_in_1000s = 4;
end;
else
if (P_Cases_in_1000s ge 48.8668399322475) then do;
b_Cases_in_1000s = 5;
end;
else
if (P_Cases_in_1000s ge 44.0420113544423) then do;
b_Cases_in_1000s = 6;
end;
else
if (P_Cases_in_1000s ge 34.1568129202454) then do;
b_Cases_in_1000s = 7;
end;
else
if (P_Cases_in_1000s ge 26.0130310901372) then do;
b_Cases_in_1000s = 8;
end;
else
if (P_Cases_in_1000s ge 23.1554711498296) then do;
b_Cases_in_1000s = 9;
end;
else
if (P_Cases_in_1000s ge 16.7982907718532) then do;
b_Cases_in_1000s = 10;
end;
else
if (P_Cases_in_1000s ge 12.2270976562916) then do;
b_Cases_in_1000s = 11;
end;
else
if (P_Cases_in_1000s ge 10.2930191652826) then do;
b_Cases_in_1000s = 12;
end;
else
if (P_Cases_in_1000s ge 7.29799764770225) then do;
b_Cases_in_1000s = 13;
end;
else
if (P_Cases_in_1000s ge 5.28642550062574) then do;
b_Cases_in_1000s = 14;
end;
else
if (P_Cases_in_1000s ge 3.43753373559824) then do;
b_Cases_in_1000s = 15;
end;
else
if (P_Cases_in_1000s ge 2.07666959146316) then do;
b_Cases_in_1000s = 16;
end;
else
if (P_Cases_in_1000s ge 0.60569920481362) then do;
b_Cases_in_1000s = 17;
end;
else
if (P_Cases_in_1000s ge -0.8359698163787) then do;
b_Cases_in_1000s = 18;
end;
else
if (P_Cases_in_1000s ge -4.35749304688957) then do;
b_Cases_in_1000s = 19;
end;
else
do;
b_Cases_in_1000s = 20;
end;
*------------------------------------------------------------*;
* TOOL: Score Node;
* TYPE: ASSESS;
* NODE: Score2;
*------------------------------------------------------------*;
*------------------------------------------------------------*;
* Score2: Creating Fixed Names;
*------------------------------------------------------------*;
LABEL EM_SEGMENT = 'Segment';
EM_SEGMENT = b_Cases_in_1000s;
LABEL EM_PREDICTION= "Prediction for Cases_in_1000s";
EM_PREDICTION = P_Cases_in_1000s;
