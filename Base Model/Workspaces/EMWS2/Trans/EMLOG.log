*------------------------------------------------------------*
User:                student
Date:                December 04, 2019
Time:                13:45:24
Site:                70082322
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 04, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:45:20" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 04, 2019
Time:                13:45:20
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1MIU1HL "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1MIU1HL new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 04, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:45:20" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 04, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:45:20" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
168639     proc freq data=EMWS2.Trans_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.Trans_VariableSet noprint;
168640     table ROLE*LEVEL/out=WORK.TransMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TransMETA;
168641     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set EMWS2.TRANS_VARIABLESET.
NOTE: The data set WORK.TRANSMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
168642     proc print data=WORK.TransMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TransMETA label noobs;
168643     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
168644     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
168645     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
168646     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
168647     run;
 
NOTE: There were 3 observations read from the data set WORK.TRANSMETA.
NOTE: The PROCEDURE PRINT printed page 43.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
168648     title10;
MPRINT(EM_DIAGRAM):   title10;
168649     data WORK.M26R3ZO4;
MPRINT(EM_DIAGRAM):    data WORK.M26R3ZO4;
168650     set WORK.M26R3ZO4;
MPRINT(EM_DIAGRAM):   set WORK.M26R3ZO4;
168651     if (METHOD='NONE' and ROLE ne 'FREQ') or (role = 'REJECTED' and METHOD = 'DEFAULT') then delete;
MPRINT(EM_DIAGRAM):   if (METHOD='NONE' and ROLE ne 'FREQ') or (role = 'REJECTED' and METHOD = 'DEFAULT') then delete;
168652     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.M26R3ZO4.
NOTE: The data set WORK.M26R3ZO4 has 6 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpnobs from EMWS2.Impt_TRAIN;
NOTE: View EMWS2.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 378 observations read from the data set EMWS2.PART_TRAIN.
MPRINT(EM_DIAGRAM):   quit;
168717     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
168718     * Trans: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   * Trans: Computing Summary Statistics;
168719     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168720     data WORK.M0JC0CRU;
MPRINT(EM_DIAGRAM):   data WORK.M0JC0CRU;
168721     set WORK.M0JC0CRU;
MPRINT(EM_DIAGRAM):   set WORK.M0JC0CRU;
168722     if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
168723     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.M0JC0CRU.
NOTE: The data set WORK.M0JC0CRU has 6 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
168724     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
168725     * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
168726     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
168727     %macro DMDBClass;
168728         Age_group(ASC) Date(ASC) Disease(ASC) Gender(ASC)
168729     %mend DMDBClass;
168730     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
168731     * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
168732     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
168733     %macro DMDBVar;
168734         Cases_in_1000s Population_in_thousands
168735     %mend DMDBVar;
168736     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168737     * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
168738     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168739     proc dmdb batch data=EMWS2.Impt_TRAIN
168740     dmdbcat=WORK.EM_DMDB
168741     classout=WORK.Transclassout
168742     maxlevel = 513
168743     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS2.Impt_TRAIN dmdbcat=WORK.EM_DMDB classout=WORK.Transclassout maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
168744     class %DMDBClass;
MPRINT(DMDBCLASS):   Age_group(ASC) Date(ASC) Disease(ASC) Gender(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
168745     var %DMDBVar;
MPRINT(DMDBVAR):   Cases_in_1000s Population_in_thousands
MPRINT(EM_DIAGRAM):  ;
168746     target
168747     Cases_in_1000s
168748     ;
MPRINT(EM_DIAGRAM):   target Cases_in_1000s ;
168749     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 378   Memory used = 511K.
NOTE: View EMWS2.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: There were 378 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 378 observations read from the data set EMWS2.IMPT_TRAIN.
NOTE: The data set WORK.TRANSCLASSOUT has 33 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
168750     quit;
168751     *--- end code ---*;
 
168752     data WORK.TransINTERVALMETA;
MPRINT(EM_DIAGRAM):    data WORK.TransINTERVALMETA;
168753     set WORK.M26R3ZO4;
MPRINT(EM_DIAGRAM):   set WORK.M26R3ZO4;
168754     if LEVEL ne 'INTERVAL' then delete;
MPRINT(EM_DIAGRAM):   if LEVEL ne 'INTERVAL' then delete;
168755     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.M26R3ZO4.
NOTE: The data set WORK.TRANSINTERVALMETA has 2 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
168756     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
168757     * Trans: Determining Variables to Scale;
MPRINT(EM_DIAGRAM):   * Trans: Determining Variables to Scale;
168758     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168759     data WORK.M24QA0QD;
MPRINT(EM_DIAGRAM):   data WORK.M24QA0QD;
168760     set WORK.M24QA0QD;
MPRINT(EM_DIAGRAM):   set WORK.M24QA0QD;
168761     where (TYPE="N" and (METHOD in("MAX_NORM", "MAX_CORR", "EQUALIZE", "OP_MAX_NORM", "OP_EQUALIZE"))) or (ROLE eq "FREQ");
MPRINT(EM_DIAGRAM):   where (TYPE="N" and (METHOD in("MAX_NORM", "MAX_CORR", "EQUALIZE", "OP_MAX_NORM", "OP_EQUALIZE"))) or (ROLE eq "FREQ");
168762     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK.M24QA0QD.
      WHERE ((TYPE='N') and METHOD in ('EQUALIZE', 'MAX_CORR', 'MAX_NORM', 'OP_EQUALIZE', 'OP_MAX_NORM')) or (ROLE='FREQ');
NOTE: The data set WORK.M24QA0QD has 0 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
168765     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):      *------------------------------------------------------------*;
168766     * Trans: Computing optimal binning for relationship to target using target Cases_in_1000s;
MPRINT(EM_DIAGRAM):   * Trans: Computing optimal binning for relationship to target using target Cases_in_1000s;
168767     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168768     data sortedBinMeta;
MPRINT(EM_DIAGRAM):   data sortedBinMeta;
168769     set WORK.METASET2KS97F5;
MPRINT(EM_DIAGRAM):   set WORK.METASET2KS97F5;
168770     where NAME ^in("Cases_in_1000s", "");
MPRINT(EM_DIAGRAM):   where NAME ^in("Cases_in_1000s", "");
168771     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.METASET2KS97F5.
      WHERE NAME not in (' ', 'Cases_in_1000s');
NOTE: The data set WORK.SORTEDBINMETA has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
168772     proc sort data=sortedBinMeta;
MPRINT(EM_DIAGRAM):   proc sort data=sortedBinMeta;
168773     by level;
MPRINT(EM_DIAGRAM):   by level;
168774     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDBINMETA.
NOTE: The data set WORK.SORTEDBINMETA has 1 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
168775     %em_varMacro(name=EMOPTBINVAR, metadata=sortedBinMeta, key=NAME);
MPRINT(EM_DIAGRAM):
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set sortedBinMeta end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro EMOPTBINVAR;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' "'!!trim(NAME)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend EMOPTBINVAR;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = '"'!!TRIM(NAME)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend EMOPTBINVAR;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Wed, Dec  4, 2019 01:45:21 PM,
      Last Modified=Wed, Dec  4, 2019 01:45:21 PM,
      Filename=C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD29064_830-5CG9310VLM_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=830-5CG9310VLM\student,
      File Size=             5KB,
      File Size (bytes)=5120
 
NOTE: 3 records were written to the file MACFILE.
      The minimum record length was 18.
      The maximum record length was 26.
NOTE: There were 1 observations read from the data set WORK.SORTEDBINMETA.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
168776    +%macro EMOPTBINVAR;
168777    +"Population_in_thousands"n
168778    +%mend EMOPTBINVAR;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_DIAGRAM):  ;
168779     data WORK.EM_TRANSOPTBIN / view=WORK.EM_TRANSOPTBIN;
MPRINT(EM_DIAGRAM):   data WORK.EM_TRANSOPTBIN / view=WORK.EM_TRANSOPTBIN;
168780     set
168780   ! EMWS2.Impt_TRAIN(keep=%EMOPTBINVAR Cases_in_1000s );
MPRINT(EM_DIAGRAM):   set EMWS2.Impt_TRAIN(keep
MPRINT(EM_DIAGRAM):  ="Population_in_thousands"n Cases_in_1000s );
168781     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_TRANSOPTBIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
168782     data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
168783     length varString $100;
MPRINT(EM_DIAGRAM):   length varString $100;
168784     retain varstring '';
MPRINT(EM_DIAGRAM):   retain varstring '';
168785     set sortedBinMeta end=eof;
MPRINT(EM_DIAGRAM):   set sortedBinMeta end=eof;
168786     by level;
MPRINT(EM_DIAGRAM):   by level;
168787     if _n_=1 then do;
MPRINT(EM_DIAGRAM):   if _n_=1 then do;
168788     call execute("proc arbor data=EMWS2.Impt_TRAIN ");
MPRINT(EM_DIAGRAM):   call execute("proc arbor data=EMWS2.Impt_TRAIN ");
168789     call execute("   maxdepth = 1 Leafsize=5");
MPRINT(EM_DIAGRAM):   call execute("   maxdepth = 1 Leafsize=5");
168790     call execute("   maxbranch = 4");
MPRINT(EM_DIAGRAM):   call execute("   maxbranch = 4");
168791     call execute("Missing=USEINSEARCH ");
MPRINT(EM_DIAGRAM):   call execute("Missing=USEINSEARCH ");
168792     call execute("   norulelimit maxrules=1 maxsurrs=0;");
MPRINT(EM_DIAGRAM):   call execute("   norulelimit maxrules=1 maxsurrs=0;");
168793     end;
MPRINT(EM_DIAGRAM):   end;
168794     if first.level then do;
MPRINT(EM_DIAGRAM):   if first.level then do;
168795     call execute("input ");
MPRINT(EM_DIAGRAM):   call execute("input ");
168796     end;
MPRINT(EM_DIAGRAM):   end;
168797     if length(trim(varString)) + length(trim(name)) +1 < 80 then varString = trim(varString)!!' '!!trim(name);
MPRINT(EM_DIAGRAM):   if length(trim(varString)) + length(trim(name)) +1 < 80 then varString = trim(varString)!!' '!!trim(name);
168798     else do;
MPRINT(EM_DIAGRAM):   else do;
168799     call execute(varString);
MPRINT(EM_DIAGRAM):   call execute(varString);
168800     varString = name;
MPRINT(EM_DIAGRAM):   varString = name;
168801     end;
MPRINT(EM_DIAGRAM):   end;
168802     if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
168803     call execute(varString);
MPRINT(EM_DIAGRAM):   call execute(varString);
168804     call execute("/ level="!!level!!";");
MPRINT(EM_DIAGRAM):   call execute("/ level="!!level!!";");
168805     call execute("target Cases_in_1000s / level=interval;");
MPRINT(EM_DIAGRAM):   call execute("target Cases_in_1000s / level=interval;");
168806     call execute(" Performance Disk NodeSize=10000;");
MPRINT(EM_DIAGRAM):   call execute(" Performance Disk NodeSize=10000;");
168807     call execute("assess validata=EMWS2.Impt_VALIDATE;");
MPRINT(EM_DIAGRAM):   call execute("assess validata=EMWS2.Impt_VALIDATE;");
168808     call execute(" subtree best;");
MPRINT(EM_DIAGRAM):   call execute(" subtree best;");
168809     call execute(" save RULES=WORK.OPTBIN_RULES;");
MPRINT(EM_DIAGRAM):   call execute(" save RULES=WORK.OPTBIN_RULES;");
168810     call execute("run;");
MPRINT(EM_DIAGRAM):   call execute("run;");
168811     end;
MPRINT(EM_DIAGRAM):   end;
168812     run;
MPRINT(EM_DIAGRAM):   run;
 
MPRINT(EM_DIAGRAM):   norulelimit maxrules=1 maxsurrs=0;
MPRINT(EM_DIAGRAM):   / level=INTERVAL ;
MPRINT(EM_DIAGRAM):   target Cases_in_1000s / level=interval;
MPRINT(EM_DIAGRAM):   Performance Disk NodeSize=10000;
MPRINT(EM_DIAGRAM):   assess validata=EMWS2.Impt_VALIDATE;
MPRINT(EM_DIAGRAM):   subtree best;
MPRINT(EM_DIAGRAM):   save RULES=WORK.OPTBIN_RULES;
MPRINT(EM_DIAGRAM):   run;
NOTE: There were 1 observations read from the data set WORK.SORTEDBINMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: CALL EXECUTE generated line.
1         + proc arbor data=EMWS2.Impt_TRAIN
2         +    maxdepth = 1 Leafsize=5
3         +    maxbranch = 4
4         + Missing=USEINSEARCH
5         +    norulelimit maxrules=1 maxsurrs=0;
6         + input
7         +   Population_in_thousands
NOTE: View EMWS2.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
8         + / level=INTERVAL  ;
9         + target Cases_in_1000s / level=interval;
10        +  Performance Disk NodeSize=10000;
11        + assess validata=EMWS2.Impt_VALIDATE;
NOTE: 1462885 kilobytes of physical memory.
NOTE: Will use 372 out of 378 training cases.
NOTE: Using memory pool with 9210880 bytes.
NOTE: Passed training data 2 times.
NOTE: Training used 28000 bytes of work memory.
NOTE: There were 284 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: The subtree sequence contains 2 subtrees. The largest has 5 nodes and 4 leaves.
NOTE: Using subtree with 5 nodes and 4 leaves.
12        +  subtree best;
NOTE: Using subtree with 5 nodes and 4 leaves.
13        +  save RULES=WORK.OPTBIN_RULES;
NOTE: The data set WORK.OPTBIN_RULES has 8 observations and 6 variables.
14        + run;
 
 
NOTE: View EMWS2.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: There were 378 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 378 observations read from the data set EMWS2.IMPT_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
 
168813     data WORK.OPTBIN_RULES;
MPRINT(EM_DIAGRAM):   data WORK.OPTBIN_RULES;
168814     set WORK.OPTBIN_RULES;
MPRINT(EM_DIAGRAM):   set WORK.OPTBIN_RULES;
168815     length NAME $32;
MPRINT(EM_DIAGRAM):   length NAME $32;
168816     retain NAME '';
MPRINT(EM_DIAGRAM):   retain NAME '';
168817     by RANK;
MPRINT(EM_DIAGRAM):   by RANK;
168818     if first.RANK then NAME= CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   if first.RANK then NAME= CHARACTER_VALUE;
168819     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.OPTBIN_RULES.
NOTE: The data set WORK.OPTBIN_RULES has 8 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
168820     proc sort data=WORK.OPTBIN_RULES;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.OPTBIN_RULES;
168821     where STAT in('INTERVAL', 'MISSING');
MPRINT(EM_DIAGRAM):   where STAT in('INTERVAL', 'MISSING');
168822     by NAME NUMERIC_VALUE;
MPRINT(EM_DIAGRAM):   by NAME NUMERIC_VALUE;
168823     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.OPTBIN_RULES.
      WHERE STAT in ('INTERVAL', 'MISSING');
NOTE: The data set WORK.OPTBIN_RULES has 4 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
168824     data work.TEMPBESTTRAIN / view=work.TEMPBESTTRAIN;
MPRINT(EM_DIAGRAM):    data work.TEMPBESTTRAIN / view=work.TEMPBESTTRAIN;
168825     set EMWS2.Impt_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS2.Impt_TRAIN;
168826     %inc #LN01796;
NOTE: %INCLUDE (level 1) file #LN01796 is file C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD29064_830-5CG9310VLM_\Prc2\bestscore.sas.
168827    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168828    +* TRANSFORM: Population_in_thousands , log10(Population_in_thousands + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , log10(Population_in_thousands + 1);
168829    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168830    +label LG10_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label LG10_Population_in_thousands = 'Transformed Population_in_thousands';
168831    +label LG10_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label LG10_Population_in_thousands = 'Transformed Population_in_thousands';
168832    +length LG10_Population_in_thousands 8;
MPRINT(EM_DIAGRAM):   length LG10_Population_in_thousands 8;
168833    +if Population_in_thousands eq . then LG10_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   if Population_in_thousands eq . then LG10_Population_in_thousands = .;
168834    +else do;
MPRINT(EM_DIAGRAM):   else do;
168835    +if Population_in_thousands + 1 > 0 then LG10_Population_in_thousands = log10(Population_in_thousands + 1);
MPRINT(EM_DIAGRAM):   if Population_in_thousands + 1 > 0 then LG10_Population_in_thousands = log10(Population_in_thousands + 1);
168836    +else LG10_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   else LG10_Population_in_thousands = .;
168837    +end;
MPRINT(EM_DIAGRAM):   end;
168838    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168839    +* TRANSFORM: Population_in_thousands , log(Population_in_thousands + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , log(Population_in_thousands + 1);
168840    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168841    +label LOG_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label LOG_Population_in_thousands = 'Transformed Population_in_thousands';
168842    +label LOG_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label LOG_Population_in_thousands = 'Transformed Population_in_thousands';
168843    +length LOG_Population_in_thousands 8;
MPRINT(EM_DIAGRAM):   length LOG_Population_in_thousands 8;
168844    +if Population_in_thousands eq . then LOG_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   if Population_in_thousands eq . then LOG_Population_in_thousands = .;
168845    +else do;
MPRINT(EM_DIAGRAM):   else do;
168846    +if Population_in_thousands + 1 > 0 then LOG_Population_in_thousands = log(Population_in_thousands + 1);
MPRINT(EM_DIAGRAM):   if Population_in_thousands + 1 > 0 then LOG_Population_in_thousands = log(Population_in_thousands + 1);
168847    +else LOG_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   else LOG_Population_in_thousands = .;
168848    +end;
MPRINT(EM_DIAGRAM):   end;
168849    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168850    +* TRANSFORM: Population_in_thousands , Sqrt(Population_in_thousands + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , Sqrt(Population_in_thousands + 1);
168851    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168852    +label SQRT_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label SQRT_Population_in_thousands = 'Transformed Population_in_thousands';
168853    +label SQRT_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label SQRT_Population_in_thousands = 'Transformed Population_in_thousands';
168854    +length SQRT_Population_in_thousands 8;
MPRINT(EM_DIAGRAM):   length SQRT_Population_in_thousands 8;
168855    +if Population_in_thousands eq . then SQRT_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   if Population_in_thousands eq . then SQRT_Population_in_thousands = .;
168856    +else do;
MPRINT(EM_DIAGRAM):   else do;
168857    +if Population_in_thousands + 1 >= 0 then SQRT_Population_in_thousands = Sqrt(Population_in_thousands + 1);
MPRINT(EM_DIAGRAM):   if Population_in_thousands + 1 >= 0 then SQRT_Population_in_thousands = Sqrt(Population_in_thousands + 1);
168858    +else SQRT_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   else SQRT_Population_in_thousands = .;
168859    +end;
MPRINT(EM_DIAGRAM):   end;
168860    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168861    +* TRANSFORM: Population_in_thousands , 1 / (Population_in_thousands + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , 1 / (Population_in_thousands + 1);
168862    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168863    +label INV_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label INV_Population_in_thousands = 'Transformed Population_in_thousands';
168864    +label INV_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label INV_Population_in_thousands = 'Transformed Population_in_thousands';
168865    +length INV_Population_in_thousands 8;
MPRINT(EM_DIAGRAM):   length INV_Population_in_thousands 8;
168866    +if Population_in_thousands eq . then INV_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   if Population_in_thousands eq . then INV_Population_in_thousands = .;
168867    +else if Population_in_thousands + 1 ne 0 then INV_Population_in_thousands = 1 / (Population_in_thousands + 1);
MPRINT(EM_DIAGRAM):   else if Population_in_thousands + 1 ne 0 then INV_Population_in_thousands = 1 / (Population_in_thousands + 1);
168868    +else INV_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   else INV_Population_in_thousands = .;
168869    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168870    +* TRANSFORM: Population_in_thousands , (Population_in_thousands + 1)**2;
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , (Population_in_thousands + 1)**2;
168871    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168872    +label SQR_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label SQR_Population_in_thousands = 'Transformed Population_in_thousands';
168873    +label SQR_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label SQR_Population_in_thousands = 'Transformed Population_in_thousands';
168874    +length SQR_Population_in_thousands 8;
MPRINT(EM_DIAGRAM):   length SQR_Population_in_thousands 8;
168875    +if Population_in_thousands eq . then SQR_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   if Population_in_thousands eq . then SQR_Population_in_thousands = .;
168876    +else do;
MPRINT(EM_DIAGRAM):   else do;
168877    +SQR_Population_in_thousands = (Population_in_thousands + 1)**2;
MPRINT(EM_DIAGRAM):   SQR_Population_in_thousands = (Population_in_thousands + 1)**2;
168878    +end;
MPRINT(EM_DIAGRAM):   end;
168879    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168880    +* TRANSFORM: Population_in_thousands , exp(Population_in_thousands / 822.01194);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , exp(Population_in_thousands / 822.01194);
168881    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168882    +label EXP_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label EXP_Population_in_thousands = 'Transformed Population_in_thousands';
168883    +label EXP_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label EXP_Population_in_thousands = 'Transformed Population_in_thousands';
168884    +length EXP_Population_in_thousands 8;
MPRINT(EM_DIAGRAM):   length EXP_Population_in_thousands 8;
168885    +if Population_in_thousands eq . then EXP_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   if Population_in_thousands eq . then EXP_Population_in_thousands = .;
168886    +else do;
MPRINT(EM_DIAGRAM):   else do;
168887    +EXP_Population_in_thousands = exp(Population_in_thousands / 822.01194);
MPRINT(EM_DIAGRAM):   EXP_Population_in_thousands = exp(Population_in_thousands / 822.01194);
168888    +end;
MPRINT(EM_DIAGRAM):   end;
168889    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168890    +* TRANSFORM: Population_in_thousands , (Population_in_thousands - 24028.349431) / 22261.398923;
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , (Population_in_thousands - 24028.349431) / 22261.398923;
168891    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168892    +label STD_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label STD_Population_in_thousands = 'Transformed Population_in_thousands';
168893    +label STD_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label STD_Population_in_thousands = 'Transformed Population_in_thousands';
168894    +length STD_Population_in_thousands 8;
MPRINT(EM_DIAGRAM):   length STD_Population_in_thousands 8;
168895    +if Population_in_thousands eq . then STD_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   if Population_in_thousands eq . then STD_Population_in_thousands = .;
168896    +else STD_Population_in_thousands = (Population_in_thousands - 24028.349431) / 22261.398923;
MPRINT(EM_DIAGRAM):   else STD_Population_in_thousands = (Population_in_thousands - 24028.349431) / 22261.398923;
168897    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168898    +* TRANSFORM: Population_in_thousands , (Population_in_thousands - 852) / (82201.194-852);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , (Population_in_thousands - 852) / (82201.194-852);
168899    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168900    +label RANGE_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label RANGE_Population_in_thousands = 'Transformed Population_in_thousands';
168901    +label RANGE_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label RANGE_Population_in_thousands = 'Transformed Population_in_thousands';
168902    +length RANGE_Population_in_thousands 8;
MPRINT(EM_DIAGRAM):   length RANGE_Population_in_thousands 8;
168903    +if Population_in_thousands eq . then RANGE_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   if Population_in_thousands eq . then RANGE_Population_in_thousands = .;
168904    +else RANGE_Population_in_thousands = (Population_in_thousands - 852) / (82201.194-852);
MPRINT(EM_DIAGRAM):   else RANGE_Population_in_thousands = (Population_in_thousands - 852) / (82201.194-852);
168905    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168906    +* TRANSFORM: Population_in_thousands , (Population_in_thousands - 24028.349431);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , (Population_in_thousands - 24028.349431);
168907    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168908    +label CNTR_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label CNTR_Population_in_thousands = 'Transformed Population_in_thousands';
168909    +label CNTR_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label CNTR_Population_in_thousands = 'Transformed Population_in_thousands';
168910    +length CNTR_Population_in_thousands 8;
MPRINT(EM_DIAGRAM):   length CNTR_Population_in_thousands 8;
168911    +if Population_in_thousands eq . then CNTR_Population_in_thousands = .;
MPRINT(EM_DIAGRAM):   if Population_in_thousands eq . then CNTR_Population_in_thousands = .;
168912    +else CNTR_Population_in_thousands = (Population_in_thousands - 24028.349431);
MPRINT(EM_DIAGRAM):   else CNTR_Population_in_thousands = (Population_in_thousands - 24028.349431);
168913    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168914    +* TRANSFORM: Population_in_thousands , Optimal Binning(4);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , Optimal Binning(4);
168915    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
168916    +label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
168917    +label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
168918    +length OPT_Population_in_thousands $36;
MPRINT(EM_DIAGRAM):   length OPT_Population_in_thousands $36;
168919    +if (Population_in_thousands eq .) then OPT_Population_in_thousands="02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   if (Population_in_thousands eq .) then OPT_Population_in_thousands="02:8773.6505-34177.5, MISSING";
168920    +else
168921    +if (Population_in_thousands < 8773.6505) then
168922    +OPT_Population_in_thousands = "01:low-8773.6505";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands < 8773.6505) then OPT_Population_in_thousands = "01:low-8773.6505";
168923    +else
168924    +if (Population_in_thousands >= 8773.6505 and Population_in_thousands < 34177.5) then
168925    +OPT_Population_in_thousands = "02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 8773.6505 and Population_in_thousands < 34177.5) then OPT_Population_in_thousands = "02:8773.6505-34177.5, MISSING";
168926    +else
168927    +if (Population_in_thousands >= 34177.5 and Population_in_thousands < 72628.5) then
168928    +OPT_Population_in_thousands = "03:34177.5-72628.5";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 34177.5 and Population_in_thousands < 72628.5) then OPT_Population_in_thousands = "03:34177.5-72628.5";
168929    +else
168930    +if (Population_in_thousands >= 72628.5) then
168931    +OPT_Population_in_thousands = "04:72628.5-high";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 72628.5) then OPT_Population_in_thousands = "04:72628.5-high";
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
168932     run;
 
NOTE: DATA STEP view saved on file WORK.TEMPBESTTRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
168933     data WORK.BESTMAPPING;
MPRINT(EM_DIAGRAM):   data WORK.BESTMAPPING;
168934     length VAR $32 NEWVAR $32 FORMULA $80;
MPRINT(EM_DIAGRAM):   length VAR $32 NEWVAR $32 FORMULA $80;
168935     label VAR = "%sysfunc(sasmsg(sashelp.dmine, rpt_originalvar_vlabel, NOQUOTE))" NEWVAR = "%sysfunc(sasmsg(sashelp.dmine, rpt_computedvar_vlabel, NOQUOTE))" FORMULA = "%sysfunc(sasmsg(sashelp.dmine, rpt_formula_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VAR = "Original Variable" NEWVAR = "Computed Variable" FORMULA = "Formula";
168936     VAR= "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VAR= "Population_in_thousands";
168937     NEWVAR="Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR="Population_in_thousands";
168938     FORMULA="";
MPRINT(EM_DIAGRAM):   FORMULA="";
168939     output;
MPRINT(EM_DIAGRAM):   output;
168940     VAR= "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VAR= "Population_in_thousands";
168941     NEWVAR="LG10_Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR="LG10_Population_in_thousands";
168942     FORMULA="log10(Population_in_thousands  + 1)";
MPRINT(EM_DIAGRAM):   FORMULA="log10(Population_in_thousands  + 1)";
168943     output;
MPRINT(EM_DIAGRAM):   output;
168944     VAR= "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VAR= "Population_in_thousands";
168945     NEWVAR="LOG_Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR="LOG_Population_in_thousands";
168946     FORMULA="log(Population_in_thousands  + 1)";
MPRINT(EM_DIAGRAM):   FORMULA="log(Population_in_thousands  + 1)";
168947     output;
MPRINT(EM_DIAGRAM):   output;
168948     VAR= "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VAR= "Population_in_thousands";
168949     NEWVAR="SQRT_Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR="SQRT_Population_in_thousands";
168950     FORMULA="Sqrt(Population_in_thousands  + 1)";
MPRINT(EM_DIAGRAM):   FORMULA="Sqrt(Population_in_thousands  + 1)";
168951     output;
MPRINT(EM_DIAGRAM):   output;
168952     VAR= "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VAR= "Population_in_thousands";
168953     NEWVAR="INV_Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR="INV_Population_in_thousands";
168954     FORMULA="1 / (Population_in_thousands  + 1)";
MPRINT(EM_DIAGRAM):   FORMULA="1 / (Population_in_thousands  + 1)";
168955     output;
MPRINT(EM_DIAGRAM):   output;
168956     VAR= "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VAR= "Population_in_thousands";
168957     NEWVAR="SQR_Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR="SQR_Population_in_thousands";
168958     FORMULA="(Population_in_thousands  + 1)**2";
MPRINT(EM_DIAGRAM):   FORMULA="(Population_in_thousands  + 1)**2";
168959     output;
MPRINT(EM_DIAGRAM):   output;
168960     VAR= "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VAR= "Population_in_thousands";
168961     NEWVAR="EXP_Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR="EXP_Population_in_thousands";
168962     FORMULA="exp(Population_in_thousands  / 822.01194)";
MPRINT(EM_DIAGRAM):   FORMULA="exp(Population_in_thousands  / 822.01194)";
168963     output;
MPRINT(EM_DIAGRAM):   output;
168964     VAR= "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VAR= "Population_in_thousands";
168965     NEWVAR="STD_Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR="STD_Population_in_thousands";
168966     FORMULA="(Population_in_thousands - 24028.349431) / 22261.398923";
MPRINT(EM_DIAGRAM):   FORMULA="(Population_in_thousands - 24028.349431) / 22261.398923";
168967     output;
MPRINT(EM_DIAGRAM):   output;
168968     VAR= "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VAR= "Population_in_thousands";
168969     NEWVAR="RANGE_Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR="RANGE_Population_in_thousands";
168970     FORMULA="(Population_in_thousands - 852) / (82201.194-852)";
MPRINT(EM_DIAGRAM):   FORMULA="(Population_in_thousands - 852) / (82201.194-852)";
168971     output;
MPRINT(EM_DIAGRAM):   output;
168972     VAR= "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VAR= "Population_in_thousands";
168973     NEWVAR="CNTR_Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR="CNTR_Population_in_thousands";
168974     FORMULA="(Population_in_thousands - 24028.349431)";
MPRINT(EM_DIAGRAM):   FORMULA="(Population_in_thousands - 24028.349431)";
168975     output;
MPRINT(EM_DIAGRAM):   output;
168976     VAR= "Population_in_thousands";
MPRINT(EM_DIAGRAM):   VAR= "Population_in_thousands";
168977     NEWVAR="OPT_Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR="OPT_Population_in_thousands";
168978     FORMULA="Optimal Binning(4)";
MPRINT(EM_DIAGRAM):   FORMULA="Optimal Binning(4)";
168979     output;
MPRINT(EM_DIAGRAM):   output;
168980     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.BESTMAPPING has 11 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
168981     proc dmdb data=work.TEMPBESTTRAIN dmdbcat=EM_DMDB out=EM_DMDB MAXLEVEL=32;
MPRINT(EM_DIAGRAM):   proc dmdb data=work.TEMPBESTTRAIN dmdbcat=EM_DMDB out=EM_DMDB MAXLEVEL=32;
168982     var
168983     Population_in_thousands
168984     LG10_Population_in_thousands
168985     LOG_Population_in_thousands
168986     SQRT_Population_in_thousands
168987     INV_Population_in_thousands
168988     SQR_Population_in_thousands
168989     EXP_Population_in_thousands
168990     STD_Population_in_thousands
168991     RANGE_Population_in_thousands
168992     CNTR_Population_in_thousands
168993     Cases_in_1000s
168994     ;
MPRINT(EM_DIAGRAM):   var Population_in_thousands LG10_Population_in_thousands LOG_Population_in_thousands SQRT_Population_in_thousands INV_Population_in_thousands SQR_Population_in_thousands EXP_Population_in_thousands STD_Population_in_thousands
RANGE_Population_in_thousands CNTR_Population_in_thousands Cases_in_1000s ;
168995     class
168996     OPT_Population_in_thousands
168997     ;
MPRINT(EM_DIAGRAM):   class OPT_Population_in_thousands ;
168998     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 378   Memory used = 511K.
NOTE: There were 378 observations read from the data set EMWS2.PART_TRAIN.
NOTE: View WORK.TEMPBESTTRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 378 observations read from the data set EMWS2.IMPT_TRAIN.
NOTE: There were 378 observations read from the data set WORK.TEMPBESTTRAIN.
NOTE: The data set WORK.EM_DMDB has 378 observations and 12 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
168999     proc dmine data=work.EM_DMDB dmdbcat=WORK.EM_DMDB minr2=0.005 maxrows=3000 stopr2=0.0005 NOAOV16 NOINTER outrsquare=EMWS2.Trans_RSQUARE NOMONITOR PSHORT NOPRINT;
MPRINT(EM_DIAGRAM):    proc dmine data=work.EM_DMDB dmdbcat=WORK.EM_DMDB minr2=0.005 maxrows=3000 stopr2=0.0005 NOAOV16 NOINTER outrsquare=EMWS2.Trans_RSQUARE NOMONITOR PSHORT NOPRINT;
169000     var
169001     Population_in_thousands
169002     LG10_Population_in_thousands
169003     LOG_Population_in_thousands
169004     SQRT_Population_in_thousands
169005     INV_Population_in_thousands
169006     SQR_Population_in_thousands
169007     EXP_Population_in_thousands
169008     STD_Population_in_thousands
169009     RANGE_Population_in_thousands
169010     CNTR_Population_in_thousands
169011     OPT_Population_in_thousands
169012     ;
MPRINT(EM_DIAGRAM):   var Population_in_thousands LG10_Population_in_thousands LOG_Population_in_thousands SQRT_Population_in_thousands INV_Population_in_thousands SQR_Population_in_thousands EXP_Population_in_thousands STD_Population_in_thousands
RANGE_Population_in_thousands CNTR_Population_in_thousands OPT_Population_in_thousands ;
169013     target Cases_in_1000s;
MPRINT(EM_DIAGRAM):   target Cases_in_1000s;
169014     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Checking database engine with sqluse...
 
Initial pass to compute R2s for all targets
378 records read
NOTE: The full X'X matrix has 14 rows and columns.
 
Building X'X  for target: Cases_in_1000s rows=15 memory=0.00 meg.
378 records read
NOTE: There were 378 observations read from the data set WORK.EM_DMDB.
NOTE: The data set EMWS2.TRANS_RSQUARE has 22 observations and 4 variables.
NOTE: PROCEDURE DMINE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
169015     proc sort data=EMWS2.Trans_RSQUARE(where=(type in ('VAR', 'CLASS')) rename=(Effect=NEWVAR));
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Trans_RSQUARE(where=(type in ('VAR', 'CLASS')) rename=(Effect=NEWVAR));
169016     by NEWVAR;
MPRINT(EM_DIAGRAM):   by NEWVAR;
169017     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS2.TRANS_RSQUARE.
      WHERE type in ('CLASS', 'VAR');
NOTE: The data set EMWS2.TRANS_RSQUARE has 11 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
169018     proc sort data=WORK.BESTMAPPING;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.BESTMAPPING;
169019     by NEWVAR;
MPRINT(EM_DIAGRAM):   by NEWVAR;
169020     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.BESTMAPPING.
NOTE: The data set WORK.BESTMAPPING has 11 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
169021     data EMWS2.Trans_RSQUARE;
MPRINT(EM_DIAGRAM):   data EMWS2.Trans_RSQUARE;
169022     merge WORK.BESTMAPPING(in=_a)EMWS2.Trans_RSQUARE(drop=df type);
MPRINT(EM_DIAGRAM):   merge WORK.BESTMAPPING(in=_a)EMWS2.Trans_RSQUARE(drop=df type);
169023     by NEWVAR;
MPRINT(EM_DIAGRAM):   by NEWVAR;
169024     if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
169025     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.BESTMAPPING.
NOTE: There were 11 observations read from the data set EMWS2.TRANS_RSQUARE.
NOTE: The data set EMWS2.TRANS_RSQUARE has 11 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
169026     proc sort data=EMWS2.Trans_RSQUARE;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Trans_RSQUARE;
169027     by VAR descending RSQUARE;
MPRINT(EM_DIAGRAM):   by VAR descending RSQUARE;
169028     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS2.TRANS_RSQUARE.
NOTE: The data set EMWS2.TRANS_RSQUARE has 11 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
169029     data WORK.BESTMAPPING(rename=(bestvar=newvar bestr2=rsquare bestformula=formula));
MPRINT(EM_DIAGRAM):   data WORK.BESTMAPPING(rename=(bestvar=newvar bestr2=rsquare bestformula=formula));
169030     retain bestvar bestr2 bestformula;
MPRINT(EM_DIAGRAM):   retain bestvar bestr2 bestformula;
169031     set EMWS2.Trans_RSQUARE;
MPRINT(EM_DIAGRAM):   set EMWS2.Trans_RSQUARE;
169032     by VAR;
MPRINT(EM_DIAGRAM):   by VAR;
169033     if first.VAR then do;
MPRINT(EM_DIAGRAM):   if first.VAR then do;
169034     bestr2 = rsquare;
MPRINT(EM_DIAGRAM):   bestr2 = rsquare;
169035     bestvar = newvar;
MPRINT(EM_DIAGRAM):   bestvar = newvar;
169036     bestformula = formula;
MPRINT(EM_DIAGRAM):   bestformula = formula;
169037     end;
MPRINT(EM_DIAGRAM):   end;
169038     else do;
MPRINT(EM_DIAGRAM):   else do;
169039     if abs(rsquare-bestr2)<10**-8 and formula='' then do;
MPRINT(EM_DIAGRAM):   if abs(rsquare-bestr2)<10**-8 and formula='' then do;
169040     bestvar = var;
MPRINT(EM_DIAGRAM):   bestvar = var;
169041     bestformula = formula;
MPRINT(EM_DIAGRAM):   bestformula = formula;
169042     end;
MPRINT(EM_DIAGRAM):   end;
169043     if last.var then output;
MPRINT(EM_DIAGRAM):   if last.var then output;
169044     end;
MPRINT(EM_DIAGRAM):   end;
169045     keep var bestvar bestr2 bestformula;
MPRINT(EM_DIAGRAM):   keep var bestvar bestr2 bestformula;
169046     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS2.TRANS_RSQUARE.
NOTE: The data set WORK.BESTMAPPING has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
*  Trans: Equalize transformation requires a class target variable.  Transformation will be ignored.
*------------------------------------------------------------*
*------------------------------------------------------------*
*  Trans: Optimize equalize max. transformation requires a class target variable.  Transformation will be ignored.
*------------------------------------------------------------*
NOTE: View EMWS2.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.83 seconds
      cpu time            0.68 seconds
 
*------------------------------------------------------------*
*  Trans: Creating EMWS2.Trans_RESULT
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    data EMWS2.Trans_RESULT;
MPRINT(EM_DIAGRAM):   length NAME NEWVAR $32 LEVEL $10 POWER 8 FORMULA $70 LABEL $44 TERM $200;
MPRINT(EM_DIAGRAM):   NAME = "Population_in_thousands";
MPRINT(EM_DIAGRAM):   NEWVAR = "OPT_Population_in_thousands";
MPRINT(EM_DIAGRAM):   POWER = .;
MPRINT(EM_DIAGRAM):   FORMULA = "Optimal Binning(4)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   TYPE = "C";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Trans_RESULT NOTHREADS;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M26R3ZO4 out=WORK._TRANSRESLT(RENAME=(LEVEL=INPUTLEVEL TYPE=INPUTTYPE) KEEP=NAME ROLE LEVEL TYPE) NOTHREADS;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Trans_RESULT(RENAME=(NAME=INPUTNAME NEWVAR=NAME));
MPRINT(EM_DIAGRAM):   merge EMWS2.Trans_RESULT(in=a) WORK._TRANSRESLT;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if a then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc datasets library=EMWS2 nolist;
MPRINT(EM_DIAGRAM):   modify Trans_RESULT;
MPRINT(EM_DIAGRAM):   label INPUTNAME = "Input Name" NAME = "Output Name" POWER = "Power" FORMULA = "Formula" ROLE = "rpt_role_vlabel" INPUTLEVEL = "Input Level" LEVEL = "Output Level" INPUTTYPE = "Input Type" TYPE = "Output Type";
MPRINT(EM_DIAGRAM):   run;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
169075     data EMWS2.Trans_RESULT;
MPRINT(EM_DIAGRAM):   data EMWS2.Trans_RESULT;
169076     length NAME $32 FORMULA $70 POWER 8 ROLE $32 LEVEL $10 INPUTNAME $32 INPUTTYPE $1 LABEL $44;
MPRINT(EM_DIAGRAM):   length NAME $32 FORMULA $70 POWER 8 ROLE $32 LEVEL $10 INPUTNAME $32 INPUTTYPE $1 LABEL $44;
169077     label INPUTNAME ='Input Name' NAME='Name' POWER='Power' FORMULA='Formula' ROLE='Role' INPUTLEVEL='Input Level' LEVEL='Level' INPUTTYPE='Input Type' TYPE='Type';
MPRINT(EM_DIAGRAM):   label INPUTNAME = 'Input Name' NAME= 'Name' POWER= 'Power' FORMULA= 'Formula' ROLE= 'Role' INPUTLEVEL= 'Input Level' LEVEL= 'Level' INPUTTYPE= 'Input Type' TYPE= 'Type';
169078     set EMWS2.Trans_RESULT;
MPRINT(EM_DIAGRAM):   set EMWS2.Trans_RESULT;
169079     if INPUTNAME = '' then INPUTNAME = "Mixture of variables";
MPRINT(EM_DIAGRAM):   if INPUTNAME = '' then INPUTNAME = "Mixture of variables";
169080     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.TRANS_RESULT.
NOTE: The data set EMWS2.TRANS_RESULT has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
169081     data WORK.M1Q6JC6M;
MPRINT(EM_DIAGRAM):    data WORK.M1Q6JC6M;
169082     set WORK.M1Q6JC6M;
MPRINT(EM_DIAGRAM):   set WORK.M1Q6JC6M;
169083     if ROLE='REJECTED' then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   if ROLE='REJECTED' then ROLE='INPUT';
169084     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M1Q6JC6M.
NOTE: The data set WORK.M1Q6JC6M has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
*  Trans: Computing summary statistics for transformed variables
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    data WORK.Trans_TRANSFORM / view=WORK.Trans_TRANSFORM;
MPRINT(EM_DIAGRAM):   set EMWS2.Impt_TRAIN;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , Optimal Binning(4);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   length OPT_Population_in_thousands $36;
MPRINT(EM_DIAGRAM):   if (Population_in_thousands eq .) then OPT_Population_in_thousands="02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands < 8773.6505) then OPT_Population_in_thousands = "01:low-8773.6505";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 8773.6505 and Population_in_thousands < 34177.5) then OPT_Population_in_thousands = "02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 34177.5 and Population_in_thousands < 72628.5) then OPT_Population_in_thousands = "03:34177.5-72628.5";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 72628.5) then OPT_Population_in_thousands = "04:72628.5-high";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.Trans_TRANSFORM dmdbcat=WORK.EM_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   OPT_Population_in_thousands(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
MPRINT(EM_DIAGRAM):    data WORK.Trans_TEMP;
MPRINT(EM_DIAGRAM):   length SOURCE $6 NAME $32;
MPRINT(EM_DIAGRAM):   label SOURCE = "Source" NAME = "Variable Name" NLEVEL = "Number of Levels" NMISS = "Missing" MIN = "Minimum" MAX = "Maximum" MEAN = "Mean" STD = "Standard Deviation" SKEWNESS = "Skewness" KURTOSIS = "Kurtosis";
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "OPT_Population_in_thousands";
MPRINT(EM_DIAGRAM):   NMISS = 0;
MPRINT(EM_DIAGRAM):   NLEVEL = 4 - (nmiss>0);
MPRINT(EM_DIAGRAM):   MIN = .;
MPRINT(EM_DIAGRAM):   MAX = .;
MPRINT(EM_DIAGRAM):   MEAN = .;
MPRINT(EM_DIAGRAM):   STD = .;
MPRINT(EM_DIAGRAM):   SKEWNESS = .;
MPRINT(EM_DIAGRAM):   KURTOSIS = .;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
169147     data WORK.TRANSFOR_1JLN798_STATISTIC;
MPRINT(EM_DIAGRAM):    data WORK.TRANSFOR_1JLN798_STATISTIC;
169148     set WORK.Trans_TEMP;
MPRINT(EM_DIAGRAM):   set WORK.Trans_TEMP;
169149     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_TEMP.
NOTE: The data set WORK.TRANSFOR_1JLN798_STATISTIC has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
169150     %exploreSample(DATA=EMWS2.Impt_TRAIN, OUTPUT=EMWS2.Trans_SAMPLE_DATA, METADATA=EMWS2.Impt_CMeta_TRAIN, VARS=, METHOD=FIRSTN, SIZE=DEFAULT, ALPHA=0.01, PVALUE=0.01, SEED=12345);
MPRINT(EM_DIAGRAM):
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
169151    +/*------------------------------------------------------------------
169152    +  MACRO EXPLOREOBS
169153    +
169154    +  SUPPORT:  SASDHD - David Duling
169155    +  PRODUCT:  Enterprise Miner
169156    +
169157    +  DESCRIPTION:
169158    +  Generates maximum and default numbers of observations to
169159    +  download for visualization depending on the record length.
169160    +
169161    +  Values were determined by trial and error using typical
169162    +  Windows workstation configurations.
169163    +
169164    +  Discrete sets of values are returned so that user experience
169165    +  will be consitent with similar sized data sets.
169166    +
169167    +  These macro variables are set:
169168    +  _exploreobs_max -- maximum number of obs downloadable
169169    +  _exploreobs_def -- default number of obs to be downloaded
169170    +  _exploreobs_recl - record length.  Might be useful for reporting.
169171    +
169172    +  Use the _exploreobs_max to set limit the GUI selection of
169173    +  observations for downloading.  The GUI selection for obs
169174    +  could be reduced to "Default" and "Max".
169175    +
169176    +  Parameters
169177    +  data=   libname.memname of input data
169178    +  vars=   subset list of variables.
169179    +          downloading 1 out of 500 really does work like downloading
169180    +          1 out of 1 vars.  Users may select a subset of vars for
169181    +                   visualizations.  Pass in the list as space delimited
169182    +          var names.  If vars is not specified, the record length
169183    +          of the entire data will be used.
169184    +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
169185    +
169186    +  Control
169187    +  Users may control the values by entering these macro variables.
169188    +            EM_EXPLOREOBS_MAX
169189    +            EM_EXPLOREOBS_DEFAULT
169190    +  These values override the computed values.
169191    +
169192    +  Debugging
169193    +  %let _exploreobs_debug=1 ;
169194    +--------------------------------------------------------------------
169195    +  HISTORY: 20APR2004. sasdhd. pushed.
169196    +           18DEC2004. sasdhd. S0280556.
169197    +           07SEP2007. sasdhd. HK1009586
169198    +--------------------------------------------------------------------*/
169199    +
169200    +%macro exploreobs(data=,vars=, nbytes=) ;
169201    +
169202    +   /*--- variable definitions ---*/
169203    +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
169204    +   %local xobs xvars xlen vlen xi vname vlist ;
169205    +   %local _exp_source _exp_notes ;
169206    +
169207    +   /*--- USER definitions ---*/
169208    +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
169209    +
169210    +   /*--- variable intializations ---*/
169211    +   %let _exploreobs_max=0 ;
169212    +   %let _exploreobs_def=0 ;
169213    +   %let _exploreobs_recl=0 ;
169214    +   %let xvars= 0 ;
169215    +   %let xlen = 0 ;
169216    +   %let xobs = 0 ;
169217    +
169218    +   /*--- data error checks ---*/
169219    +   %if "&data" eq "" %then %do ;
169220    +            %put NOTE: DATA is not specified. ;
169221    +            %goto term ;
169222    +      %end ;
169223    +
169224    +   %let dsid=%sysfunc(open(&data)) ;
169225    +   %if not &dsid %then %do ;
169226    +            %put NOTE: DATA &data is not available. ;
169227    +            %goto term ;
169228    +      %end ;
169229    +
169230    +   /*--- if a vars list exists generate a subset ---*/
169231    +   %if &vars ne %then %do ;
169232    +         %let dsid=%sysfunc(close(&dsid)) ;
169233    +         %if &_exploreobs_debug ne 1 %then %do ;
169234    +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
169235    +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
169236    +                  options nosource nonotes ;
169237    +         %end ;
169238    +         data _exploreobs_temp_data ;
169239    +         set &data(obs=0) ;
169240    +          keep &vars ;
169241    +         run;
169242    +         %if &_exploreobs_debug ne 1 %then %do ;
169243    +                  options &_exp_source &_exp_notes ;
169244    +         %end ;
169245    +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
169246    +         %if &dsid eq 0 %then %do ;
169247    +                  %put NOTE: Sample is not available.;
169248    +                  %goto term ;
169249    +            %end ;
169250    +      %end ;
169251    +
169252    +   /*--- get var attributes ---*/
169253    +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
169254    +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
169255    +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
169256    +   %let dsid= %sysfunc(close(&dsid)) ;
169257    +
169258    +   /*--- set default and max obs ---*/
169259    +   %let _exploreobs_recl=%eval(&xlen) ;
169260    +   %if &_exploreobs_recl eq 0 %then %do ;
169261    +             %let _exploreobs_max= 0 ;
169262    +             %let _exploreobs_def= 0 ;
169263    +             %goto term ;
169264    +
169265    +   %end ;
169266    +   %else
169267    +   %if &_exploreobs_recl le 32 %then %do ;
169268    +             %let _exploreobs_max=100000 ;
169269    +             %let _exploreobs_def= 10000 ;
169270    +   %end ;
169271    +   %else
169272    +   %if &_exploreobs_recl le 128 %then %do ;
169273    +             %let _exploreobs_max=60000 ;
169274    +             %let _exploreobs_def= 6000 ;
169275    +   %end ;
169276    +   %else
169277    +   %if &_exploreobs_recl lt 1000 %then %do ;
169278    +             %let _exploreobs_max=20000 ;
169279    +             %let _exploreobs_def= 2000 ;
169280    +   %end ;
169281    +   %else
169282    +   %if &_exploreobs_recl lt 5000 %then %do ;
169283    +             %let _exploreobs_max= 10000 ;
169284    +             %let _exploreobs_def=  1000 ;
169285    +   %end ;
169286    +   %else
169287    +   %if &_exploreobs_recl lt 20000 %then %do ;
169288    +             %let _exploreobs_max= 5000 ;
169289    +             %let _exploreobs_def=  500 ;
169290    +   %end ;
169291    +   %else %do ;
169292    +             %let _exploreobs_max= 1000 ;
169293    +             %let _exploreobs_def=  200 ;
169294    +   %end ;
169295    +
169296    +   /*--- Users options ---*/
169297    +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
169298    +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
169299    +   %end;
169300    +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
169301    +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
169302    +   %end;
169303    +
169304    +    /*--- S0868273 ---*/
169305    +    %if "&NBYTES" ne "" %then %do;
169306    +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
169307    +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
169308    +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
169309    +       %end;
169310    +
169311    +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
169312    +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
169313    +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
169314    +          %if ^&_exploreobs_def %then
169315    +              %let _exploreobs_def = 1;
169316    +
169317    +       %end;
169318    +    %end;
169319    +
169320    +   /*--- Terminate ---*/
169321    +   %term:
169322    +
169323    +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
169324    +%mend ;
169325    +
169326    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
NOTE: EXPLOREOBS EMWS2.Impt_TRAIN : vars= 7 : recl= 95 : max=60000 : def= 6000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS2.Trans_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS2.Impt_TRAIN(obs= 6000 );
MPRINT(EXPLORESAMPLE):   run;
 
NOTE: View EMWS2.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 378 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 378 observations read from the data set EMWS2.IMPT_TRAIN.
NOTE: The data set EMWS2.TRANS_SAMPLE_DATA has 378 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
169327     proc print data = EMWS2.Trans_RESULT(obs=500) noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS2.Trans_RESULT(obs=500) noobs label;
169328     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_computedtransformations_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Computed Transformations";
169329     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   var INPUTNAME ROLE INPUTLEVEL NAME LEVEL FORMULA;
MPRINT(EM_DIAGRAM):   run;
169330     var INPUTNAME ROLE INPUTLEVEL NAME LEVEL FORMULA;
169331     run;
 
NOTE: There were 1 observations read from the data set EMWS2.TRANS_RESULT.
NOTE: The PROCEDURE PRINT printed page 44.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
169332     title9;
MPRINT(EM_DIAGRAM):   title9;
169333     title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 04, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:45:22" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 04, 2019
Time:                13:45:22
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3UNHKVV "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3UNHKVV new;
MPRINT(EM_DIAGRAM):   run;
169435     proc sort data=EMWS2.Trans_RESULT out=WORK.TransRESULT NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Trans_RESULT out=WORK.TransRESULT NOTHREADS;
169436     by INPUTNAME;
MPRINT(EM_DIAGRAM):   by INPUTNAME;
169437     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.TRANS_RESULT.
NOTE: The data set WORK.TRANSRESULT has 1 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
169438     proc sort data=EMWS2.Trans_VariableSet(KEEP= NAME FAMILY REPORT rename=(NAME=INPUTNAME)) out=WORK.TransVARSET NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Trans_VariableSet(KEEP= NAME FAMILY REPORT rename=(NAME=INPUTNAME)) out=WORK.TransVARSET NOTHREADS;
169439     by INPUTNAME;
MPRINT(EM_DIAGRAM):   by INPUTNAME;
169440     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set EMWS2.TRANS_VARIABLESET.
NOTE: The data set WORK.TRANSVARSET has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
169441     data WORK.TransRESULT;
MPRINT(EM_DIAGRAM):   data WORK.TransRESULT;
169442     merge WORK.TransRESULT WORK.TransVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.TransRESULT WORK.TransVARSET;
169443     by INPUTNAME;
MPRINT(EM_DIAGRAM):   by INPUTNAME;
169444     if NAME ne '' then output;
MPRINT(EM_DIAGRAM):   if NAME ne '' then output;
169445     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable INPUTNAME by input data sets. This might cause unexpected results.
NOTE: There were 1 observations read from the data set WORK.TRANSRESULT.
NOTE: There were 6 observations read from the data set WORK.TRANSVARSET.
NOTE: The data set WORK.TRANSRESULT has 1 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
169446     filename _code "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\TRAINDELTACODE.sas";
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\TRAINDELTACODE.sas";
169447     data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
169448     set WORK.TransRESULT;
MPRINT(EM_DIAGRAM):   set WORK.TransRESULT;
169449     length String $200;
MPRINT(EM_DIAGRAM):   length String $200;
169450     file _code;
MPRINT(EM_DIAGRAM):   file _code;
169451     String = 'if NAME="'!!strip(name)!!'" then do;';
MPRINT(EM_DIAGRAM):   String = 'if NAME="'!!strip(name)!!'" then do;';
169452     put / String;
MPRINT(EM_DIAGRAM):   put / String;
169453     if family ne '' then do;
MPRINT(EM_DIAGRAM):   if family ne '' then do;
169454     String = '   FAMILY ="'!!strip(family)!!'";';
MPRINT(EM_DIAGRAM):   String = '   FAMILY ="'!!strip(family)!!'";';
169455     put String;
MPRINT(EM_DIAGRAM):   put String;
169456     end;
MPRINT(EM_DIAGRAM):   end;
169457     select(formula);
MPRINT(EM_DIAGRAM):   select(formula);
169458     when('Interaction') put '   FAMILY  ="INTERACTION";';
MPRINT(EM_DIAGRAM):   when('Interaction') put '   FAMILY  ="INTERACTION";';
169459     when('') put '   COMMENT = "' method 'transformation of ' INPUTVAR '";';
MPRINT(EM_DIAGRAM):   when('') put '   COMMENT = "' method 'transformation of ' INPUTVAR '";';
169460     otherwise put '   COMMENT = "' formula '";';
MPRINT(EM_DIAGRAM):   otherwise put '   COMMENT = "' formula '";';
169461     end;
MPRINT(EM_DIAGRAM):   end;
169462     String = '   ROLE ="'!!strip(role)!!'";';
MPRINT(EM_DIAGRAM):   String = '   ROLE ="'!!strip(role)!!'";';
169463     put String;
MPRINT(EM_DIAGRAM):   put String;
169464     if REPORT="" then REPORT = "N";
MPRINT(EM_DIAGRAM):   if REPORT="" then REPORT = "N";
169465     String = '   REPORT ="'!!strip(report)!!'";';
MPRINT(EM_DIAGRAM):   String = '   REPORT ="'!!strip(report)!!'";';
169466     put String;
MPRINT(EM_DIAGRAM):   put String;
169467     String = '   LEVEL  ="'!!strip(level)!!'";';
MPRINT(EM_DIAGRAM):   String = '   LEVEL  ="'!!strip(level)!!'";';
169468     put String;
MPRINT(EM_DIAGRAM):   put String;
169469     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
169470     if formula ne 'Interaction' and INPUTNAME ne '' then do;
MPRINT(EM_DIAGRAM):   if formula ne 'Interaction' and INPUTNAME ne '' then do;
169471     String = 'if NAME="'!!strip(INPUTNAME)!!'" then delete;';
MPRINT(EM_DIAGRAM):   String = 'if NAME="'!!strip(INPUTNAME)!!'" then delete;';
169472     put String;
MPRINT(EM_DIAGRAM):   put String;
169473     end;
MPRINT(EM_DIAGRAM):   end;
169474     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable method is uninitialized.
NOTE: Variable INPUTVAR is uninitialized.
NOTE: The file _CODE is:
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\TRAINDELTACODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=04Dec2019:13:45:22,
      Create Time=03Dec2019:16:53:07
 
NOTE: 8 records were written to the file _CODE.
      The minimum record length was 0.
      The maximum record length was 46.
NOTE: There were 1 observations read from the data set WORK.TRANSRESULT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
169475     filename _code;
MPRINT(EM_DIAGRAM):   filename _code;
NOTE: Fileref _CODE has been deassigned.
169476     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Trans: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169477     *------------------------------------------------------------*;
169478     * Trans: Scoring DATA data;
169479     *------------------------------------------------------------*;
169480     data EMWS2.Trans_TRAIN
169481     / view=EMWS2.Trans_TRAIN
169482     ;
MPRINT(EM_DIAGRAM):   data EMWS2.Trans_TRAIN / view=EMWS2.Trans_TRAIN ;
169483     set EMWS2.Impt_TRAIN
169484     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Impt_TRAIN ;
169485     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas.
169486    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169487    +* Computed Code;
MPRINT(EM_DIAGRAM):   * Computed Code;
169488    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169489    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169490    +* TRANSFORM: Population_in_thousands , Optimal Binning(4);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , Optimal Binning(4);
169491    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169492    +label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
169493    +length OPT_Population_in_thousands $36;
MPRINT(EM_DIAGRAM):   length OPT_Population_in_thousands $36;
169494    +if (Population_in_thousands eq .) then OPT_Population_in_thousands="02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   if (Population_in_thousands eq .) then OPT_Population_in_thousands="02:8773.6505-34177.5, MISSING";
169495    +else
169496    +if (Population_in_thousands < 8773.6505) then
169497    +OPT_Population_in_thousands = "01:low-8773.6505";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands < 8773.6505) then OPT_Population_in_thousands = "01:low-8773.6505";
169498    +else
169499    +if (Population_in_thousands >= 8773.6505 and Population_in_thousands < 34177.5) then
169500    +OPT_Population_in_thousands = "02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 8773.6505 and Population_in_thousands < 34177.5) then OPT_Population_in_thousands = "02:8773.6505-34177.5, MISSING";
169501    +else
169502    +if (Population_in_thousands >= 34177.5 and Population_in_thousands < 72628.5) then
169503    +OPT_Population_in_thousands = "03:34177.5-72628.5";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 34177.5 and Population_in_thousands < 72628.5) then OPT_Population_in_thousands = "03:34177.5-72628.5";
169504    +else
169505    +if (Population_in_thousands >= 72628.5) then
169506    +OPT_Population_in_thousands = "04:72628.5-high";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 72628.5) then OPT_Population_in_thousands = "04:72628.5-high";
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
169507     run;
 
NOTE: DATA STEP view saved on file EMWS2.TRANS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
169508     quit;
169509     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
169510     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Trans: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169511     *------------------------------------------------------------*;
169512     * Trans: Scoring VALIDATE data;
169513     *------------------------------------------------------------*;
169514     data EMWS2.Trans_VALIDATE
169515     / view=EMWS2.Trans_VALIDATE
169516     ;
MPRINT(EM_DIAGRAM):   data EMWS2.Trans_VALIDATE / view=EMWS2.Trans_VALIDATE ;
169517     set EMWS2.Impt_VALIDATE
169518     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Impt_VALIDATE ;
169519     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas.
169520    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169521    +* Computed Code;
MPRINT(EM_DIAGRAM):   * Computed Code;
169522    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169523    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169524    +* TRANSFORM: Population_in_thousands , Optimal Binning(4);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , Optimal Binning(4);
169525    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169526    +label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
169527    +length OPT_Population_in_thousands $36;
MPRINT(EM_DIAGRAM):   length OPT_Population_in_thousands $36;
169528    +if (Population_in_thousands eq .) then OPT_Population_in_thousands="02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   if (Population_in_thousands eq .) then OPT_Population_in_thousands="02:8773.6505-34177.5, MISSING";
169529    +else
169530    +if (Population_in_thousands < 8773.6505) then
169531    +OPT_Population_in_thousands = "01:low-8773.6505";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands < 8773.6505) then OPT_Population_in_thousands = "01:low-8773.6505";
169532    +else
169533    +if (Population_in_thousands >= 8773.6505 and Population_in_thousands < 34177.5) then
169534    +OPT_Population_in_thousands = "02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 8773.6505 and Population_in_thousands < 34177.5) then OPT_Population_in_thousands = "02:8773.6505-34177.5, MISSING";
169535    +else
169536    +if (Population_in_thousands >= 34177.5 and Population_in_thousands < 72628.5) then
169537    +OPT_Population_in_thousands = "03:34177.5-72628.5";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 34177.5 and Population_in_thousands < 72628.5) then OPT_Population_in_thousands = "03:34177.5-72628.5";
169538    +else
169539    +if (Population_in_thousands >= 72628.5) then
169540    +OPT_Population_in_thousands = "04:72628.5-high";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 72628.5) then OPT_Population_in_thousands = "04:72628.5-high";
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
169541     run;
 
NOTE: DATA STEP view saved on file EMWS2.TRANS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
169542     quit;
169543     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
169544     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Trans: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169545     *------------------------------------------------------------*;
169546     * Trans: Scoring TEST data;
169547     *------------------------------------------------------------*;
169548     data EMWS2.Trans_TEST
169549     / view=EMWS2.Trans_TEST
169550     ;
MPRINT(EM_DIAGRAM):   data EMWS2.Trans_TEST / view=EMWS2.Trans_TEST ;
169551     set EMWS2.Impt_TEST
169552     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Impt_TEST ;
169553     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas.
169554    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169555    +* Computed Code;
MPRINT(EM_DIAGRAM):   * Computed Code;
169556    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169557    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169558    +* TRANSFORM: Population_in_thousands , Optimal Binning(4);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , Optimal Binning(4);
169559    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169560    +label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
169561    +length OPT_Population_in_thousands $36;
MPRINT(EM_DIAGRAM):   length OPT_Population_in_thousands $36;
169562    +if (Population_in_thousands eq .) then OPT_Population_in_thousands="02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   if (Population_in_thousands eq .) then OPT_Population_in_thousands="02:8773.6505-34177.5, MISSING";
169563    +else
169564    +if (Population_in_thousands < 8773.6505) then
169565    +OPT_Population_in_thousands = "01:low-8773.6505";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands < 8773.6505) then OPT_Population_in_thousands = "01:low-8773.6505";
169566    +else
169567    +if (Population_in_thousands >= 8773.6505 and Population_in_thousands < 34177.5) then
169568    +OPT_Population_in_thousands = "02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 8773.6505 and Population_in_thousands < 34177.5) then OPT_Population_in_thousands = "02:8773.6505-34177.5, MISSING";
169569    +else
169570    +if (Population_in_thousands >= 34177.5 and Population_in_thousands < 72628.5) then
169571    +OPT_Population_in_thousands = "03:34177.5-72628.5";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 34177.5 and Population_in_thousands < 72628.5) then OPT_Population_in_thousands = "03:34177.5-72628.5";
169572    +else
169573    +if (Population_in_thousands >= 72628.5) then
169574    +OPT_Population_in_thousands = "04:72628.5-high";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 72628.5) then OPT_Population_in_thousands = "04:72628.5-high";
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
169575     run;
 
NOTE: DATA STEP view saved on file EMWS2.TRANS_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.IMPT_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
169576     quit;
169577     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
169578     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
169579     * Trans: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Trans: Computing metadata for TRAIN data;
169580     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS2.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.Trans_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.Trans_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.Trans_TRAIN out=WORK.M0_F7TC0 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0_F7TC0;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0_F7TC0(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0_F7TC0;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0_F7TC0;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3UB1DB9 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3UB1DB9;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3UB1DB9;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3MPI57U(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3UB1DB9;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3UB1DB9;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3UB1DB9;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3UB1DB9;
MPRINT(EMADVISECOLUMNS):   set WORK.M3UB1DB9;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS2.Impt_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Impt_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Trans_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Trans";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Trans: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Computed Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="OPT_Population_in_thousands" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "Optimal Binning(4) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="Population_in_thousands" then delete;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS2.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS2.TRANS_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: View EMWS2.TRANS_TEST.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 04, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:45:23" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                December 04, 2019
Time:                13:45:23
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O31DYMUG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O31DYMUG new;
MPRINT(EM_DIAGRAM):   run;
169952     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
169953     * &msgString;
MPRINT(EM_DIAGRAM):   * &msgString;
169954     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169955     filename _flowref "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   filename _flowref "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
169956     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK.TRANS_SCOREINPUTS;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK.TRANS_SCOREINPUTS;
169957     %INCLUDE _flowref;
NOTE: %INCLUDE (level 1) file _FLOWREF is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas.
169958    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169959    +* Computed Code;
MPRINT(EM_DIAGRAM):   * Computed Code;
169960    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169961    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169962    +* TRANSFORM: Population_in_thousands , Optimal Binning(4);
MPRINT(EM_DIAGRAM):   * TRANSFORM: Population_in_thousands , Optimal Binning(4);
169963    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169964    +label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
MPRINT(EM_DIAGRAM):   label OPT_Population_in_thousands = 'Transformed Population_in_thousands';
169965    +length OPT_Population_in_thousands $36;
MPRINT(EM_DIAGRAM):   length OPT_Population_in_thousands $36;
169966    +if (Population_in_thousands eq .) then OPT_Population_in_thousands="02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   if (Population_in_thousands eq .) then OPT_Population_in_thousands="02:8773.6505-34177.5, MISSING";
169967    +else
169968    +if (Population_in_thousands < 8773.6505) then
169969    +OPT_Population_in_thousands = "01:low-8773.6505";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands < 8773.6505) then OPT_Population_in_thousands = "01:low-8773.6505";
169970    +else
169971    +if (Population_in_thousands >= 8773.6505 and Population_in_thousands < 34177.5) then
169972    +OPT_Population_in_thousands = "02:8773.6505-34177.5, MISSING";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 8773.6505 and Population_in_thousands < 34177.5) then OPT_Population_in_thousands = "02:8773.6505-34177.5, MISSING";
169973    +else
169974    +if (Population_in_thousands >= 34177.5 and Population_in_thousands < 72628.5) then
169975    +OPT_Population_in_thousands = "03:34177.5-72628.5";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 34177.5 and Population_in_thousands < 72628.5) then OPT_Population_in_thousands = "03:34177.5-72628.5";
169976    +else
169977    +if (Population_in_thousands >= 72628.5) then
169978    +OPT_Population_in_thousands = "04:72628.5-high";
MPRINT(EM_DIAGRAM):   else if (Population_in_thousands >= 72628.5) then OPT_Population_in_thousands = "04:72628.5-high";
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
169979     run;
 
NOTE: Dependency structure written to data set WORK.TRANS_SCOREINPUTS.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
169980     quit;
169981     data WORK.TRANS_SCOREINPUTS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_SCOREINPUTS;
169982     set WORK.TRANS_SCOREINPUTS(keep=RHS rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   set WORK.TRANS_SCOREINPUTS(keep=RHS rename=(RHS=NAME));
169983     length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
169984     UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
169985     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_SCOREINPUTS.
NOTE: The data set WORK.TRANS_SCOREINPUTS has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
169986     proc sort data=WORK.TRANS_SCOREINPUTS NODUPKEY;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_SCOREINPUTS NODUPKEY;
169987     by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
169988     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_SCOREINPUTS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TRANS_SCOREINPUTS has 1 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
169989     filename _flowref;
MPRINT(EM_DIAGRAM):   filename _flowref;
NOTE: Fileref _FLOWREF has been deassigned.
169990     %let SYSCC = 0;
169991     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
169992     * transformcombinevariables;
MPRINT(EM_DIAGRAM):   * transformcombinevariables;
169993     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
169994     data WORK.TRANS_OUTPUTVARS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_OUTPUTVARS;
169995     length Uname inputName $32 inputLevel $10 inputType $1 _MetaFlag 8;
MPRINT(EM_DIAGRAM):   length Uname inputName $32 inputLevel $10 inputType $1 _MetaFlag 8;
169996     set
169997     EMWS2.Trans_RESULT
169998     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Trans_RESULT ;
169999     _MetaFlag=0;
MPRINT(EM_DIAGRAM):   _MetaFlag=0;
170000     uname = upcase(name);
MPRINT(EM_DIAGRAM):   uname = upcase(name);
170001     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.TRANS_RESULT.
NOTE: The data set WORK.TRANS_OUTPUTVARS has 1 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170002     data _temp;
MPRINT(EM_DIAGRAM):    data _temp;
170003     length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
170004     set EMWS2.Trans_CMeta_TRAIN(keep=NAME LEVEL ROLE TYPE CREATOR LABEL);
MPRINT(EM_DIAGRAM):   set EMWS2.Trans_CMeta_TRAIN(keep=NAME LEVEL ROLE TYPE CREATOR LABEL);
170005     UNAME = upcase(name);
MPRINT(EM_DIAGRAM):   UNAME = upcase(name);
170006     where upcase(CREATOR) = upcase("Trans");
MPRINT(EM_DIAGRAM):   where upcase(CREATOR) = upcase("Trans");
170007     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.TRANS_CMETA_TRAIN.
      WHERE UPCASE(CREATOR)='TRANS';
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170008     proc sort data=_temp(drop=CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=_temp(drop=CREATOR);
170009     by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
170010     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
170011     proc sort data=WORK.TRANS_OUTPUTVARS;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.TRANS_OUTPUTVARS;
170012     by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
170013     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_OUTPUTVARS.
NOTE: The data set WORK.TRANS_OUTPUTVARS has 1 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
170014     data WORK.TRANS_OUTPUTVARS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_OUTPUTVARS;
170015     merge WORK.TRANS_OUTPUTVARS _temp;
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_OUTPUTVARS _temp;
170016     by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
170017     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_OUTPUTVARS.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_OUTPUTVARS has 1 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170018     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
170019     * Trans: Get Metadata for the Score Inputs Variables;
MPRINT(EM_DIAGRAM):   * Trans: Get Metadata for the Score Inputs Variables;
170020     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
170021     data _temp;
MPRINT(EM_DIAGRAM):   data _temp;
170022     length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
170023     set EMWS2.Trans_VariableSet(keep=NAME LEVEL TYPE LABEL);
MPRINT(EM_DIAGRAM):   set EMWS2.Trans_VariableSet(keep=NAME LEVEL TYPE LABEL);
170024     UNAME = upcase(name);
MPRINT(EM_DIAGRAM):   UNAME = upcase(name);
170025     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set EMWS2.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP has 6 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
170026     proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
170027     by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
170028     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 6 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170029     data WORK.TRANS_SCOREINPUTS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_SCOREINPUTS;
170030     merge WORK.TRANS_SCOREINPUTS(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_SCOREINPUTS(in=_a) _temp(in=_b);
170031     by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
170032     if _a and _b then output;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
170033     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_SCOREINPUTS.
NOTE: There were 6 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_SCOREINPUTS has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
170034     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
170035     * Trans: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   * Trans: Computing Summary Statistics;
170036     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
170037     proc dmdb data=EMWS2.Trans_TRAIN classout=WORK.TRANS_CLASSSTATS varout=WORK.TRANS_VARSTATS;
MPRINT(EM_DIAGRAM):   proc dmdb data=EMWS2.Trans_TRAIN classout=WORK.TRANS_CLASSSTATS varout=WORK.TRANS_VARSTATS;
170038     class
170039     OPT_Population_in_thousands
170040     ;
MPRINT(EM_DIAGRAM):   class OPT_Population_in_thousands ;
170041     var
170042     Population_in_thousands
170043     ;
MPRINT(EM_DIAGRAM):   var Population_in_thousands ;
170044     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 378   Memory used = 511K.
NOTE: There were 378 observations read from the data set EMWS2.PART_TRAIN.
NOTE: View EMWS2.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
NOTE: There were 378 observations read from the data set EMWS2.IMPT_TRAIN.
NOTE: There were 378 observations read from the data set EMWS2.TRANS_TRAIN.
NOTE: The data set WORK.TRANS_CLASSSTATS has 4 observations and 9 variables.
NOTE: The data set WORK.TRANS_VARSTATS has 1 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
 
170045     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
170046     * Trans: Combine Information and Statistics for Class Variables;
MPRINT(EM_DIAGRAM):   * Trans: Combine Information and Statistics for Class Variables;
170047     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
170048     proc sort data=WORK.TRANS_OUTPUTVARS out=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_OUTPUTVARS out=_temp;
170049     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
170050     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_OUTPUTVARS.
NOTE: The data set WORK._TEMP has 1 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170051     proc sort data=WORK.TRANS_CLASSSTATS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_CLASSSTATS;
170052     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
170053     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.TRANS_CLASSSTATS.
NOTE: The data set WORK.TRANS_CLASSSTATS has 4 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
170054     data WORK.TRANS_CLASSSTATS(keep=name nlevel nmiss);
MPRINT(EM_DIAGRAM):   data WORK.TRANS_CLASSSTATS(keep=name nlevel nmiss);
170055     retain nlevel nmiss;
MPRINT(EM_DIAGRAM):   retain nlevel nmiss;
170056     set WORK.TRANS_CLASSSTATS;
MPRINT(EM_DIAGRAM):   set WORK.TRANS_CLASSSTATS;
170057     by Name;
MPRINT(EM_DIAGRAM):   by Name;
170058     if first.Name then do;
MPRINT(EM_DIAGRAM):   if first.Name then do;
170059     nlevel= 0;
MPRINT(EM_DIAGRAM):   nlevel= 0;
170060     nmiss= 0;
MPRINT(EM_DIAGRAM):   nmiss= 0;
170061     end;
MPRINT(EM_DIAGRAM):   end;
170062     if (type='C' and CRAW='') or (type='N' and NRAW=.) then nmiss = FREQUENCY;
MPRINT(EM_DIAGRAM):   if (type='C' and CRAW='') or (type='N' and NRAW=.) then nmiss = FREQUENCY;
170063     else nlevel + 1;
MPRINT(EM_DIAGRAM):   else nlevel + 1;
170064     if last.name then output;
MPRINT(EM_DIAGRAM):   if last.name then output;
170065     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.TRANS_CLASSSTATS.
NOTE: The data set WORK.TRANS_CLASSSTATS has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170066     /*Merge Statistics for Class Output Vars */
170067     data WORK.TRANS_CLASSSTATS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_CLASSSTATS;
170068     length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
MPRINT(EM_DIAGRAM):   length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
170069     merge WORK.TRANS_CLASSSTATS(in=_a) _temp(in=_b keep=NAME InputName Formula _MetaFlag LEVEL TYPE LABEL);
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_CLASSSTATS(in=_a) _temp(in=_b keep=NAME InputName Formula _MetaFlag LEVEL TYPE LABEL);
170070     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
170071     if _a and _b then do;
MPRINT(EM_DIAGRAM):   if _a and _b then do;
170072     SOURCE='Output';
MPRINT(EM_DIAGRAM):   SOURCE='Output';
170073     if _MetaFlag = 1 then _METHOD_="Meta";
MPRINT(EM_DIAGRAM):   if _MetaFlag = 1 then _METHOD_="Meta";
170074     else if Formula eq 'Interaction' then _METHOD_="Computed";
MPRINT(EM_DIAGRAM):   else if Formula eq 'Interaction' then _METHOD_="Computed";
170075     else if inputName eq '' then _METHOD_="Formula";
MPRINT(EM_DIAGRAM):   else if inputName eq '' then _METHOD_="Formula";
170076     else _METHOD_="Computed";
MPRINT(EM_DIAGRAM):   else _METHOD_="Computed";
170077     if Formula = '' then Formula = "User Code";
MPRINT(EM_DIAGRAM):   if Formula = '' then Formula = "User Code";
170078     end;
MPRINT(EM_DIAGRAM):   end;
170079     if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
170080     drop inputName LEVEL TYPE _MetaFlag;
MPRINT(EM_DIAGRAM):   drop inputName LEVEL TYPE _MetaFlag;
170081     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_CLASSSTATS.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_CLASSSTATS has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170082     /*Merge Statistics for Class Input Vars */
170083     proc sort data=WORK.TRANS_SCOREINPUTS(drop=TYPE LEVEL) out=_temp nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_SCOREINPUTS(drop=TYPE LEVEL) out=_temp nodupkey;
170084     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
170085     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_SCOREINPUTS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
170086     data WORK.TRANS_CLASSSTATS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_CLASSSTATS;
170087     merge WORK.TRANS_CLASSSTATS(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_CLASSSTATS(in=_a) _temp(in=_b);
170088     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
170089     if _a and _b then do;
MPRINT(EM_DIAGRAM):   if _a and _b then do;
170090     SOURCE='Input';
MPRINT(EM_DIAGRAM):   SOURCE='Input';
170091     _METHOD_="Original";
MPRINT(EM_DIAGRAM):   _METHOD_="Original";
170092     end;
MPRINT(EM_DIAGRAM):   end;
170093     if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
170094     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_CLASSSTATS.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_CLASSSTATS has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170095     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
170096     * Trans: Combine Information and Statistics for Interval Variables;
MPRINT(EM_DIAGRAM):   * Trans: Combine Information and Statistics for Interval Variables;
170097     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
170098     proc sort data=WORK.TRANS_OUTPUTVARS out=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_OUTPUTVARS out=_temp;
170099     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
170100     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_OUTPUTVARS.
NOTE: The data set WORK._TEMP has 1 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
170101     proc sort data=WORK.TRANS_VARSTATS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_VARSTATS;
170102     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
170103     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_VARSTATS.
NOTE: The data set WORK.TRANS_VARSTATS has 1 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *Merge Statistics for Output Vars;
170104     *Merge Statistics for Output Vars;
170105     data WORK.TRANS_VARSTATS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_VARSTATS;
170106     length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
MPRINT(EM_DIAGRAM):   length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
170107     merge WORK.TRANS_VARSTATS(in=_a) _temp(in=_b keep=NAME Formula InputName _MetaFlag LEVEL TYPE LABEL);
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_VARSTATS(in=_a) _temp(in=_b keep=NAME Formula InputName _MetaFlag LEVEL TYPE LABEL);
170108     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
170109     if _a and _b then do;
MPRINT(EM_DIAGRAM):   if _a and _b then do;
170110     SOURCE='Output';
MPRINT(EM_DIAGRAM):   SOURCE='Output';
170111     if _MetaFlag = 1 then _METHOD_="Meta";
MPRINT(EM_DIAGRAM):   if _MetaFlag = 1 then _METHOD_="Meta";
170112     else if Formula eq 'Interaction' then _METHOD_="Computed";
MPRINT(EM_DIAGRAM):   else if Formula eq 'Interaction' then _METHOD_="Computed";
170113     else if inputName eq '' then _METHOD_="Formula";
MPRINT(EM_DIAGRAM):   else if inputName eq '' then _METHOD_="Formula";
170114     else _METHOD_="Computed";
MPRINT(EM_DIAGRAM):   else _METHOD_="Computed";
170115     if Formula = '' then Formula = "Mixture of variables";
MPRINT(EM_DIAGRAM):   if Formula = '' then Formula = "Mixture of variables";
170116     end;
MPRINT(EM_DIAGRAM):   end;
170117     if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
170118     drop inputName LEVEL TYPE _MetaFlag;
MPRINT(EM_DIAGRAM):   drop inputName LEVEL TYPE _MetaFlag;
170119     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_VARSTATS.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_VARSTATS has 1 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *Merge Statistics for Input Vars;
170120     *Merge Statistics for Input Vars;
170121     proc sort data=WORK.TRANS_SCOREINPUTS(drop=TYPE LEVEL) out=_temp nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_SCOREINPUTS(drop=TYPE LEVEL) out=_temp nodupkey;
170122     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
170123     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_SCOREINPUTS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
170124     data WORK.TRANS_VARSTATS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_VARSTATS;
170125     merge WORK.TRANS_VARSTATS(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_VARSTATS(in=_a) _temp(in=_b);
170126     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
170127     if _a and _b then do;
MPRINT(EM_DIAGRAM):   if _a and _b then do;
170128     SOURCE='Input';
MPRINT(EM_DIAGRAM):   SOURCE='Input';
170129     _METHOD_="Original";
MPRINT(EM_DIAGRAM):   _METHOD_="Original";
170130     end;
MPRINT(EM_DIAGRAM):   end;
170131     if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
170132     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_VARSTATS.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_VARSTATS has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170133     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
170134     * Trans: Combine statistics for class and interval variables;
MPRINT(EM_DIAGRAM):   * Trans: Combine statistics for class and interval variables;
170135     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
170136     data EMWS2.Trans_STATISTICS;
MPRINT(EM_DIAGRAM):   data EMWS2.Trans_STATISTICS;
170137     length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
MPRINT(EM_DIAGRAM):   length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
170138     label SOURCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_source_vlabel,  NOQUOTE))" _METHOD_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_method_vlabel,  NOQUOTE))" NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,  NOQUOTE))" FORMULA =
170139        "%sysfunc(sasmsg(sashelp.dmine, rpt_formula_vlabel,   NOQUOTE))" NLEVEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel,   NOQUOTE))" N = "%sysfunc(sasmsg(sashelp.dmine, rpt_nonmiss_vlabel, NOQUOTE))" NMISS =
170140        "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))" MIN = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))" MAX = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))" MEAN =
170141        "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,    NOQUOTE))" STD = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,     NOQUOTE))" SKEWNESS = "%sysfunc(sasmsg(sashelp.dmine, rpt_skewness_vlabel, NOQUOTE))" KURTOSIS =
170142        "%sysfunc(sasmsg(sashelp.dmine, rpt_kurtosis_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SOURCE = "Source" _METHOD_ = "Method" NAME = "Variable Name" FORMULA = "Formula" NLEVEL = "Number of Levels" N = "Non Missing" NMISS = "Missing" MIN = "Minimum" MAX = "Maximum" MEAN = "Mean" STD = "Standard Deviation" SKEWNESS
= "Skewness" KURTOSIS = "Kurtosis" LABEL = "Label";
170143     set
170144     WORK.TRANS_CLASSSTATS
170145     WORK.TRANS_VARSTATS
170146     ;
MPRINT(EM_DIAGRAM):   set WORK.TRANS_CLASSSTATS WORK.TRANS_VARSTATS ;
170147     drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
170148     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TRANS_CLASSSTATS.
NOTE: There were 1 observations read from the data set WORK.TRANS_VARSTATS.
NOTE: The data set EMWS2.TRANS_STATISTICS has 2 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
170149     proc sort data=EMWS2.Trans_STATISTICS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Trans_STATISTICS;
170150     by SOURCE _METHOD_ NAME;
MPRINT(EM_DIAGRAM):   by SOURCE _METHOD_ NAME;
170151     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TRANS_STATISTICS.
NOTE: The data set EMWS2.TRANS_STATISTICS has 2 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
170152     proc sort data = EMWS2.Trans_STATISTICS NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS2.Trans_STATISTICS NOTHREADS;
170153     by SOURCE NAME;
MPRINT(EM_DIAGRAM):   by SOURCE NAME;
170154     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TRANS_STATISTICS.
NOTE: The data set EMWS2.TRANS_STATISTICS has 2 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
170155     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
170156     proc print data = EMWS2.Trans_STATISTICS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS2.Trans_STATISTICS(obs=500) noobs label;
170157     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_intervalinputStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Summary Statistics for Input Interval Variables";
170158     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   var Name NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS;
MPRINT(EM_DIAGRAM):   where SOURCE eq 'INPUT' and mean ne .;
MPRINT(EM_DIAGRAM):   run;
170159     var Name NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS;
170160     where SOURCE eq 'INPUT' and mean ne .;
170161     run;
 
NOTE: No observations were selected from data set EMWS2.TRANS_STATISTICS.
NOTE: There were 0 observations read from the data set EMWS2.TRANS_STATISTICS.
      WHERE (SOURCE='INPUT') and (mean not = .);
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170162     proc print data = EMWS2.Trans_STATISTICS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS2.Trans_STATISTICS(obs=500) noobs label;
170163     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_intervaloutputStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Summary Statistics for Output Interval Variables";
170164     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   var Name _METHOD_ NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS;
MPRINT(EM_DIAGRAM):   where SOURCE eq 'OUTPUT' and mean ne .;
MPRINT(EM_DIAGRAM):   run;
170165     var Name _METHOD_ NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS;
170166     where SOURCE eq 'OUTPUT' and mean ne .;
170167     run;
 
NOTE: No observations were selected from data set EMWS2.TRANS_STATISTICS.
NOTE: There were 0 observations read from the data set EMWS2.TRANS_STATISTICS.
      WHERE (SOURCE='OUTPUT') and (mean not = .);
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
170168     proc print data = EMWS2.Trans_STATISTICS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS2.Trans_STATISTICS(obs=500) noobs label;
170169     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_classinputStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Summary Statistics for Input Class Variables";
170170     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   var Name NLEVEL NMISS;
MPRINT(EM_DIAGRAM):   where SOURCE eq 'INPUT' and nlevel ne .;
MPRINT(EM_DIAGRAM):   run;
170171     var Name NLEVEL NMISS;
170172     where SOURCE eq 'INPUT' and nlevel ne .;
170173     run;
 
NOTE: No observations were selected from data set EMWS2.TRANS_STATISTICS.
NOTE: There were 0 observations read from the data set EMWS2.TRANS_STATISTICS.
      WHERE (SOURCE='INPUT') and (nlevel not = .);
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170174     proc print data = EMWS2.Trans_STATISTICS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS2.Trans_STATISTICS(obs=500) noobs label;
170175     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_classoutputStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Summary Statistics for Output Class Variables";
170176     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   var Name _METHOD_ NLEVEL NMISS;
MPRINT(EM_DIAGRAM):   where SOURCE eq 'OUTPUT' and nlevel ne .;
MPRINT(EM_DIAGRAM):   run;
170177     var Name _METHOD_ NLEVEL NMISS;
170178     where SOURCE eq 'OUTPUT' and nlevel ne .;
170179     run;
 
NOTE: No observations were selected from data set EMWS2.TRANS_STATISTICS.
NOTE: There were 0 observations read from the data set EMWS2.TRANS_STATISTICS.
      WHERE (SOURCE='OUTPUT') and (nlevel not = .);
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
170180     title9;
MPRINT(EM_DIAGRAM):   title9;
170181     title10;
MPRINT(EM_DIAGRAM):   title10;
170182     data EMWS2.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):    data EMWS2.Trans_EMSCOREVAR;
170183     length Name $32 formula $300 file $200;
MPRINT(EM_DIAGRAM):   length Name $32 formula $300 file $200;
170184     keep NAME Formula file;
MPRINT(EM_DIAGRAM):   keep NAME Formula file;
170185     set EMWS2.Trans_STATISTICS;
MPRINT(EM_DIAGRAM):   set EMWS2.Trans_STATISTICS;
170186     where SOURCE='Output';
MPRINT(EM_DIAGRAM):   where SOURCE='Output';
170187     select( _METHOD_);
MPRINT(EM_DIAGRAM):   select( _METHOD_);
170188     when('Computed') do;
MPRINT(EM_DIAGRAM):   when('Computed') do;
170189     file="TRANSFORMCODE\"!!strip(NAME)!!'.sas';
MPRINT(EM_DIAGRAM):   file="TRANSFORMCODE\"!!strip(NAME)!!'.sas';
170190     formula = '';
MPRINT(EM_DIAGRAM):   formula = '';
170191     end;
MPRINT(EM_DIAGRAM):   end;
170192     when('Formula') do;
MPRINT(EM_DIAGRAM):   when('Formula') do;
170193     if Formula eq 'Mixture of variables' then do;
MPRINT(EM_DIAGRAM):   if Formula eq 'Mixture of variables' then do;
170194     file= "EDITORCODE.sas";
MPRINT(EM_DIAGRAM):   file= "EDITORCODE.sas";
170195     formula = '';
MPRINT(EM_DIAGRAM):   formula = '';
170196     end;
MPRINT(EM_DIAGRAM):   end;
170197     if Formula = 'User Code' then do;
MPRINT(EM_DIAGRAM):   if Formula = 'User Code' then do;
170198     file= "EDITORCODE.sas";
MPRINT(EM_DIAGRAM):   file= "EDITORCODE.sas";
170199     formula = '';
MPRINT(EM_DIAGRAM):   formula = '';
170200     end;
MPRINT(EM_DIAGRAM):   end;
170201     end;
MPRINT(EM_DIAGRAM):   end;
170202     otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
170203     end;
MPRINT(EM_DIAGRAM):   end;
170204     output;
MPRINT(EM_DIAGRAM):   output;
170205     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.TRANS_STATISTICS.
      WHERE SOURCE='Output';
NOTE: The data set EMWS2.TRANS_EMSCOREVAR has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
