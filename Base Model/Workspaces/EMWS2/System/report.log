NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1 
1 
1 
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
128839     %let eminfo= %str();
128840     data _null_;
128841     set EMWS2.Score2_ExportSet;
128842     where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
128843     call symput('eminfo', strip(eminfo));
128844     run;

NOTE: There were 1 observations read from the data set EMWS2.SCORE2_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

128845     %let prescoreid = %str();
128846     data _null_;
128847     set EMWS2.Reg5_EMINFO;
128848     where key = 'PRESCORECODE';
128849     if DATA ne '' then call symput('prescoreid', strip(DATA));
128850     run;

NOTE: There were 0 observations read from the data set EMWS2.REG5_EMINFO.
      WHERE key='PRESCORECODE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "STAT" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
128851     *------------------------------------------------------------*;
128852     * Report: Determine If validvarname ANY variables are score inputs;
128853     *------------------------------------------------------------*;
128854     filename _pref "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_3N_030Kscore.sas";
128855     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
128856     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_3N_030Kscore.sas.
128857    +*------------------------------------------------------------*;
128858    +* Macro variable identifying the scored data set;
128859    +*%let EM_SCORE_OUTPUT=;
128860    +*------------------------------------------------------------*;
128861    +*------------------------------------------------------------*;
128862    +* EM SCORE CODE;
128863    +* EM Version: 14.2;
128864    +* SAS Release: 9.04.01M4P110916;
128865    +* Host: 830-5CG9310VLM;
128866    +* Encoding: wlatin1;
128867    +* Locale: en_US;
128868    +* Project Path: C:\Users\student\Desktop\AA 490\Final Project\AA490_Project;
128869    +* Project Name: Base Model;
128870    +* Diagram Id: EMWS2;
128871    +* Diagram Name: Base Model 2;
128872    +* Generated by: student;
128873    +* Date: 11DEC2019:14:11:19;
128874    +*------------------------------------------------------------*;
128875    +*------------------------------------------------------------*;
128876    +* TOOL: Input Data Source;
128877    +* TYPE: SAMPLE;
128878    +* NODE: Ids2;
128879    +*------------------------------------------------------------*;
128880    +*------------------------------------------------------------*;
128881    +* TOOL: Statistics Exploration;
128882    +* TYPE: EXPLORE;
128883    +* NODE: Stat;
128884    +*------------------------------------------------------------*;
128885    +*------------------------------------------------------------*;
128886    +* TOOL: Partition Class;
128887    +* TYPE: SAMPLE;
128888    +* NODE: Part;
128889    +*------------------------------------------------------------*;
128890    +*------------------------------------------------------------*;
128891    +* TOOL: Regression;
128892    +* TYPE: MODEL;
128893    +* NODE: Reg5;
128894    +*------------------------------------------------------------*;
128895    +*************************************;
128896    +*** begin scoring code for regression;
128897    +*************************************;
128898    +
128899    +length _WARN_ $4;
128900    +label _WARN_ = 'Warnings' ;
128901    +
128902    +
128903    +drop _DM_BAD;
128904    +_DM_BAD=0;
128905    +
128906    +*** Check Population_in_thousands for missing values ;
128907    +if missing( Population_in_thousands ) then do;
128908    +   substr(_warn_,1,1) = 'M';
128909    +   _DM_BAD = 1;
128910    +end;
128911    +
128912    +*** Generate dummy variables for Age_group ;
128913    +drop _0_0 _0_1 _0_2 _0_3 ;
128914    +*** encoding is sparse, initialize to zero;
128915    +_0_0 = 0;
128916    +_0_1 = 0;
128917    +_0_2 = 0;
128918    +_0_3 = 0;
128919    +if missing( Age_group ) then do;
128920    +   _0_0 = .;
128921    +   _0_1 = .;
128922    +   _0_2 = .;
128923    +   _0_3 = .;
128924    +   substr(_warn_,1,1) = 'M';
128925    +   _DM_BAD = 1;
128926    +end;
128927    +else do;
128928    +   length _dm19 $ 19; drop _dm19 ;
128929    +   %DMNORMCP( Age_group , _dm19 )
NOTE: Numeric value converted to character for argument 1 of 'DMNORM' operation.
128930    +   if _dm19 = '85+'  then do;
128931    +      _0_0 = -1;
128932    +      _0_1 = -1;
128933    +      _0_2 = -1;
128934    +      _0_3 = -1;
128935    +   end;
128936    +   else if _dm19 = '18-24'  then do;
128937    +      _0_1 = 1;
128938    +   end;
128939    +   else if _dm19 = '25-44'  then do;
128940    +      _0_2 = 1;
128941    +   end;
128942    +   else if _dm19 = '65-84'  then do;
128943    +      _0_3 = 1;
128944    +   end;
128945    +   else if _dm19 = '0-17'  then do;
128946    +      _0_0 = 1;
128947    +   end;
128948    +   else do;
128949    +      _0_0 = .;
128950    +      _0_1 = .;
128951    +      _0_2 = .;
128952    +      _0_3 = .;
128953    +      substr(_warn_,2,1) = 'U';
128954    +      _DM_BAD = 1;
128955    +   end;
128956    +end;
128957    +
128958    +*** Generate dummy variables for Disease ;
128959    +drop _1_0 _1_1 _1_2 _1_3 ;
128960    +*** encoding is sparse, initialize to zero;
128961    +_1_0 = 0;
128962    +_1_1 = 0;
128963    +_1_2 = 0;
128964    +_1_3 = 0;
128965    +if missing( Disease ) then do;
128966    +   _1_0 = .;
128967    +   _1_1 = .;
128968    +   _1_2 = .;
128969    +   _1_3 = .;
128970    +   substr(_warn_,1,1) = 'M';
128971    +   _DM_BAD = 1;
128972    +end;
128973    +else do;
128974    +   length _dm32 $ 32; drop _dm32 ;
128975    +   %DMNORMCP( Disease , _dm32 )
NOTE: Numeric value converted to character for argument 1 of 'DMNORM' operation.
128976    +   if _dm32 = 'SEPTICEMIA'  then do;
128977    +      _1_0 = -1;
128978    +      _1_1 = -1;
128979    +      _1_2 = -1;
128980    +      _1_3 = -1;
128981    +   end;
128982    +   else if _dm32 = 'ASTHMA'  then do;
128983    +      _1_0 = 1;
128984    +   end;
128985    +   else if _dm32 = 'OSTEOARTHRITIS'  then do;
128986    +      _1_3 = 1;
128987    +   end;
128988    +   else if _dm32 = 'DEMENTIA AND ALZHEIMER''S DISEASE'  then do;
128989    +      _1_2 = 1;
128990    +   end;
128991    +   else if _dm32 = 'CANCER, ALL'  then do;
128992    +      _1_1 = 1;
128993    +   end;
128994    +   else do;
128995    +      _1_0 = .;
128996    +      _1_1 = .;
128997    +      _1_2 = .;
128998    +      _1_3 = .;
128999    +      substr(_warn_,2,1) = 'U';
129000    +      _DM_BAD = 1;
129001    +   end;
129002    +end;
129003    +
129004    +*** Generate dummy variables for Gender ;
129005    +drop _2_0 ;
129006    +if missing( Gender ) then do;
129007    +   _2_0 = .;
129008    +   substr(_warn_,1,1) = 'M';
129009    +   _DM_BAD = 1;
129010    +end;
129011    +else do;
129012    +   length _dm10 $ 10; drop _dm10 ;
129013    +   _dm10 = put( Gender , $CHAR10. );
129014    +   %DMNORMIP( _dm10 )
129015    +   if _dm10 = 'FEMALE'  then do;
129016    +      _2_0 = 1;
129017    +   end;
129018    +   else if _dm10 = 'MALE'  then do;
129019    +      _2_0 = -1;
129020    +   end;
129021    +   else do;
129022    +      _2_0 = .;
129023    +      substr(_warn_,2,1) = 'U';
129024    +      _DM_BAD = 1;
129025    +   end;
129026    +end;
129027    +
129028    +*** If missing inputs, use averages;
129029    +if _DM_BAD > 0 then do;
129030    +   _LP0 =     40.5986013986014;
129031    +   goto REG5DR1;
129032    +end;
129033    +
129034    +*** Compute Linear Predictor;
129035    +drop _TEMP;
129036    +drop _LP0;
129037    +_LP0 = 0;
129038    +
129039    +***  Effect: Age_group ;
129040    +_TEMP = 1;
129041    +_LP0 = _LP0 + (   -49.4672921197793) * _TEMP * _0_0;
129042    +_LP0 = _LP0 + (   -21.7313427121025) * _TEMP * _0_1;
129043    +_LP0 = _LP0 + (   -53.6209888643958) * _TEMP * _0_2;
129044    +_LP0 = _LP0 + (    102.502871018983) * _TEMP * _0_3;
129045    +
129046    +***  Effect: Disease ;
129047    +_TEMP = 1;
129048    +_LP0 = _LP0 + (   -4.46131810261602) * _TEMP * _1_0;
129049    +_LP0 = _LP0 + (    44.6018779092235) * _TEMP * _1_1;
129050    +_LP0 = _LP0 + (    -31.499567699561) * _TEMP * _1_2;
129051    +_LP0 = _LP0 + (   -0.74252562940894) * _TEMP * _1_3;
129052    +
129053    +***  Effect: Gender ;
129054    +_TEMP = 1;
129055    +_LP0 = _LP0 + (    4.83591864146778) * _TEMP * _2_0;
129056    +
129057    +***  Effect: Population_in_thousands ;
129058    +_TEMP = Population_in_thousands ;
129059    +_LP0 = _LP0 + (    0.00198409149548 * _TEMP);
129060    +
129061    +***  Effect: Age_group*Disease ;
129062    +_TEMP = 1;
129063    +_LP0 = _LP0 + (    71.4273293508684) * _TEMP * _0_0 * _1_0;
129064    +_LP0 = _LP0 + (   -53.3097718606966) * _TEMP * _0_0 * _1_1;
129065    +_LP0 = _LP0 + (    9.33786909487515) * _TEMP * _0_0 * _1_2;
129066    +_LP0 = _LP0 + (   -20.9612651485176) * _TEMP * _0_0 * _1_3;
129067    +_LP0 = _LP0 + (    10.7796593988599) * _TEMP * _0_1 * _1_0;
129068    +_LP0 = _LP0 + (   -42.0138863118082) * _TEMP * _0_1 * _1_1;
129069    +_LP0 = _LP0 + (    28.7461211911806) * _TEMP * _0_1 * _1_2;
129070    +_LP0 = _LP0 + (   -3.23521994212167) * _TEMP * _0_1 * _1_3;
129071    +_LP0 = _LP0 + (    19.7458398116809) * _TEMP * _0_2 * _1_0;
129072    +_LP0 = _LP0 + (   -10.9477828764849) * _TEMP * _0_2 * _1_1;
129073    +_LP0 = _LP0 + (    5.72008672932023) * _TEMP * _0_2 * _1_2;
129074    +_LP0 = _LP0 + (   -11.7636065735945) * _TEMP * _0_2 * _1_3;
129075    +_LP0 = _LP0 + (   -88.5356337608595) * _TEMP * _0_3 * _1_0;
129076    +_LP0 = _LP0 + (    132.966100156406) * _TEMP * _0_3 * _1_1;
129077    +_LP0 = _LP0 + (   -70.4014518863319) * _TEMP * _0_3 * _1_2;
129078    +_LP0 = _LP0 + (    45.1384291109238) * _TEMP * _0_3 * _1_3;
129079    +
129080    +***  Effect: Age_group*Gender ;
129081    +_TEMP = 1;
129082    +_LP0 = _LP0 + (    -8.1862991950576) * _TEMP * _0_0 * _2_0;
129083    +_LP0 = _LP0 + (   -3.41662890780362) * _TEMP * _0_1 * _2_0;
129084    +_LP0 = _LP0 + (    2.93242200068928) * _TEMP * _0_2 * _2_0;
129085    +_LP0 = _LP0 + (    7.94278094282438) * _TEMP * _0_3 * _2_0;
129086    +
129087    +***  Effect: Disease*Gender ;
129088    +_TEMP = 1;
129089    +_LP0 = _LP0 + (   -1.41400770960081) * _TEMP * _1_0 * _2_0;
129090    +_LP0 = _LP0 + (    0.16409809193528) * _TEMP * _1_1 * _2_0;
129091    +_LP0 = _LP0 + (   -2.88206456532676) * _TEMP * _1_2 * _2_0;
129092    +_LP0 = _LP0 + (    4.51528265380696) * _TEMP * _1_3 * _2_0;
129093    +*--- Intercept ---*;
129094    +_LP0 = _LP0 + (    -2.5407661803408);
129095    +
129096    +REG5DR1:
129097    +
129098    +*** Predicted Value;
129099    +label P_Cases_in_1000s = 'Predicted: Cases_in_1000s' ;
129100    +P_Cases_in_1000s = _LP0;
129101    +
129102    +
129103    +*************************************;
129104    +***** end scoring code for regression;
129105    +*************************************;
129106    +*------------------------------------------------------------*;
129107    +* TOOL: Model Compare Class;
129108    +* TYPE: ASSESS;
129109    +* NODE: MdlComp;
129110    +*------------------------------------------------------------*;
129111    +if (P_Cases_in_1000s ge 288.241624037156) then do;
129112    +b_Cases_in_1000s = 1;
129113    +end;
129114    +else
129115    +if (P_Cases_in_1000s ge 122.61877930895) then do;
129116    +b_Cases_in_1000s = 2;
129117    +end;
129118    +else
129119    +if (P_Cases_in_1000s ge 85.8827981030965) then do;
129120    +b_Cases_in_1000s = 3;
129121    +end;
129122    +else
129123    +if (P_Cases_in_1000s ge 53.8465796159833) then do;
129124    +b_Cases_in_1000s = 4;
129125    +end;
129126    +else
129127    +if (P_Cases_in_1000s ge 48.8668399322475) then do;
129128    +b_Cases_in_1000s = 5;
129129    +end;
129130    +else
129131    +if (P_Cases_in_1000s ge 44.0420113544423) then do;
129132    +b_Cases_in_1000s = 6;
129133    +end;
129134    +else
129135    +if (P_Cases_in_1000s ge 34.1568129202454) then do;
129136    +b_Cases_in_1000s = 7;
129137    +end;
129138    +else
129139    +if (P_Cases_in_1000s ge 26.0130310901372) then do;
129140    +b_Cases_in_1000s = 8;
129141    +end;
129142    +else
129143    +if (P_Cases_in_1000s ge 23.1554711498296) then do;
129144    +b_Cases_in_1000s = 9;
129145    +end;
129146    +else
129147    +if (P_Cases_in_1000s ge 16.7982907718532) then do;
129148    +b_Cases_in_1000s = 10;
129149    +end;
129150    +else
129151    +if (P_Cases_in_1000s ge 12.2270976562916) then do;
129152    +b_Cases_in_1000s = 11;
129153    +end;
129154    +else
129155    +if (P_Cases_in_1000s ge 10.2930191652826) then do;
129156    +b_Cases_in_1000s = 12;
129157    +end;
129158    +else
129159    +if (P_Cases_in_1000s ge 7.29799764770225) then do;
129160    +b_Cases_in_1000s = 13;
129161    +end;
129162    +else
129163    +if (P_Cases_in_1000s ge 5.28642550062574) then do;
129164    +b_Cases_in_1000s = 14;
129165    +end;
129166    +else
129167    +if (P_Cases_in_1000s ge 3.43753373559824) then do;
129168    +b_Cases_in_1000s = 15;
129169    +end;
129170    +else
129171    +if (P_Cases_in_1000s ge 2.07666959146316) then do;
129172    +b_Cases_in_1000s = 16;
129173    +end;
129174    +else
129175    +if (P_Cases_in_1000s ge 0.60569920481362) then do;
129176    +b_Cases_in_1000s = 17;
129177    +end;
129178    +else
129179    +if (P_Cases_in_1000s ge -0.8359698163787) then do;
129180    +b_Cases_in_1000s = 18;
129181    +end;
129182    +else
129183    +if (P_Cases_in_1000s ge -4.35749304688957) then do;
129184    +b_Cases_in_1000s = 19;
129185    +end;
129186    +else
129187    +do;
129188    +b_Cases_in_1000s = 20;
129189    +end;
129190    +*------------------------------------------------------------*;
129191    +* TOOL: Score Node;
129192    +* TYPE: ASSESS;
129193    +* NODE: Score2;
129194    +*------------------------------------------------------------*;
129195    +*------------------------------------------------------------*;
129196    +* Score2: Creating Fixed Names;
129197    +*------------------------------------------------------------*;
129198    +LABEL EM_SEGMENT = 'Segment';
129199    +EM_SEGMENT = b_Cases_in_1000s;
129200    +LABEL EM_PREDICTION= "Prediction for Cases_in_1000s";
129201    +EM_PREDICTION = P_Cases_in_1000s;
NOTE: %INCLUDE (level 1) ending.
129202     run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

129203     quit;
129204     filename _pref;
NOTE: Fileref _PREF has been deassigned.
129205     proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
129206     by NAME;
129207     run;

NOTE: There were 160 observations read from the data set WORK._TEMP.
NOTE: 138 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 22 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: Run Completed 
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_3N_030Kscore.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * EM SCORE CODE;
MPRINT(SCOREXML):   * EM Version: 14.2;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M4P110916;
MPRINT(SCOREXML):   * Host: 830-5CG9310VLM;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\student\Desktop\AA 490\Final Project\AA490_Project;
MPRINT(SCOREXML):   * Project Name: Base Model;
MPRINT(SCOREXML):   * Diagram Id: EMWS2;
MPRINT(SCOREXML):   * Diagram Name: Base Model 2;
MPRINT(SCOREXML):   * Generated by: student;
MPRINT(SCOREXML):   * Date: 11DEC2019:14:11:19;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Input Data Source;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: Ids2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Statistics Exploration;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Stat;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Partition Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: Part;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Regression;
MPRINT(SCOREXML):   * TYPE: MODEL;
MPRINT(SCOREXML):   * NODE: Reg5;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   *** begin scoring code for regression;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   length _WARN_ $4;
MPRINT(SCOREXML):   label _WARN_ = 'Warnings' ;
MPRINT(SCOREXML):   drop _DM_BAD;
MPRINT(SCOREXML):   _DM_BAD=0;
MPRINT(SCOREXML):   *** Check Population_in_thousands for missing values ;
MPRINT(SCOREXML):   if missing( Population_in_thousands ) then do;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Age_group ;
MPRINT(SCOREXML):   drop _0_0 _0_1 _0_2 _0_3 ;
MPRINT(SCOREXML):   *** encoding is sparse, initialize to zero;
MPRINT(SCOREXML):   _0_0 = 0;
MPRINT(SCOREXML):   _0_1 = 0;
MPRINT(SCOREXML):   _0_2 = 0;
MPRINT(SCOREXML):   _0_3 = 0;
MPRINT(SCOREXML):   if missing( Age_group ) then do;
MPRINT(SCOREXML):   _0_0 = .;
MPRINT(SCOREXML):   _0_1 = .;
MPRINT(SCOREXML):   _0_2 = .;
MPRINT(SCOREXML):   _0_3 = .;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm19 $ 19;
MPRINT(SCOREXML):   drop _dm19 ;
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(SCOREXML):   if _dm19 = '85+' then do;
MPRINT(SCOREXML):   _0_0 = -1;
MPRINT(SCOREXML):   _0_1 = -1;
MPRINT(SCOREXML):   _0_2 = -1;
MPRINT(SCOREXML):   _0_3 = -1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '18-24' then do;
MPRINT(SCOREXML):   _0_1 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '25-44' then do;
MPRINT(SCOREXML):   _0_2 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '65-84' then do;
MPRINT(SCOREXML):   _0_3 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '0-17' then do;
MPRINT(SCOREXML):   _0_0 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _0_0 = .;
MPRINT(SCOREXML):   _0_1 = .;
MPRINT(SCOREXML):   _0_2 = .;
MPRINT(SCOREXML):   _0_3 = .;
MPRINT(SCOREXML):   substr(_warn_,2,1) = 'U';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Disease ;
MPRINT(SCOREXML):   drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(SCOREXML):   *** encoding is sparse, initialize to zero;
MPRINT(SCOREXML):   _1_0 = 0;
MPRINT(SCOREXML):   _1_1 = 0;
MPRINT(SCOREXML):   _1_2 = 0;
MPRINT(SCOREXML):   _1_3 = 0;
MPRINT(SCOREXML):   if missing( Disease ) then do;
MPRINT(SCOREXML):   _1_0 = .;
MPRINT(SCOREXML):   _1_1 = .;
MPRINT(SCOREXML):   _1_2 = .;
MPRINT(SCOREXML):   _1_3 = .;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm32 $ 32;
MPRINT(SCOREXML):   drop _dm32 ;
MPRINT(DMNORMCP):   _dm32=dmnorm(Disease,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(SCOREXML):   if _dm32 = 'SEPTICEMIA' then do;
MPRINT(SCOREXML):   _1_0 = -1;
MPRINT(SCOREXML):   _1_1 = -1;
MPRINT(SCOREXML):   _1_2 = -1;
MPRINT(SCOREXML):   _1_3 = -1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'ASTHMA' then do;
MPRINT(SCOREXML):   _1_0 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'OSTEOARTHRITIS' then do;
MPRINT(SCOREXML):   _1_3 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'DEMENTIA AND ALZHEIMER''S DISEASE' then do;
MPRINT(SCOREXML):   _1_2 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'CANCER, ALL' then do;
MPRINT(SCOREXML):   _1_1 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _1_0 = .;
MPRINT(SCOREXML):   _1_1 = .;
MPRINT(SCOREXML):   _1_2 = .;
MPRINT(SCOREXML):   _1_3 = .;
MPRINT(SCOREXML):   substr(_warn_,2,1) = 'U';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Gender ;
MPRINT(SCOREXML):   drop _2_0 ;
MPRINT(SCOREXML):   if missing( Gender ) then do;
MPRINT(SCOREXML):   _2_0 = .;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm10 $ 10;
MPRINT(SCOREXML):   drop _dm10 ;
MPRINT(SCOREXML):   _dm10 = put( Gender , $CHAR10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm10 = 'FEMALE' then do;
MPRINT(SCOREXML):   _2_0 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'MALE' then do;
MPRINT(SCOREXML):   _2_0 = -1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _2_0 = .;
MPRINT(SCOREXML):   substr(_warn_,2,1) = 'U';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** If missing inputs, use averages;
MPRINT(SCOREXML):   if _DM_BAD > 0 then do;
MPRINT(SCOREXML):   _LP0 = 40.5986013986014;
MPRINT(SCOREXML):   goto REG5DR1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Compute Linear Predictor;
MPRINT(SCOREXML):   drop _TEMP;
MPRINT(SCOREXML):   drop _LP0;
MPRINT(SCOREXML):   _LP0 = 0;
MPRINT(SCOREXML):   *** Effect: Age_group ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -49.4672921197793) * _TEMP * _0_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -21.7313427121025) * _TEMP * _0_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -53.6209888643958) * _TEMP * _0_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 102.502871018983) * _TEMP * _0_3;
MPRINT(SCOREXML):   *** Effect: Disease ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -4.46131810261602) * _TEMP * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 44.6018779092235) * _TEMP * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -31.499567699561) * _TEMP * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.74252562940894) * _TEMP * _1_3;
MPRINT(SCOREXML):   *** Effect: Gender ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 4.83591864146778) * _TEMP * _2_0;
MPRINT(SCOREXML):   *** Effect: Population_in_thousands ;
MPRINT(SCOREXML):   _TEMP = Population_in_thousands ;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.00198409149548 * _TEMP);
MPRINT(SCOREXML):   *** Effect: Age_group*Disease ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 71.4273293508684) * _TEMP * _0_0 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -53.3097718606966) * _TEMP * _0_0 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 9.33786909487515) * _TEMP * _0_0 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -20.9612651485176) * _TEMP * _0_0 * _1_3;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 10.7796593988599) * _TEMP * _0_1 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -42.0138863118082) * _TEMP * _0_1 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 28.7461211911806) * _TEMP * _0_1 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -3.23521994212167) * _TEMP * _0_1 * _1_3;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 19.7458398116809) * _TEMP * _0_2 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -10.9477828764849) * _TEMP * _0_2 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 5.72008672932023) * _TEMP * _0_2 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -11.7636065735945) * _TEMP * _0_2 * _1_3;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -88.5356337608595) * _TEMP * _0_3 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 132.966100156406) * _TEMP * _0_3 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -70.4014518863319) * _TEMP * _0_3 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 45.1384291109238) * _TEMP * _0_3 * _1_3;
MPRINT(SCOREXML):   *** Effect: Age_group*Gender ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -8.1862991950576) * _TEMP * _0_0 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -3.41662890780362) * _TEMP * _0_1 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 2.93242200068928) * _TEMP * _0_2 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 7.94278094282438) * _TEMP * _0_3 * _2_0;
MPRINT(SCOREXML):   *** Effect: Disease*Gender ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -1.41400770960081) * _TEMP * _1_0 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.16409809193528) * _TEMP * _1_1 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -2.88206456532676) * _TEMP * _1_2 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 4.51528265380696) * _TEMP * _1_3 * _2_0;
MPRINT(SCOREXML):   *--- Intercept ---*;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -2.5407661803408);
MPRINT(SCOREXML):   REG5DR1: *** Predicted Value;
MPRINT(SCOREXML):   label P_Cases_in_1000s = 'Predicted: Cases_in_1000s' ;
MPRINT(SCOREXML):   P_Cases_in_1000s = _LP0;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   ***** end scoring code for regression;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Model Compare Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: MdlComp;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if (P_Cases_in_1000s ge 288.241624037156) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 122.61877930895) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 85.8827981030965) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 3;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 53.8465796159833) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 4;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 48.8668399322475) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 5;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 44.0420113544423) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 6;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 34.1568129202454) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 7;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 26.0130310901372) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 8;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 23.1554711498296) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 9;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 16.7982907718532) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 10;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 12.2270976562916) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 11;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 10.2930191652826) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 12;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 7.29799764770225) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 13;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 5.28642550062574) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 14;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 3.43753373559824) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 15;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 2.07666959146316) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 16;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 0.60569920481362) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 17;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge -0.8359698163787) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 18;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge -4.35749304688957) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 19;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 20;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Score Node;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Score2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Score2: Creating Fixed Names;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   LABEL EM_SEGMENT = 'Segment';
MPRINT(SCOREXML):   EM_SEGMENT = b_Cases_in_1000s;
MPRINT(SCOREXML):   LABEL EM_PREDICTION= "Prediction for Cases_in_1000s";
MPRINT(SCOREXML):   EM_PREDICTION = P_Cases_in_1000s;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("NEWDIS.DISEASE_HISTORIC_JOIN_1","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("NEWDIS.DISEASE_HISTORIC_JOIN_1");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set NEWDIS.DISEASE_HISTORIC_JOIN_1;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * EM SCORE CODE;
MPRINT(SCOREXML):   * EM Version: 14.2;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M4P110916;
MPRINT(SCOREXML):   * Host: 830-5CG9310VLM;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\student\Desktop\AA 490\Final Project\AA490_Project;
MPRINT(SCOREXML):   * Project Name: Base Model;
MPRINT(SCOREXML):   * Diagram Id: EMWS2;
MPRINT(SCOREXML):   * Diagram Name: Base Model 2;
MPRINT(SCOREXML):   * Generated by: student;
MPRINT(SCOREXML):   * Date: 11DEC2019:14:11:19;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Input Data Source;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: Ids2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Statistics Exploration;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Stat;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Partition Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: Part;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Regression;
MPRINT(SCOREXML):   * TYPE: MODEL;
MPRINT(SCOREXML):   * NODE: Reg5;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   *** begin scoring code for regression;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   length _WARN_ $4;
MPRINT(SCOREXML):   label _WARN_ = 'Warnings' ;
MPRINT(SCOREXML):   drop _DM_BAD;
MPRINT(SCOREXML):   _DM_BAD=0;
MPRINT(SCOREXML):   *** Check Population_in_thousands for missing values ;
MPRINT(SCOREXML):   if missing( Population_in_thousands ) then do;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Age_group ;
MPRINT(SCOREXML):   drop _0_0 _0_1 _0_2 _0_3 ;
MPRINT(SCOREXML):   *** encoding is sparse, initialize to zero;
MPRINT(SCOREXML):   _0_0 = 0;
MPRINT(SCOREXML):   _0_1 = 0;
MPRINT(SCOREXML):   _0_2 = 0;
MPRINT(SCOREXML):   _0_3 = 0;
MPRINT(SCOREXML):   if missing( Age_group ) then do;
MPRINT(SCOREXML):   _0_0 = .;
MPRINT(SCOREXML):   _0_1 = .;
MPRINT(SCOREXML):   _0_2 = .;
MPRINT(SCOREXML):   _0_3 = .;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm19 $ 19;
MPRINT(SCOREXML):   drop _dm19 ;
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(SCOREXML):   if _dm19 = '85+' then do;
MPRINT(SCOREXML):   _0_0 = -1;
MPRINT(SCOREXML):   _0_1 = -1;
MPRINT(SCOREXML):   _0_2 = -1;
MPRINT(SCOREXML):   _0_3 = -1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '18-24' then do;
MPRINT(SCOREXML):   _0_1 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '25-44' then do;
MPRINT(SCOREXML):   _0_2 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '65-84' then do;
MPRINT(SCOREXML):   _0_3 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '0-17' then do;
MPRINT(SCOREXML):   _0_0 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _0_0 = .;
MPRINT(SCOREXML):   _0_1 = .;
MPRINT(SCOREXML):   _0_2 = .;
MPRINT(SCOREXML):   _0_3 = .;
MPRINT(SCOREXML):   substr(_warn_,2,1) = 'U';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Disease ;
MPRINT(SCOREXML):   drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(SCOREXML):   *** encoding is sparse, initialize to zero;
MPRINT(SCOREXML):   _1_0 = 0;
MPRINT(SCOREXML):   _1_1 = 0;
MPRINT(SCOREXML):   _1_2 = 0;
MPRINT(SCOREXML):   _1_3 = 0;
MPRINT(SCOREXML):   if missing( Disease ) then do;
MPRINT(SCOREXML):   _1_0 = .;
MPRINT(SCOREXML):   _1_1 = .;
MPRINT(SCOREXML):   _1_2 = .;
MPRINT(SCOREXML):   _1_3 = .;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm32 $ 32;
MPRINT(SCOREXML):   drop _dm32 ;
MPRINT(DMNORMCP):   _dm32=dmnorm(Disease,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(SCOREXML):   if _dm32 = 'SEPTICEMIA' then do;
MPRINT(SCOREXML):   _1_0 = -1;
MPRINT(SCOREXML):   _1_1 = -1;
MPRINT(SCOREXML):   _1_2 = -1;
MPRINT(SCOREXML):   _1_3 = -1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'ASTHMA' then do;
MPRINT(SCOREXML):   _1_0 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'OSTEOARTHRITIS' then do;
MPRINT(SCOREXML):   _1_3 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'DEMENTIA AND ALZHEIMER''S DISEASE' then do;
MPRINT(SCOREXML):   _1_2 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'CANCER, ALL' then do;
MPRINT(SCOREXML):   _1_1 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _1_0 = .;
MPRINT(SCOREXML):   _1_1 = .;
MPRINT(SCOREXML):   _1_2 = .;
MPRINT(SCOREXML):   _1_3 = .;
MPRINT(SCOREXML):   substr(_warn_,2,1) = 'U';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Gender ;
MPRINT(SCOREXML):   drop _2_0 ;
MPRINT(SCOREXML):   if missing( Gender ) then do;
MPRINT(SCOREXML):   _2_0 = .;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm10 $ 10;
MPRINT(SCOREXML):   drop _dm10 ;
MPRINT(SCOREXML):   _dm10 = put( Gender , $CHAR10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm10 = 'FEMALE' then do;
MPRINT(SCOREXML):   _2_0 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'MALE' then do;
MPRINT(SCOREXML):   _2_0 = -1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _2_0 = .;
MPRINT(SCOREXML):   substr(_warn_,2,1) = 'U';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** If missing inputs, use averages;
MPRINT(SCOREXML):   if _DM_BAD > 0 then do;
MPRINT(SCOREXML):   _LP0 = 40.5986013986014;
MPRINT(SCOREXML):   goto REG5DR1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Compute Linear Predictor;
MPRINT(SCOREXML):   drop _TEMP;
MPRINT(SCOREXML):   drop _LP0;
MPRINT(SCOREXML):   _LP0 = 0;
MPRINT(SCOREXML):   *** Effect: Age_group ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -49.4672921197793) * _TEMP * _0_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -21.7313427121025) * _TEMP * _0_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -53.6209888643958) * _TEMP * _0_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 102.502871018983) * _TEMP * _0_3;
MPRINT(SCOREXML):   *** Effect: Disease ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -4.46131810261602) * _TEMP * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 44.6018779092235) * _TEMP * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -31.499567699561) * _TEMP * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.74252562940894) * _TEMP * _1_3;
MPRINT(SCOREXML):   *** Effect: Gender ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 4.83591864146778) * _TEMP * _2_0;
MPRINT(SCOREXML):   *** Effect: Population_in_thousands ;
MPRINT(SCOREXML):   _TEMP = Population_in_thousands ;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.00198409149548 * _TEMP);
MPRINT(SCOREXML):   *** Effect: Age_group*Disease ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 71.4273293508684) * _TEMP * _0_0 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -53.3097718606966) * _TEMP * _0_0 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 9.33786909487515) * _TEMP * _0_0 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -20.9612651485176) * _TEMP * _0_0 * _1_3;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 10.7796593988599) * _TEMP * _0_1 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -42.0138863118082) * _TEMP * _0_1 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 28.7461211911806) * _TEMP * _0_1 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -3.23521994212167) * _TEMP * _0_1 * _1_3;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 19.7458398116809) * _TEMP * _0_2 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -10.9477828764849) * _TEMP * _0_2 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 5.72008672932023) * _TEMP * _0_2 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -11.7636065735945) * _TEMP * _0_2 * _1_3;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -88.5356337608595) * _TEMP * _0_3 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 132.966100156406) * _TEMP * _0_3 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -70.4014518863319) * _TEMP * _0_3 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 45.1384291109238) * _TEMP * _0_3 * _1_3;
MPRINT(SCOREXML):   *** Effect: Age_group*Gender ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -8.1862991950576) * _TEMP * _0_0 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -3.41662890780362) * _TEMP * _0_1 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 2.93242200068928) * _TEMP * _0_2 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 7.94278094282438) * _TEMP * _0_3 * _2_0;
MPRINT(SCOREXML):   *** Effect: Disease*Gender ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -1.41400770960081) * _TEMP * _1_0 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.16409809193528) * _TEMP * _1_1 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -2.88206456532676) * _TEMP * _1_2 * _2_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 4.51528265380696) * _TEMP * _1_3 * _2_0;
MPRINT(SCOREXML):   *--- Intercept ---*;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -2.5407661803408);
MPRINT(SCOREXML):   REG5DR1: *** Predicted Value;
MPRINT(SCOREXML):   label P_Cases_in_1000s = 'Predicted: Cases_in_1000s' ;
MPRINT(SCOREXML):   P_Cases_in_1000s = _LP0;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   ***** end scoring code for regression;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Model Compare Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: MdlComp;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if (P_Cases_in_1000s ge 288.241624037156) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 122.61877930895) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 85.8827981030965) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 3;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 53.8465796159833) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 4;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 48.8668399322475) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 5;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 44.0420113544423) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 6;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 34.1568129202454) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 7;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 26.0130310901372) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 8;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 23.1554711498296) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 9;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 16.7982907718532) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 10;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 12.2270976562916) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 11;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 10.2930191652826) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 12;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 7.29799764770225) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 13;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 5.28642550062574) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 14;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 3.43753373559824) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 15;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 2.07666959146316) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 16;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge 0.60569920481362) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 17;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge -0.8359698163787) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 18;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Cases_in_1000s ge -4.35749304688957) then do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 19;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   b_Cases_in_1000s = 20;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Score Node;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Score2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Score2: Creating Fixed Names;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   LABEL EM_SEGMENT = 'Segment';
MPRINT(SCOREXML):   EM_SEGMENT = b_Cases_in_1000s;
MPRINT(SCOREXML):   LABEL EM_PREDICTION= "Prediction for Cases_in_1000s";
MPRINT(SCOREXML):   EM_PREDICTION = P_Cases_in_1000s;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "4" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "5" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "4" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "4" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "5" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "5" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Score2_eminputvars out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   where ROLE ne 'TARGET' and Scorevar eq 'Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Ids2_CMeta_DATA out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M16M3CG4 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M16M3CG4;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M16M3CG4(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M16M3CG4;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M16M3CG4;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0M4M599 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0M4M599;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0M4M599;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1GUGH4J(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0M4M599;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0M4M599;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0M4M599;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0M4M599;
MPRINT(EMADVISECOLUMNS):   set WORK.M0M4M599;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Score2_emoutputvars(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Target table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\target.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.target;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   length NODEID $32;
MPRINT(EM_DIAGRAM):   where upcase(NAME) in( "CASES_IN_1000S" );
MPRINT(EM_DIAGRAM):   if upcase(NAME) eq "CASES_IN_1000S" then NODEID = "Reg5";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "CASES_IN_1000S" then do;
MPRINT(EM_DIAGRAM):   NAME = 'CASES_IN_1000S';
MPRINT(EM_DIAGRAM):   CREATOR = '';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    filename _emrprt "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\tablemeta.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.rootmeta;
MPRINT(EM_DIAGRAM):   set EMDS.diseasehistoricjoin_TM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Reports\Disease Model Package_0_WF2\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* Ids : Beginning creation of SPK report 
* datetime : 11DEC2019:21:55:59 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Ids_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Ids_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Ids_EMTRAINVARIABLE / view=WORK.Ids_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Ids_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:00 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=NEWDIS.DISEASE_FUTURE_JOIN_1 out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('NEWDIS.DISEASE_FUTURE_JOIN_1');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set NEWDIS.DISEASE_FUTURE_JOIN_1;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=NEWDIS.DISEASE_FUTURE_JOIN_1 out=WORK.M235XGAR noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M235XGAR;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M235XGAR(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M235XGAR;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M235XGAR;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1YVRJEE NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YVRJEE;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YVRJEE;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1WLIY9P(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YVRJEE;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YVRJEE;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YVRJEE;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YVRJEE;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YVRJEE;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.Ids_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   set WORK.Ids_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   retain drop 'N';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2O047DX as select * from WORK.M10WZZM4 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2O047DX as select * from WORK.M0AHFXPE order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2O047DX compare=work._comp2O047DX out=WORK._DIFF0WQPCW2 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "STAT" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Ids2 : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:00 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Ids2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Ids2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Ids2_EMTRAINVARIABLE / view=WORK.Ids2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:00 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=NEWDIS.DISEASE_HISTORIC_JOIN_1 out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('NEWDIS.DISEASE_HISTORIC_JOIN_1');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set NEWDIS.DISEASE_HISTORIC_JOIN_1;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=NEWDIS.DISEASE_HISTORIC_JOIN_1 out=WORK.M12YF0_U noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12YF0_U;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M12YF0_U(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12YF0_U;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M12YF0_U;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1IUCX04 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1IUCX04;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1IUCX04;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2F8ZQGZ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1IUCX04;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1IUCX04;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1IUCX04;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1IUCX04;
MPRINT(EMADVISECOLUMNS):   set WORK.M1IUCX04;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.Ids2_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   set WORK.Ids2_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   retain drop 'N';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base34FS7B9 as select * from WORK.M19O46OU order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp34FS7B9 as select * from WORK.M3CVIEX3 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base34FS7B9 compare=work._comp34FS7B9 out=WORK._DIFF1IIBF80 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP10ULFS88 as select * from WORK._DIFF1IIBF80 where NAME in (select NAME from WORK._DIFF1IIBF80 where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM38SVVB_ as select * from WORK._DIFF1IIBF80 where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1IIBF80 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM38SVVB_ as select * from WORK._DIFF1IIBF80 where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1IIBF80 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM38SVVB_;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM38SVVB_;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM38SVVB_;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM38SVVB_;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Stat : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:01 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN14871";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Stat_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Stat_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_EMTRAINVARIABLE / view=WORK.Stat_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Stat_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Stat_CLASS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_CLASS / view=WORK.Stat_CLASS;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "CODE"n = " (N)(6.0)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)(10.0)";
MPRINT(EM_DIAGRAM):   label "TYPE"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "LevelIndex"n = "Level Index (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "plot"n = "Plot (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Stat_CLASS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Stat_CLASSPLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_CLASSPLOT / view=WORK.Stat_CLASSPLOT;
MPRINT(EM_DIAGRAM):   label "OrderedInput"n = "Ordered Inputs (N)(5.0)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Percent Variability (N)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "REPORT"n = "Report (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "plot"n = "Plot (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Stat_CLASSPLOT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Stat_INTERVAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_INTERVAL / view=WORK.Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   label "OrderedInput"n = "Ordered Inputs (N)(5.0)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "P50"n = "Median (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "N"n = "Non Missing (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "absCV"n = "Abs C.V. (N)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "Sign"n = "Sign (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Stat_INTERVAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Stat_CORR OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_CORR / view=WORK.Stat_CORR;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVar"n = "Segment (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "SegmentId"n = "Segment Name:Value (C)";
MPRINT(EM_DIAGRAM):   label "CORRTYPE"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "CORRVALUE"n = "Correlation (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "ORDEREDINPUTS"n = "Ordered Inputs (N)(5.0)";
MPRINT(EM_DIAGRAM):   set EMWS2.Stat_CORR(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Stat_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_WORTH / view=WORK.Stat_WORTH;
MPRINT(EM_DIAGRAM):   label "Target"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "Name"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "StatVar"n = "Analysis Variable (N)(6.0)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "plot"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Stat_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:01 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Stat_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_CMeta_DATA;
MPRINT(EM_DIAGRAM):   where(ROLE in("ID" "SEGMENT" "TARGET" "INPUT" "REJECTED" "PREDICT" "RESIDUAL" "DECISION" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base038PRL9 as select * from WORK.M2L0SBC7 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp038PRL9 as select * from WORK.M2G269_4 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base038PRL9 compare=work._comp038PRL9 out=WORK._DIFF2IV2XE3 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Part : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:02 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Part_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Part_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Part_EMTRAINVARIABLE / view=WORK.Part_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "PARTITIONROLE"n = "Partition Role (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Part_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Part_INTRVL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Part_INTRVL / view=WORK.Part_INTRVL;
MPRINT(EM_DIAGRAM):   label "DATA"n = "Data (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NMiss"n = "Missing (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_LABEL_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Part_INTRVL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:02 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Part_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length PARTITIONROLE $14;
MPRINT(EM_DIAGRAM):   set EMWS2.Stat_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3M9IW0C as select * from WORK.M1HBDLH3 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3M9IW0C as select * from WORK.M125TNVQ order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3M9IW0C compare=work._comp3M9IW0C out=WORK._DIFF3GT9HTD noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "REG5" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Reg5 : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:03 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg5_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg5_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg5_EMTRAINVARIABLE / view=WORK.Reg5_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg5_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg5_EMRANK / view=WORK.Reg5_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg5_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg5_EMSCOREDIST / view=WORK.Reg5_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg5_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg5_EMOUTFIT / view=WORK.Reg5_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg5_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg5_EMREPORTFIT / view=WORK.Reg5_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg5_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg5_EMRESIDUAL / view=WORK.Reg5_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg5_EFFECTS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg5_EFFECTS / view=WORK.Reg5_EFFECTS;
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ClassLevel"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "EffectLabel"n = "Effect Label (C)";
MPRINT(EM_DIAGRAM):   label "Coefficient"n = "Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "tValue"n = "T-value (N)";
MPRINT(EM_DIAGRAM):   label "PValue"n = "P Value (N)";
MPRINT(EM_DIAGRAM):   label "CODE"n = "Score Code Variable (C)";
MPRINT(EM_DIAGRAM):   label "Sign"n = "Sign (C)";
MPRINT(EM_DIAGRAM):   label "Abscoefficient"n = "Absolute Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "abstvalue"n = "Absolute T-value (N)";
MPRINT(EM_DIAGRAM):   label "TEffectNum"n = "TScore Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   label "EffectNum"n = "Effect Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EFFECTS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg5_EMESTIMATE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg5_EMESTIMATE / view=WORK.Reg5_EMESTIMATE;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Row Type (C)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Row Name (C)";
MPRINT(EM_DIAGRAM):   label "Intercept"n = "Intercept (N)";
MPRINT(EM_DIAGRAM):   label "Age_group0N17"n = "Age_group 0-17 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group18N24"n = "Age_group 18-24 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25N44"n = "Age_group 25-44 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group65N84"n = "Age_group 65-84 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseASTHMA"n = "NAME OF FORMER VARIABLE ASTHMA (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCANCER__ALL"n = "NAME OF FORMER VARIABLE CANCER, ALL (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseDEMENTIA_AND_ALZHEIMER_S"n = "NAME OF FORMER VARIABLE DEMENTIA AND ALZHEIMER'S DISEASE (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOSTEOARTHRITIS"n = "NAME OF FORMER VARIABLE OSTEOARTHRITIS (N)";
MPRINT(EM_DIAGRAM):   label "GenderFEMALE"n = "Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "Population_in_thousands"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Age_group0N17DiseaseASTHMA"n = "Age_group 0-17 * NAME OF FORMER VARIABLE ASTHMA (N)";
MPRINT(EM_DIAGRAM):   label "Age_group0N17DiseaseCANCER__ALL"n = "Age_group 0-17 * NAME OF FORMER VARIABLE CANCER, ALL (N)";
MPRINT(EM_DIAGRAM):   label "Age_group0N17DiseaseDEMENTIA_AND"n = "Age_group 0-17 * NAME OF FORMER VARIABLE DEMENTIA AND ALZHEIMER'S DISEASE (N)";
MPRINT(EM_DIAGRAM):   label "Age_group0N17DiseaseOSTEOARTHRIT"n = "Age_group 0-17 * NAME OF FORMER VARIABLE OSTEOARTHRITIS (N)";
MPRINT(EM_DIAGRAM):   label "Age_group18N24DiseaseASTHMA"n = "Age_group 18-24 * NAME OF FORMER VARIABLE ASTHMA (N)";
MPRINT(EM_DIAGRAM):   label "Age_group18N24DiseaseCANCER__ALL"n = "Age_group 18-24 * NAME OF FORMER VARIABLE CANCER, ALL (N)";
MPRINT(EM_DIAGRAM):   label "Age_group18N24DiseaseDEMENTIA_AN"n = "Age_group 18-24 * NAME OF FORMER VARIABLE DEMENTIA AND ALZHEIMER'S DISEASE (N)";
MPRINT(EM_DIAGRAM):   label "Age_group18N24DiseaseOSTEOARTHRI"n = "Age_group 18-24 * NAME OF FORMER VARIABLE OSTEOARTHRITIS (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25N44DiseaseASTHMA"n = "Age_group 25-44 * NAME OF FORMER VARIABLE ASTHMA (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25N44DiseaseCANCER__ALL"n = "Age_group 25-44 * NAME OF FORMER VARIABLE CANCER, ALL (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25N44DiseaseDEMENTIA_AN"n = "Age_group 25-44 * NAME OF FORMER VARIABLE DEMENTIA AND ALZHEIMER'S DISEASE (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25N44DiseaseOSTEOARTHRI"n = "Age_group 25-44 * NAME OF FORMER VARIABLE OSTEOARTHRITIS (N)";
MPRINT(EM_DIAGRAM):   label "Age_group65N84DiseaseASTHMA"n = "Age_group 65-84 * NAME OF FORMER VARIABLE ASTHMA (N)";
MPRINT(EM_DIAGRAM):   label "Age_group65N84DiseaseCANCER__ALL"n = "Age_group 65-84 * NAME OF FORMER VARIABLE CANCER, ALL (N)";
MPRINT(EM_DIAGRAM):   label "Age_group65N84DiseaseDEMENTIA_AN"n = "Age_group 65-84 * NAME OF FORMER VARIABLE DEMENTIA AND ALZHEIMER'S DISEASE (N)";
MPRINT(EM_DIAGRAM):   label "Age_group65N84DiseaseOSTEOARTHRI"n = "Age_group 65-84 * NAME OF FORMER VARIABLE OSTEOARTHRITIS (N)";
MPRINT(EM_DIAGRAM):   label "Age_group0N17GenderFEMALE"n = "Age_group 0-17 * Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "Age_group18N24GenderFEMALE"n = "Age_group 18-24 * Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25N44GenderFEMALE"n = "Age_group 25-44 * Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "Age_group65N84GenderFEMALE"n = "Age_group 65-84 * Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseASTHMAGenderFEMALE"n = "NAME OF FORMER VARIABLE ASTHMA * Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCANCER__ALLGenderFEMALE"n = "NAME OF FORMER VARIABLE CANCER, ALL * Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseDEMENTIA_AND_ALZHEIMER_SG"n = "NAME OF FORMER VARIABLE DEMENTIA AND ALZHEIMER'S DISEASE * Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOSTEOARTHRITISGenderFEMAL"n = "NAME OF FORMER VARIABLE OSTEOARTHRITIS * Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMESTIMATE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:03 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg5_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS2.Part_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where((ROLE="TARGET" and LEVEL ne "UNARY") or ROLE in("INPUT" "REJECTED" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base295W14I as select * from WORK.M1TP5VFK order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp295W14I as select * from WORK.M27KV7_R order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base295W14I compare=work._comp295W14I out=WORK._DIFF11C6A3F noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Impt : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:04 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Impt_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Impt_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Impt_EMTRAINVARIABLE / view=WORK.Impt_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   label "METHOD"n = "Method (C)";
MPRINT(EM_DIAGRAM):   label "USETREE"n = "Use Tree (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Impt_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:04 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Impt_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length METHOD $12;
MPRINT(EM_DIAGRAM):   length USETREE $1;
MPRINT(EM_DIAGRAM):   set EMWS2.Part_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE in("TARGET" "INPUT" "REJECTED" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base099ZSVV as select * from WORK.M12BS5OV order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp099ZSVV as select * from WORK.M15WMMWD order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base099ZSVV compare=work._comp099ZSVV out=WORK._DIFF0_763MI noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Reg : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:04 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMTRAINVARIABLE / view=WORK.Reg_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMRANK / view=WORK.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMSCOREDIST / view=WORK.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMOUTFIT / view=WORK.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMREPORTFIT / view=WORK.Reg_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMRESIDUAL / view=WORK.Reg_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg_EFFECTS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EFFECTS / view=WORK.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ClassLevel"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "EffectLabel"n = "Effect Label (C)";
MPRINT(EM_DIAGRAM):   label "Coefficient"n = "Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "tValue"n = "T-value (N)";
MPRINT(EM_DIAGRAM):   label "PValue"n = "P Value (N)";
MPRINT(EM_DIAGRAM):   label "CODE"n = "Score Code Variable (C)";
MPRINT(EM_DIAGRAM):   label "Sign"n = "Sign (C)";
MPRINT(EM_DIAGRAM):   label "Abscoefficient"n = "Absolute Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "abstvalue"n = "Absolute T-value (N)";
MPRINT(EM_DIAGRAM):   label "TEffectNum"n = "TScore Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   label "EffectNum"n = "Effect Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EFFECTS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg_EMESTIMATE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMESTIMATE / view=WORK.Reg_EMESTIMATE;
MPRINT(EM_DIAGRAM):   label "_STEP_"n = "Model Selection Step Number (N)";
MPRINT(EM_DIAGRAM):   label "_CHOSEN_"n = "Model Chosen Criterion (C)";
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Row Type (C)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Row Name (C)";
MPRINT(EM_DIAGRAM):   label "Intercept"n = "Intercept (N)";
MPRINT(EM_DIAGRAM):   label "Age_group0N17"n = "Age_group 0-17 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group18N24"n = "Age_group 18-24 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25N44"n = "Age_group 25-44 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group65N84"n = "Age_group 65-84 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseASTHMA"n = "NAME OF FORMER VARIABLE ASTHMA (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCANCER__ALL"n = "NAME OF FORMER VARIABLE CANCER, ALL (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseDEMENTIA_AND_ALZHEIMER_S"n = "NAME OF FORMER VARIABLE DEMENTIA AND ALZHEIMER'S DISEASE (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOSTEOARTHRITIS"n = "NAME OF FORMER VARIABLE OSTEOARTHRITIS (N)";
MPRINT(EM_DIAGRAM):   label "GenderFEMALE"n = "Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "Population_in_thousands"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMESTIMATE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg_ESTIMATEGRID OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_ESTIMATEGRID / view=WORK.Reg_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):   label "_STEP_"n = "Model Selection Step Number (N)";
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "EffectLabel"n = "Effect Label (C)";
MPRINT(EM_DIAGRAM):   label "Coefficient"n = "Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "TValue"n = "T-value (N)";
MPRINT(EM_DIAGRAM):   label "P"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Abscoefficient"n = "Absolute Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "abstvalue"n = "Absolute T-value (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_ESTIMATEGRID(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:05 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS2.Part_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where((ROLE="TARGET" and LEVEL ne "UNARY") or ROLE in("INPUT" "REJECTED" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1PLSAKW as select * from WORK.M20_XV_J order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1PLSAKW as select * from WORK.M1IZXL1T order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1PLSAKW compare=work._comp1PLSAKW out=WORK._DIFF14FGJFB noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP13UDIRRS as select * from WORK._DIFF14FGJFB where NAME in (select NAME from WORK._DIFF14FGJFB where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM2MQL6PO as select * from WORK._DIFF14FGJFB where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF14FGJFB where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM2MQL6PO as select * from WORK._DIFF14FGJFB where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF14FGJFB where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM2MQL6PO;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM2MQL6PO;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM2MQL6PO;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM2MQL6PO;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Tree : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:05 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN15125";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Tree_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Tree_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMTRAINVARIABLE / view=WORK.Tree_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Tree_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMRANK / view=WORK.Tree_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Tree_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMSCOREDIST / view=WORK.Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Tree_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMOUTFIT / view=WORK.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "target"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_TNOBS_"n = "Test: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_TSUMW_"n = "Test: Sum of Weights Times Freqs (N)";
MPRINT(EM_DIAGRAM):   label "_TMAX_"n = "Test: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_TSSE_"n = "Test: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_TASE_"n = "Test: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRASE_"n = "Test: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TDIV_"n = "Test: Divisor for TASE (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Tree_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMREPORTFIT / view=WORK.Tree_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Tree_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMRESIDUAL / view=WORK.Tree_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Tree_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_OUTIMPORT / view=WORK.Tree_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "NSURROGATES"n = "Number of Surrogate Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "VIMPORTANCE"n = "Validation Importance (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "RATIO"n = "Ratio of Validation to Training Importance (N)(15.4)";
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Tree_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_TREE_PLOT / view=WORK.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "textall"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "branch"n = "Branch from parent node (N)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node Id (N)";
MPRINT(EM_DIAGRAM):   label "LEAF"n = "Leaf (N)";
MPRINT(EM_DIAGRAM):   label "NBRANCHES"n = "Number of Branches (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Node depth (N)";
MPRINT(EM_DIAGRAM):   label "TRAVERSAL"n = "Order in node traversal (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Width of link to parent (N)";
MPRINT(EM_DIAGRAM):   label "LINKCOLOR"n = "Color of link to parent (N)";
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node statistics (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "N (N)";
MPRINT(EM_DIAGRAM):   label "VN"n = "Valid: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "P_Cases_in_1000s"n = "Predicted: Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "V_Cases_in_1000s"n = "Validated: Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "validtotal"n = "Valid Total (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "CHARACTER VALUE (C)";
MPRINT(EM_DIAGRAM):   label "RASE"n = " (N)";
MPRINT(EM_DIAGRAM):   label "VRASE"n = " (N)";
MPRINT(EM_DIAGRAM):   label "nodecolor"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Average (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Average Target Value (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "vprob"n = "Validation Average (N)";
MPRINT(EM_DIAGRAM):   label "percevent_valid"n = "Valid: Average Target Value (N)";
MPRINT(EM_DIAGRAM):   label "perc_valid"n = "Valid: Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Tree_OUTSEQ OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_OUTSEQ / view=WORK.Tree_OUTSEQ;
MPRINT(EM_DIAGRAM):   label "_ASSESS_"n = "Train: Subtree Assessment (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_VASSESS_"n = "Valid: Subtree Assessment (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Number of Leaves (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_OUTSEQ(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Tree_OUTSTATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_OUTSTATS / view=WORK.Tree_OUTSTATS;
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "LEAF"n = "Leaf (N)";
MPRINT(EM_DIAGRAM):   label "STATNAME"n = "Statistic Name (C)";
MPRINT(EM_DIAGRAM):   label "STATVALUE"n = "Statistic Value (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Tree_OUTSTATS(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:06 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS2.Part_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base37LIHU7 as select * from WORK.M1CPIJP2 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp37LIHU7 as select * from WORK.M11_ODXW order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base37LIHU7 compare=work._comp37LIHU7 out=WORK._DIFF2GJ40N6 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP13S8CJDR as select * from WORK._DIFF2GJ40N6 where NAME in (select NAME from WORK._DIFF2GJ40N6 where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM041SNRE as select * from WORK._DIFF2GJ40N6 where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF2GJ40N6 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM041SNRE as select * from WORK._DIFF2GJ40N6 where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF2GJ40N6 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM041SNRE;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM041SNRE;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM041SNRE;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM041SNRE;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Reg3 : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:07 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg3_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg3_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_EMTRAINVARIABLE / view=WORK.Reg3_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg3_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_EMRANK / view=WORK.Reg3_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg3_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_EMSCOREDIST / view=WORK.Reg3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg3_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_EMOUTFIT / view=WORK.Reg3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg3_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_EMREPORTFIT / view=WORK.Reg3_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg3_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_EMRESIDUAL / view=WORK.Reg3_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg3_EFFECTS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_EFFECTS / view=WORK.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ClassLevel"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "EffectLabel"n = "Effect Label (C)";
MPRINT(EM_DIAGRAM):   label "Coefficient"n = "Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "tValue"n = "T-value (N)";
MPRINT(EM_DIAGRAM):   label "PValue"n = "P Value (N)";
MPRINT(EM_DIAGRAM):   label "CODE"n = "Score Code Variable (C)";
MPRINT(EM_DIAGRAM):   label "Sign"n = "Sign (C)";
MPRINT(EM_DIAGRAM):   label "Abscoefficient"n = "Absolute Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "abstvalue"n = "Absolute T-value (N)";
MPRINT(EM_DIAGRAM):   label "TEffectNum"n = "TScore Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   label "EffectNum"n = "Effect Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EFFECTS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg3_EMESTIMATE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_EMESTIMATE / view=WORK.Reg3_EMESTIMATE;
MPRINT(EM_DIAGRAM):   label "_STEP_"n = "Model Selection Step Number (N)";
MPRINT(EM_DIAGRAM):   label "_CHOSEN_"n = "Model Chosen Criterion (C)";
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Row Type (C)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Row Name (C)";
MPRINT(EM_DIAGRAM):   label "Intercept"n = "Intercept (N)";
MPRINT(EM_DIAGRAM):   label "Age_group0N17"n = "Age_group 0-17 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group18N24"n = "Age_group 18-24 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25N44"n = "Age_group 25-44 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group65N84"n = "Age_group 65-84 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseASTHMA"n = "NAME OF FORMER VARIABLE ASTHMA (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCANCER__ALL"n = "NAME OF FORMER VARIABLE CANCER, ALL (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseDEMENTIA_AND_ALZHEIMER_S"n = "NAME OF FORMER VARIABLE DEMENTIA AND ALZHEIMER'S DISEASE (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOSTEOARTHRITIS"n = "NAME OF FORMER VARIABLE OSTEOARTHRITIS (N)";
MPRINT(EM_DIAGRAM):   label "GenderFEMALE"n = "Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "Population_in_thousands"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMESTIMATE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg3_ESTIMATEGRID OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_ESTIMATEGRID / view=WORK.Reg3_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):   label "_STEP_"n = "Model Selection Step Number (N)";
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "EffectLabel"n = "Effect Label (C)";
MPRINT(EM_DIAGRAM):   label "Coefficient"n = "Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "TValue"n = "T-value (N)";
MPRINT(EM_DIAGRAM):   label "P"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Abscoefficient"n = "Absolute Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "abstvalue"n = "Absolute T-value (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_ESTIMATEGRID(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:07 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS2.Part_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where((ROLE="TARGET" and LEVEL ne "UNARY") or ROLE in("INPUT" "REJECTED" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base32LK_U1 as select * from WORK.M1U8H8H5 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp32LK_U1 as select * from WORK.M0NHW5ZG order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base32LK_U1 compare=work._comp32LK_U1 out=WORK._DIFF0A5G1B2 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP100PU1Y9 as select * from WORK._DIFF0A5G1B2 where NAME in (select NAME from WORK._DIFF0A5G1B2 where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM12MAA2O as select * from WORK._DIFF0A5G1B2 where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF0A5G1B2 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM12MAA2O as select * from WORK._DIFF0A5G1B2 where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF0A5G1B2 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM12MAA2O;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM12MAA2O;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM12MAA2O;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM12MAA2O;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Reg4 : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:08 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg4_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg4_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_EMTRAINVARIABLE / view=WORK.Reg4_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg4_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_EMRANK / view=WORK.Reg4_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg4_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_EMSCOREDIST / view=WORK.Reg4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg4_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_EMOUTFIT / view=WORK.Reg4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg4_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_EMREPORTFIT / view=WORK.Reg4_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg4_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_EMRESIDUAL / view=WORK.Reg4_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg4_EFFECTS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_EFFECTS / view=WORK.Reg4_EFFECTS;
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ClassLevel"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "EffectLabel"n = "Effect Label (C)";
MPRINT(EM_DIAGRAM):   label "Coefficient"n = "Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "tValue"n = "T-value (N)";
MPRINT(EM_DIAGRAM):   label "PValue"n = "P Value (N)";
MPRINT(EM_DIAGRAM):   label "CODE"n = "Score Code Variable (C)";
MPRINT(EM_DIAGRAM):   label "Sign"n = "Sign (C)";
MPRINT(EM_DIAGRAM):   label "Abscoefficient"n = "Absolute Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "abstvalue"n = "Absolute T-value (N)";
MPRINT(EM_DIAGRAM):   label "TEffectNum"n = "TScore Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   label "EffectNum"n = "Effect Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EFFECTS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg4_EMESTIMATE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_EMESTIMATE / view=WORK.Reg4_EMESTIMATE;
MPRINT(EM_DIAGRAM):   label "_STEP_"n = "Model Selection Step Number (N)";
MPRINT(EM_DIAGRAM):   label "_CHOSEN_"n = "Model Chosen Criterion (C)";
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Row Type (C)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Row Name (C)";
MPRINT(EM_DIAGRAM):   label "Intercept"n = "Intercept (N)";
MPRINT(EM_DIAGRAM):   label "Age_group0N17"n = "Age_group 0-17 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group18N24"n = "Age_group 18-24 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25N44"n = "Age_group 25-44 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group65N84"n = "Age_group 65-84 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseASTHMA"n = "NAME OF FORMER VARIABLE ASTHMA (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCANCER__ALL"n = "NAME OF FORMER VARIABLE CANCER, ALL (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseDEMENTIA_AND_ALZHEIMER_S"n = "NAME OF FORMER VARIABLE DEMENTIA AND ALZHEIMER'S DISEASE (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOSTEOARTHRITIS"n = "NAME OF FORMER VARIABLE OSTEOARTHRITIS (N)";
MPRINT(EM_DIAGRAM):   label "GenderFEMALE"n = "Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "Population_in_thousands"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMESTIMATE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg4_ESTIMATEGRID OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_ESTIMATEGRID / view=WORK.Reg4_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):   label "_STEP_"n = "Model Selection Step Number (N)";
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "EffectLabel"n = "Effect Label (C)";
MPRINT(EM_DIAGRAM):   label "Coefficient"n = "Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "TValue"n = "T-value (N)";
MPRINT(EM_DIAGRAM):   label "P"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Abscoefficient"n = "Absolute Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "abstvalue"n = "Absolute T-value (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_ESTIMATEGRID(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:08 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS2.Part_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where((ROLE="TARGET" and LEVEL ne "UNARY") or ROLE in("INPUT" "REJECTED" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1MT2CXZ as select * from WORK.M36Z7YOM order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1MT2CXZ as select * from WORK.M0PGGI5V order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1MT2CXZ compare=work._comp1MT2CXZ out=WORK._DIFF2I1FLYB noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP11ZJAHJW as select * from WORK._DIFF2I1FLYB where NAME in (select NAME from WORK._DIFF2I1FLYB where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM1R89VYH as select * from WORK._DIFF2I1FLYB where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF2I1FLYB where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM1R89VYH as select * from WORK._DIFF2I1FLYB where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF2I1FLYB where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM1R89VYH;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM1R89VYH;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM1R89VYH;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM1R89VYH;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Trans : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:08 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN15281";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN15282";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN15283";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Trans_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Trans_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Trans_EMTRAINVARIABLE / view=WORK.Trans_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "METHOD"n = "Method (C)";
MPRINT(EM_DIAGRAM):   label "NUMBINS"n = "Number of Bins (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Trans_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Trans_STATISTICS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Trans_STATISTICS / view=WORK.Trans_STATISTICS;
MPRINT(EM_DIAGRAM):   label "SOURCE"n = "Source (C)";
MPRINT(EM_DIAGRAM):   label "_METHOD_"n = "Method (C)";
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "FORMULA"n = "Formula (C)";
MPRINT(EM_DIAGRAM):   label "NLEVEL"n = "Number of Levels (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Non Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Trans_STATISTICS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Trans_RESULT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Trans_RESULT / view=WORK.Trans_RESULT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Name (C)";
MPRINT(EM_DIAGRAM):   label "FORMULA"n = "Formula (C)";
MPRINT(EM_DIAGRAM):   label "POWER"n = "Power (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "INPUTNAME"n = "Input Name (C)";
MPRINT(EM_DIAGRAM):   label "INPUTTYPE"n = "Input Type (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = " (C)";
MPRINT(EM_DIAGRAM):   label "INPUTLEVEL"n = "Input Level (C)";
MPRINT(EM_DIAGRAM):   label "TYPE"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "TERM"n = " (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Trans_RESULT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:09 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Trans_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length METHOD $12;
MPRINT(EM_DIAGRAM):   length NUMBINS 8;
MPRINT(EM_DIAGRAM):   set EMWS2.Impt_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE in("TARGET", "INPUT", "REJECTED", "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1M7937D as select * from WORK.M0WI6JYX order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1M7937D as select * from WORK.M2W2U13C order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1M7937D compare=work._comp1M7937D out=WORK._DIFF3IH19XZ noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP13ULHKFR as select * from WORK._DIFF3IH19XZ where NAME in (select NAME from WORK._DIFF3IH19XZ where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM2WOW9E8 as select * from WORK._DIFF3IH19XZ where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF3IH19XZ where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM2WOW9E8 as select * from WORK._DIFF3IH19XZ where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF3IH19XZ where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM2WOW9E8;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM2WOW9E8;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM2WOW9E8;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM2WOW9E8;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Reg2 : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:09 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMTRAINVARIABLE / view=WORK.Reg2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg2_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMRANK / view=WORK.Reg2_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg2_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMSCOREDIST / view=WORK.Reg2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg2_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMOUTFIT / view=WORK.Reg2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg2_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMREPORTFIT / view=WORK.Reg2_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg2_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMRESIDUAL / view=WORK.Reg2_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg2_EFFECTS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EFFECTS / view=WORK.Reg2_EFFECTS;
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ClassLevel"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "EffectLabel"n = "Effect Label (C)";
MPRINT(EM_DIAGRAM):   label "Coefficient"n = "Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "tValue"n = "T-value (N)";
MPRINT(EM_DIAGRAM):   label "PValue"n = "P Value (N)";
MPRINT(EM_DIAGRAM):   label "CODE"n = "Score Code Variable (C)";
MPRINT(EM_DIAGRAM):   label "Sign"n = "Sign (C)";
MPRINT(EM_DIAGRAM):   label "Abscoefficient"n = "Absolute Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "abstvalue"n = "Absolute T-value (N)";
MPRINT(EM_DIAGRAM):   label "TEffectNum"n = "TScore Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   label "EffectNum"n = "Effect Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_EFFECTS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Reg2_EMESTIMATE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMESTIMATE / view=WORK.Reg2_EMESTIMATE;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Row Type (C)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Row Name (C)";
MPRINT(EM_DIAGRAM):   label "Intercept"n = "Intercept (N)";
MPRINT(EM_DIAGRAM):   label "Age_group0N17"n = "Age_group 0-17 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group18N24"n = "Age_group 18-24 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25N44"n = "Age_group 25-44 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group65N84"n = "Age_group 65-84 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseASTHMA"n = "NAME OF FORMER VARIABLE ASTHMA (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCANCER__ALL"n = "NAME OF FORMER VARIABLE CANCER, ALL (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseDEMENTIA_AND_ALZHEIMER_S"n = "NAME OF FORMER VARIABLE DEMENTIA AND ALZHEIMER'S DISEASE (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOSTEOARTHRITIS"n = "NAME OF FORMER VARIABLE OSTEOARTHRITIS (N)";
MPRINT(EM_DIAGRAM):   label "GenderFEMALE"n = "Gender FEMALE (N)";
MPRINT(EM_DIAGRAM):   label "LG10_Population_in_thousands"n = "Transformed Population_in_thousands (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_EMESTIMATE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:09 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS2.Trans_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where((ROLE="TARGET" and LEVEL ne "UNARY") or ROLE in("INPUT" "REJECTED" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base13GSRWN as select * from WORK.M3JQUG_L order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp13GSRWN as select * from WORK.M1FBYZTL order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base13GSRWN compare=work._comp13GSRWN out=WORK._DIFF3OUEISL noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Varsel : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:10 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Varsel_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Varsel_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_EMTRAINVARIABLE / view=WORK.Varsel_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Varsel_R2DS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_R2DS / view=WORK.Varsel_R2DS;
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "DF"n = "Degree of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "R2"n = "R-Square (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_R2DS(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Varsel_EFFECTDS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_EFFECTDS / view=WORK.Varsel_EFFECTDS;
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "DF"n = "Degree of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "R2"n = "Sequential R-Square (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_EFFECTDS(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Varsel_RESULTEDVARS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_RESULTEDVARS / view=WORK.Varsel_RESULTEDVARS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "TYPE"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "COMMENT"n = "Reasons for Rejection (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_RESULTEDVARS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Varsel_OUTGVAR OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_OUTGVAR / view=WORK.Varsel_OUTGVAR;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Name (C)";
MPRINT(EM_DIAGRAM):   label "GROUP"n = "Group (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Level (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_OUTGVAR(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:10 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Varsel_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   set EMWS2.Trans_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE in("INPUT" "REJECTED" "FREQ" "TARGET"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2L2MY00 as select * from WORK.M0PF1L83 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2L2MY00 as select * from WORK.M2XTQ6NH order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2L2MY00 compare=work._comp2L2MY00 out=WORK._DIFF1WUUPHW noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP10KJQN28 as select * from WORK._DIFF1WUUPHW where NAME in (select NAME from WORK._DIFF1WUUPHW where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM1OGXSRC as select * from WORK._DIFF1WUUPHW where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1WUUPHW where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM1OGXSRC as select * from WORK._DIFF1WUUPHW where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1WUUPHW where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM1OGXSRC;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM1OGXSRC;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM1OGXSRC;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM1OGXSRC;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Neural : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:11 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Neural_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Neural_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMTRAINVARIABLE / view=WORK.Neural_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Neural_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMRANK / view=WORK.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Neural_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMSCOREDIST / view=WORK.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Neural_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMOUTFIT / view=WORK.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimated Weights (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_MISC_"n = "Train: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_WRONG_"n = "Train: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_VWRONG_"n = "Valid: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_TASE_"n = "Test: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TAVERR_"n = "Test: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TDIV_"n = "Test: Divisor for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TERR_"n = "Test: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TMAX_"n = "Test: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_TMSE_"n = "Test: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TNOBS_"n = "Test: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_TRASE_"n = "Test: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRMSE_"n = "Test: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TSSE_"n = "Test: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_TSUMW_"n = "Test: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_TMISC_"n = "Test: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_TWRONG_"n = "Test: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_TASEL_"n = "Test: Lower 95% Conf. Limit for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TASEU_"n = "Test: Upper 95% Conf. Limit for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TMISL_"n = "Test: Lower 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "_TMISU_"n = "Test: Upper 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "_TA4E_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TA6E_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESTD_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESKEW_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESHAP_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESCAL_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Neural_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMREPORTFIT / view=WORK.Neural_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Neural_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMRESIDUAL / view=WORK.Neural_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Neural_PLOTDS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_PLOTDS / view=WORK.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):   label "_ITER_"n = "Training Iterations (N)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Name (C)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimated Weights (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_VWRONG_"n = "Valid: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_PLOTDS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Neural_WEIGHTDS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_WEIGHTDS / view=WORK.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   label "_LABEL_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "FROM"n = "From (C)";
MPRINT(EM_DIAGRAM):   label "TO"n = "Into (C)";
MPRINT(EM_DIAGRAM):   label "WEIGHT"n = "Weight (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_WEIGHTDS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Neural_EMESTIMATE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMESTIMATE / view=WORK.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   label "_TECH_"n = "Optimization Technique (C)";
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Row Type (C)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Row Name (C)";
MPRINT(EM_DIAGRAM):   label "_DECAY_"n = "Weight Decay (N)";
MPRINT(EM_DIAGRAM):   label "_SEED_"n = "Initial seed (N)";
MPRINT(EM_DIAGRAM):   label "_NOBJ_"n = "Train: Objective Function Divisor (N)";
MPRINT(EM_DIAGRAM):   label "_OBJ_"n = "Train: Objective Function (N)";
MPRINT(EM_DIAGRAM):   label "_OBJERR_"n = "Train: Objective Function (Error Part) (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (scoring) (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBJ_"n = "Valid: Objective Function Divisor (N)";
MPRINT(EM_DIAGRAM):   label "_VOBJ_"n = "Valid: Objective Function (N)";
MPRINT(EM_DIAGRAM):   label "_VOBJERR_"n = "Valid: Objective Function (Error Part) (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (scoring) (N)";
MPRINT(EM_DIAGRAM):   label "_P_NUM_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_ITER_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Population_in_thousands_H11"n = "Population_in_thousands -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "Population_in_thousands_H12"n = "Population_in_thousands -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "Population_in_thousands_H13"n = "Population_in_thousands -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "Population_in_thousands_H14"n = "Population_in_thousands -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "Population_in_thousands_H15"n = "Population_in_thousands -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group017_H11"n = "Age_group0-17 -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group1824_H11"n = "Age_group18-24 -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group2544_H11"n = "Age_group25-44 -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group4564_H11"n = "Age_group45-64 -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group6584_H11"n = "Age_group65-84 -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseAsthma_H11"n = "DiseaseAsthma -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCancer_all_H11"n = "DiseaseCancer, all -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseDementiaandAlzheimer_sdis"n = "DiseaseDementia and Alzheimer's disease -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOsteoarthritis_H11"n = "DiseaseOsteoarthritis -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "GenderAll_H11"n = "GenderAll -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H11"n = "GenderFemale -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group017_H12"n = "Age_group0-17 -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group1824_H12"n = "Age_group18-24 -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group2544_H12"n = "Age_group25-44 -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group4564_H12"n = "Age_group45-64 -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group6584_H12"n = "Age_group65-84 -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseAsthma_H12"n = "DiseaseAsthma -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCancer_all_H12"n = "DiseaseCancer, all -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP"n = "DiseaseDementia and Alzheimer's disease -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOsteoarthritis_H12"n = "DiseaseOsteoarthritis -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "GenderAll_H12"n = "GenderAll -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H12"n = "GenderFemale -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group017_H13"n = "Age_group0-17 -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group1824_H13"n = "Age_group18-24 -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group2544_H13"n = "Age_group25-44 -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group4564_H13"n = "Age_group45-64 -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group6584_H13"n = "Age_group65-84 -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseAsthma_H13"n = "DiseaseAsthma -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCancer_all_H13"n = "DiseaseCancer, all -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP1"n = "DiseaseDementia and Alzheimer's disease -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOsteoarthritis_H13"n = "DiseaseOsteoarthritis -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "GenderAll_H13"n = "GenderAll -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H13"n = "GenderFemale -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group017_H14"n = "Age_group0-17 -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group1824_H14"n = "Age_group18-24 -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group2544_H14"n = "Age_group25-44 -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group4564_H14"n = "Age_group45-64 -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group6584_H14"n = "Age_group65-84 -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseAsthma_H14"n = "DiseaseAsthma -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCancer_all_H14"n = "DiseaseCancer, all -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP2"n = "DiseaseDementia and Alzheimer's disease -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOsteoarthritis_H14"n = "DiseaseOsteoarthritis -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "GenderAll_H14"n = "GenderAll -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H14"n = "GenderFemale -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group017_H15"n = "Age_group0-17 -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group1824_H15"n = "Age_group18-24 -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group2544_H15"n = "Age_group25-44 -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group4564_H15"n = "Age_group45-64 -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group6584_H15"n = "Age_group65-84 -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseAsthma_H15"n = "DiseaseAsthma -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCancer_all_H15"n = "DiseaseCancer, all -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP3"n = "DiseaseDementia and Alzheimer's disease -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOsteoarthritis_H15"n = "DiseaseOsteoarthritis -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "GenderAll_H15"n = "GenderAll -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H15"n = "GenderFemale -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H11"n = "BIAS -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H12"n = "BIAS -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H13"n = "BIAS -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H14"n = "BIAS -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H15"n = "BIAS -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "H11_Cases_in_1000s"n = "H11 -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "H12_Cases_in_1000s"n = "H12 -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "H13_Cases_in_1000s"n = "H13 -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "H14_Cases_in_1000s"n = "H14 -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "H15_Cases_in_1000s"n = "H15 -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "Population_in_thousands_Cases_in"n = "Population_in_thousands -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "Age_group017_Cases_in_1000s"n = "Age_group0-17 -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "Age_group1824_Cases_in_1000s"n = "Age_group18-24 -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "Age_group2544_Cases_in_1000s"n = "Age_group25-44 -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "Age_group4564_Cases_in_1000s"n = "Age_group45-64 -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "Age_group6584_Cases_in_1000s"n = "Age_group65-84 -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseAsthma_Cases_in_1000s"n = "DiseaseAsthma -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseCancer_all_Cases_in_1000s"n = "DiseaseCancer, all -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "_DUP4"n = "DiseaseDementia and Alzheimer's disease -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "DiseaseOsteoarthritis_Cases_in_1"n = "DiseaseOsteoarthritis -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "GenderAll_Cases_in_1000s"n = "GenderAll -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_Cases_in_1000s"n = "GenderFemale -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_Cases_in_1000s"n = "BIAS -> Cases_in_1000s (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMESTIMATE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:11 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS2.Part_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where((ROLE="TARGET" and LEVEL ne "UNARY") or ROLE in("INPUT" "REJECTED" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2NSK5OP as select * from WORK.M37LKLEK order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2NSK5OP as select * from WORK.M1Z7MJ8H order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2NSK5OP compare=work._comp2NSK5OP out=WORK._DIFF1SZIS83 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP12_AYNFB as select * from WORK._DIFF1SZIS83 where NAME in (select NAME from WORK._DIFF1SZIS83 where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM1LOFYYI as select * from WORK._DIFF1SZIS83 where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1SZIS83 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM1LOFYYI as select * from WORK._DIFF1SZIS83 where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1SZIS83 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM1LOFYYI;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM1LOFYYI;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM1LOFYYI;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM1LOFYYI;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
Traverser: WaitingNode "SCORE2" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* MdlComp : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:12 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data work.MdlComp;
MPRINT(EM_DIAGRAM):   set EMWS2.em_nodeid;
MPRINT(EM_DIAGRAM):   where (NODEID="Reg5" and LABEL ne 'Champion Model') OR (NODEID="Reg" and LABEL ne 'Stepwise') OR (NODEID="Reg3" and LABEL ne 'Forward') OR (NODEID="Reg4" and LABEL ne 'Backward') ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\MdlComp_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.MdlComp_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMTRAINVARIABLE / view=WORK.MdlComp_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = " (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.MdlComp_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMRANK / view=WORK.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.MdlComp_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMSCOREDIST / view=WORK.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.MdlComp_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMOUTFIT / view=WORK.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "USE"n = "Selected Model (C)";
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "_CRITERION_"n = "Selection Criterion: Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.MdlComp_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMRESIDUAL / view=WORK.MdlComp_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.MdlComp_COMPAREFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_COMPAREFIT / view=WORK.MdlComp_COMPAREFIT;
MPRINT(EM_DIAGRAM):   label "DataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "Target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "targetlabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "Reg5"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Reg"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Reg3"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Reg4"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_COMPAREFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:13 
* 
*------------------------------------------------------------* 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1 NAME $32 ROLE $32 LEVEL $10 EVENT $32 LABEL $200;
MPRINT(EM_DIAGRAM):   NAME = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   EVENT = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   EVENT = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   EVENT = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   EVENT = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "LG10_Cases_in_1000s";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   EVENT = '';
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed Cases_in_1000s';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MdlComp_VARSETDEFAULT nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   by NAME LEVEL;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   if _N_ = 1 then USE = "Y";
MPRINT(EM_DIAGRAM):   else USE = "N";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3WM7K__ as select * from WORK.M0592K71 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3WM7K__ as select * from WORK.M2ZV0WV7 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3WM7K__ compare=work._comp3WM7K__ out=WORK._DIFF2RHW_V4 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Score2 : Beginning creation of SPK report 
* datetime : 11DEC2019:21:56:13 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Score2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Score2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Score2_EMTRAINVARIABLE / view=WORK.Score2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "model"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Score2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Score2_HIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Score2_HIST / view=WORK.Score2_HIST;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TYPE"n = "Output Type (C)";
MPRINT(EM_DIAGRAM):   label "X"n = "Numeric Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "Value"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Score2_HIST(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Score2_BAR OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Score2_BAR / view=WORK.Score2_BAR;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TYPE"n = "Output Type (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_X_"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "X"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS2.Score2_BAR(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Score2_EMINPUTVARS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Score2_EMINPUTVARS / view=WORK.Score2_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "CREATOR"n = "Creator (C)";
MPRINT(EM_DIAGRAM):   label "COMMENT"n = "Comment (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "HIDE"n = "Variable Hidden (C)";
MPRINT(EM_DIAGRAM):   label "SCOREVAR"n = "Used in Score Code (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Score2_EMINPUTVARS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS2.Score2_EMOUTPUTVARS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Score2_EMOUTPUTVARS / view=WORK.Score2_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "CREATOR"n = "Creator (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Variable Label (C)";
MPRINT(EM_DIAGRAM):   label "FUNCTION"n = "Function (C)";
MPRINT(EM_DIAGRAM):   label "type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   set EMWS2.Score2_EMOUTPUTVARS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 11DEC2019:21:56:14 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Score2_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE in("TARGET" "SEGMENT" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0GIGPUF as select * from WORK.M23EEHN4 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0GIGPUF as select * from WORK.M2CODPKE order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0GIGPUF compare=work._comp0GIGPUF out=WORK._DIFF1HWMJON noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN15636;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Reports\Disease Model Package_0_WF2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack1M1Y = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1M1Y, "Score", ' type="EM Result" version="14.2" Report="Disease Model Package_0_WF2" nodeid="Score2" description="Score  3" component="Score"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Score began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack276Y = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack276Y, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack276Y, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2ZXZ_ED "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack276Y, "fileref:F2ZXZ_ED", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0WV8RUC "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack276Y, "fileref:F0WV8RUC", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2QQSNW_ "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack276Y, "fileref:F2QQSNW_", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2DI8KH8 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\target.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack276Y, "fileref:F2DI8KH8", "BINARY", "text/xml", 'TARGETTABLE', 'NAME=TARGETTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\target.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3MCN0WM "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\tablemeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack276Y, "fileref:F3MCN0WM", "BINARY", "text/xml", 'TABLEMETA', 'NAME=TABLEMETA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\tablemeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1AJJBO2 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Reports\Disease Model Package_0_WF2\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack276Y, "fileref:F1AJJBO2", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Reports\Disease Model Package_0_WF2\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0I1T = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0I1T, "DISEASE_FUTURE_JOIN_1", ' NAME="Ids"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package DISEASE_FUTURE_JOIN_1 began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2FK3NX0 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Ids_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0I1T, "fileref:F2FK3NX0", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Ids_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0D0ZJM_ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0I1T, "fileref:F0D0ZJM_", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0QHYVUX "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0I1T, "fileref:F0QHYVUX", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0I1T, "work", "Ids_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2AQQBHW "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0I1T, "fileref:F2AQQBHW", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0SGOB5O "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0I1T, "fileref:F0SGOB5O", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2N2QZUT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0I1T, "fileref:F2N2QZUT", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1AOKWB1 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0I1T, "fileref:F1AOKWB1", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack0I1T, rc, "NESTED_NAME", "Ids");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack19PE = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack19PE, "DISEASE_HISTORIC_JOIN_1", ' NAME="Ids2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package DISEASE_HISTORIC_JOIN_1 began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1G2A5MA "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Ids2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19PE, "fileref:F1G2A5MA", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Ids2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0_VZYTQ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19PE, "fileref:F0_VZYTQ", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2WC4CC0 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19PE, "fileref:F2WC4CC0", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack19PE, "work", "Ids2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2H1CJK4 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19PE, "fileref:F2H1CJK4", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F29HCUIH "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19PE, "fileref:F29HCUIH", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1X5HYUS "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19PE, "fileref:F1X5HYUS", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3BEM6EG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19PE, "fileref:F3BEM6EG", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack19PE, rc, "NESTED_NAME", "Ids2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0JZK = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0JZK, "StatExplore", ' NAME="Stat"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package StatExplore began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0WST91X "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Stat_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0JZK, "fileref:F0WST91X", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Stat_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3ODM73J "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0JZK, "fileref:F3ODM73J", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1R9PR6_ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0JZK, "fileref:F1R9PR6_", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0JZK, "work", "Stat_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1YLE533 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0JZK, "fileref:F1YLE533", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F35CXV0X "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0JZK, "fileref:F35CXV0X", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3CP3BNN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0JZK, "fileref:F3CP3BNN", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0_PLLZW "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0JZK, "fileref:F0_PLLZW", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0JZK, "work", "Stat_CLASS", "Class", "NAME=CLASS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLASS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0JZK, "work", "Stat_CLASSPLOT", "CLASSPLOT", "NAME=CLASSPLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLASSPLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0JZK, "work", "Stat_INTERVAL", "INTERVAL", "NAME=INTERVAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INTERVAL inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0JZK, "work", "Stat_CORR", "CORR", "NAME=CORR TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CORR inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0JZK, "work", "Stat_WORTH", "WORTH", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file WORTH inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack0JZK, rc, "NESTED_NAME", "Stat");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3V77 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3V77, "Data Partition", ' NAME="Part"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Data Partition began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2WDKBED "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Part_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3V77, "fileref:F2WDKBED", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Part_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1TPVJ38 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3V77, "fileref:F1TPVJ38", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1Z5JKXJ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3V77, "fileref:F1Z5JKXJ", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3V77, "work", "Part_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0Z9_QLN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3V77, "fileref:F0Z9_QLN", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2UFURWN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3V77, "fileref:F2UFURWN", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0IILUX7 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3V77, "fileref:F0IILUX7", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2RGTLN1 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3V77, "fileref:F2RGTLN1", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0LJUIC6 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3V77, "fileref:F0LJUIC6", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3V77, "work", "Part_INTRVL", "INTRVLSTAT", "NAME=INTRVL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INTRVLSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack3V77, rc, "NESTED_NAME", "Part");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3CK6 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3CK6, "Champion Model", ' NAME="Reg5"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Champion Model began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2NCFNUK "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg5_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CK6, "fileref:F2NCFNUK", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg5_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F16_6LMY "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CK6, "fileref:F16_6LMY", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F37DLL3X "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CK6, "fileref:F37DLL3X", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3CK6, "work", "Reg5_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0QOGWOK "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CK6, "fileref:F0QOGWOK", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1Z22L2Z "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CK6, "fileref:F1Z22L2Z", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0BA2A_L "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CK6, "fileref:F0BA2A_L", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3B278E6 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CK6, "fileref:F3B278E6", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F24L1M1M "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CK6, "fileref:F24L1M1M", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0BWEE3H "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CK6, "fileref:F0BWEE3H", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3OHF3MQ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CK6, "fileref:F3OHF3MQ", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3CK6, "work", "Reg5_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3CK6, "work", "Reg5_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3CK6, "work", "Reg5_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3CK6, "work", "Reg5_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3CK6, "work", "Reg5_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3CK6, "work", "Reg5_EFFECTS", "Effects", "NAME=EFFECTS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REGEFFECTS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3CK6, "work", "Reg5_EMESTIMATE", "ESTIMATEDS", "NAME=EMESTIMATE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ESTIMATEDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack3CK6, rc, "NESTED_NAME", "Reg5");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3AHB = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3AHB, "Impute", ' NAME="Impt"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Impute began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2T41L2M "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Impt_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3AHB, "fileref:F2T41L2M", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Impt_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2QPKF8G "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3AHB, "fileref:F2QPKF8G", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1QATP2T "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3AHB, "fileref:F1QATP2T", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3AHB, "work", "Impt_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1ZJCVZ8 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3AHB, "fileref:F1ZJCVZ8", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1HJWI0O "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3AHB, "fileref:F1HJWI0O", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1EE1WXU "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3AHB, "fileref:F1EE1WXU", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1FXRGB_ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3AHB, "fileref:F1FXRGB_", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3HXHVAF "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3AHB, "fileref:F3HXHVAF", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack3AHB, rc, "NESTED_NAME", "Impt");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0L4D = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0L4D, "Stepwise", ' NAME="Reg"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Stepwise began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2RAXFZ6 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0L4D, "fileref:F2RAXFZ6", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3I7MH7V "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0L4D, "fileref:F3I7MH7V", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2YD6I37 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0L4D, "fileref:F2YD6I37", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0L4D, "work", "Reg_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F04GL47A "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0L4D, "fileref:F04GL47A", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3960YHS "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0L4D, "fileref:F3960YHS", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3RSE4Z_ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0L4D, "fileref:F3RSE4Z_", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0AE8XJT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0L4D, "fileref:F0AE8XJT", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F01YGLD8 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0L4D, "fileref:F01YGLD8", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0CGT8A1 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0L4D, "fileref:F0CGT8A1", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0L4D, "work", "Reg_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0L4D, "work", "Reg_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0L4D, "work", "Reg_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0L4D, "work", "Reg_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0L4D, "work", "Reg_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0L4D, "work", "Reg_EFFECTS", "Effects", "NAME=EFFECTS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REGEFFECTS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0L4D, "work", "Reg_EMESTIMATE", "ESTIMATEDS", "NAME=EMESTIMATE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ESTIMATEDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0L4D, "work", "Reg_ESTIMATEGRID", "ESTIMATEGRID", "NAME=ESTIMATEGRID TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ESTIMATEGRID inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack0L4D, rc, "NESTED_NAME", "Reg");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3POH = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3POH, "Decision Tree", ' NAME="Tree"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Decision Tree began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2VCEIKB "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Tree_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3POH, "fileref:F2VCEIKB", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Tree_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F17EEI60 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3POH, "fileref:F17EEI60", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0J1RUR5 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3POH, "fileref:F0J1RUR5", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3POH, "work", "Tree_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1KNLQJ2 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3POH, "fileref:F1KNLQJ2", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2S56UP0 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3POH, "fileref:F2S56UP0", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3M7GAL_ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3POH, "fileref:F3M7GAL_", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2B830GQ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3POH, "fileref:F2B830GQ", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2OTHAGQ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3POH, "fileref:F2OTHAGQ", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3CO65RS "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3POH, "fileref:F3CO65RS", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3POH, "work", "Tree_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3POH, "work", "Tree_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3POH, "work", "Tree_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3POH, "work", "Tree_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3POH, "work", "Tree_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2222J8K "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3POH, "fileref:F2222J8K", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=ENGLISHRULES TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3POH, "work", "Tree_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3POH, "work", "Tree_TREE_PLOT", "TREE", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3POH, "work", "Tree_OUTSEQ", "SUBTREE", "NAME=OUTSEQ TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file SUBTREE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3POH, "work", "Tree_OUTSTATS", "OUTSTATS", "NAME=OUTSTATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file OUTSTATS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack3POH, rc, "NESTED_NAME", "Tree");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2IWH = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2IWH, "Forward", ' NAME="Reg3"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Forward began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3GNBIYW "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg3_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2IWH, "fileref:F3GNBIYW", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg3_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2L673F1 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2IWH, "fileref:F2L673F1", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3NJ2BTD "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2IWH, "fileref:F3NJ2BTD", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2IWH, "work", "Reg3_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F09HITKS "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2IWH, "fileref:F09HITKS", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1Y4QWQV "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2IWH, "fileref:F1Y4QWQV", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3D42R_1 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2IWH, "fileref:F3D42R_1", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2K4CCHQ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2IWH, "fileref:F2K4CCHQ", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F342YVMX "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2IWH, "fileref:F342YVMX", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1FXEH0U "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2IWH, "fileref:F1FXEH0U", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1QCAEXX "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2IWH, "fileref:F1QCAEXX", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2IWH, "work", "Reg3_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2IWH, "work", "Reg3_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2IWH, "work", "Reg3_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2IWH, "work", "Reg3_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2IWH, "work", "Reg3_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2IWH, "work", "Reg3_EFFECTS", "Effects", "NAME=EFFECTS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REGEFFECTS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2IWH, "work", "Reg3_EMESTIMATE", "ESTIMATEDS", "NAME=EMESTIMATE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ESTIMATEDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2IWH, "work", "Reg3_ESTIMATEGRID", "ESTIMATEGRID", "NAME=ESTIMATEGRID TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ESTIMATEGRID inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack2IWH, rc, "NESTED_NAME", "Reg3");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack22XO = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack22XO, "Backward", ' NAME="Reg4"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Backward began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F01RU8J4 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg4_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack22XO, "fileref:F01RU8J4", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg4_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0NTATF_ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack22XO, "fileref:F0NTATF_", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0MAWB1A "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack22XO, "fileref:F0MAWB1A", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack22XO, "work", "Reg4_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F07UWSXB "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack22XO, "fileref:F07UWSXB", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3R6O4W1 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack22XO, "fileref:F3R6O4W1", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0J_VJL_ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack22XO, "fileref:F0J_VJL_", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3SDCGOB "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack22XO, "fileref:F3SDCGOB", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ZG7RNM "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack22XO, "fileref:F0ZG7RNM", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1AZ7CAG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack22XO, "fileref:F1AZ7CAG", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F05ROAP_ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack22XO, "fileref:F05ROAP_", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack22XO, "work", "Reg4_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack22XO, "work", "Reg4_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack22XO, "work", "Reg4_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack22XO, "work", "Reg4_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack22XO, "work", "Reg4_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack22XO, "work", "Reg4_EFFECTS", "Effects", "NAME=EFFECTS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REGEFFECTS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack22XO, "work", "Reg4_EMESTIMATE", "ESTIMATEDS", "NAME=EMESTIMATE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ESTIMATEDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack22XO, "work", "Reg4_ESTIMATEGRID", "ESTIMATEGRID", "NAME=ESTIMATEGRID TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ESTIMATEGRID inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack22XO, rc, "NESTED_NAME", "Reg4");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2J6G = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2J6G, "Transform Variables", ' NAME="Trans"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Transform Variables began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3A6MS37 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Trans_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2J6G, "fileref:F3A6MS37", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Trans_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2VTZ1NL "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2J6G, "fileref:F2VTZ1NL", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1CR8H7N "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2J6G, "fileref:F1CR8H7N", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2J6G, "work", "Trans_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3QDD2SZ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2J6G, "fileref:F3QDD2SZ", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F04ZBIPL "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2J6G, "fileref:F04ZBIPL", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F39R005W "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2J6G, "fileref:F39R005W", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3O7OP51 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2J6G, "fileref:F3O7OP51", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2RRYZ81 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2J6G, "fileref:F2RRYZ81", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2J6G, "work", "Trans_STATISTICS", "Statistics of original variables", "NAME=STATISTICS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TRANSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2J6G, "work", "Trans_RESULT", "RESULT", "NAME=RESULT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESULT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack2J6G, rc, "NESTED_NAME", "Trans");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0W7M = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0W7M, "Logistic Regression", ' NAME="Reg2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Logistic Regression began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2GTGJ6_ "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W7M, "fileref:F2GTGJ6_", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0EK14RB "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W7M, "fileref:F0EK14RB", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F20H1IIJ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W7M, "fileref:F20H1IIJ", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0W7M, "work", "Reg2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0XBWB25 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W7M, "fileref:F0XBWB25", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2Z8F_GF "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W7M, "fileref:F2Z8F_GF", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F02BY6SQ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W7M, "fileref:F02BY6SQ", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2F5D3HM "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W7M, "fileref:F2F5D3HM", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F38F2PZN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W7M, "fileref:F38F2PZN", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1CZVPSX "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W7M, "fileref:F1CZVPSX", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0W7M, "work", "Reg2_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0W7M, "work", "Reg2_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0W7M, "work", "Reg2_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0W7M, "work", "Reg2_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0W7M, "work", "Reg2_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0W7M, "work", "Reg2_EFFECTS", "Effects", "NAME=EFFECTS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REGEFFECTS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0W7M, "work", "Reg2_EMESTIMATE", "ESTIMATEDS", "NAME=EMESTIMATE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ESTIMATEDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack0W7M, rc, "NESTED_NAME", "Reg2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1X80 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1X80, "Variable Selection", ' NAME="Varsel"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Variable Selection began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2AS735C "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Varsel_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1X80, "fileref:F2AS735C", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Varsel_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1M88WJB "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1X80, "fileref:F1M88WJB", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3ROYB87 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1X80, "fileref:F3ROYB87", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1X80, "work", "Varsel_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ZW9OXI "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1X80, "fileref:F0ZW9OXI", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2S_8VQV "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1X80, "fileref:F2S_8VQV", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2AZ8V30 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1X80, "fileref:F2AZ8V30", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2EI89ES "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1X80, "fileref:F2EI89ES", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F234XO73 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1X80, "fileref:F234XO73", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2SFE0NL "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1X80, "fileref:F2SFE0NL", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1X80, "work", "Varsel_R2DS", "R2 Values", "NAME=R2DS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file R2 Values inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1X80, "work", "Varsel_EFFECTDS", "Effects in Model", "NAME=EFFECTDS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Effects in Model inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1X80, "work", "Varsel_RESULTEDVARS", "Variable Selection", "NAME=RESULTEDVARS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Variable Selection inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1X80, "work", "Varsel_OUTGVAR", "Group Variables", "NAME=OUTGVAR TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Group Variables inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack1X80, rc, "NESTED_NAME", "Varsel");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1_0B = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1_0B, "Neural Network", ' NAME="Neural"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Neural Network began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3HY_TGF "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Neural_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1_0B, "fileref:F3HY_TGF", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Neural_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3E6I3C9 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1_0B, "fileref:F3E6I3C9", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0UTIW7C "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1_0B, "fileref:F0UTIW7C", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1_0B, "work", "Neural_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2_HSW89 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1_0B, "fileref:F2_HSW89", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F150ABUH "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1_0B, "fileref:F150ABUH", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2RGE59S "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1_0B, "fileref:F2RGE59S", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ZKZ_1G "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1_0B, "fileref:F0ZKZ_1G", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2WX5CRS "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1_0B, "fileref:F2WX5CRS", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F036U77M "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1_0B, "fileref:F036U77M", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1_0B, "work", "Neural_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1_0B, "work", "Neural_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1_0B, "work", "Neural_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1_0B, "work", "Neural_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1_0B, "work", "Neural_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1_0B, "work", "Neural_PLOTDS", "PLOTDS", "NAME=PLOTDS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PLOTDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1_0B, "work", "Neural_WEIGHTDS", "WEIGHTDS", "NAME=WEIGHTDS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file WEIGHTDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1_0B, "work", "Neural_EMESTIMATE", "HISTWEIGHT", "NAME=EMESTIMATE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file HISTWEIGHT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack1_0B, rc, "NESTED_NAME", "Neural");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3M2O = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3M2O, "Model Comparison", ' NAME="MdlComp"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Model Comparison began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1GZOIN0 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\MdlComp_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3M2O, "fileref:F1GZOIN0", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\MdlComp_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0VMRRKJ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3M2O, "fileref:F0VMRRKJ", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0M6DT3M "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3M2O, "fileref:F0M6DT3M", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3M2O, "work", "MdlComp_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F16_EUGW "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3M2O, "fileref:F16_EUGW", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3UJ7ML8 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3M2O, "fileref:F3UJ7ML8", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F27KA54M "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3M2O, "fileref:F27KA54M", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1E2O8M_ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3M2O, "fileref:F1E2O8M_", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0I2XM6K "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3M2O, "fileref:F0I2XM6K", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3PPDW74 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3M2O, "fileref:F3PPDW74", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0UJ85Z2 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3M2O, "fileref:F0UJ85Z2", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3M2O, "work", "MdlComp_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3M2O, "work", "MdlComp_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3M2O, "work", "MdlComp_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3M2O, "work", "MdlComp_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3M2O, "work", "MdlComp_COMPAREFIT", "COMPAREFIT", "NAME=COMPAREFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file COMPAREFIT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack3M2O, rc, "NESTED_NAME", "MdlComp");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0300 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0300, "Score (3)", ' NAME="Score2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Score (3) began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3FPOBS2 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Score2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0300, "fileref:F3FPOBS2", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Score2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3U2T_LV "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0300, "fileref:F3U2T_LV", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1A_8KUR "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0300, "fileref:F1A_8KUR", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0300, "work", "Score2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F18ADSMF "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0300, "fileref:F18ADSMF", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2LDL6QV "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0300, "fileref:F2LDL6QV", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3NNTDCB "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0300, "fileref:F3NNTDCB", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1I3SBRX "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0300, "fileref:F1I3SBRX", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0Q694LH "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\PATHFLOWSCORECODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0300, "fileref:F0Q694LH", "TEXT", "text/plain", 'PATHFLOWCODE', 'NAME=PATHFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\PATHFLOWSCORECODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2VLXZYW "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\OPTIMIZEDCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0300, "fileref:F2VLXZYW", "TEXT", "text/plain", 'OPTIMIZEDCODE', 'NAME=OPTIMIZEDCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\OPTIMIZEDCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F17JM6SR "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\PATHPUBLISHSCORECODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0300, "fileref:F17JM6SR", "TEXT", "text/plain", 'PATHPUBCODE', 'NAME=PATHPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\PATHPUBLISHSCORECODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0300, "work", "Score2_HIST", "HISTPLOT", "NAME=HIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file HISTPLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0300, "work", "Score2_BAR", "BARPLOT", "NAME=BAR TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file BARPLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0300, "work", "Score2_EMINPUTVARS", "SCOREINPUTVARS", "NAME=EMINPUTVARS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file SCOREINPUTVARS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0300, "work", "Score2_EMOUTPUTVARS", "SCOREOUTPUTVARS", "NAME=EMOUTPUTVARS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file SCOREOUTPUTVARS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack0300, rc, "NESTED_NAME", "Score2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0W71 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0W71, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack0W71, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1TULZHW "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W71, "fileref:F1TULZHW", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2VRAD8S "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W71, "fileref:F2VRAD8S", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F13FQZE6 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W71, "fileref:F13FQZE6", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0430TAA "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1M1Y, "fileref:F0430TAA", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack39TW = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack39TW, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1M1Y, Pack39TW, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1EKS = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1EKS, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack39TW, Pack1EKS, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2_N1ANW "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_3N_030Kscore.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1EKS, "fileref:F2_N1ANW", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_3N_030Kscore.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2_6O = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2_6O, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack39TW, Pack2_6O, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Reports\Disease Model Package_0_WF2";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack1M1Y, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack1M1Y successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack1M1Y, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack1M1Y ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package Score began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\scorexml.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\input.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\output.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\target.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\tablemeta.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Reports\Disease Model Package_0_WF2\miningResult.xml inserted successfully.
Package DISEASE_FUTURE_JOIN_1 began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Ids_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package DISEASE_HISTORIC_JOIN_1 began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Ids2_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Ids2\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package StatExplore began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Stat_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Stat\EMCUSTOMGRAPH.xml inserted successfully.
CSV file CLASS inserted successfully.
CSV file CLASSPLOT inserted successfully.
CSV file INTERVAL inserted successfully.
CSV file CORR inserted successfully.
CSV file WORTH inserted successfully.
spk_PACKAGEINSERT_note
Package Data Partition began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Part_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Part\EMCUSTOMGRAPH.xml inserted successfully.
CSV file INTRVLSTAT inserted successfully.
spk_PACKAGEINSERT_note
Package Champion Model began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg5_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg5\EMCUSTOMGRAPH.xml inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
CSV file REGEFFECTS inserted successfully.
CSV file ESTIMATEDS inserted successfully.
spk_PACKAGEINSERT_note
Package Impute began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Impt_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Impt\EMPUBLISHSCORE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package Stepwise began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg\EMPUBLISHSCORE.sas inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
CSV file REGEFFECTS inserted successfully.
CSV file ESTIMATEDS inserted successfully.
CSV file ESTIMATEGRID inserted successfully.
spk_PACKAGEINSERT_note
Package Decision Tree began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Tree_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Tree\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file TREE inserted successfully.
CSV file SUBTREE inserted successfully.
CSV file OUTSTATS inserted successfully.
spk_PACKAGEINSERT_note
Package Forward began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg3_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg3\EMCUSTOMGRAPH.xml inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
CSV file REGEFFECTS inserted successfully.
CSV file ESTIMATEDS inserted successfully.
CSV file ESTIMATEGRID inserted successfully.
spk_PACKAGEINSERT_note
Package Backward began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg4_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg4\EMCUSTOMGRAPH.xml inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
CSV file REGEFFECTS inserted successfully.
CSV file ESTIMATEDS inserted successfully.
CSV file ESTIMATEGRID inserted successfully.
spk_PACKAGEINSERT_note
Package Transform Variables began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Trans_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Trans\EMPUBLISHSCORE.sas inserted successfully.
CSV file TRANSSTAT inserted successfully.
CSV file RESULT inserted successfully.
spk_PACKAGEINSERT_note
Package Logistic Regression began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Reg2_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Reg2\EMPUBLISHSCORE.sas inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
CSV file REGEFFECTS inserted successfully.
CSV file ESTIMATEDS inserted successfully.
spk_PACKAGEINSERT_note
Package Variable Selection began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Varsel_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Varsel\EMPUBLISHSCORE.sas inserted successfully.
CSV file R2 Values inserted successfully.
CSV file Effects in Model inserted successfully.
CSV file Variable Selection inserted successfully.
CSV file Group Variables inserted successfully.
spk_PACKAGEINSERT_note
Package Neural Network began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Neural_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Neural\EMPUBLISHSCORE.sas inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
CSV file PLOTDS inserted successfully.
CSV file WEIGHTDS inserted successfully.
CSV file HISTWEIGHT inserted successfully.
spk_PACKAGEINSERT_note
Package Model Comparison began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\MdlComp_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMCUSTOMGRAPH.xml inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
CSV file COMPAREFIT inserted successfully.
spk_PACKAGEINSERT_note
Package Score (3) began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\Score2_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\PATHFLOWSCORECODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\OPTIMIZEDCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Score2\PATHPUBLISHSCORECODE.sas inserted successfully.
CSV file HISTPLOT inserted successfully.
CSV file BARPLOT inserted successfully.
CSV file SCOREINPUTVARS inserted successfully.
CSV file SCOREOUTPUTVARS inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\dsapi.sas inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\dsapimeta.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_16FSR_X\layout.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD5764_830-5CG9310VLM_\Prc2\P_3N_030Kscore.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack1M1Y successfully.
Package Pack1M1Y ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F2ZXZ_ED;
MPRINT(EM_DIAGRAM):   filename F0WV8RUC;
MPRINT(EM_DIAGRAM):   filename F2QQSNW_;
MPRINT(EM_DIAGRAM):   filename F2DI8KH8;
MPRINT(EM_DIAGRAM):   filename F3MCN0WM;
MPRINT(EM_DIAGRAM):   filename F1AJJBO2;
MPRINT(EM_DIAGRAM):   filename F2FK3NX0;
MPRINT(EM_DIAGRAM):   filename F0D0ZJM_;
MPRINT(EM_DIAGRAM):   filename F0QHYVUX;
MPRINT(EM_DIAGRAM):   filename F2AQQBHW;
MPRINT(EM_DIAGRAM):   filename F0SGOB5O;
MPRINT(EM_DIAGRAM):   filename F2N2QZUT;
MPRINT(EM_DIAGRAM):   filename F1AOKWB1;
MPRINT(EM_DIAGRAM):   filename F1G2A5MA;
MPRINT(EM_DIAGRAM):   filename F0_VZYTQ;
MPRINT(EM_DIAGRAM):   filename F2WC4CC0;
MPRINT(EM_DIAGRAM):   filename F2H1CJK4;
MPRINT(EM_DIAGRAM):   filename F29HCUIH;
MPRINT(EM_DIAGRAM):   filename F1X5HYUS;
MPRINT(EM_DIAGRAM):   filename F3BEM6EG;
MPRINT(EM_DIAGRAM):   filename F0WST91X;
MPRINT(EM_DIAGRAM):   filename F3ODM73J;
MPRINT(EM_DIAGRAM):   filename F1R9PR6_;
MPRINT(EM_DIAGRAM):   filename F1YLE533;
MPRINT(EM_DIAGRAM):   filename F35CXV0X;
MPRINT(EM_DIAGRAM):   filename F3CP3BNN;
MPRINT(EM_DIAGRAM):   filename F0_PLLZW;
MPRINT(EM_DIAGRAM):   filename F2WDKBED;
MPRINT(EM_DIAGRAM):   filename F1TPVJ38;
MPRINT(EM_DIAGRAM):   filename F1Z5JKXJ;
MPRINT(EM_DIAGRAM):   filename F0Z9_QLN;
MPRINT(EM_DIAGRAM):   filename F2UFURWN;
MPRINT(EM_DIAGRAM):   filename F0IILUX7;
MPRINT(EM_DIAGRAM):   filename F2RGTLN1;
MPRINT(EM_DIAGRAM):   filename F0LJUIC6;
MPRINT(EM_DIAGRAM):   filename F2NCFNUK;
MPRINT(EM_DIAGRAM):   filename F16_6LMY;
MPRINT(EM_DIAGRAM):   filename F37DLL3X;
MPRINT(EM_DIAGRAM):   filename F0QOGWOK;
MPRINT(EM_DIAGRAM):   filename F1Z22L2Z;
MPRINT(EM_DIAGRAM):   filename F0BA2A_L;
MPRINT(EM_DIAGRAM):   filename F3B278E6;
MPRINT(EM_DIAGRAM):   filename F24L1M1M;
MPRINT(EM_DIAGRAM):   filename F0BWEE3H;
MPRINT(EM_DIAGRAM):   filename F3OHF3MQ;
MPRINT(EM_DIAGRAM):   filename F2T41L2M;
MPRINT(EM_DIAGRAM):   filename F2QPKF8G;
MPRINT(EM_DIAGRAM):   filename F1QATP2T;
MPRINT(EM_DIAGRAM):   filename F1ZJCVZ8;
MPRINT(EM_DIAGRAM):   filename F1HJWI0O;
MPRINT(EM_DIAGRAM):   filename F1EE1WXU;
MPRINT(EM_DIAGRAM):   filename F1FXRGB_;
MPRINT(EM_DIAGRAM):   filename F3HXHVAF;
MPRINT(EM_DIAGRAM):   filename F2RAXFZ6;
MPRINT(EM_DIAGRAM):   filename F3I7MH7V;
MPRINT(EM_DIAGRAM):   filename F2YD6I37;
MPRINT(EM_DIAGRAM):   filename F04GL47A;
MPRINT(EM_DIAGRAM):   filename F3960YHS;
MPRINT(EM_DIAGRAM):   filename F3RSE4Z_;
MPRINT(EM_DIAGRAM):   filename F0AE8XJT;
MPRINT(EM_DIAGRAM):   filename F01YGLD8;
MPRINT(EM_DIAGRAM):   filename F0CGT8A1;
MPRINT(EM_DIAGRAM):   filename F2VCEIKB;
MPRINT(EM_DIAGRAM):   filename F17EEI60;
MPRINT(EM_DIAGRAM):   filename F0J1RUR5;
MPRINT(EM_DIAGRAM):   filename F1KNLQJ2;
MPRINT(EM_DIAGRAM):   filename F2S56UP0;
MPRINT(EM_DIAGRAM):   filename F3M7GAL_;
MPRINT(EM_DIAGRAM):   filename F2B830GQ;
MPRINT(EM_DIAGRAM):   filename F2OTHAGQ;
MPRINT(EM_DIAGRAM):   filename F3CO65RS;
MPRINT(EM_DIAGRAM):   filename F2222J8K;
MPRINT(EM_DIAGRAM):   filename F3GNBIYW;
MPRINT(EM_DIAGRAM):   filename F2L673F1;
MPRINT(EM_DIAGRAM):   filename F3NJ2BTD;
MPRINT(EM_DIAGRAM):   filename F09HITKS;
MPRINT(EM_DIAGRAM):   filename F1Y4QWQV;
MPRINT(EM_DIAGRAM):   filename F3D42R_1;
MPRINT(EM_DIAGRAM):   filename F2K4CCHQ;
MPRINT(EM_DIAGRAM):   filename F342YVMX;
MPRINT(EM_DIAGRAM):   filename F1FXEH0U;
MPRINT(EM_DIAGRAM):   filename F1QCAEXX;
MPRINT(EM_DIAGRAM):   filename F01RU8J4;
MPRINT(EM_DIAGRAM):   filename F0NTATF_;
MPRINT(EM_DIAGRAM):   filename F0MAWB1A;
MPRINT(EM_DIAGRAM):   filename F07UWSXB;
MPRINT(EM_DIAGRAM):   filename F3R6O4W1;
MPRINT(EM_DIAGRAM):   filename F0J_VJL_;
MPRINT(EM_DIAGRAM):   filename F3SDCGOB;
MPRINT(EM_DIAGRAM):   filename F0ZG7RNM;
MPRINT(EM_DIAGRAM):   filename F1AZ7CAG;
MPRINT(EM_DIAGRAM):   filename F05ROAP_;
MPRINT(EM_DIAGRAM):   filename F3A6MS37;
MPRINT(EM_DIAGRAM):   filename F2VTZ1NL;
MPRINT(EM_DIAGRAM):   filename F1CR8H7N;
MPRINT(EM_DIAGRAM):   filename F3QDD2SZ;
MPRINT(EM_DIAGRAM):   filename F04ZBIPL;
MPRINT(EM_DIAGRAM):   filename F39R005W;
MPRINT(EM_DIAGRAM):   filename F3O7OP51;
MPRINT(EM_DIAGRAM):   filename F2RRYZ81;
MPRINT(EM_DIAGRAM):   filename F2GTGJ6_;
MPRINT(EM_DIAGRAM):   filename F0EK14RB;
MPRINT(EM_DIAGRAM):   filename F20H1IIJ;
MPRINT(EM_DIAGRAM):   filename F0XBWB25;
MPRINT(EM_DIAGRAM):   filename F2Z8F_GF;
MPRINT(EM_DIAGRAM):   filename F02BY6SQ;
MPRINT(EM_DIAGRAM):   filename F2F5D3HM;
MPRINT(EM_DIAGRAM):   filename F38F2PZN;
MPRINT(EM_DIAGRAM):   filename F1CZVPSX;
MPRINT(EM_DIAGRAM):   filename F2AS735C;
MPRINT(EM_DIAGRAM):   filename F1M88WJB;
MPRINT(EM_DIAGRAM):   filename F3ROYB87;
MPRINT(EM_DIAGRAM):   filename F0ZW9OXI;
MPRINT(EM_DIAGRAM):   filename F2S_8VQV;
MPRINT(EM_DIAGRAM):   filename F2AZ8V30;
MPRINT(EM_DIAGRAM):   filename F2EI89ES;
MPRINT(EM_DIAGRAM):   filename F234XO73;
MPRINT(EM_DIAGRAM):   filename F2SFE0NL;
MPRINT(EM_DIAGRAM):   filename F3HY_TGF;
MPRINT(EM_DIAGRAM):   filename F3E6I3C9;
MPRINT(EM_DIAGRAM):   filename F0UTIW7C;
MPRINT(EM_DIAGRAM):   filename F2_HSW89;
MPRINT(EM_DIAGRAM):   filename F150ABUH;
MPRINT(EM_DIAGRAM):   filename F2RGE59S;
MPRINT(EM_DIAGRAM):   filename F0ZKZ_1G;
MPRINT(EM_DIAGRAM):   filename F2WX5CRS;
MPRINT(EM_DIAGRAM):   filename F036U77M;
MPRINT(EM_DIAGRAM):   filename F1GZOIN0;
MPRINT(EM_DIAGRAM):   filename F0VMRRKJ;
MPRINT(EM_DIAGRAM):   filename F0M6DT3M;
MPRINT(EM_DIAGRAM):   filename F16_EUGW;
MPRINT(EM_DIAGRAM):   filename F3UJ7ML8;
MPRINT(EM_DIAGRAM):   filename F27KA54M;
MPRINT(EM_DIAGRAM):   filename F1E2O8M_;
MPRINT(EM_DIAGRAM):   filename F0I2XM6K;
MPRINT(EM_DIAGRAM):   filename F3PPDW74;
MPRINT(EM_DIAGRAM):   filename F0UJ85Z2;
MPRINT(EM_DIAGRAM):   filename F3FPOBS2;
MPRINT(EM_DIAGRAM):   filename F3U2T_LV;
MPRINT(EM_DIAGRAM):   filename F1A_8KUR;
MPRINT(EM_DIAGRAM):   filename F18ADSMF;
MPRINT(EM_DIAGRAM):   filename F2LDL6QV;
MPRINT(EM_DIAGRAM):   filename F3NNTDCB;
MPRINT(EM_DIAGRAM):   filename F1I3SBRX;
MPRINT(EM_DIAGRAM):   filename F0Q694LH;
MPRINT(EM_DIAGRAM):   filename F2VLXZYW;
MPRINT(EM_DIAGRAM):   filename F17JM6SR;
MPRINT(EM_DIAGRAM):   filename F1TULZHW;
MPRINT(EM_DIAGRAM):   filename F2VRAD8S;
MPRINT(EM_DIAGRAM):   filename F13FQZE6;
MPRINT(EM_DIAGRAM):   filename F0430TAA;
MPRINT(EM_DIAGRAM):   filename F2_N1ANW;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
1 
137173     proc printto;
MPRINT(EM_DIAGRAM):    proc printto;
137174     run;
MPRINT(EM_DIAGRAM):   run;

