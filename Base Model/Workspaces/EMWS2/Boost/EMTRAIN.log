MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:19:02" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 09, 2019
Time:                16:19:02
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3BYGNOD "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3BYGNOD new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:19:02" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:19:02" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
85595      proc freq data=EMWS2.Boost_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.Boost_VariableSet noprint;
85596      table ROLE*LEVEL/out=WORK.BoostMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.BoostMETA;
85597      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS2.BOOST_VARIABLESET.
NOTE: The data set WORK.BOOSTMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

85598      proc print data=WORK.BoostMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.BoostMETA label noobs;
85599      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
85600      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
85601      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
85602      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
85603      run;

NOTE: There were 4 observations read from the data set WORK.BOOSTMETA.
NOTE: The PROCEDURE PRINT printed page 25.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

85604      title10;
MPRINT(EM_DIAGRAM):   title10;
85605      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "Cases_in_1000s"." 
85606      proc print data = EMWS2.Ids2_Cases_in_1000s_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS2.Ids2_Cases_in_1000s_DM noobs label;
85607      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
85608      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
85609      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
85610      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
85611      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
85612      run;

NOTE: There were 3 observations read from the data set EMWS2.IDS2_CASES_IN_1000S_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 26.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

85613      title10;
MPRINT(EM_DIAGRAM):   title10;
85614      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Base Model 2';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Boost: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Cases_in_1000s(label="Cases_in_1000s");
MPRINT(EM_DECDATA):   length Cases_in_1000s 8 ;
MPRINT(EM_DECDATA):   Cases_in_1000s=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Cases_in_1000s=801;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Cases_in_1000s=400.5;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Cases_in_1000s";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS2.Ids2_Cases_in_1000s_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS2.Ids2_Cases_in_1000s_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Cases_in_1000s";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS2.Ids2_Cases_in_1000s_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS2.Ids2_Cases_in_1000s_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
86059      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
86060      * Boost: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Boost: Generation of macros and macro variables;
86061      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
86062      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

86063      %let EMEXCEPTIONSTRING=;
86064      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
86065      * TRAIN: Boost;
MPRINT(EM_DIAGRAM):   * TRAIN: Boost;
86066      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
86067      %let EM_ACTION = TRAIN;
86068      %let syscc = 0;
86069      %macro main;
86070      
86071        filename temp catalog 'sashelp.emmodl.boost_macros.source';
86072        %include temp;
86073        filename temp;
86074      
86075        %setProperties;
86076      
86077        %if %upcase(&EM_ACTION) = CREATE %then %do;
86078          filename temp catalog 'sashelp.emmodl.boost_create.source';
86079          %include temp;
86080          filename temp;
86081      
86082          %create;
86083        %end;
86084      
86085         %else
86086         %if %upcase(&EM_ACTION) = TRAIN %then %do;
86087      
86088             filename temp catalog 'sashelp.emmodl.boost_train.source';
86089             %include temp;
86090             filename temp;
86091             %train;
86092         %end;
86093      
86094        %else
86095        %if %upcase(&EM_ACTION) = SCORE %then %do;
86096          filename temp catalog 'sashelp.emmodl.boost_score.source';
86097          %include temp;
86098          filename temp;
86099      
86100          %score;
86101      
86102        %end;
86103      
86104        %else
86105        %if %upcase(&EM_ACTION) = REPORT %then %do;
86106      
86107             filename temp catalog 'sashelp.emmodl.boost_report.source';
86108             %include temp;
86109             filename temp;
86110      
86111             %report;
86112         %end;
86113      
86114         %doendm:
86115      %mend main;
86116      
86117      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
86118     +
86119     +%macro SetProperties;
86120     +
86121     +     /* boost options */
86122     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
86123     +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
86124     +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
86125     +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
86126     +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
86127     +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
86128     +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
86129     +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
86130     +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
86131     +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
86132     +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
86133     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
86134     +
86135     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
86136     +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
86137     +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
86138     +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
86139     +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
86140     +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
86141     +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
86142     +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
86143     +
86144     +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
86145     +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
86146     +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
86147     +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
86148     +
86149     +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
86150     +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
86151     +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
86152     +
86153     +%mend SetProperties;
86154     +
86155     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
86157     +%macro train;
86159     +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
86160     +   %include temp;
86161     +   filename temp;
86163     +   %if &EM_IMPORT_DATA eq %then %do;
86164     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
86165     +       %put &em_codebar;
86166     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
86167     +       %put &errormsg;
86168     +       %put &em_codebar;
86169     +       %goto doendm;
86170     +   %end;
86171     +   %else
86172     +       %let EMEXCEPTIONSTRING =;
86174     +   %if  &EM_NUM_TARGET ne 1 %then %do;
86175     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
86176     +        %put &em_codebar;
86177     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
86178     +        %put &errormsg;
86179     +        %put &em_codebar;
86180     +        %goto doendm;
86181     +   %end;
86183     +   %let target_level = %EM_TARGET_LEVEL;
86184     +   %let target_var = %EM_TARGET;
86186     +   %if ("&target_Level" ne "INTERVAL") %then %do;
86187     +       %em_boost_makeDMDB(indata=&EM_IMPORT_DATA, target=&target_Var,
86188     +                             nLevel=_nTargetLevel);
86189     +   %end;
86191     +   /* check actual num of target levels */
86192     +   %if (&target_Level eq BINARY) %then %do;
86193     +      %if &_nTargetLevel  > 2 %then %do;
86194     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
86195     +        %put &em_codebar;
86196     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
86197     +        %put &errormsg;
86198     +        %put &em_codebar;
86199     +        %goto doendm;
86200     +      %end;
86201     +   %end;
86203     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
86204     +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
86205     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
86206     +        %put &em_codebar;
86207     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
86208     +        %put &errormsg;
86209     +        %put &em_codebar;
86210     +        %goto doendm;
86211     +   %end;
86213     +   /* Initialize property macro variables */
86214     +   %SetProperties;
86216     +   /* data sets */
86217     +   %EM_GETNAME(key=MODEL, type=DATA);
86218     +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
86219     +   %EM_GETNAME(key=SUBFIT, type=DATA);
86220     +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
86222     +   /* files
86223     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
86225     +   /* retrieve target information */
86226     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
86228     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
86229     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
86230     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
86231     +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
86232     +   %do %while(^ %sysfunc(fetch(&dsid)));
86233     +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
86234     +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
86235     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
86236     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
86237     +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
86238     +   %end;
86239     +   %let dsid = %sysfunc(close(&dsid));
86241     +   /* if target level is ORDINAL, throw run time exception -- proc boost does not support ordinal target */
86242     +   %if &Target_Level eq ORDINAL %then %do;
86243     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
86244     +        %put &em_codebar;
86245     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_invalidordinaltarget_note, NOQUOTE));
86246     +        %put &errormsg;
86247     +        %put &em_codebar;
86248     +        %goto doendm;
86249     +   %end;
86251     +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be thrown */
86252     +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq . )) %then %do;
86253     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
86254     +        %put &em_codebar;
86255     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note, NOQUOTE));
86256     +        %put &errormsg;
86257     +        %put &em_codebar;
86258     +        %goto doendm;
86259     +   %end;
86261     +   %runBoostProcedure;
86264     +   %doendm:
86265     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
86266     +%Macro em_boost_makeDMDB(indata=, target=,  nLevel= );
86267     +  %global &nLevel;
86269     +  %let targetLevel=;
86270     +  data _null_;
86271     +     length orderString $64;
86272     +     set &em_data_variableset end=eof;
86273     +     where NAME="&target";
86274     +     select(order);
86275     +            when('')        order ='DESC';
86276     +            when('FMTASC')  order='ASCFMT';
86277     +            when('FMTDESC') order='DESFMT';
86278     +            otherwise;
86279     +     end;
86280     +     if eof then do;
86281     +        call symput("targetOrder", trim(order));
86282     +        call symput("targetLevel", trim(Level));
86283     +     end;
86284     +  run;
86286     +  %if "&targetLevel" ne "INTERVAL" %then %do;
86287     +  proc dmdb batch data=&indata dmdbCat=_BoostDMDB
86288     +    classout=_tmp_dmdbout;
86289     +    class &target(&targetOrder);
86290     +    target &target;
86291     +  run;
86292     +  data _tmp_dmdbout;
86293     +    set _tmp_dmdbout;
86294     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
86295     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
86296     +  run;
86297     +  data _null_;
86298     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
86299     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
86300     +    %let dsid = %sysfunc(close(&dsid));
86301     +     call symput("&nLevel", put(&_obs, Best12.));
86302     +  run;
86304     +  proc datasets lib=work nolist;
86305     +     delete _tmp_dmdbout;
86306     +  run;
86307     +  quit;
86308     +  %end;
86310     +%Mend em_boost_makeDMDB;
86312     +%macro runBoostProcedure;
86314     +  proc sql;
86315     +    reset noprint;
86316     +    select count(*) into :nobs from &EM_IMPORT_DATA;
86317     +  quit;
86319     +  %let arborkluge= "work._BoostDMDB";
86320     +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
86322     +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
86323     +      iterations = &EM_PROPERTY_ITERATIONS
86324     +    %end;
86326     +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
86327     +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
86328     +       trainproportion = &tprop
86329     +    %end;
86331     +    %if &EM_PROPERTY_SEED ne %then %do;
86332     +       seed = &EM_PROPERTY_SEED
86333     +    %end;
86335     +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
86336     +       shrinkage = &EM_PROPERTY_SHRINKAGE
86337     +    %end;
86339     +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
86340     +      leaffraction = &EM_PROPERTY_LEAFFRACTION
86341     +    %end;
86343     +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
86344     +    %if &splitsize ge &nobs %then %do;
86345     +       %let splitsize= .;
86346     +    %end;
86347     +    %if &splitsize ne . %then %do;
86348     +      splitsize = &splitsize
86349     +    %end;
86351     +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
86352     +      mincatsize = &EM_PROPERTY_MINCATSIZE
86353     +    %end;
86355     +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
86356     +       maxbranch = &EM_PROPERTY_MAXBRANCH
86357     +    %end;
86359     +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
86360     +       maxdepth = &EM_PROPERTY_MAXDEPTH
86361     +    %end;
86363     +    %let nsurrs = ;
86364     +    %if &EM_PROPERTY_NSURRS ne %then %do;
86365     +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
86366     +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
86367     +      maxsurrs = &nsurrs
86368     +    %end;
86370     +    %if &EM_PROPERTY_MISSING ne %then %do;
86371     +      Missing = &EM_PROPERTY_MISSING
86372     +    %end;
86374     +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
86375     +      reusevar = &EM_PROPERTY_REUSEVAR
86376     +    %end;
86377     +/*
86378     +    %if &EM_PROPERTY_PRECISION ne %then %do;
86379     +      intervaldecimals=&EM_PROPERTY_PRECISION
86380     +    %end;
86381     +*/
86382     +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
86383     +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
86384     +    %end;
86386     +    %if &Target_Event ne %then %do;
86387     +      Event="&Target_Event"
86388     +    %end;
86390     +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
86391     +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
86392     +    %end;
86394     +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
86395     +      IntervalBins = &EM_PROPERTY_INTERVALBINS
86396     +    %end;
86398     +    %if &TARGET_LEVEL eq INTERVAL %then %do;
86399     +      %if &EM_PROPERTY_HUBER ne %then %do;
86400     +        Huber=&EM_PROPERTY_HUBER
86401     +      %end;
86402     +    %end;
86403     +    ;
86405     +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
86406     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
86407     +    %end;
86409     +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED ne  %then %do;
86410     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
86411     +    %end;
86413     +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
86414     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
86415     +    %end;
86417     +    %if %EM_FREQ ne %then %do;
86418     +       freq %EM_FREQ;
86419     +    %end;
86421     +    target %EM_TARGET / level = &TARGET_LEVEL;
86423     +    &EM_DEC_STATEMENT;
86425     +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
86426     +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
86427     +    %end;
86428     +    %if &EM_PROPERTY_NODESIZE ne %then %do;
86429     +       nodesize = &EM_PROPERTY_NODESIZE
86430     +    %end;
86431     +    ;
86432     +    save model=&EM_USER_MODEL;
86433     +  run;
86434     +  quit;
86435     +  %em_checkerror();
86437     +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
WARNING: Argument 2 to function GETVARC referenced by the %SYSFUNC or %QSYSFUNC macro function is out of range.
MPRINT(RUNBOOSTPROCEDURE):   proc sql;
MPRINT(RUNBOOSTPROCEDURE):   reset noprint;
MPRINT(RUNBOOSTPROCEDURE):   select count(*) into :nobs from EMWS2.Part_TRAIN;
MPRINT(RUNBOOSTPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(RUNBOOSTPROCEDURE):   proc arbor proc=treeboost data=EMWS2.Part_TRAIN iterations = 50 trainproportion = 0.6 seed = 12345 shrinkage = 0.1 leaffraction = 0.1 mincatsize = 5 maxbranch = 2 maxdepth = 10 maxsurrs = 2 Missing = USEINSEARCH reusevar = 1 
Exhaustive = 5000 CategoricalBins = 30 IntervalBins = 100 Huber=NO ;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   Population_in_thousands
MPRINT(RUNBOOSTPROCEDURE):  / level = interval;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Age_group Disease Gender
MPRINT(RUNBOOSTPROCEDURE):   / level = nominal;
MPRINT(RUNBOOSTPROCEDURE):   target
MPRINT(EM_TARGET):   Cases_in_1000s
MPRINT(RUNBOOSTPROCEDURE):   / level = INTERVAL;
MPRINT(RUNBOOSTPROCEDURE):   ;
MPRINT(RUNBOOSTPROCEDURE):   performance workdatalocation = DISK nodesize = 20000 ;
MPRINT(RUNBOOSTPROCEDURE):   save model=EMWS2.Boost_MODEL;
NOTE: 1625224 kilobytes of physical memory.
NOTE: Will use 743 out of 750 training cases.
NOTE: Using memory pool with 67685376 bytes.
NOTE: Passed training data 577 times.
NOTE: Current TREEBOOST model contains 50 trees.
NOTE: Training used 66208 bytes of work memory.
NOTE: The data set EMWS2.BOOST_MODEL has 10700 observations and 4 variables.
MPRINT(RUNBOOSTPROCEDURE):   run;

MPRINT(RUNBOOSTPROCEDURE):   quit;

NOTE: There were 750 observations read from the data set EMWS2.PART_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.49 seconds
      cpu time            0.45 seconds
      

MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

86440      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(RUNBOOSTPROCEDURE):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Boost;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
86441      *------------------------------------------------------------*;
86442      * End TRAIN: Boost;
86443      *------------------------------------------------------------*;
86444      

86445      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
86446      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
86447      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
86448      ;
MPRINT(EM_DIAGRAM):   ;
86449      ;
MPRINT(EM_DIAGRAM):   ;
86450      ;
MPRINT(EM_DIAGRAM):   ;
86451      ;
MPRINT(EM_DIAGRAM):   ;
86452      quit;
MPRINT(EM_DIAGRAM):   quit;
86453      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
86454      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
86455      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
86456      /*; *"; *'; */
86457      ;
MPRINT(EM_DIAGRAM):   ;
86458      run;
MPRINT(EM_DIAGRAM):   run;
86459      quit;
MPRINT(EM_DIAGRAM):   quit;
86460      /* Reset EM Options */
86461      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
86462      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
86463      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
