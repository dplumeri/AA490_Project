MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 21, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:19:12" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 21, 2019
Time:                16:19:12
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3ONFNZ7 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3ONFNZ7 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 21, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:19:12" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 21, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:19:12" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
71809      proc freq data=EMWS2.Boost_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.Boost_VariableSet noprint;
71810      table ROLE*LEVEL/out=WORK.BoostMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.BoostMETA;
71811      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS2.BOOST_VARIABLESET.
NOTE: The data set WORK.BOOSTMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

71812      proc print data=WORK.BoostMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.BoostMETA label noobs;
71813      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
71814      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
71815      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
71816      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
71817      run;

NOTE: There were 5 observations read from the data set WORK.BOOSTMETA.
NOTE: The PROCEDURE PRINT printed page 23.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

71818      title10;
MPRINT(EM_DIAGRAM):   title10;
71819      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "Sum_Labor_Force_Pop"." 
71820      proc print data = EMWS2.Ids_Sum_Labor_Force__DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS2.Ids_Sum_Labor_Force__DM noobs label;
71821      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
71822      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
71823      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
71824      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
71825      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
71826      run;

NOTE: There were 3 observations read from the data set EMWS2.IDS_SUM_LABOR_FORCE__DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 24.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

71827      title10;
MPRINT(EM_DIAGRAM):   title10;
71828      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Base Model 2';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Boost: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Sum_Labor_Force_Pop;
MPRINT(EM_DECDATA):   length Sum_Labor_Force_Pop 8 ;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=225000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=25077000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=12651000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS2.Ids_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS2.Ids_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS2.Ids_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS2.Ids_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
72271      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
72272      * Boost: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Boost: Generation of macros and macro variables;
72273      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
72274      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

72275      %let EMEXCEPTIONSTRING=;
72276      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
72277      * TRAIN: Boost;
MPRINT(EM_DIAGRAM):   * TRAIN: Boost;
72278      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
72279      %let EM_ACTION = TRAIN;
72280      %let syscc = 0;
72281      %macro main;
72282      
72283        filename temp catalog 'sashelp.emmodl.boost_macros.source';
72284        %include temp;
72285        filename temp;
72286      
72287        %setProperties;
72288      
72289        %if %upcase(&EM_ACTION) = CREATE %then %do;
72290          filename temp catalog 'sashelp.emmodl.boost_create.source';
72291          %include temp;
72292          filename temp;
72293      
72294          %create;
72295        %end;
72296      
72297         %else
72298         %if %upcase(&EM_ACTION) = TRAIN %then %do;
72299      
72300             filename temp catalog 'sashelp.emmodl.boost_train.source';
72301             %include temp;
72302             filename temp;
72303             %train;
72304         %end;
72305      
72306        %else
72307        %if %upcase(&EM_ACTION) = SCORE %then %do;
72308          filename temp catalog 'sashelp.emmodl.boost_score.source';
72309          %include temp;
72310          filename temp;
72311      
72312          %score;
72313      
72314        %end;
72315      
72316        %else
72317        %if %upcase(&EM_ACTION) = REPORT %then %do;
72318      
72319             filename temp catalog 'sashelp.emmodl.boost_report.source';
72320             %include temp;
72321             filename temp;
72322      
72323             %report;
72324         %end;
72325      
72326         %doendm:
72327      %mend main;
72328      
72329      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
72330     +
72331     +%macro SetProperties;
72332     +
72333     +     /* boost options */
72334     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
72335     +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
72336     +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
72337     +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
72338     +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
72339     +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
72340     +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
72341     +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
72342     +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
72343     +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
72344     +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
72345     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
72346     +
72347     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
72348     +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
72349     +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
72350     +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
72351     +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
72352     +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
72353     +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
72354     +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
72355     +
72356     +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
72357     +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
72358     +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
72359     +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
72360     +
72361     +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
72362     +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
72363     +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
72364     +
72365     +%mend SetProperties;
72366     +
72367     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
72369     +%macro train;
72371     +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
72372     +   %include temp;
72373     +   filename temp;
72375     +   %if &EM_IMPORT_DATA eq %then %do;
72376     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
72377     +       %put &em_codebar;
72378     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
72379     +       %put &errormsg;
72380     +       %put &em_codebar;
72381     +       %goto doendm;
72382     +   %end;
72383     +   %else
72384     +       %let EMEXCEPTIONSTRING =;
72386     +   %if  &EM_NUM_TARGET ne 1 %then %do;
72387     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
72388     +        %put &em_codebar;
72389     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
72390     +        %put &errormsg;
72391     +        %put &em_codebar;
72392     +        %goto doendm;
72393     +   %end;
72395     +   %let target_level = %EM_TARGET_LEVEL;
72396     +   %let target_var = %EM_TARGET;
72398     +   %if ("&target_Level" ne "INTERVAL") %then %do;
72399     +       %em_boost_makeDMDB(indata=&EM_IMPORT_DATA, target=&target_Var,
72400     +                             nLevel=_nTargetLevel);
72401     +   %end;
72403     +   /* check actual num of target levels */
72404     +   %if (&target_Level eq BINARY) %then %do;
72405     +      %if &_nTargetLevel  > 2 %then %do;
72406     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
72407     +        %put &em_codebar;
72408     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
72409     +        %put &errormsg;
72410     +        %put &em_codebar;
72411     +        %goto doendm;
72412     +      %end;
72413     +   %end;
72415     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
72416     +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
72417     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
72418     +        %put &em_codebar;
72419     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
72420     +        %put &errormsg;
72421     +        %put &em_codebar;
72422     +        %goto doendm;
72423     +   %end;
72425     +   /* Initialize property macro variables */
72426     +   %SetProperties;
72428     +   /* data sets */
72429     +   %EM_GETNAME(key=MODEL, type=DATA);
72430     +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
72431     +   %EM_GETNAME(key=SUBFIT, type=DATA);
72432     +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
72434     +   /* files
72435     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
72437     +   /* retrieve target information */
72438     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
72440     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
72441     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
72442     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
72443     +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
72444     +   %do %while(^ %sysfunc(fetch(&dsid)));
72445     +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
72446     +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
72447     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
72448     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
72449     +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
72450     +   %end;
72451     +   %let dsid = %sysfunc(close(&dsid));
72453     +   /* if target level is ORDINAL, throw run time exception -- proc boost does not support ordinal target */
72454     +   %if &Target_Level eq ORDINAL %then %do;
72455     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
72456     +        %put &em_codebar;
72457     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_invalidordinaltarget_note, NOQUOTE));
72458     +        %put &errormsg;
72459     +        %put &em_codebar;
72460     +        %goto doendm;
72461     +   %end;
72463     +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be thrown */
72464     +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq . )) %then %do;
72465     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
72466     +        %put &em_codebar;
72467     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note, NOQUOTE));
72468     +        %put &errormsg;
72469     +        %put &em_codebar;
72470     +        %goto doendm;
72471     +   %end;
72473     +   %runBoostProcedure;
72476     +   %doendm:
72477     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
72478     +%Macro em_boost_makeDMDB(indata=, target=,  nLevel= );
72479     +  %global &nLevel;
72481     +  %let targetLevel=;
72482     +  data _null_;
72483     +     length orderString $64;
72484     +     set &em_data_variableset end=eof;
72485     +     where NAME="&target";
72486     +     select(order);
72487     +            when('')        order ='DESC';
72488     +            when('FMTASC')  order='ASCFMT';
72489     +            when('FMTDESC') order='DESFMT';
72490     +            otherwise;
72491     +     end;
72492     +     if eof then do;
72493     +        call symput("targetOrder", trim(order));
72494     +        call symput("targetLevel", trim(Level));
72495     +     end;
72496     +  run;
72498     +  %if "&targetLevel" ne "INTERVAL" %then %do;
72499     +  proc dmdb batch data=&indata dmdbCat=_BoostDMDB
72500     +    classout=_tmp_dmdbout;
72501     +    class &target(&targetOrder);
72502     +    target &target;
72503     +  run;
72504     +  data _tmp_dmdbout;
72505     +    set _tmp_dmdbout;
72506     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
72507     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
72508     +  run;
72509     +  data _null_;
72510     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
72511     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
72512     +    %let dsid = %sysfunc(close(&dsid));
72513     +     call symput("&nLevel", put(&_obs, Best12.));
72514     +  run;
72516     +  proc datasets lib=work nolist;
72517     +     delete _tmp_dmdbout;
72518     +  run;
72519     +  quit;
72520     +  %end;
72522     +%Mend em_boost_makeDMDB;
72524     +%macro runBoostProcedure;
72526     +  proc sql;
72527     +    reset noprint;
72528     +    select count(*) into :nobs from &EM_IMPORT_DATA;
72529     +  quit;
72531     +  %let arborkluge= "work._BoostDMDB";
72532     +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
72534     +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
72535     +      iterations = &EM_PROPERTY_ITERATIONS
72536     +    %end;
72538     +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
72539     +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
72540     +       trainproportion = &tprop
72541     +    %end;
72543     +    %if &EM_PROPERTY_SEED ne %then %do;
72544     +       seed = &EM_PROPERTY_SEED
72545     +    %end;
72547     +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
72548     +       shrinkage = &EM_PROPERTY_SHRINKAGE
72549     +    %end;
72551     +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
72552     +      leaffraction = &EM_PROPERTY_LEAFFRACTION
72553     +    %end;
72555     +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
72556     +    %if &splitsize ge &nobs %then %do;
72557     +       %let splitsize= .;
72558     +    %end;
72559     +    %if &splitsize ne . %then %do;
72560     +      splitsize = &splitsize
72561     +    %end;
72563     +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
72564     +      mincatsize = &EM_PROPERTY_MINCATSIZE
72565     +    %end;
72567     +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
72568     +       maxbranch = &EM_PROPERTY_MAXBRANCH
72569     +    %end;
72571     +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
72572     +       maxdepth = &EM_PROPERTY_MAXDEPTH
72573     +    %end;
72575     +    %let nsurrs = ;
72576     +    %if &EM_PROPERTY_NSURRS ne %then %do;
72577     +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
72578     +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
72579     +      maxsurrs = &nsurrs
72580     +    %end;
72582     +    %if &EM_PROPERTY_MISSING ne %then %do;
72583     +      Missing = &EM_PROPERTY_MISSING
72584     +    %end;
72586     +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
72587     +      reusevar = &EM_PROPERTY_REUSEVAR
72588     +    %end;
72589     +/*
72590     +    %if &EM_PROPERTY_PRECISION ne %then %do;
72591     +      intervaldecimals=&EM_PROPERTY_PRECISION
72592     +    %end;
72593     +*/
72594     +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
72595     +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
72596     +    %end;
72598     +    %if &Target_Event ne %then %do;
72599     +      Event="&Target_Event"
72600     +    %end;
72602     +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
72603     +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
72604     +    %end;
72606     +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
72607     +      IntervalBins = &EM_PROPERTY_INTERVALBINS
72608     +    %end;
72610     +    %if &TARGET_LEVEL eq INTERVAL %then %do;
72611     +      %if &EM_PROPERTY_HUBER ne %then %do;
72612     +        Huber=&EM_PROPERTY_HUBER
72613     +      %end;
72614     +    %end;
72615     +    ;
72617     +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
72618     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
72619     +    %end;
72621     +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED ne  %then %do;
72622     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
72623     +    %end;
72625     +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
72626     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
72627     +    %end;
72629     +    %if %EM_FREQ ne %then %do;
72630     +       freq %EM_FREQ;
72631     +    %end;
72633     +    target %EM_TARGET / level = &TARGET_LEVEL;
72635     +    &EM_DEC_STATEMENT;
72637     +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
72638     +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
72639     +    %end;
72640     +    %if &EM_PROPERTY_NODESIZE ne %then %do;
72641     +       nodesize = &EM_PROPERTY_NODESIZE
72642     +    %end;
72643     +    ;
72644     +    save model=&EM_USER_MODEL;
72645     +  run;
72646     +  quit;
72647     +  %em_checkerror();
72649     +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
WARNING: Argument 2 to function GETVARC referenced by the %SYSFUNC or %QSYSFUNC macro function is out of range.
MPRINT(RUNBOOSTPROCEDURE):   proc sql;
MPRINT(RUNBOOSTPROCEDURE):   reset noprint;
MPRINT(RUNBOOSTPROCEDURE):   select count(*) into :nobs from EMWS2.Part_TRAIN;
MPRINT(RUNBOOSTPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(RUNBOOSTPROCEDURE):   proc arbor proc=treeboost data=EMWS2.Part_TRAIN iterations = 50 trainproportion = 0.6 seed = 12345 shrinkage = 0.1 leaffraction = 0.1 mincatsize = 5 maxbranch = 2 maxdepth = 10 maxsurrs = 1 Missing = USEINSEARCH reusevar = 1 
Exhaustive = 5000 CategoricalBins = 30 IntervalBins = 100 Huber=NO ;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Age_group Date
MPRINT(RUNBOOSTPROCEDURE):   / level = nominal;
MPRINT(RUNBOOSTPROCEDURE):   target
MPRINT(EM_TARGET):   Sum_Labor_Force_Pop
MPRINT(RUNBOOSTPROCEDURE):   / level = INTERVAL;
MPRINT(RUNBOOSTPROCEDURE):   ;
MPRINT(RUNBOOSTPROCEDURE):   performance workdatalocation = DISK nodesize = 20000 ;
MPRINT(RUNBOOSTPROCEDURE):   save model=EMWS2.Boost_MODEL;
NOTE: 1628296 kilobytes of physical memory.
NOTE: Will use 336 out of 336 training cases.
NOTE: Using memory pool with 45349888 bytes.
NOTE: Passed training data 475 times.
NOTE: Current TREEBOOST model contains 50 trees.
NOTE: Training used 22000 bytes of work memory.
NOTE: The data set EMWS2.BOOST_MODEL has 9999 observations and 4 variables.
MPRINT(RUNBOOSTPROCEDURE):   run;

MPRINT(RUNBOOSTPROCEDURE):   quit;

NOTE: There were 336 observations read from the data set EMWS2.PART_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
      

MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

72652      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(RUNBOOSTPROCEDURE):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Boost;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
72653      *------------------------------------------------------------*;
72654      * End TRAIN: Boost;
72655      *------------------------------------------------------------*;
72656      

72657      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
72658      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
72659      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
72660      ;
MPRINT(EM_DIAGRAM):   ;
72661      ;
MPRINT(EM_DIAGRAM):   ;
72662      ;
MPRINT(EM_DIAGRAM):   ;
72663      ;
MPRINT(EM_DIAGRAM):   ;
72664      quit;
MPRINT(EM_DIAGRAM):   quit;
72665      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
72666      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
72667      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
72668      /*; *"; *'; */
72669      ;
MPRINT(EM_DIAGRAM):   ;
72670      run;
MPRINT(EM_DIAGRAM):   run;
72671      quit;
MPRINT(EM_DIAGRAM):   quit;
72672      /* Reset EM Options */
72673      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
72674      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
72675      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
