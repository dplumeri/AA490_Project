MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 04, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:44:59" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 04, 2019
Time:                13:44:59
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1ER1U70 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1ER1U70 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 04, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:44:59" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 04, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:44:59" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\Boost\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
82608      proc freq data=EMWS2.Boost_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.Boost_VariableSet noprint;
82609      table ROLE*LEVEL/out=WORK.BoostMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.BoostMETA;
82610      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set EMWS2.BOOST_VARIABLESET.
NOTE: The data set WORK.BOOSTMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

82611      proc print data=WORK.BoostMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.BoostMETA label noobs;
82612      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
82613      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
82614      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
82615      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
82616      run;

NOTE: There were 4 observations read from the data set WORK.BOOSTMETA.
NOTE: The PROCEDURE PRINT printed page 25.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

82617      title10;
MPRINT(EM_DIAGRAM):   title10;
82618      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "Cases_in_1000s"." 
82619      proc print data = EMWS2.Ids_Cases_in_1000s_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS2.Ids_Cases_in_1000s_DM noobs label;
82620      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
82621      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
82622      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
82623      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
82624      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
82625      run;

NOTE: There were 3 observations read from the data set EMWS2.IDS_CASES_IN_1000S_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 26.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

82626      title10;
MPRINT(EM_DIAGRAM):   title10;
82627      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Base Model 2';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Boost: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Cases_in_1000s(label="Cases_in_1000s");
MPRINT(EM_DECDATA):   length Cases_in_1000s 8 ;
MPRINT(EM_DECDATA):   Cases_in_1000s=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Cases_in_1000s=229;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Cases_in_1000s=114.5;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Cases_in_1000s(type=PROFIT label= Cases_in_1000s);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Cases_in_1000s";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS2.Ids_Cases_in_1000s_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS2.Ids_Cases_in_1000s_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Cases_in_1000s";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS2.Ids_Cases_in_1000s_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS2.Ids_Cases_in_1000s_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
83070      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
83071      * Boost: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Boost: Generation of macros and macro variables;
83072      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
83073      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

83074      %let EMEXCEPTIONSTRING=;
83075      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
83076      * TRAIN: Boost;
MPRINT(EM_DIAGRAM):   * TRAIN: Boost;
83077      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
83078      %let EM_ACTION = TRAIN;
83079      %let syscc = 0;
83080      %macro main;
83081      
83082        filename temp catalog 'sashelp.emmodl.boost_macros.source';
83083        %include temp;
83084        filename temp;
83085      
83086        %setProperties;
83087      
83088        %if %upcase(&EM_ACTION) = CREATE %then %do;
83089          filename temp catalog 'sashelp.emmodl.boost_create.source';
83090          %include temp;
83091          filename temp;
83092      
83093          %create;
83094        %end;
83095      
83096         %else
83097         %if %upcase(&EM_ACTION) = TRAIN %then %do;
83098      
83099             filename temp catalog 'sashelp.emmodl.boost_train.source';
83100             %include temp;
83101             filename temp;
83102             %train;
83103         %end;
83104      
83105        %else
83106        %if %upcase(&EM_ACTION) = SCORE %then %do;
83107          filename temp catalog 'sashelp.emmodl.boost_score.source';
83108          %include temp;
83109          filename temp;
83110      
83111          %score;
83112      
83113        %end;
83114      
83115        %else
83116        %if %upcase(&EM_ACTION) = REPORT %then %do;
83117      
83118             filename temp catalog 'sashelp.emmodl.boost_report.source';
83119             %include temp;
83120             filename temp;
83121      
83122             %report;
83123         %end;
83124      
83125         %doendm:
83126      %mend main;
83127      
83128      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
83129     +
83130     +%macro SetProperties;
83131     +
83132     +     /* boost options */
83133     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
83134     +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
83135     +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
83136     +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
83137     +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
83138     +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
83139     +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
83140     +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
83141     +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
83142     +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
83143     +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
83144     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
83145     +
83146     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
83147     +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
83148     +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
83149     +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
83150     +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
83151     +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
83152     +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
83153     +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
83154     +
83155     +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
83156     +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
83157     +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
83158     +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
83159     +
83160     +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
83161     +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
83162     +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
83163     +
83164     +%mend SetProperties;
83165     +
83166     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
83168     +%macro train;
83170     +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
83171     +   %include temp;
83172     +   filename temp;
83174     +   %if &EM_IMPORT_DATA eq %then %do;
83175     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
83176     +       %put &em_codebar;
83177     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
83178     +       %put &errormsg;
83179     +       %put &em_codebar;
83180     +       %goto doendm;
83181     +   %end;
83182     +   %else
83183     +       %let EMEXCEPTIONSTRING =;
83185     +   %if  &EM_NUM_TARGET ne 1 %then %do;
83186     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
83187     +        %put &em_codebar;
83188     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
83189     +        %put &errormsg;
83190     +        %put &em_codebar;
83191     +        %goto doendm;
83192     +   %end;
83194     +   %let target_level = %EM_TARGET_LEVEL;
83195     +   %let target_var = %EM_TARGET;
83197     +   %if ("&target_Level" ne "INTERVAL") %then %do;
83198     +       %em_boost_makeDMDB(indata=&EM_IMPORT_DATA, target=&target_Var,
83199     +                             nLevel=_nTargetLevel);
83200     +   %end;
83202     +   /* check actual num of target levels */
83203     +   %if (&target_Level eq BINARY) %then %do;
83204     +      %if &_nTargetLevel  > 2 %then %do;
83205     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
83206     +        %put &em_codebar;
83207     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
83208     +        %put &errormsg;
83209     +        %put &em_codebar;
83210     +        %goto doendm;
83211     +      %end;
83212     +   %end;
83214     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
83215     +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
83216     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
83217     +        %put &em_codebar;
83218     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
83219     +        %put &errormsg;
83220     +        %put &em_codebar;
83221     +        %goto doendm;
83222     +   %end;
83224     +   /* Initialize property macro variables */
83225     +   %SetProperties;
83227     +   /* data sets */
83228     +   %EM_GETNAME(key=MODEL, type=DATA);
83229     +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
83230     +   %EM_GETNAME(key=SUBFIT, type=DATA);
83231     +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
83233     +   /* files
83234     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
83236     +   /* retrieve target information */
83237     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
83239     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
83240     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
83241     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
83242     +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
83243     +   %do %while(^ %sysfunc(fetch(&dsid)));
83244     +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
83245     +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
83246     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
83247     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
83248     +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
83249     +   %end;
83250     +   %let dsid = %sysfunc(close(&dsid));
83252     +   /* if target level is ORDINAL, throw run time exception -- proc boost does not support ordinal target */
83253     +   %if &Target_Level eq ORDINAL %then %do;
83254     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
83255     +        %put &em_codebar;
83256     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_invalidordinaltarget_note, NOQUOTE));
83257     +        %put &errormsg;
83258     +        %put &em_codebar;
83259     +        %goto doendm;
83260     +   %end;
83262     +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be thrown */
83263     +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq . )) %then %do;
83264     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
83265     +        %put &em_codebar;
83266     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note, NOQUOTE));
83267     +        %put &errormsg;
83268     +        %put &em_codebar;
83269     +        %goto doendm;
83270     +   %end;
83272     +   %runBoostProcedure;
83275     +   %doendm:
83276     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
83277     +%Macro em_boost_makeDMDB(indata=, target=,  nLevel= );
83278     +  %global &nLevel;
83280     +  %let targetLevel=;
83281     +  data _null_;
83282     +     length orderString $64;
83283     +     set &em_data_variableset end=eof;
83284     +     where NAME="&target";
83285     +     select(order);
83286     +            when('')        order ='DESC';
83287     +            when('FMTASC')  order='ASCFMT';
83288     +            when('FMTDESC') order='DESFMT';
83289     +            otherwise;
83290     +     end;
83291     +     if eof then do;
83292     +        call symput("targetOrder", trim(order));
83293     +        call symput("targetLevel", trim(Level));
83294     +     end;
83295     +  run;
83297     +  %if "&targetLevel" ne "INTERVAL" %then %do;
83298     +  proc dmdb batch data=&indata dmdbCat=_BoostDMDB
83299     +    classout=_tmp_dmdbout;
83300     +    class &target(&targetOrder);
83301     +    target &target;
83302     +  run;
83303     +  data _tmp_dmdbout;
83304     +    set _tmp_dmdbout;
83305     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
83306     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
83307     +  run;
83308     +  data _null_;
83309     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
83310     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
83311     +    %let dsid = %sysfunc(close(&dsid));
83312     +     call symput("&nLevel", put(&_obs, Best12.));
83313     +  run;
83315     +  proc datasets lib=work nolist;
83316     +     delete _tmp_dmdbout;
83317     +  run;
83318     +  quit;
83319     +  %end;
83321     +%Mend em_boost_makeDMDB;
83323     +%macro runBoostProcedure;
83325     +  proc sql;
83326     +    reset noprint;
83327     +    select count(*) into :nobs from &EM_IMPORT_DATA;
83328     +  quit;
83330     +  %let arborkluge= "work._BoostDMDB";
83331     +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
83333     +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
83334     +      iterations = &EM_PROPERTY_ITERATIONS
83335     +    %end;
83337     +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
83338     +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
83339     +       trainproportion = &tprop
83340     +    %end;
83342     +    %if &EM_PROPERTY_SEED ne %then %do;
83343     +       seed = &EM_PROPERTY_SEED
83344     +    %end;
83346     +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
83347     +       shrinkage = &EM_PROPERTY_SHRINKAGE
83348     +    %end;
83350     +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
83351     +      leaffraction = &EM_PROPERTY_LEAFFRACTION
83352     +    %end;
83354     +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
83355     +    %if &splitsize ge &nobs %then %do;
83356     +       %let splitsize= .;
83357     +    %end;
83358     +    %if &splitsize ne . %then %do;
83359     +      splitsize = &splitsize
83360     +    %end;
83362     +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
83363     +      mincatsize = &EM_PROPERTY_MINCATSIZE
83364     +    %end;
83366     +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
83367     +       maxbranch = &EM_PROPERTY_MAXBRANCH
83368     +    %end;
83370     +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
83371     +       maxdepth = &EM_PROPERTY_MAXDEPTH
83372     +    %end;
83374     +    %let nsurrs = ;
83375     +    %if &EM_PROPERTY_NSURRS ne %then %do;
83376     +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
83377     +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
83378     +      maxsurrs = &nsurrs
83379     +    %end;
83381     +    %if &EM_PROPERTY_MISSING ne %then %do;
83382     +      Missing = &EM_PROPERTY_MISSING
83383     +    %end;
83385     +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
83386     +      reusevar = &EM_PROPERTY_REUSEVAR
83387     +    %end;
83388     +/*
83389     +    %if &EM_PROPERTY_PRECISION ne %then %do;
83390     +      intervaldecimals=&EM_PROPERTY_PRECISION
83391     +    %end;
83392     +*/
83393     +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
83394     +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
83395     +    %end;
83397     +    %if &Target_Event ne %then %do;
83398     +      Event="&Target_Event"
83399     +    %end;
83401     +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
83402     +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
83403     +    %end;
83405     +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
83406     +      IntervalBins = &EM_PROPERTY_INTERVALBINS
83407     +    %end;
83409     +    %if &TARGET_LEVEL eq INTERVAL %then %do;
83410     +      %if &EM_PROPERTY_HUBER ne %then %do;
83411     +        Huber=&EM_PROPERTY_HUBER
83412     +      %end;
83413     +    %end;
83414     +    ;
83416     +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
83417     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
83418     +    %end;
83420     +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED ne  %then %do;
83421     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
83422     +    %end;
83424     +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
83425     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
83426     +    %end;
83428     +    %if %EM_FREQ ne %then %do;
83429     +       freq %EM_FREQ;
83430     +    %end;
83432     +    target %EM_TARGET / level = &TARGET_LEVEL;
83434     +    &EM_DEC_STATEMENT;
83436     +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
83437     +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
83438     +    %end;
83439     +    %if &EM_PROPERTY_NODESIZE ne %then %do;
83440     +       nodesize = &EM_PROPERTY_NODESIZE
83441     +    %end;
83442     +    ;
83443     +    save model=&EM_USER_MODEL;
83444     +  run;
83445     +  quit;
83446     +  %em_checkerror();
83448     +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
WARNING: Argument 2 to function GETVARC referenced by the %SYSFUNC or %QSYSFUNC macro function is out of range.
MPRINT(RUNBOOSTPROCEDURE):   proc sql;
MPRINT(RUNBOOSTPROCEDURE):   reset noprint;
MPRINT(RUNBOOSTPROCEDURE):   select count(*) into :nobs from EMWS2.Part_TRAIN;
MPRINT(RUNBOOSTPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(RUNBOOSTPROCEDURE):   proc arbor proc=treeboost data=EMWS2.Part_TRAIN iterations = 50 trainproportion = 0.6 seed = 12345 shrinkage = 0.1 leaffraction = 0.1 mincatsize = 5 maxbranch = 2 maxdepth = 10 maxsurrs = 2 Missing = USEINSEARCH reusevar = 1 
Exhaustive = 5000 CategoricalBins = 30 IntervalBins = 100 Huber=NO ;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Age_group Date Disease Gender
MPRINT(RUNBOOSTPROCEDURE):   / level = nominal;
MPRINT(RUNBOOSTPROCEDURE):   target
MPRINT(EM_TARGET):   Cases_in_1000s
MPRINT(RUNBOOSTPROCEDURE):   / level = INTERVAL;
MPRINT(RUNBOOSTPROCEDURE):   ;
MPRINT(RUNBOOSTPROCEDURE):   performance workdatalocation = DISK nodesize = 20000 ;
MPRINT(RUNBOOSTPROCEDURE):   save model=EMWS2.Boost_MODEL;
NOTE: 1626044 kilobytes of physical memory.
NOTE: Will use 372 out of 378 training cases.
NOTE: Using memory pool with 67685376 bytes.
NOTE: Passed training data 547 times.
NOTE: Current TREEBOOST model contains 50 trees.
NOTE: Training used 36584 bytes of work memory.
NOTE: The data set EMWS2.BOOST_MODEL has 10586 observations and 4 variables.
MPRINT(RUNBOOSTPROCEDURE):   run;

MPRINT(RUNBOOSTPROCEDURE):   quit;

NOTE: There were 378 observations read from the data set EMWS2.PART_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.30 seconds
      cpu time            0.28 seconds
      

MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

83451      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(RUNBOOSTPROCEDURE):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Boost;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
83452      *------------------------------------------------------------*;
83453      * End TRAIN: Boost;
83454      *------------------------------------------------------------*;
83455      

83456      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
83457      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
83458      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
83459      ;
MPRINT(EM_DIAGRAM):   ;
83460      ;
MPRINT(EM_DIAGRAM):   ;
83461      ;
MPRINT(EM_DIAGRAM):   ;
83462      ;
MPRINT(EM_DIAGRAM):   ;
83463      quit;
MPRINT(EM_DIAGRAM):   quit;
83464      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
83465      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
83466      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
83467      /*; *"; *'; */
83468      ;
MPRINT(EM_DIAGRAM):   ;
83469      run;
MPRINT(EM_DIAGRAM):   run;
83470      quit;
MPRINT(EM_DIAGRAM):   quit;
83471      /* Reset EM Options */
83472      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
83473      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
83474      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
