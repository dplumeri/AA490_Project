*************************************;
*** begin scoring code for regression;
*************************************;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;


drop _DM_BAD;
_DM_BAD=0;

*** Check Population_in_thousands for missing values ;
if missing( Population_in_thousands ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Generate dummy variables for Age_group ;
drop _0_0 _0_1 _0_2 ;
if missing( Age_group ) then do;
   _0_0 = .;
   _0_1 = .;
   _0_2 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm19 $ 19; drop _dm19 ;
   %DMNORMCP( Age_group , _dm19 )
   if _dm19 = '25 TO 44'  then do;
      _0_0 = 0;
      _0_1 = 1;
      _0_2 = 0;
   end;
   else if _dm19 = '65+'  then do;
      _0_0 = -1;
      _0_1 = -1;
      _0_2 = -1;
   end;
   else if _dm19 = '16 TO 24'  then do;
      _0_0 = 1;
      _0_1 = 0;
      _0_2 = 0;
   end;
   else if _dm19 = '45 TO 64'  then do;
      _0_0 = 0;
      _0_1 = 0;
      _0_2 = 1;
   end;
   else do;
      _0_0 = .;
      _0_1 = .;
      _0_2 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Date ;
drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
*** encoding is sparse, initialize to zero;
_1_0 = 0;
_1_1 = 0;
_1_2 = 0;
_1_3 = 0;
_1_4 = 0;
_1_5 = 0;
_1_6 = 0;
_1_7 = 0;
_1_8 = 0;
_1_9 = 0;
_1_10 = 0;
_1_11 = 0;
_1_12 = 0;
if missing( Date ) then do;
   _1_0 = .;
   _1_1 = .;
   _1_2 = .;
   _1_3 = .;
   _1_4 = .;
   _1_5 = .;
   _1_6 = .;
   _1_7 = .;
   _1_8 = .;
   _1_9 = .;
   _1_10 = .;
   _1_11 = .;
   _1_12 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm10 $ 10; drop _dm10 ;
   %DMNORMCP( Date , _dm10 )
   _dm_find = 0; drop _dm_find;
   if _dm10 <= '2006'  then do;
      if _dm10 <= '2003'  then do;
         if _dm10 <= '2001'  then do;
            if _dm10 = '2000'  then do;
               _1_0 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm10 = '2001'  then do;
                  _1_1 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm10 = '2002'  then do;
               _1_2 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm10 = '2003'  then do;
                  _1_3 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
      end;
      else do;
         if _dm10 <= '2005'  then do;
            if _dm10 = '2004'  then do;
               _1_4 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm10 = '2005'  then do;
                  _1_5 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm10 = '2006'  then do;
               _1_6 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm10 <= '2010'  then do;
         if _dm10 <= '2008'  then do;
            if _dm10 = '2007'  then do;
               _1_7 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm10 = '2008'  then do;
                  _1_8 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm10 = '2009'  then do;
               _1_9 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm10 = '2010'  then do;
                  _1_10 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
      end;
      else do;
         if _dm10 <= '2012'  then do;
            if _dm10 = '2011'  then do;
               _1_11 = 1;
               _dm_find = 1;
            end;
            else do;
               if _dm10 = '2012'  then do;
                  _1_12 = 1;
                  _dm_find = 1;
               end;
            end;
         end;
         else do;
            if _dm10 = '2013'  then do;
               _1_0 = -1;
               _1_1 = -1;
               _1_2 = -1;
               _1_3 = -1;
               _1_4 = -1;
               _1_5 = -1;
               _1_6 = -1;
               _1_7 = -1;
               _1_8 = -1;
               _1_9 = -1;
               _1_10 = -1;
               _1_11 = -1;
               _1_12 = -1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _1_0 = .;
      _1_1 = .;
      _1_2 = .;
      _1_3 = .;
      _1_4 = .;
      _1_5 = .;
      _1_6 = .;
      _1_7 = .;
      _1_8 = .;
      _1_9 = .;
      _1_10 = .;
      _1_11 = .;
      _1_12 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _LP0 =              6735625;
   goto REG2DR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0;
_LP0 = 0;

***  Effect: Age_group ;
_TEMP = 1;
_LP0 = _LP0 + (    -2764114.5611372) * _TEMP * _0_0;
_LP0 = _LP0 + (    5768711.41333865) * _TEMP * _0_1;
_LP0 = _LP0 + (    2379678.90163291) * _TEMP * _0_2;

***  Effect: Date ;
_TEMP = 1;
_LP0 = _LP0 + (   -144259.781641143) * _TEMP * _1_0;
_LP0 = _LP0 + (    399665.924091749) * _TEMP * _1_1;
_LP0 = _LP0 + (   -1505727.84273972) * _TEMP * _1_2;
_LP0 = _LP0 + (     316017.71323023) * _TEMP * _1_3;
_LP0 = _LP0 + (   -170069.983375704) * _TEMP * _1_4;
_LP0 = _LP0 + (   -628034.279507059) * _TEMP * _1_5;
_LP0 = _LP0 + (   -727974.892331428) * _TEMP * _1_6;
_LP0 = _LP0 + (    1359086.18741455) * _TEMP * _1_7;
_LP0 = _LP0 + (     1523785.4243861) * _TEMP * _1_8;
_LP0 = _LP0 + (   -729403.539714783) * _TEMP * _1_9;
_LP0 = _LP0 + (   -637953.514437682) * _TEMP * _1_10;
_LP0 = _LP0 + (    564348.209020541) * _TEMP * _1_11;
_LP0 = _LP0 + (     204360.78660139) * _TEMP * _1_12;

***  Effect: Population_in_thousands ;
_TEMP = Population_in_thousands ;
_LP0 = _LP0 + (    22.9298269350997 * _TEMP);
*--- Intercept ---*;
_LP0 = _LP0 + (    5860645.63878544);

REG2DR1:

*** Predicted Value;
label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
P_Sum_Labor_Force_Pop = _LP0;


*************************************;
***** end scoring code for regression;
*************************************;
