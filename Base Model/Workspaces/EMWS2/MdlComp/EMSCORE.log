MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 21, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:20:09" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 21, 2019
Time:                16:20:09
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2VMUA2R "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2VMUA2R new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS2.REG_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS2.REG_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
195221     /* Generate assessment metadata, which will be used to generate assessment data step */
195222     /* code, such as retrieving names of temporary variables and summary variables,      */
195223     /* labels, etc.  It is used in almost all the assessment computations such as lift,  */
195224     /* roc, index, scoreDist and could be thought as a global variable in assessment     */
195225     /* computation.                                                                      */
195226     data work.ASSESS_0WHZFSE_assessMeta_dNQIQo;
MPRINT(EM_DIAGRAM):    data work.ASSESS_0WHZFSE_assessMeta_dNQIQo;
195227     length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32
195227   ! RESULT_MAX_LABEL
195228        $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX 
$32 RESULT_MAX_LABEL $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
195229     VARIABLE = "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   VARIABLE = "Sum_Labor_Force_Pop";
195230     PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
195231     FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
195232     TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
195233     LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
195234     PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
195235     MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
195236     LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
195237     GEN_VAR_IN_TEMP_DATA = "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "Sum_Labor_Force_Pop";
195238     RESULT_MEAN = "_targetMean_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_targetMean_";
195239     RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Target";
195240     RESULT_MIN = "_targetMin_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_targetMin_";
195241     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Target";
195242     MIN_ADJUSTED = "Sum_Labo_minAdjusted_PNaGShE8h";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "Sum_Labo_minAdjusted_PNaGShE8h";
195243     RESULT_MAX = "_targetMax_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_targetMax_";
195244     RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Target";
195245     MAX_ADJUSTED = "Sum_Labo_maxAdjusted_EQsz7ahCi";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "Sum_Labo_maxAdjusted_EQsz7ahCi";
195246     RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
195247     RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
195248     TEMPORARY_VARIABLE = "Sum_Labor_Force__e3Demyru0dhDePm";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "Sum_Labor_Force__e3Demyru0dhDePm";
195249     output;
MPRINT(EM_DIAGRAM):   output;
195250     VARIABLE = "P_Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_Sum_Labor_Force_Pop";
195251     FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
195252     TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
195253     PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
195254     LEVEL = "";
MPRINT(EM_DIAGRAM):   LEVEL = "";
195255     PROPERTY = "PREDICTED";
MPRINT(EM_DIAGRAM):   PROPERTY = "PREDICTED";
195256     MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
195257     LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
195258     GEN_VAR_IN_TEMP_DATA = "P_Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_Sum_Labor_Force_Pop";
195259     RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
195260     RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Predicted";
195261     RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
195262     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
195263     MIN_ADJUSTED = "P_Sum_La_minAdjusted_3YDcj7R5y";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_Sum_La_minAdjusted_3YDcj7R5y";
195264     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
195265     RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
195266     RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Predicted";
195267     MAX_ADJUSTED = "max_adjusted";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "max_adjusted";
195268     RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
195269     RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
195270     TEMPORARY_VARIABLE = "P_Sum_Labor_Forc_LatvO3REf2Dy0iZ";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_Sum_Labor_Forc_LatvO3REf2Dy0iZ";
195271     output;
MPRINT(EM_DIAGRAM):   output;
195272     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_0WHZFSE_ASSESSMETA_DNQIQO has 2 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

195273     /* Generate temporary dataset and obtain summary statistics such as total number of   */
195274     /* obserations, frequency of target.  However, summary statistics for class reporting */
195275     /* variabels are not computed here since if there exist class reporting variables,    */
195276     /* then PROC DMDB will be called. And there is no need to compute interval reporting  */
195277     /* summary statisitcs, if any.                                                        */
195278     data work.ASSESS_0WHZFSE_normSD_jyJWeK(drop=
195279     _numberOfObservation_
195280     _intervalTargetMin_ _intervalTargetMax_
195281     )
195282     work.ASSESS_0WHZFSE_meansAndTi_fGoEax (keep=
195283     _numberOfObservation_
195284     _intervalTargetMin_ _intervalTargetMax_
195285     );
MPRINT(EM_DIAGRAM):    data work.ASSESS_0WHZFSE_normSD_jyJWeK(drop= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ ) work.ASSESS_0WHZFSE_meansAndTi_fGoEax (keep= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ );
195286     set EMWS2.Reg_TRAIN(
195287     where=(
195288     (Sum_Labor_Force_Pop ^= .)
195289     and (P_Sum_Labor_Force_Pop ^= .)
195290     )
195291     ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_TRAIN( where=( (Sum_Labor_Force_Pop ^= .) and (P_Sum_Labor_Force_Pop ^= .) ) ) end=_lastObservation_;
195292     keep frequency_biFzBu;
MPRINT(EM_DIAGRAM):   keep frequency_biFzBu;
195293     frequency_biFzBu = 1;
MPRINT(EM_DIAGRAM):   frequency_biFzBu = 1;
195294     keep Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   keep Sum_Labor_Force_Pop;
195295     keep P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   keep P_Sum_Labor_Force_Pop;
195296     output work.ASSESS_0WHZFSE_normSD_jyJWeK;
MPRINT(EM_DIAGRAM):   output work.ASSESS_0WHZFSE_normSD_jyJWeK;
195297     keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
195298     retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
195299     _numberOfObservation_ + frequency_biFzBu;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_biFzBu;
195300     keep _intervalTargetMin_ _intervalTargetMax_;
MPRINT(EM_DIAGRAM):   keep _intervalTargetMin_ _intervalTargetMax_;
195301     retain _intervalTargetMin_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMin_ .;
195302     retain _intervalTargetMax_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMax_ .;
195303     if (_n_ = 1) then do;
MPRINT(EM_DIAGRAM):   if (_n_ = 1) then do;
195304     _intervalTargetMin_ = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Sum_Labor_Force_Pop;
195305     _intervalTargetMax_ = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Sum_Labor_Force_Pop;
195306     end;
MPRINT(EM_DIAGRAM):   end;
195307     else do;
MPRINT(EM_DIAGRAM):   else do;
195308     if (_intervalTargetMin_ > P_Sum_Labor_Force_Pop) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMin_ > P_Sum_Labor_Force_Pop) then do;
195309     _intervalTargetMin_ = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Sum_Labor_Force_Pop;
195310     end;
MPRINT(EM_DIAGRAM):   end;
195311     if (_intervalTargetMax_ < P_Sum_Labor_Force_Pop) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMax_ < P_Sum_Labor_Force_Pop) then do;
195312     _intervalTargetMax_ = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Sum_Labor_Force_Pop;
195313     end;
MPRINT(EM_DIAGRAM):   end;
195314     end;
MPRINT(EM_DIAGRAM):   end;
195315     if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
195316     output work.ASSESS_0WHZFSE_meansAndTi_fGoEax;
MPRINT(EM_DIAGRAM):   output work.ASSESS_0WHZFSE_meansAndTi_fGoEax;
195317     end;
MPRINT(EM_DIAGRAM):   end;
195318     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: View EMWS2.REG_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 336 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 336 observations read from the data set EMWS2.REG_TRAIN.
      WHERE (Sum_Labor_Force_Pop not = .) and (P_Sum_Labor_Force_Pop not = .);
NOTE: The data set WORK.ASSESS_0WHZFSE_NORMSD_JYJWEK has 336 observations and 3 variables.
NOTE: The data set WORK.ASSESS_0WHZFSE_MEANSANDTI_FGOEAX has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

195319     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
195320     set EMWS2.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK;
195321     where MODEL = "Reg" and TARGET = "Sum_Labor_Force_Pop" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Reg" and TARGET = "Sum_Labor_Force_Pop" and dataRole="TRAIN";
195322     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS2.MDLCOMP_EMRANK.
      WHERE (MODEL='Reg') and (TARGET='Sum_Labor_Force_Pop') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 4 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

195323     data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
195324     do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
195325     DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
195326     output;
MPRINT(EM_DIAGRAM):   output;
195327     end;
MPRINT(EM_DIAGRAM):   end;
195328     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

195329     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
195330     merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
195331     by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
195332     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 4 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

195333     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
195334     set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
195335     retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
195336     retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
195337     keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
195338     if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
195339     bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
195340     _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
195341     if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
195342     /* tied */
195343     _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
195344     ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
195345     end;
MPRINT(EM_DIAGRAM):   end;
195346     else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
195347     /* next tied */
195348     _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
195349     ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ ));
195350     end;
MPRINT(EM_DIAGRAM):   end;
195351     output;
MPRINT(EM_DIAGRAM):   output;
195352     *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
195353     * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
195354     *end;
MPRINT(EM_DIAGRAM):   *end;
195355     if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
195356     _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
195357     end;
MPRINT(EM_DIAGRAM):   end;
195358     else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
195359     if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
195360     _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
195361     end;
MPRINT(EM_DIAGRAM):   end;
195362     end;
MPRINT(EM_DIAGRAM):   end;
195363     bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
195364     /* correct the previous change */
195365     end;
MPRINT(EM_DIAGRAM):   end;
195366     if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
195367     _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
195368     output;
MPRINT(EM_DIAGRAM):   output;
195369     end;
MPRINT(EM_DIAGRAM):   end;
195370     _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
195371     _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
195372     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      19 at 195340:20   15 at 195341:5    15 at 195341:24   12 at 195343:12   16 at 195343:24   16 at 195343:33   15 at 195343:37   15 at 195355:30   3 at 195358:10    3 at 195358:21    
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

195373     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
195374     set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
195375     by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
195376     retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
195377     if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
195378     _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
195379     end;
MPRINT(EM_DIAGRAM):   end;
195380     if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
195381     _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
195382     output;
MPRINT(EM_DIAGRAM):   output;
195383     end;
MPRINT(EM_DIAGRAM):   end;
195384     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 17 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

195385     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
195386     *------------------------------------------------------------*;
195387     * MdlComp: Scoring REG_TRAIN data;
195388     *------------------------------------------------------------*;
195389     data EMWS2.MdlComp_TRAIN
195390     / view=EMWS2.MdlComp_TRAIN
195391     ;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_TRAIN / view=EMWS2.MdlComp_TRAIN ;
195392     set EMWS2.Reg_TRAIN
195393     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_TRAIN ;
195394     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas.
195395    +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
195396    +if (P_Sum_Labor_Force_Pop ge 12847651.6853932) then do;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 12847651.6853932) then do;
195397    +b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
195398    +end;
MPRINT(EM_DIAGRAM):   end;
195399    +else
195400    +if (P_Sum_Labor_Force_Pop ge 9464919.99999999) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9464919.99999999) then do;
195401    +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
195402    +b_Sum_Labor_Force_ = floor(5 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = floor(5 + 2*_temp_);
195403    +end;
MPRINT(EM_DIAGRAM):   end;
195404    +else
195405    +if (P_Sum_Labor_Force_Pop ge 3744154.76190476) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 3744154.76190476) then do;
195406    +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
195407    +b_Sum_Labor_Force_ = floor(9 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = floor(9 + 2*_temp_);
195408    +end;
MPRINT(EM_DIAGRAM):   end;
195409    +else
195410    +if (P_Sum_Labor_Force_Pop ge 1083534.09090907) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1083534.09090907) then do;
195411    +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
195412    +b_Sum_Labor_Force_ = floor(14 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = floor(14 + 2*_temp_);
195413    +end;
MPRINT(EM_DIAGRAM):   end;
195414    +else
195415    +do;
MPRINT(EM_DIAGRAM):   else do;
195416    +b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
195417    +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
195418     run;

NOTE: DATA STEP view saved on file EMWS2.MDLCOMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.REG_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
195419     quit;
195420     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
195421     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
195422     *------------------------------------------------------------*;
195423     * MdlComp: Scoring REG_VALIDATE data;
195424     *------------------------------------------------------------*;
195425     data EMWS2.MdlComp_VALIDATE
195426     / view=EMWS2.MdlComp_VALIDATE
195427     ;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_VALIDATE / view=EMWS2.MdlComp_VALIDATE ;
195428     set EMWS2.Reg_VALIDATE
195429     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_VALIDATE ;
195430     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas.
195431    +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
195432    +if (P_Sum_Labor_Force_Pop ge 12847651.6853932) then do;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 12847651.6853932) then do;
195433    +b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
195434    +end;
MPRINT(EM_DIAGRAM):   end;
195435    +else
195436    +if (P_Sum_Labor_Force_Pop ge 9464919.99999999) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9464919.99999999) then do;
195437    +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
195438    +b_Sum_Labor_Force_ = floor(5 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = floor(5 + 2*_temp_);
195439    +end;
MPRINT(EM_DIAGRAM):   end;
195440    +else
195441    +if (P_Sum_Labor_Force_Pop ge 3744154.76190476) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 3744154.76190476) then do;
195442    +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
195443    +b_Sum_Labor_Force_ = floor(9 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = floor(9 + 2*_temp_);
195444    +end;
MPRINT(EM_DIAGRAM):   end;
195445    +else
195446    +if (P_Sum_Labor_Force_Pop ge 1083534.09090907) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1083534.09090907) then do;
195447    +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
195448    +b_Sum_Labor_Force_ = floor(14 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = floor(14 + 2*_temp_);
195449    +end;
MPRINT(EM_DIAGRAM):   end;
195450    +else
195451    +do;
MPRINT(EM_DIAGRAM):   else do;
195452    +b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
195453    +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
195454     run;

NOTE: DATA STEP view saved on file EMWS2.MDLCOMP_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.REG_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
195455     quit;
195456     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
195457     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG_TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
195458     *------------------------------------------------------------*;
195459     * MdlComp: Scoring REG_TEST data;
195460     *------------------------------------------------------------*;
195461     data EMWS2.MdlComp_TEST
195462     / view=EMWS2.MdlComp_TEST
195463     ;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_TEST / view=EMWS2.MdlComp_TEST ;
195464     set EMWS2.Reg_TEST
195465     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_TEST ;
195466     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas.
195467    +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
195468    +if (P_Sum_Labor_Force_Pop ge 12847651.6853932) then do;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 12847651.6853932) then do;
195469    +b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
195470    +end;
MPRINT(EM_DIAGRAM):   end;
195471    +else
195472    +if (P_Sum_Labor_Force_Pop ge 9464919.99999999) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9464919.99999999) then do;
195473    +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
195474    +b_Sum_Labor_Force_ = floor(5 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = floor(5 + 2*_temp_);
195475    +end;
MPRINT(EM_DIAGRAM):   end;
195476    +else
195477    +if (P_Sum_Labor_Force_Pop ge 3744154.76190476) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 3744154.76190476) then do;
195478    +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
195479    +b_Sum_Labor_Force_ = floor(9 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = floor(9 + 2*_temp_);
195480    +end;
MPRINT(EM_DIAGRAM):   end;
195481    +else
195482    +if (P_Sum_Labor_Force_Pop ge 1083534.09090907) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1083534.09090907) then do;
195483    +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
195484    +b_Sum_Labor_Force_ = floor(14 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = floor(14 + 2*_temp_);
195485    +end;
MPRINT(EM_DIAGRAM):   end;
195486    +else
195487    +do;
MPRINT(EM_DIAGRAM):   else do;
195488    +b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
195489    +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
195490     run;

NOTE: DATA STEP view saved on file EMWS2.MDLCOMP_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.REG_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
195491     quit;
195492     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
195493     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
195494     * MdlComp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp: Computing metadata for TRAIN data;
195495     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS2.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.MdlComp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.MdlComp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.MdlComp_TRAIN out=WORK.M1XS3RF9 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1XS3RF9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1XS3RF9(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1XS3RF9;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1XS3RF9;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M08JB0HH NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M08JB0HH;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M08JB0HH;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0PTENSO(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M08JB0HH;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M08JB0HH;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M08JB0HH;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M08JB0HH;
MPRINT(EMADVISECOLUMNS):   set WORK.M08JB0HH;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS2.Reg_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Reg_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS2.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS2.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS2.MDLCOMP_TEST.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
