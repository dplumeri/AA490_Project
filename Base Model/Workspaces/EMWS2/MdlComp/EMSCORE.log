MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 11, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:11:15" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 11, 2019
Time:                14:11:15
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0VP9N08 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0VP9N08 new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS2.REG5_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS2.REG5_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
130972     /* Generate assessment metadata, which will be used to generate assessment data step */
130973     /* code, such as retrieving names of temporary variables and summary variables,      */
130974     /* labels, etc.  It is used in almost all the assessment computations such as lift,  */
130975     /* roc, index, scoreDist and could be thought as a global variable in assessment     */
130976     /* computation.                                                                      */
130977     data work.ASSESS_3FQ6TWG_assessMeta_uon6Mh;
MPRINT(EM_DIAGRAM):    data work.ASSESS_3FQ6TWG_assessMeta_uon6Mh;
130978     length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32
130978   ! RESULT_MAX_LABEL
130979        $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX 
$32 RESULT_MAX_LABEL $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
130980     VARIABLE = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   VARIABLE = "Cases_in_1000s";
130981     PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
130982     FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
130983     TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
130984     LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
130985     PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
130986     MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
130987     LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
130988     GEN_VAR_IN_TEMP_DATA = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "Cases_in_1000s";
130989     RESULT_MEAN = "_targetMean_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_targetMean_";
130990     RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Target";
130991     RESULT_MIN = "_targetMin_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_targetMin_";
130992     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Target";
130993     MIN_ADJUSTED = "Cases_in_minAdjusted_hSld0XZGA";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "Cases_in_minAdjusted_hSld0XZGA";
130994     RESULT_MAX = "_targetMax_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_targetMax_";
130995     RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Target";
130996     MAX_ADJUSTED = "Cases_in_maxAdjusted_WmBqfzlY0";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "Cases_in_maxAdjusted_WmBqfzlY0";
130997     RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
130998     RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
130999     TEMPORARY_VARIABLE = "Cases_in_1000s_6UwWzJz_D0SZVYS";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "Cases_in_1000s_6UwWzJz_D0SZVYS";
131000     output;
MPRINT(EM_DIAGRAM):   output;
131001     VARIABLE = "P_Cases_in_1000s";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_Cases_in_1000s";
131002     FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
131003     TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
131004     PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
131005     LEVEL = "";
MPRINT(EM_DIAGRAM):   LEVEL = "";
131006     PROPERTY = "PREDICTED";
MPRINT(EM_DIAGRAM):   PROPERTY = "PREDICTED";
131007     MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
131008     LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
131009     GEN_VAR_IN_TEMP_DATA = "P_Cases_in_1000s";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_Cases_in_1000s";
131010     RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
131011     RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Predicted";
131012     RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
131013     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
131014     MIN_ADJUSTED = "P_Cases__minAdjusted_X1GyIDffX";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_Cases__minAdjusted_X1GyIDffX";
131015     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
131016     RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
131017     RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Predicted";
131018     MAX_ADJUSTED = "max_adjusted";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "max_adjusted";
131019     RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
131020     RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
131021     TEMPORARY_VARIABLE = "P_Cases_in_1000s_Rho5D6MXyvlO67d";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_Cases_in_1000s_Rho5D6MXyvlO67d";
131022     output;
MPRINT(EM_DIAGRAM):   output;
131023     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_3FQ6TWG_ASSESSMETA_UON6MH has 2 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

131024     /* Generate temporary dataset and obtain summary statistics such as total number of   */
131025     /* obserations, frequency of target.  However, summary statistics for class reporting */
131026     /* variabels are not computed here since if there exist class reporting variables,    */
131027     /* then PROC DMDB will be called. And there is no need to compute interval reporting  */
131028     /* summary statisitcs, if any.                                                        */
131029     data work.ASSESS_3FQ6TWG_normSD_5cdC4g(drop=
131030     _numberOfObservation_
131031     _intervalTargetMin_ _intervalTargetMax_
131032     )
131033     work.ASSESS_3FQ6TWG_meansAndTi_nhgZ0P (keep=
131034     _numberOfObservation_
131035     _intervalTargetMin_ _intervalTargetMax_
131036     );
MPRINT(EM_DIAGRAM):    data work.ASSESS_3FQ6TWG_normSD_5cdC4g(drop= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ ) work.ASSESS_3FQ6TWG_meansAndTi_nhgZ0P (keep= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ );
131037     set EMWS2.Reg5_TRAIN(
131038     where=(
131039     (Cases_in_1000s ^= .)
131040     and (P_Cases_in_1000s ^= .)
131041     )
131042     ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_TRAIN( where=( (Cases_in_1000s ^= .) and (P_Cases_in_1000s ^= .) ) ) end=_lastObservation_;
131043     keep frequency_2LZq_q;
MPRINT(EM_DIAGRAM):   keep frequency_2LZq_q;
131044     frequency_2LZq_q = 1;
MPRINT(EM_DIAGRAM):   frequency_2LZq_q = 1;
131045     keep Cases_in_1000s;
MPRINT(EM_DIAGRAM):   keep Cases_in_1000s;
131046     keep P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   keep P_Cases_in_1000s;
131047     output work.ASSESS_3FQ6TWG_normSD_5cdC4g;
MPRINT(EM_DIAGRAM):   output work.ASSESS_3FQ6TWG_normSD_5cdC4g;
131048     keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
131049     retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
131050     _numberOfObservation_ + frequency_2LZq_q;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_2LZq_q;
131051     keep _intervalTargetMin_ _intervalTargetMax_;
MPRINT(EM_DIAGRAM):   keep _intervalTargetMin_ _intervalTargetMax_;
131052     retain _intervalTargetMin_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMin_ .;
131053     retain _intervalTargetMax_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMax_ .;
131054     if (_n_ = 1) then do;
MPRINT(EM_DIAGRAM):   if (_n_ = 1) then do;
131055     _intervalTargetMin_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Cases_in_1000s;
131056     _intervalTargetMax_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Cases_in_1000s;
131057     end;
MPRINT(EM_DIAGRAM):   end;
131058     else do;
MPRINT(EM_DIAGRAM):   else do;
131059     if (_intervalTargetMin_ > P_Cases_in_1000s) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMin_ > P_Cases_in_1000s) then do;
131060     _intervalTargetMin_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Cases_in_1000s;
131061     end;
MPRINT(EM_DIAGRAM):   end;
131062     if (_intervalTargetMax_ < P_Cases_in_1000s) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMax_ < P_Cases_in_1000s) then do;
131063     _intervalTargetMax_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Cases_in_1000s;
131064     end;
MPRINT(EM_DIAGRAM):   end;
131065     end;
MPRINT(EM_DIAGRAM):   end;
131066     if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
131067     output work.ASSESS_3FQ6TWG_meansAndTi_nhgZ0P;
MPRINT(EM_DIAGRAM):   output work.ASSESS_3FQ6TWG_meansAndTi_nhgZ0P;
131068     end;
MPRINT(EM_DIAGRAM):   end;
131069     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: View EMWS2.REG5_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 728 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 715 observations read from the data set EMWS2.REG5_TRAIN.
      WHERE (Cases_in_1000s not = .) and (P_Cases_in_1000s not = .);
NOTE: The data set WORK.ASSESS_3FQ6TWG_NORMSD_5CDC4G has 715 observations and 3 variables.
NOTE: The data set WORK.ASSESS_3FQ6TWG_MEANSANDTI_NHGZ0P has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

131070     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
131071     set EMWS2.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK;
131072     where MODEL = "Reg5" and TARGET = "Cases_in_1000s" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Reg5" and TARGET = "Cases_in_1000s" and dataRole="TRAIN";
131073     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS2.MDLCOMP_EMRANK.
      WHERE (MODEL='Reg5') and (TARGET='Cases_in_1000s') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

131074     data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
131075     do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
131076     DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
131077     output;
MPRINT(EM_DIAGRAM):   output;
131078     end;
MPRINT(EM_DIAGRAM):   end;
131079     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

131080     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
131081     merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
131082     by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
131083     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

131084     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
131085     set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
131086     retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
131087     retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
131088     keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
131089     if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
131090     bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
131091     _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
131092     if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
131093     /* tied */
131094     _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
131095     ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
131096     end;
MPRINT(EM_DIAGRAM):   end;
131097     else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
131098     /* next tied */
131099     _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
131100     ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ ));
131101     end;
MPRINT(EM_DIAGRAM):   end;
131102     output;
MPRINT(EM_DIAGRAM):   output;
131103     *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
131104     * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
131105     *end;
MPRINT(EM_DIAGRAM):   *end;
131106     if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
131107     _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
131108     end;
MPRINT(EM_DIAGRAM):   end;
131109     else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
131110     if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
131111     _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
131112     end;
MPRINT(EM_DIAGRAM):   end;
131113     end;
MPRINT(EM_DIAGRAM):   end;
131114     bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
131115     /* correct the previous change */
131116     end;
MPRINT(EM_DIAGRAM):   end;
131117     if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
131118     _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
131119     output;
MPRINT(EM_DIAGRAM):   output;
131120     end;
MPRINT(EM_DIAGRAM):   end;
131121     _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
131122     _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
131123     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

131124     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
131125     set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
131126     by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
131127     retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
131128     if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
131129     _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
131130     end;
MPRINT(EM_DIAGRAM):   end;
131131     if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
131132     _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
131133     output;
MPRINT(EM_DIAGRAM):   output;
131134     end;
MPRINT(EM_DIAGRAM):   end;
131135     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

131136     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG5_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
131137     *------------------------------------------------------------*;
131138     * MdlComp: Scoring REG5_TRAIN data;
131139     *------------------------------------------------------------*;
131140     data EMWS2.MdlComp_TRAIN
131141     / view=EMWS2.MdlComp_TRAIN
131142     ;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_TRAIN / view=EMWS2.MdlComp_TRAIN ;
131143     set EMWS2.Reg5_TRAIN
131144     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_TRAIN ;
131145     %inc emflow;
MPRINT(EM_DIAGRAM):   if (P_Cases_in_1000s ge 288.241624037156) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 122.61877930895) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 85.8827981030965) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 53.8465796159833) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 48.8668399322475) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 44.0420113544423) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 34.1568129202454) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 26.0130310901372) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 23.1554711498296) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 16.7982907718532) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 12.2270976562916) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 10.2930191652826) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 7.29799764770225) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 5.28642550062574) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 3.43753373559824) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 2.07666959146316) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 0.60569920481362) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -0.8359698163787) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -4.35749304688957) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 20;
MPRINT(EM_DIAGRAM):   end;
131225     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS2.MDLCOMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.REG5_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
131226     quit;
131227     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
131228     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG5_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
131229     *------------------------------------------------------------*;
131230     * MdlComp: Scoring REG5_VALIDATE data;
131231     *------------------------------------------------------------*;
131232     data EMWS2.MdlComp_VALIDATE
131233     / view=EMWS2.MdlComp_VALIDATE
131234     ;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_VALIDATE / view=EMWS2.MdlComp_VALIDATE ;
131235     set EMWS2.Reg5_VALIDATE
131236     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_VALIDATE ;
131237     %inc emflow;
MPRINT(EM_DIAGRAM):   if (P_Cases_in_1000s ge 288.241624037156) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 122.61877930895) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 85.8827981030965) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 53.8465796159833) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 48.8668399322475) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 44.0420113544423) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 34.1568129202454) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 26.0130310901372) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 23.1554711498296) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 16.7982907718532) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 12.2270976562916) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 10.2930191652826) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 7.29799764770225) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 5.28642550062574) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 3.43753373559824) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 2.07666959146316) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 0.60569920481362) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -0.8359698163787) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -4.35749304688957) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 20;
MPRINT(EM_DIAGRAM):   end;
131317     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS2.MDLCOMP_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.REG5_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
131318     quit;
131319     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
131320     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
131321     * MdlComp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp: Computing metadata for TRAIN data;
131322     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS2.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.MdlComp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.MdlComp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.MdlComp_TRAIN out=WORK.M3KU_FNL noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KU_FNL;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KU_FNL(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KU_FNL;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KU_FNL;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1M39GYG NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1LZJWLU(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS2.Reg5_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Reg5_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS2.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS2.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
