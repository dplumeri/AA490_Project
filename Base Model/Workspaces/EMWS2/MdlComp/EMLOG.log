*------------------------------------------------------------*
User:                student
Date:                December 11, 2019
Time:                14:11:16
Site:                70082322
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 11, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:11:11" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 11, 2019
Time:                14:11:11
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O171_UL_ "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O171_UL_ new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 11, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:11:11" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 11, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:11:11" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
130262     data work.MdlComp;
MPRINT(EM_DIAGRAM):    data work.MdlComp;
130263     set EMWS2.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS2.em_nodeid;
130264     where
130265     (NODEID="Reg5" and LABEL ne 'Regression (5)')
130266     OR (NODEID="Reg" and LABEL ne 'Stepwise')
130267     OR (NODEID="Reg3" and LABEL ne 'Forward')
130268     OR (NODEID="Reg4" and LABEL ne 'Backward')
130269     ;
MPRINT(EM_DIAGRAM):   where (NODEID="Reg5" and LABEL ne 'Regression (5)') OR (NODEID="Reg" and LABEL ne 'Stepwise') OR (NODEID="Reg3" and LABEL ne 'Forward') OR (NODEID="Reg4" and LABEL ne 'Backward') ;
130270     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.EM_NODEID.
      WHERE ((NODEID='Reg5') and (LABEL not = 'Regression (5)')) or ((NODEID='Reg') and (LABEL not = 'Stepwise')) or ((NODEID='Reg3') and (LABEL not = 'Forward')) or ((NODEID='Reg4') and (LABEL not = 'Backward'));
NOTE: The data set WORK.MDLCOMP has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130271     data EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS2.MdlComp_EMOUTFIT;
130272     set EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMOUTFIT;
130273     if MODEL = "Reg5" then MODELDESCRIPTION= 'Champion Model';
MPRINT(EM_DIAGRAM):   if MODEL = "Reg5" then MODELDESCRIPTION= 'Champion Model';
130274     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS2.MDLCOMP_EMOUTFIT has 4 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130275     data EMWS2.MdlComp_EMRESIDUAL;
MPRINT(EM_DIAGRAM):    data EMWS2.MdlComp_EMRESIDUAL;
130276     set EMWS2.MdlComp_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRESIDUAL;
130277     if MODEL = "Reg5" then MODELDESCRIPTION= 'Champion Model';
MPRINT(EM_DIAGRAM):   if MODEL = "Reg5" then MODELDESCRIPTION= 'Champion Model';
130278     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 68 observations read from the data set EMWS2.MDLCOMP_EMRESIDUAL.
NOTE: The data set EMWS2.MDLCOMP_EMRESIDUAL has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
130280     proc freq data=EMWS2.MdlComp_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.MdlComp_VariableSet noprint;
130281     table ROLE*LEVEL/out=WORK.MdlCompMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.MdlCompMETA;
130282     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS2.MDLCOMP_VARIABLESET.
NOTE: The data set WORK.MDLCOMPMETA has 1 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
130283     proc print data=WORK.MdlCompMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.MdlCompMETA label noobs;
130284     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
130285     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
130286     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
130287     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
130288     run;
 
NOTE: There were 1 observations read from the data set WORK.MDLCOMPMETA.
NOTE: The PROCEDURE PRINT printed page 44.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130289     title10;
MPRINT(EM_DIAGRAM):   title10;
130290     %let _hpflow = 0;
130291     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
130292     set EMWS2.Reg5_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMINFO;
130293     where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
130294     call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
130295     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS2.REG5_EMINFO.
      WHERE key='HPDMSAMPLE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130296     %let _hpflow = 0;
130297     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
130298     set EMWS2.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMINFO;
130299     where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
130300     call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
130301     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS2.REG_EMINFO.
      WHERE key='HPDMSAMPLE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130302     %let _hpflow = 0;
130303     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
130304     set EMWS2.Reg3_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMINFO;
130305     where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
130306     call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
130307     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS2.REG3_EMINFO.
      WHERE key='HPDMSAMPLE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130308     %let _hpflow = 0;
130309     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
130310     set EMWS2.Reg4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMINFO;
130311     where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
130312     call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
130313     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS2.REG4_EMINFO.
      WHERE key='HPDMSAMPLE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130314     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
130315     set EMWS2.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS2.em_nodeid;
130316     where upcase(NODEID) = upcase("Reg5");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Reg5");
130317     call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
130318     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.EM_NODEID.
      WHERE UPCASE(NODEID)='REG5';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130319     data EMWS2.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):    data EMWS2.MdlComp_EMRANK;
130320     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130321     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
130321   ! TARGETLABEL =
130322        "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGETLABEL = "Target Label";
130323     retain parent "Reg5" MODEL "Reg5" MODELDESCRIPTION "Champion Model" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg5" MODEL "Reg5" MODELDESCRIPTION "Champion Model" TARGETLABEL "";
130324     set EMWS2.Reg5_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMRANK;
130325     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130326     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS2.REG5_EMRANK.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set EMWS2.MDLCOMP_EMRANK has 40 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130327     data EMWS2.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):    data EMWS2.MdlComp_EMSCOREDIST;
130328     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130329     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
130329   ! TARGETLABEL =
130330        "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGETLABEL = "Target Label";
130331     retain parent "Reg5" MODEL "Reg5" MODELDESCRIPTION "Champion Model" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg5" MODEL "Reg5" MODELDESCRIPTION "Champion Model" TARGETLABEL "";
130332     set EMWS2.Reg5_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMSCOREDIST;
130333     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130334     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS2.REG5_EMSCOREDIST.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set EMWS2.MDLCOMP_EMSCOREDIST has 27 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130335     data WORK.Reg5_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Reg5_OUTFIT;
130336     set EMWS2.Reg5_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMOUTFIT;
130337     where TARGET = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   where TARGET = "Cases_in_1000s";
130338     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.REG5_EMOUTFIT.
      WHERE TARGET='Cases_in_1000s';
NOTE: The data set WORK.REG5_OUTFIT has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
NOTE: There were 1 observations read from the data set EMWS2.REG5_EMINFO.
      WHERE (TARGET='Cases_in_1000s') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO43KIL1L0 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
NOTE: There were 1 observations read from the data set EMWS2.REG5_EMINFO.
      WHERE (TARGET='Cases_in_1000s') and (KEY='DECDATA');
NOTE: The data set WORK.EMINFO43KIL1L0 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
130339     data WORK.Reg5_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Reg5_OUTFIT;
130340     set WORK.Reg5_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Reg5_OUTFIT;
130341     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.REG5_OUTFIT.
NOTE: The data set WORK.REG5_OUTFIT has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130342     data EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS2.MdlComp_EMOUTFIT;
130343     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
130344     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
130344   ! TARGETLABEL =
130345        "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGETLABEL = "Target Label";
130346     retain parent "Reg5" MODEL "Reg5" MODELDESCRIPTION "Champion Model" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg5" MODEL "Reg5" MODELDESCRIPTION "Champion Model" TARGETLABEL "";
130347     set WORK.Reg5_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Reg5_OUTFIT;
130348     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130349     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.REG5_OUTFIT.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set EMWS2.MDLCOMP_EMOUTFIT has 1 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130350     data EMWS2.MdlComp_EMRESIDUAL;
MPRINT(EM_DIAGRAM):    data EMWS2.MdlComp_EMRESIDUAL;
130351     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130352     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
130352   ! TARGETLABEL =
130353        "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGETLABEL = "Target Label";
130354     retain parent "Reg5" MODEL "Reg5" MODELDESCRIPTION "Champion Model" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg5" MODEL "Reg5" MODELDESCRIPTION "Champion Model" TARGETLABEL "";
130355     set EMWS2.Reg5_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_EMRESIDUAL;
130356     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130357     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS2.REG5_EMRESIDUAL.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set EMWS2.MDLCOMP_EMRESIDUAL has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130358     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
130359     set EMWS2.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS2.em_nodeid;
130360     where upcase(NODEID) = upcase("Reg");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Reg");
130361     call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
130362     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.EM_NODEID.
      WHERE UPCASE(NODEID)='REG';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130363     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130364     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130365     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130366        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130367     retain parent "Reg" MODEL "Reg" MODELDESCRIPTION "Stepwise" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg" MODEL "Reg" MODELDESCRIPTION "Stepwise" TARGETLABEL "";
130368     set EMWS2.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMRANK;
130369     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130370     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS2.REG_EMRANK.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130371     data EMWS2.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMRANK;
130372     set EMWS2.MdlComp_EMRANK work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK work.MdlComp_TEMP;
130373     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS2.MDLCOMP_EMRANK.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMRANK has 80 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130374     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130375     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130376     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130377        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130378     retain parent "Reg" MODEL "Reg" MODELDESCRIPTION "Stepwise" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg" MODEL "Reg" MODELDESCRIPTION "Stepwise" TARGETLABEL "";
130379     set EMWS2.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMSCOREDIST;
130380     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130381     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS2.REG_EMSCOREDIST.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130382     data EMWS2.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMSCOREDIST;
130383     set EMWS2.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
130384     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS2.MDLCOMP_EMSCOREDIST.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMSCOREDIST has 67 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130385     data WORK.Reg_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Reg_OUTFIT;
130386     set EMWS2.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMOUTFIT;
130387     where TARGET = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   where TARGET = "Cases_in_1000s";
130388     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.REG_EMOUTFIT.
      WHERE TARGET='Cases_in_1000s';
NOTE: The data set WORK.REG_OUTFIT has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
NOTE: There were 1 observations read from the data set EMWS2.REG_EMINFO.
      WHERE (TARGET='Cases_in_1000s') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO42GIOV_6 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
NOTE: There were 1 observations read from the data set EMWS2.REG_EMINFO.
      WHERE (TARGET='Cases_in_1000s') and (KEY='DECDATA');
NOTE: The data set WORK.EMINFO42GIOV_6 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
130389     data WORK.Reg_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Reg_OUTFIT;
130390     set WORK.Reg_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_OUTFIT;
130391     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.REG_OUTFIT.
NOTE: The data set WORK.REG_OUTFIT has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130392     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130393     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
130394     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130395        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130396     retain parent "Reg" MODEL "Reg" MODELDESCRIPTION "Stepwise" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg" MODEL "Reg" MODELDESCRIPTION "Stepwise" TARGETLABEL "";
130397     set WORK.Reg_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_OUTFIT;
130398     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130399     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.REG_OUTFIT.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 1 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130400     data EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMOUTFIT;
130401     set EMWS2.MdlComp_EMOUTFIT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMOUTFIT work.MdlComp_TEMP;
130402     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: There were 1 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMOUTFIT has 2 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130403     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130404     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130405     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130406        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130407     retain parent "Reg" MODEL "Reg" MODELDESCRIPTION "Stepwise" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg" MODEL "Reg" MODELDESCRIPTION "Stepwise" TARGETLABEL "";
130408     set EMWS2.Reg_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_EMRESIDUAL;
130409     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130410     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS2.REG_EMRESIDUAL.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130411     data EMWS2.MdlComp_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMRESIDUAL;
130412     set EMWS2.MdlComp_EMRESIDUAL work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRESIDUAL work.MdlComp_TEMP;
130413     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS2.MDLCOMP_EMRESIDUAL.
NOTE: There were 20 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMRESIDUAL has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130414     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
130415     set EMWS2.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS2.em_nodeid;
130416     where upcase(NODEID) = upcase("Reg3");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Reg3");
130417     call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
130418     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.EM_NODEID.
      WHERE UPCASE(NODEID)='REG3';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130419     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130420     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130421     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130422        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130423     retain parent "Reg3" MODEL "Reg3" MODELDESCRIPTION "Forward" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg3" MODEL "Reg3" MODELDESCRIPTION "Forward" TARGETLABEL "";
130424     set EMWS2.Reg3_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMRANK;
130425     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130426     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS2.REG3_EMRANK.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130427     data EMWS2.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMRANK;
130428     set EMWS2.MdlComp_EMRANK work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK work.MdlComp_TEMP;
130429     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 80 observations read from the data set EMWS2.MDLCOMP_EMRANK.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMRANK has 120 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130430     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130431     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130432     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130433        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130434     retain parent "Reg3" MODEL "Reg3" MODELDESCRIPTION "Forward" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg3" MODEL "Reg3" MODELDESCRIPTION "Forward" TARGETLABEL "";
130435     set EMWS2.Reg3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMSCOREDIST;
130436     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130437     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS2.REG3_EMSCOREDIST.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130438     data EMWS2.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMSCOREDIST;
130439     set EMWS2.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
130440     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 67 observations read from the data set EMWS2.MDLCOMP_EMSCOREDIST.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMSCOREDIST has 107 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130441     data WORK.Reg3_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_OUTFIT;
130442     set EMWS2.Reg3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMOUTFIT;
130443     where TARGET = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   where TARGET = "Cases_in_1000s";
130444     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.REG3_EMOUTFIT.
      WHERE TARGET='Cases_in_1000s';
NOTE: The data set WORK.REG3_OUTFIT has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
NOTE: There were 1 observations read from the data set EMWS2.REG3_EMINFO.
      WHERE (TARGET='Cases_in_1000s') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO418AFCGG has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
NOTE: There were 1 observations read from the data set EMWS2.REG3_EMINFO.
      WHERE (TARGET='Cases_in_1000s') and (KEY='DECDATA');
NOTE: The data set WORK.EMINFO418AFCGG has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
130445     data WORK.Reg3_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_OUTFIT;
130446     set WORK.Reg3_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Reg3_OUTFIT;
130447     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.REG3_OUTFIT.
NOTE: The data set WORK.REG3_OUTFIT has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130448     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130449     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
130450     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130451        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130452     retain parent "Reg3" MODEL "Reg3" MODELDESCRIPTION "Forward" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg3" MODEL "Reg3" MODELDESCRIPTION "Forward" TARGETLABEL "";
130453     set WORK.Reg3_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Reg3_OUTFIT;
130454     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130455     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.REG3_OUTFIT.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 1 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
130456     data EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMOUTFIT;
130457     set EMWS2.MdlComp_EMOUTFIT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMOUTFIT work.MdlComp_TEMP;
130458     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: There were 1 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMOUTFIT has 3 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130459     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130460     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130461     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130462        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130463     retain parent "Reg3" MODEL "Reg3" MODELDESCRIPTION "Forward" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg3" MODEL "Reg3" MODELDESCRIPTION "Forward" TARGETLABEL "";
130464     set EMWS2.Reg3_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_EMRESIDUAL;
130465     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130466     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS2.REG3_EMRESIDUAL.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130467     data EMWS2.MdlComp_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMRESIDUAL;
130468     set EMWS2.MdlComp_EMRESIDUAL work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRESIDUAL work.MdlComp_TEMP;
130469     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS2.MDLCOMP_EMRESIDUAL.
NOTE: There were 20 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMRESIDUAL has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130470     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
130471     set EMWS2.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS2.em_nodeid;
130472     where upcase(NODEID) = upcase("Reg4");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Reg4");
130473     call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
130474     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.EM_NODEID.
      WHERE UPCASE(NODEID)='REG4';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130475     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130476     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130477     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130478        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130479     retain parent "Reg4" MODEL "Reg4" MODELDESCRIPTION "Backward" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg4" MODEL "Reg4" MODELDESCRIPTION "Backward" TARGETLABEL "";
130480     set EMWS2.Reg4_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMRANK;
130481     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130482     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS2.REG4_EMRANK.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130483     data EMWS2.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMRANK;
130484     set EMWS2.MdlComp_EMRANK work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK work.MdlComp_TEMP;
130485     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 120 observations read from the data set EMWS2.MDLCOMP_EMRANK.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMRANK has 160 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130486     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130487     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130488     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130489        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130490     retain parent "Reg4" MODEL "Reg4" MODELDESCRIPTION "Backward" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg4" MODEL "Reg4" MODELDESCRIPTION "Backward" TARGETLABEL "";
130491     set EMWS2.Reg4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMSCOREDIST;
130492     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130493     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set EMWS2.REG4_EMSCOREDIST.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130494     data EMWS2.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMSCOREDIST;
130495     set EMWS2.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
130496     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 107 observations read from the data set EMWS2.MDLCOMP_EMSCOREDIST.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMSCOREDIST has 147 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130497     data WORK.Reg4_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_OUTFIT;
130498     set EMWS2.Reg4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMOUTFIT;
130499     where TARGET = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   where TARGET = "Cases_in_1000s";
130500     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.REG4_EMOUTFIT.
      WHERE TARGET='Cases_in_1000s';
NOTE: The data set WORK.REG4_OUTFIT has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
NOTE: There were 1 observations read from the data set EMWS2.REG4_EMINFO.
      WHERE (TARGET='Cases_in_1000s') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO43WFX8VC has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
NOTE: There were 1 observations read from the data set EMWS2.REG4_EMINFO.
      WHERE (TARGET='Cases_in_1000s') and (KEY='DECDATA');
NOTE: The data set WORK.EMINFO43WFX8VC has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
130501     data WORK.Reg4_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Reg4_OUTFIT;
130502     set WORK.Reg4_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Reg4_OUTFIT;
130503     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.REG4_OUTFIT.
NOTE: The data set WORK.REG4_OUTFIT has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130504     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130505     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
130506     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130507        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130508     retain parent "Reg4" MODEL "Reg4" MODELDESCRIPTION "Backward" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg4" MODEL "Reg4" MODELDESCRIPTION "Backward" TARGETLABEL "";
130509     set WORK.Reg4_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Reg4_OUTFIT;
130510     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130511     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.REG4_OUTFIT.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 1 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130512     data EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMOUTFIT;
130513     set EMWS2.MdlComp_EMOUTFIT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMOUTFIT work.MdlComp_TEMP;
130514     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: There were 1 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMOUTFIT has 4 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130515     data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
130516     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL $200;
130517     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))" TARGET =
130518        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION = "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
130519     retain parent "Reg4" MODEL "Reg4" MODELDESCRIPTION "Backward" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Reg4" MODEL "Reg4" MODELDESCRIPTION "Backward" TARGETLABEL "";
130520     set EMWS2.Reg4_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_EMRESIDUAL;
130521     where upcase(TARGET) = upcase("Cases_in_1000s");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("Cases_in_1000s");
130522     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS2.REG4_EMRESIDUAL.
      WHERE UPCASE(TARGET)='CASES_IN_1000S';
NOTE: The data set WORK.MDLCOMP_TEMP has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130523     data EMWS2.MdlComp_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMRESIDUAL;
130524     set EMWS2.MdlComp_EMRESIDUAL work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRESIDUAL work.MdlComp_TEMP;
130525     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set EMWS2.MDLCOMP_EMRESIDUAL.
NOTE: There were 20 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS2.MDLCOMP_EMRESIDUAL has 80 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* "Compute assessment statistics"
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Reg5");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg5" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_Cases_in_1000s_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS2.Reg5_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Cases_in_1000s _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Cases_in_1000s") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Cases_in_1000s Cases_in_1000s _tmpfreqvar_ WHERE = (Cases_in_1000s > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Cases_in_1000s ;
MPRINT(EM_ASSESS):   VAR Cases_in_1000s ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg5" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg5" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_Cases_in_1000s_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS2.Reg5_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Cases_in_1000s _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Cases_in_1000s") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Cases_in_1000s Cases_in_1000s _tmpfreqvar_ WHERE = (Cases_in_1000s > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Cases_in_1000s ;
MPRINT(EM_ASSESS):   VAR Cases_in_1000s ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Reg");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_Cases_in_1000s_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS2.Reg_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Cases_in_1000s _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Cases_in_1000s") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Cases_in_1000s Cases_in_1000s _tmpfreqvar_ WHERE = (Cases_in_1000s > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Cases_in_1000s ;
MPRINT(EM_ASSESS):   VAR Cases_in_1000s ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_Cases_in_1000s_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS2.Reg_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Cases_in_1000s _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Cases_in_1000s") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Cases_in_1000s Cases_in_1000s _tmpfreqvar_ WHERE = (Cases_in_1000s > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Cases_in_1000s ;
MPRINT(EM_ASSESS):   VAR Cases_in_1000s ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Reg3");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg3" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_Cases_in_1000s_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS2.Reg3_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Cases_in_1000s _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Cases_in_1000s") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Cases_in_1000s Cases_in_1000s _tmpfreqvar_ WHERE = (Cases_in_1000s > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Cases_in_1000s ;
MPRINT(EM_ASSESS):   VAR Cases_in_1000s ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg3" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg3" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_Cases_in_1000s_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS2.Reg3_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Cases_in_1000s _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Cases_in_1000s") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Cases_in_1000s Cases_in_1000s _tmpfreqvar_ WHERE = (Cases_in_1000s > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Cases_in_1000s ;
MPRINT(EM_ASSESS):   VAR Cases_in_1000s ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Reg4");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg4" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_Cases_in_1000s_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS2.Reg4_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Cases_in_1000s _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Cases_in_1000s") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Cases_in_1000s Cases_in_1000s _tmpfreqvar_ WHERE = (Cases_in_1000s > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Cases_in_1000s ;
MPRINT(EM_ASSESS):   VAR Cases_in_1000s ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg4" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Reg4" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids2_Cases_in_1000s_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS2.Reg4_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Cases_in_1000s _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Cases_in_1000s") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Cases_in_1000s") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Cases_in_1000s Cases_in_1000s _tmpfreqvar_ WHERE = (Cases_in_1000s > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Cases_in_1000s ;
MPRINT(EM_ASSESS):   VAR Cases_in_1000s ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
130730     proc sort data=EMWS2.MdlComp_EMOUTFIT NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.MdlComp_EMOUTFIT NOTHREADS;
130731     by model target;
MPRINT(EM_DIAGRAM):   by model target;
130732     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS2.MDLCOMP_EMOUTFIT has 4 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130733     data EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS2.MdlComp_EMOUTFIT;
130734     length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200 _CRITERION_ 8;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200 _CRITERION_ 8;
130735     set EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMOUTFIT;
130736     label _CRITERION_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_selectioncriterion_vlabel ,  NOQUOTE, %nrbquote(Valid: Average Squared Error)))";
MPRINT(EM_DIAGRAM):   label _CRITERION_ = "Selection Criterion: Valid: Average Squared Error";
130737     _CRITERION_ = _VASE_;
MPRINT(EM_DIAGRAM):   _CRITERION_ = _VASE_;
130738     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS2.MDLCOMP_EMOUTFIT has 4 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130739     data EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS2.MdlComp_EMOUTFIT;
130740     length USE $1;
MPRINT(EM_DIAGRAM):   length USE $1;
130741     label USE= "%sysfunc(sasmsg(sashelp.dmine, rpt_selmodel_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label USE= "Selected Model";
130742     set EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMOUTFIT;
130743     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable USE is uninitialized.
NOTE: There were 4 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS2.MDLCOMP_EMOUTFIT has 4 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130744     proc sort data = EMWS2.MdlComp_EMOUTFIT NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS2.MdlComp_EMOUTFIT NOTHREADS;
130745     by
130746     _VASE_
130747     _ASE_;
MPRINT(EM_DIAGRAM):   by _VASE_ _ASE_;
130748     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS2.MDLCOMP_EMOUTFIT has 4 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130749     %let EM_AUTOMODEL = %str();
130750     data EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_EMOUTFIT;
130751     set EMWS2.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMOUTFIT;
130752     drop found;
MPRINT(EM_DIAGRAM):   drop found;
130753     retain found 0;
MPRINT(EM_DIAGRAM):   retain found 0;
130754     if found = 0 and _VASE_ ne . then do;
MPRINT(EM_DIAGRAM):   if found = 0 and _VASE_ ne . then do;
130755     use = 'Y';
MPRINT(EM_DIAGRAM):   use = 'Y';
130756     found = 1;
MPRINT(EM_DIAGRAM):   found = 1;
130757     call symput('EM_AUTOMODEL', model);
MPRINT(EM_DIAGRAM):   call symput('EM_AUTOMODEL', model);
130758     end;
MPRINT(EM_DIAGRAM):   end;
130759     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS2.MDLCOMP_EMOUTFIT has 4 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130760     title ' ';
MPRINT(EM_DIAGRAM):    title ' ';
130761     proc print data=EMWS2.MdlComp_EMOUTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS2.MdlComp_EMOUTFIT noobs label;
130762     var
130763     USE
130764     MODEL
130765     MODELDESCRIPTION
130766     _VASE_
130767     _ASE_
130768     ;
MPRINT(EM_DIAGRAM):   var USE MODEL MODELDESCRIPTION _VASE_ _ASE_ ;
130769     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title,        NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Fit Statistics";
130770     title10 "Model Selection based on Valid: Average Squared Error (_VASE_)";
MPRINT(EM_DIAGRAM):   title10 "Model Selection based on Valid: Average Squared Error (_VASE_)";
MPRINT(EM_DIAGRAM):   run;
130771     run;
 
NOTE: There were 4 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: The PROCEDURE PRINT printed page 45.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130772     title9;
MPRINT(EM_DIAGRAM):   title9;
130773     title10;
MPRINT(EM_DIAGRAM):   title10;
130774     proc transpose data=EMWS2.MdlComp_EMOUTFIT out= work.modelstats(rename=(_LABEL_=Label _NAME_=STAT));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS2.MdlComp_EMOUTFIT out= work.modelstats(rename=(_LABEL_=Label _NAME_=STAT));
130775     ID model;
MPRINT(EM_DIAGRAM):   ID model;
130776     by target targetLabel;
MPRINT(EM_DIAGRAM):   by target targetLabel;
130777     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: The data set WORK.MODELSTATS has 31 observations and 8 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130778     data work.modelstats;
MPRINT(EM_DIAGRAM):   data work.modelstats;
130779     set work.modelstats;
MPRINT(EM_DIAGRAM):   set work.modelstats;
130780     if substr(STAT, 1, 2) = '_V' or STAT='VKS' then do;
MPRINT(EM_DIAGRAM):   if substr(STAT, 1, 2) = '_V' or STAT='VKS' then do;
130781     NumRole=2;
MPRINT(EM_DIAGRAM):   NumRole=2;
130782     end;
MPRINT(EM_DIAGRAM):   end;
130783     else if substr(STAT, 1, 2) = '_T' or STAT='TKS' then do;
MPRINT(EM_DIAGRAM):   else if substr(STAT, 1, 2) = '_T' or STAT='TKS' then do;
130784     NumRole=3;
MPRINT(EM_DIAGRAM):   NumRole=3;
130785     end;
MPRINT(EM_DIAGRAM):   end;
130786     else if substr(STAT, 1, 1) = '_' or STAT in('KS', 'BINNED_KS_PROB_CUTOFF') then do;
MPRINT(EM_DIAGRAM):   else if substr(STAT, 1, 1) = '_' or STAT in('KS', 'BINNED_KS_PROB_CUTOFF') then do;
130787     NumRole=1;
MPRINT(EM_DIAGRAM):   NumRole=1;
130788     end;
MPRINT(EM_DIAGRAM):   end;
130789     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 31 observations read from the data set WORK.MODELSTATS.
NOTE: The data set WORK.MODELSTATS has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
130790     proc sort data=work.modelstats out=work.modelstats;
MPRINT(EM_DIAGRAM):   proc sort data=work.modelstats out=work.modelstats;
130791     by NumRole STAT;
MPRINT(EM_DIAGRAM):   by NumRole STAT;
130792     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 31 observations read from the data set WORK.MODELSTATS.
NOTE: The data set WORK.MODELSTATS has 31 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130793     proc format;
MPRINT(EM_DIAGRAM):   proc format;
130794     value RoleFmt 1='Train' 2='Valid' 3='Test';
MPRINT(EM_DIAGRAM):   value RoleFmt 1='Train' 2='Valid' 3='Test';
NOTE: Format ROLEFMT has been output.
MPRINT(EM_DIAGRAM):   run;
130795     run;
 
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130796     proc print data= work.modelstats(drop=STAT target targetLabel) noobs label;
MPRINT(EM_DIAGRAM):   proc print data= work.modelstats(drop=STAT target targetLabel) noobs label;
130797     label Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_statistics_vlabel, NOQUOTE))" NumRole= "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "Statistics" NumRole= "Data Role";
130798     title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_fittable_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Fit Statistics Table";
130799     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_target_title,   NOQUOTE, Cases_in_1000s))";
MPRINT(EM_DIAGRAM):   title10 "Target: Cases_in_1000s";
MPRINT(EM_DIAGRAM):   by NumRole;
MPRINT(EM_DIAGRAM):   format NumRole RoleFmt.;
MPRINT(EM_DIAGRAM):   run;
130800     by NumRole;
130801     format NumRole RoleFmt.;
130802     run;
 
NOTE: There were 31 observations read from the data set WORK.MODELSTATS.
NOTE: The PROCEDURE PRINT printed page 46.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130803     title9;
MPRINT(EM_DIAGRAM):   title9;
130804     title10;
MPRINT(EM_DIAGRAM):   title10;
130805     data EMWS2.MdlComp_COMPAREFIT;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_COMPAREFIT;
130806     length DataRole Target $32 targetlabel $200;
MPRINT(EM_DIAGRAM):   length DataRole Target $32 targetlabel $200;
130807     label DataRole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" STAT = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_vlabel,   NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_statlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DataRole = "Data Role" STAT = "Fit Statistics" LABEL = "Statistics Label";
130808     set work.modelstats;
MPRINT(EM_DIAGRAM):   set work.modelstats;
130809     DataRole = strip(put(NumRole, Rolefmt.));
MPRINT(EM_DIAGRAM):   DataRole = strip(put(NumRole, Rolefmt.));
130810     drop NumRole;
MPRINT(EM_DIAGRAM):   drop NumRole;
130811     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 31 observations read from the data set WORK.MODELSTATS.
NOTE: The data set EMWS2.MDLCOMP_COMPAREFIT has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
130812     %macro ReportFit;
130813     proc transpose data= EMWS2.MdlComp_EMOUTFIT(obs=1) out=tempFit;
130814     run;
130815     data _null_;
130816     set tempfit end=eof;
130817     retain statCount 0;
130818     if substr(_NAME_,1,2) ^in('_V', '_T', 'TK', 'VK') then do;
130819     statCount + 1;
130820     call symput('statName'!!strip(put(statCount,best.)), _NAME_);
130821     call symput('statLabel'!!strip(put(statCount,best.)), scan(_LABEL_,2, ':'));
130822     end;
130823     if eof then do;
130824     call symput('statCount', strip(put(statCount,best.)));
130825     end;
130826     run;
130827     data EMWS2.MdlComp_EMREPORTFIT;
130828     set EMWS2.MdlComp_EMOUTFIT;
130829     length FitStat $41 Label $40;
130830     label FitStat = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_vlabel,   NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_statlabel_vlabel, NOQUOTE))";
130831     %do i=1 %to &statCount;
130832     FitStat="&&StatName&i";
130833     Label="&&StatLabel&i";
130834     Train =&&StatName&i;
130835     %if &&StatName&i= KS %then %do;
130836     Validate = VKS;
130837     Test = TKS;
130838     %end;
130839     %else %if &&StatName&i= BINNED_KS_PROB_CUTOFF %then %do;
130840     Validate = _VBINNED_KS_PROB_CUTOFF_;
130841     Test = _TBINNED_KS_PROB_CUTOFF_;
130842     %end;
130843     %else %do;
130844     %let VstatName= _V%substr(&&StatName&i,2);
130845     %let TstatName= _T%substr(&&StatName&i,2);
130846     Validate=&VStatName;
130847     Test=&TStatName;
130848     %end;
130849     output;
130850     %end;
130851     keep Parent Model Target TargetLabel FitStat Label Train Validate Test;
130852     run;
130853     %mend;
130854     %reportFit;
MPRINT(EM_DIAGRAM):
MPRINT(REPORTFIT):   proc transpose data= EMWS2.MdlComp_EMOUTFIT(obs=1) out=tempFit;
MPRINT(REPORTFIT):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: The data set WORK.TEMPFIT has 31 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORTFIT):   data _null_;
MPRINT(REPORTFIT):   set tempfit end=eof;
MPRINT(REPORTFIT):   retain statCount 0;
MPRINT(REPORTFIT):   if substr(_NAME_,1,2) ^in('_V', '_T', 'TK', 'VK') then do;
MPRINT(REPORTFIT):   statCount + 1;
MPRINT(REPORTFIT):   call symput('statName'!!strip(put(statCount,best.)), _NAME_);
MPRINT(REPORTFIT):   call symput('statLabel'!!strip(put(statCount,best.)), scan(_LABEL_,2, ':'));
MPRINT(REPORTFIT):   end;
MPRINT(REPORTFIT):   if eof then do;
MPRINT(REPORTFIT):   call symput('statCount', strip(put(statCount,best.)));
MPRINT(REPORTFIT):   end;
MPRINT(REPORTFIT):   run;
 
NOTE: There were 31 observations read from the data set WORK.TEMPFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORTFIT):   data EMWS2.MdlComp_EMREPORTFIT;
MPRINT(REPORTFIT):   set EMWS2.MdlComp_EMOUTFIT;
MPRINT(REPORTFIT):   length FitStat $41 Label $40;
MPRINT(REPORTFIT):   label FitStat = "Fit Statistics" LABEL = "Statistics Label";
MPRINT(REPORTFIT):   FitStat="_CRITERION_";
MPRINT(REPORTFIT):   Label=" Valid";
MPRINT(REPORTFIT):   Train =_CRITERION_;
MPRINT(REPORTFIT):   Validate=_VCRITERION_;
MPRINT(REPORTFIT):   Test=_TCRITERION_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_AIC_      ";
MPRINT(REPORTFIT):   Label=" Akaike's Information Criterion            ";
MPRINT(REPORTFIT):   Train =_AIC_ ;
MPRINT(REPORTFIT):   Validate=_VAIC_;
MPRINT(REPORTFIT):   Test=_TAIC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_ASE_      ";
MPRINT(REPORTFIT):   Label=" Average Squared Error                     ";
MPRINT(REPORTFIT):   Train =_ASE_ ;
MPRINT(REPORTFIT):   Validate=_VASE_;
MPRINT(REPORTFIT):   Test=_TASE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_AVERR_    ";
MPRINT(REPORTFIT):   Label=" Average Error Function                    ";
MPRINT(REPORTFIT):   Train =_AVERR_ ;
MPRINT(REPORTFIT):   Validate=_VAVERR_;
MPRINT(REPORTFIT):   Test=_TAVERR_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DFE_      ";
MPRINT(REPORTFIT):   Label=" Degrees of Freedom for Error              ";
MPRINT(REPORTFIT):   Train =_DFE_ ;
MPRINT(REPORTFIT):   Validate=_VDFE_;
MPRINT(REPORTFIT):   Test=_TDFE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DFM_      ";
MPRINT(REPORTFIT):   Label=" Model Degrees of Freedom                  ";
MPRINT(REPORTFIT):   Train =_DFM_ ;
MPRINT(REPORTFIT):   Validate=_VDFM_;
MPRINT(REPORTFIT):   Test=_TDFM_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DFT_      ";
MPRINT(REPORTFIT):   Label=" Total Degrees of Freedom                  ";
MPRINT(REPORTFIT):   Train =_DFT_ ;
MPRINT(REPORTFIT):   Validate=_VDFT_;
MPRINT(REPORTFIT):   Test=_TDFT_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DIV_      ";
MPRINT(REPORTFIT):   Label=" Divisor for ASE                           ";
MPRINT(REPORTFIT):   Train =_DIV_ ;
MPRINT(REPORTFIT):   Validate=_VDIV_;
MPRINT(REPORTFIT):   Test=_TDIV_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_ERR_      ";
MPRINT(REPORTFIT):   Label=" Error Function                            ";
MPRINT(REPORTFIT):   Train =_ERR_ ;
MPRINT(REPORTFIT):   Validate=_VERR_;
MPRINT(REPORTFIT):   Test=_TERR_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_FPE_      ";
MPRINT(REPORTFIT):   Label=" Final Prediction Error                    ";
MPRINT(REPORTFIT):   Train =_FPE_ ;
MPRINT(REPORTFIT):   Validate=_VFPE_;
MPRINT(REPORTFIT):   Test=_TFPE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_MAX_      ";
MPRINT(REPORTFIT):   Label=" Maximum Absolute Error                    ";
MPRINT(REPORTFIT):   Train =_MAX_ ;
MPRINT(REPORTFIT):   Validate=_VMAX_;
MPRINT(REPORTFIT):   Test=_TMAX_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_MSE_      ";
MPRINT(REPORTFIT):   Label=" Mean Square Error                         ";
MPRINT(REPORTFIT):   Train =_MSE_ ;
MPRINT(REPORTFIT):   Validate=_VMSE_;
MPRINT(REPORTFIT):   Test=_TMSE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_NOBS_     ";
MPRINT(REPORTFIT):   Label=" Sum of Frequencies                        ";
MPRINT(REPORTFIT):   Train =_NOBS_ ;
MPRINT(REPORTFIT):   Validate=_VNOBS_;
MPRINT(REPORTFIT):   Test=_TNOBS_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_NW_       ";
MPRINT(REPORTFIT):   Label=" Number of Estimate Weights                ";
MPRINT(REPORTFIT):   Train =_NW_ ;
MPRINT(REPORTFIT):   Validate=_VNW_;
MPRINT(REPORTFIT):   Test=_TNW_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RASE_     ";
MPRINT(REPORTFIT):   Label=" Root Average Sum of Squares               ";
MPRINT(REPORTFIT):   Train =_RASE_ ;
MPRINT(REPORTFIT):   Validate=_VRASE_;
MPRINT(REPORTFIT):   Test=_TRASE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RFPE_     ";
MPRINT(REPORTFIT):   Label=" Root Final Prediction Error               ";
MPRINT(REPORTFIT):   Train =_RFPE_ ;
MPRINT(REPORTFIT):   Validate=_VRFPE_;
MPRINT(REPORTFIT):   Test=_TRFPE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RMSE_     ";
MPRINT(REPORTFIT):   Label=" Root Mean Squared Error                   ";
MPRINT(REPORTFIT):   Train =_RMSE_ ;
MPRINT(REPORTFIT):   Validate=_VRMSE_;
MPRINT(REPORTFIT):   Test=_TRMSE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_SBC_      ";
MPRINT(REPORTFIT):   Label=" Schwarz's Bayesian Criterion              ";
MPRINT(REPORTFIT):   Train =_SBC_ ;
MPRINT(REPORTFIT):   Validate=_VSBC_;
MPRINT(REPORTFIT):   Test=_TSBC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_SSE_      ";
MPRINT(REPORTFIT):   Label=" Sum of Squared Errors                     ";
MPRINT(REPORTFIT):   Train =_SSE_ ;
MPRINT(REPORTFIT):   Validate=_VSSE_;
MPRINT(REPORTFIT):   Test=_TSSE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_SUMW_     ";
MPRINT(REPORTFIT):   Label=" Sum of Case Weights Times Freq            ";
MPRINT(REPORTFIT):   Train =_SUMW_ ;
MPRINT(REPORTFIT):   Validate=_VSUMW_;
MPRINT(REPORTFIT):   Test=_TSUMW_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   keep Parent Model Target TargetLabel FitStat Label Train Validate Test;
MPRINT(REPORTFIT):   run;
 
NOTE: Variable _VCRITERION_ is uninitialized.
NOTE: Variable _TCRITERION_ is uninitialized.
NOTE: Variable _VAIC_ is uninitialized.
NOTE: Variable _TAIC_ is uninitialized.
NOTE: Variable _TASE_ is uninitialized.
NOTE: Variable _TAVERR_ is uninitialized.
NOTE: Variable _VDFE_ is uninitialized.
NOTE: Variable _TDFE_ is uninitialized.
NOTE: Variable _VDFM_ is uninitialized.
NOTE: Variable _TDFM_ is uninitialized.
NOTE: Variable _VDFT_ is uninitialized.
NOTE: Variable _TDFT_ is uninitialized.
NOTE: Variable _TDIV_ is uninitialized.
NOTE: Variable _TERR_ is uninitialized.
NOTE: Variable _VFPE_ is uninitialized.
NOTE: Variable _TFPE_ is uninitialized.
NOTE: Variable _TMAX_ is uninitialized.
NOTE: Variable _TMSE_ is uninitialized.
NOTE: Variable _TNOBS_ is uninitialized.
NOTE: Variable _VNW_ is uninitialized.
NOTE: Variable _TNW_ is uninitialized.
NOTE: Variable _TRASE_ is uninitialized.
NOTE: Variable _VRFPE_ is uninitialized.
NOTE: Variable _TRFPE_ is uninitialized.
NOTE: Variable _TRMSE_ is uninitialized.
NOTE: Variable _VSBC_ is uninitialized.
NOTE: Variable _TSBC_ is uninitialized.
NOTE: Variable _TSSE_ is uninitialized.
NOTE: Variable _TSUMW_ is uninitialized.
NOTE: There were 4 observations read from the data set EMWS2.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS2.MDLCOMP_EMREPORTFIT has 80 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
130855     proc datasets library=EMWS2 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS2 nolist;
130856     modify MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   modify MdlComp_EMRANK;
130857     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" TARGET =
130858        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   run;
130859     run;
 
NOTE: MODIFY was successful for EMWS2.MDLCOMP_EMRANK.DATA.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
130860     proc sort data=EMWS2.MdlComp_EMRANK NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.MdlComp_EMRANK NOTHREADS;
130861     by descending model target;
MPRINT(EM_DIAGRAM):   by descending model target;
130862     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 160 observations read from the data set EMWS2.MDLCOMP_EMRANK.
NOTE: The data set EMWS2.MDLCOMP_EMRANK has 160 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130863     proc datasets library=EMWS2 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS2 nolist;
130864     modify MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify MdlComp_EMSCOREDIST;
130865     label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))" MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" TARGET =
130866        "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   run;
130867     run;
 
NOTE: MODIFY was successful for EMWS2.MDLCOMP_EMSCOREDIST.DATA.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
130868     proc sort data=EMWS2.MdlComp_EMSCOREDIST NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.MdlComp_EMSCOREDIST NOTHREADS;
130869     by descending model target;
MPRINT(EM_DIAGRAM):   by descending model target;
130870     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 147 observations read from the data set EMWS2.MDLCOMP_EMSCOREDIST.
NOTE: The data set EMWS2.MDLCOMP_EMSCOREDIST has 147 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 11, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:11:15" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 11, 2019
Time:                14:11:15
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0VP9N08 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0VP9N08 new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS2.REG5_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS2.REG5_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
130972     /* Generate assessment metadata, which will be used to generate assessment data step */
130973     /* code, such as retrieving names of temporary variables and summary variables,      */
130974     /* labels, etc.  It is used in almost all the assessment computations such as lift,  */
130975     /* roc, index, scoreDist and could be thought as a global variable in assessment     */
130976     /* computation.                                                                      */
130977     data work.ASSESS_3FQ6TWG_assessMeta_uon6Mh;
MPRINT(EM_DIAGRAM):    data work.ASSESS_3FQ6TWG_assessMeta_uon6Mh;
130978     length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32
130978   ! RESULT_MAX_LABEL
130979        $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX
$32 RESULT_MAX_LABEL $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
130980     VARIABLE = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   VARIABLE = "Cases_in_1000s";
130981     PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
130982     FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
130983     TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
130984     LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
130985     PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
130986     MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
130987     LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
130988     GEN_VAR_IN_TEMP_DATA = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "Cases_in_1000s";
130989     RESULT_MEAN = "_targetMean_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_targetMean_";
130990     RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Target";
130991     RESULT_MIN = "_targetMin_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_targetMin_";
130992     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Target";
130993     MIN_ADJUSTED = "Cases_in_minAdjusted_hSld0XZGA";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "Cases_in_minAdjusted_hSld0XZGA";
130994     RESULT_MAX = "_targetMax_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_targetMax_";
130995     RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Target";
130996     MAX_ADJUSTED = "Cases_in_maxAdjusted_WmBqfzlY0";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "Cases_in_maxAdjusted_WmBqfzlY0";
130997     RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
130998     RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
130999     TEMPORARY_VARIABLE = "Cases_in_1000s_6UwWzJz_D0SZVYS";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "Cases_in_1000s_6UwWzJz_D0SZVYS";
131000     output;
MPRINT(EM_DIAGRAM):   output;
131001     VARIABLE = "P_Cases_in_1000s";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_Cases_in_1000s";
131002     FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
131003     TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
131004     PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
131005     LEVEL = "";
MPRINT(EM_DIAGRAM):   LEVEL = "";
131006     PROPERTY = "PREDICTED";
MPRINT(EM_DIAGRAM):   PROPERTY = "PREDICTED";
131007     MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
131008     LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
131009     GEN_VAR_IN_TEMP_DATA = "P_Cases_in_1000s";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_Cases_in_1000s";
131010     RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
131011     RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Predicted";
131012     RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
131013     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
131014     MIN_ADJUSTED = "P_Cases__minAdjusted_X1GyIDffX";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_Cases__minAdjusted_X1GyIDffX";
131015     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
131016     RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
131017     RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Predicted";
131018     MAX_ADJUSTED = "max_adjusted";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "max_adjusted";
131019     RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
131020     RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
131021     TEMPORARY_VARIABLE = "P_Cases_in_1000s_Rho5D6MXyvlO67d";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_Cases_in_1000s_Rho5D6MXyvlO67d";
131022     output;
MPRINT(EM_DIAGRAM):   output;
131023     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.ASSESS_3FQ6TWG_ASSESSMETA_UON6MH has 2 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
131024     /* Generate temporary dataset and obtain summary statistics such as total number of   */
131025     /* obserations, frequency of target.  However, summary statistics for class reporting */
131026     /* variabels are not computed here since if there exist class reporting variables,    */
131027     /* then PROC DMDB will be called. And there is no need to compute interval reporting  */
131028     /* summary statisitcs, if any.                                                        */
131029     data work.ASSESS_3FQ6TWG_normSD_5cdC4g(drop=
131030     _numberOfObservation_
131031     _intervalTargetMin_ _intervalTargetMax_
131032     )
131033     work.ASSESS_3FQ6TWG_meansAndTi_nhgZ0P (keep=
131034     _numberOfObservation_
131035     _intervalTargetMin_ _intervalTargetMax_
131036     );
MPRINT(EM_DIAGRAM):    data work.ASSESS_3FQ6TWG_normSD_5cdC4g(drop= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ ) work.ASSESS_3FQ6TWG_meansAndTi_nhgZ0P (keep= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ );
131037     set EMWS2.Reg5_TRAIN(
131038     where=(
131039     (Cases_in_1000s ^= .)
131040     and (P_Cases_in_1000s ^= .)
131041     )
131042     ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_TRAIN( where=( (Cases_in_1000s ^= .) and (P_Cases_in_1000s ^= .) ) ) end=_lastObservation_;
131043     keep frequency_2LZq_q;
MPRINT(EM_DIAGRAM):   keep frequency_2LZq_q;
131044     frequency_2LZq_q = 1;
MPRINT(EM_DIAGRAM):   frequency_2LZq_q = 1;
131045     keep Cases_in_1000s;
MPRINT(EM_DIAGRAM):   keep Cases_in_1000s;
131046     keep P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   keep P_Cases_in_1000s;
131047     output work.ASSESS_3FQ6TWG_normSD_5cdC4g;
MPRINT(EM_DIAGRAM):   output work.ASSESS_3FQ6TWG_normSD_5cdC4g;
131048     keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
131049     retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
131050     _numberOfObservation_ + frequency_2LZq_q;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_2LZq_q;
131051     keep _intervalTargetMin_ _intervalTargetMax_;
MPRINT(EM_DIAGRAM):   keep _intervalTargetMin_ _intervalTargetMax_;
131052     retain _intervalTargetMin_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMin_ .;
131053     retain _intervalTargetMax_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMax_ .;
131054     if (_n_ = 1) then do;
MPRINT(EM_DIAGRAM):   if (_n_ = 1) then do;
131055     _intervalTargetMin_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Cases_in_1000s;
131056     _intervalTargetMax_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Cases_in_1000s;
131057     end;
MPRINT(EM_DIAGRAM):   end;
131058     else do;
MPRINT(EM_DIAGRAM):   else do;
131059     if (_intervalTargetMin_ > P_Cases_in_1000s) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMin_ > P_Cases_in_1000s) then do;
131060     _intervalTargetMin_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Cases_in_1000s;
131061     end;
MPRINT(EM_DIAGRAM):   end;
131062     if (_intervalTargetMax_ < P_Cases_in_1000s) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMax_ < P_Cases_in_1000s) then do;
131063     _intervalTargetMax_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Cases_in_1000s;
131064     end;
MPRINT(EM_DIAGRAM):   end;
131065     end;
MPRINT(EM_DIAGRAM):   end;
131066     if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
131067     output work.ASSESS_3FQ6TWG_meansAndTi_nhgZ0P;
MPRINT(EM_DIAGRAM):   output work.ASSESS_3FQ6TWG_meansAndTi_nhgZ0P;
131068     end;
MPRINT(EM_DIAGRAM):   end;
131069     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS2.REG5_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 728 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 715 observations read from the data set EMWS2.REG5_TRAIN.
      WHERE (Cases_in_1000s not = .) and (P_Cases_in_1000s not = .);
NOTE: The data set WORK.ASSESS_3FQ6TWG_NORMSD_5CDC4G has 715 observations and 3 variables.
NOTE: The data set WORK.ASSESS_3FQ6TWG_MEANSANDTI_NHGZ0P has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
131070     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
131071     set EMWS2.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK;
131072     where MODEL = "Reg5" and TARGET = "Cases_in_1000s" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Reg5" and TARGET = "Cases_in_1000s" and dataRole="TRAIN";
131073     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS2.MDLCOMP_EMRANK.
      WHERE (MODEL='Reg5') and (TARGET='Cases_in_1000s') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
131074     data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
131075     do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
131076     DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
131077     output;
MPRINT(EM_DIAGRAM):   output;
131078     end;
MPRINT(EM_DIAGRAM):   end;
131079     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
131080     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
131081     merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
131082     by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
131083     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
131084     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
131085     set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
131086     retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
131087     retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
131088     keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
131089     if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
131090     bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
131091     _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
131092     if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
131093     /* tied */
131094     _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
131095     ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
131096     end;
MPRINT(EM_DIAGRAM):   end;
131097     else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
131098     /* next tied */
131099     _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
131100     ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ ));
131101     end;
MPRINT(EM_DIAGRAM):   end;
131102     output;
MPRINT(EM_DIAGRAM):   output;
131103     *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
131104     * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
131105     *end;
MPRINT(EM_DIAGRAM):   *end;
131106     if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
131107     _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
131108     end;
MPRINT(EM_DIAGRAM):   end;
131109     else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
131110     if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
131111     _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
131112     end;
MPRINT(EM_DIAGRAM):   end;
131113     end;
MPRINT(EM_DIAGRAM):   end;
131114     bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
131115     /* correct the previous change */
131116     end;
MPRINT(EM_DIAGRAM):   end;
131117     if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
131118     _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
131119     output;
MPRINT(EM_DIAGRAM):   output;
131120     end;
MPRINT(EM_DIAGRAM):   end;
131121     _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
131122     _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
131123     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
131124     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
131125     set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
131126     by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
131127     retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
131128     if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
131129     _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
131130     end;
MPRINT(EM_DIAGRAM):   end;
131131     if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
131132     _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
131133     output;
MPRINT(EM_DIAGRAM):   output;
131134     end;
MPRINT(EM_DIAGRAM):   end;
131135     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
131136     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG5_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
131137     *------------------------------------------------------------*;
131138     * MdlComp: Scoring REG5_TRAIN data;
131139     *------------------------------------------------------------*;
131140     data EMWS2.MdlComp_TRAIN
131141     / view=EMWS2.MdlComp_TRAIN
131142     ;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_TRAIN / view=EMWS2.MdlComp_TRAIN ;
131143     set EMWS2.Reg5_TRAIN
131144     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_TRAIN ;
131145     %inc emflow;
MPRINT(EM_DIAGRAM):   if (P_Cases_in_1000s ge 288.241624037156) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 122.61877930895) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 85.8827981030965) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 53.8465796159833) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 48.8668399322475) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 44.0420113544423) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 34.1568129202454) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 26.0130310901372) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 23.1554711498296) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 16.7982907718532) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 12.2270976562916) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 10.2930191652826) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 7.29799764770225) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 5.28642550062574) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 3.43753373559824) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 2.07666959146316) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 0.60569920481362) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -0.8359698163787) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -4.35749304688957) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 20;
MPRINT(EM_DIAGRAM):   end;
131225     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS2.MDLCOMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.REG5_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
131226     quit;
131227     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
131228     filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG5_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
131229     *------------------------------------------------------------*;
131230     * MdlComp: Scoring REG5_VALIDATE data;
131231     *------------------------------------------------------------*;
131232     data EMWS2.MdlComp_VALIDATE
131233     / view=EMWS2.MdlComp_VALIDATE
131234     ;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_VALIDATE / view=EMWS2.MdlComp_VALIDATE ;
131235     set EMWS2.Reg5_VALIDATE
131236     ;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg5_VALIDATE ;
131237     %inc emflow;
MPRINT(EM_DIAGRAM):   if (P_Cases_in_1000s ge 288.241624037156) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 122.61877930895) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 85.8827981030965) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 53.8465796159833) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 48.8668399322475) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 44.0420113544423) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 34.1568129202454) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 26.0130310901372) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 23.1554711498296) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 16.7982907718532) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 12.2270976562916) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 10.2930191652826) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 7.29799764770225) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 5.28642550062574) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 3.43753373559824) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 2.07666959146316) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 0.60569920481362) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -0.8359698163787) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -4.35749304688957) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 20;
MPRINT(EM_DIAGRAM):   end;
131317     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS2.MDLCOMP_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.REG5_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
131318     quit;
131319     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
131320     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
131321     * MdlComp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp: Computing metadata for TRAIN data;
131322     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS2.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.MdlComp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.MdlComp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.MdlComp_TRAIN out=WORK.M3KU_FNL noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KU_FNL;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KU_FNL(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KU_FNL;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KU_FNL;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1M39GYG NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1LZJWLU(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   set WORK.M1M39GYG;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS2.Reg5_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Reg5_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS2.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: View EMWS2.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 11, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:11:16" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                December 11, 2019
Time:                14:11:16
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1FCUH4V "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS2\MdlComp\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1FCUH4V new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
