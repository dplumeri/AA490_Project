MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 14, 
2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:24:15" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 14, 2019
Time:                16:24:15
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0TI5LTL "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0TI5LTL new;
MPRINT(EM_DIAGRAM):   run;
95161      proc transpose data=EMWS1.Reg_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg_EMESTIMATE out=WORK.TEMPREG;
95162      where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
95163      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.REG_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 45 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

95164      proc transpose data=EMWS1.Reg_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg_MAPDS 
out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
95165      var "OG_Cases_in_Thousands_85_"n--"Projected_Sum_Pop_18_24"n;
MPRINT(EM_DIAGRAM):   var "OG_Cases_in_Thousands_85_"n--"Projected_Sum_Pop_18_24"n;
95166      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 8 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

95167      proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
95168      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
95169      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 45 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 45 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

95170      proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
95171      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
95172      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 8 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

95173      data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
95174      merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
95175      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
95176      if (ina and inb) and Age_group ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and Age_group ne . then output;
95177      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 45 observations read from the data set WORK.TEMPREG.
NOTE: There were 8 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 4 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

95178      data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
95179      length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
95180      set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
95181      i=1;
MPRINT(EM_DIAGRAM):   i=1;
95182      do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
95183      term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
95184      i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
95185      output;
MPRINT(EM_DIAGRAM):   output;
95186      end;
MPRINT(EM_DIAGRAM):   end;
95187      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 4 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

95188      proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
95189      by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
95190      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.TEMPREG3.
NOTE: 3 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 1 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

95191      filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base
95191    ! Model\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
95192      *------------------------------------------------------------*;
95193      * Reg: Scoring DATA data;
95194      *------------------------------------------------------------*;
95195      data EMWS1.Reg_TRAIN
95196      / view=EMWS1.Reg_TRAIN
95197      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_TRAIN / view=EMWS1.Reg_TRAIN ;
95198      set EMWS1.Part3_TRAIN
95199      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part3_TRAIN ;
95200      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final 
      Project\AA490_Project\Base Model\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
95201     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
95202     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
95203     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
95204     +
95205     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
95206     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
95207     +
95208     +length I_Age_group $ 19;
MPRINT(EM_DIAGRAM):   length I_Age_group $ 19;
95209     +label I_Age_group = 'Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label I_Age_group = 'Into: Age_group' ;
95210     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
95211     +array REGDRF [5] $19 _temporary_ ('85+' '65-84' '25-44' '18-24' '0-17' );
MPRINT(EM_DIAGRAM):   array REGDRF [5] $19 _temporary_ ('85+' '65-84' '25-44' '18-24' '0-17' );
95212     +label U_Age_group = 'Unnormalized Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label U_Age_group = 'Unnormalized Into: Age_group' ;
95213     +length U_Age_group $ 19;
MPRINT(EM_DIAGRAM):   length U_Age_group $ 19;
95214     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
95215     +array REGDRU[5] $ 19 _temporary_ ('85+                '
95216     +'65-84              '  '25-44              '  '18-24              '
95217     +'0-17               ' );
MPRINT(EM_DIAGRAM):   array REGDRU[5] $ 19 _temporary_ ('85+                ' '65-84           
   ' '25-44              ' '18-24              ' '0-17               ' );
95218     +
95219     +*** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
95220     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
95221     +label F_Age_group = 'From: Age_group' ;
MPRINT(EM_DIAGRAM):   label F_Age_group = 'From: Age_group' ;
95222     +length F_Age_group $ 19;
MPRINT(EM_DIAGRAM):   length F_Age_group $ 19;
95223     +%DMNORMCP( Age_group , F_Age_group )
MPRINT(DMNORMCP):   F_Age_group=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95224     +if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
95225     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
95226     +end;
MPRINT(EM_DIAGRAM):   end;
95227     +else do;
MPRINT(EM_DIAGRAM):   else do;
95228     +   if F_Age_group = '25-44'  then do;
MPRINT(EM_DIAGRAM):   if F_Age_group = '25-44' then do;
95229     +      _Y = 2;
MPRINT(EM_DIAGRAM):   _Y = 2;
95230     +   end;
MPRINT(EM_DIAGRAM):   end;
95231     +   else if F_Age_group = '65-84'  then do;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '65-84' then do;
95232     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
95233     +   end;
MPRINT(EM_DIAGRAM):   end;
95234     +   else if F_Age_group = '85+'  then do;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '85+' then do;
95235     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
95236     +   end;
MPRINT(EM_DIAGRAM):   end;
95237     +   else if F_Age_group = '18-24'  then do;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '18-24' then do;
95238     +      _Y = 3;
MPRINT(EM_DIAGRAM):   _Y = 3;
95239     +   end;
MPRINT(EM_DIAGRAM):   end;
95240     +   else if F_Age_group = '0-17'  then do;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '0-17' then do;
95241     +      _Y = 4;
MPRINT(EM_DIAGRAM):   _Y = 4;
95242     +   end;
MPRINT(EM_DIAGRAM):   end;
95243     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95244     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
95245     +   end;
MPRINT(EM_DIAGRAM):   end;
95246     +end;
MPRINT(EM_DIAGRAM):   end;
95247     +
95248     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
95249     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
95250     +
95251     +*** Check Projected_Sum_Pop for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Projected_Sum_Pop for missing values ;
95252     +if missing( Projected_Sum_Pop ) then do;
MPRINT(EM_DIAGRAM):   if missing( Projected_Sum_Pop ) then do;
95253     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95254     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95255     +end;
MPRINT(EM_DIAGRAM):   end;
95256     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
95257     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
95258     +   _P0 = 0.2045454545;
MPRINT(EM_DIAGRAM):   _P0 = 0.2045454545;
95259     +   _P1 = 0.2045454545;
MPRINT(EM_DIAGRAM):   _P1 = 0.2045454545;
95260     +   _P2 = 0.2045454545;
MPRINT(EM_DIAGRAM):   _P2 = 0.2045454545;
95261     +   _P3 = 0.1904761905;
MPRINT(EM_DIAGRAM):   _P3 = 0.1904761905;
95262     +   _P4 = 0.1958874459;
MPRINT(EM_DIAGRAM):   _P4 = 0.1958874459;
95263     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
95264     +end;
MPRINT(EM_DIAGRAM):   end;
95265     +
95266     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
95267     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
95268     +drop _LP0  _LP1 _LP2 _LP3;
MPRINT(EM_DIAGRAM):   drop _LP0 _LP1 _LP2 _LP3;
95269     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
95270     +_LP1 = 0;
MPRINT(EM_DIAGRAM):   _LP1 = 0;
95271     +_LP2 = 0;
MPRINT(EM_DIAGRAM):   _LP2 = 0;
95272     +_LP3 = 0;
MPRINT(EM_DIAGRAM):   _LP3 = 0;
95273     +
95274     +***  Effect: Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   *** Effect: Projected_Sum_Pop ;
95275     +_TEMP = Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   _TEMP = Projected_Sum_Pop ;
95276     +_LP0 = _LP0 + (   -0.00005237216765 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00005237216765 * _TEMP);
95277     +_LP1 = _LP1 + (    0.00007409396434 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.00007409396434 * _TEMP);
95278     +_LP2 = _LP2 + (    0.00004594744223 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP2 = _LP2 + ( 0.00004594744223 * _TEMP);
95279     +_LP3 = _LP3 + (   -0.00001602024499 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP3 = _LP3 + ( -0.00001602024499 * _TEMP);
95280     +
95281     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
95282     +drop _MAXP _IY _P0 _P1 _P2 _P3 _P4;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1 _P2 _P3 _P4;
95283     +drop _LPMAX;
MPRINT(EM_DIAGRAM):   drop _LPMAX;
95284     +_LPMAX= 0;
MPRINT(EM_DIAGRAM):   _LPMAX= 0;
95285     +_LP0 =     34.6944595978139 + _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 34.6944595978139 + _LP0;
95286     +if _LPMAX < _LP0 then _LPMAX = _LP0;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP0 then _LPMAX = _LP0;
95287     +_LP1 =    -143.743698657692 + _LP1;
MPRINT(EM_DIAGRAM):   _LP1 = -143.743698657692 + _LP1;
95288     +if _LPMAX < _LP1 then _LPMAX = _LP1;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP1 then _LPMAX = _LP1;
95289     +_LP2 =    -81.8323041687444 + _LP2;
MPRINT(EM_DIAGRAM):   _LP2 = -81.8323041687444 + _LP2;
95290     +if _LPMAX < _LP2 then _LPMAX = _LP2;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP2 then _LPMAX = _LP2;
95291     +_LP3 =     18.3099747103227 + _LP3;
MPRINT(EM_DIAGRAM):   _LP3 = 18.3099747103227 + _LP3;
95292     +if _LPMAX < _LP3 then _LPMAX = _LP3;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP3 then _LPMAX = _LP3;
95293     +_LP0 = exp(_LP0 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP0 = exp(_LP0 - _LPMAX);
95294     +_LP1 = exp(_LP1 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP1 = exp(_LP1 - _LPMAX);
95295     +_LP2 = exp(_LP2 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP2 = exp(_LP2 - _LPMAX);
95296     +_LP3 = exp(_LP3 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP3 = exp(_LP3 - _LPMAX);
95297     +_LPMAX = exp(-_LPMAX);
MPRINT(EM_DIAGRAM):   _LPMAX = exp(-_LPMAX);
95298     +_P4 = 1 / (_LPMAX + _LP0 + _LP1 + _LP2 + _LP3);
MPRINT(EM_DIAGRAM):   _P4 = 1 / (_LPMAX + _LP0 + _LP1 + _LP2 + _LP3);
95299     +_P0 = _LP0 * _P4;
MPRINT(EM_DIAGRAM):   _P0 = _LP0 * _P4;
95300     +_P1 = _LP1 * _P4;
MPRINT(EM_DIAGRAM):   _P1 = _LP1 * _P4;
95301     +_P2 = _LP2 * _P4;
MPRINT(EM_DIAGRAM):   _P2 = _LP2 * _P4;
95302     +_P3 = _LP3 * _P4;
MPRINT(EM_DIAGRAM):   _P3 = _LP3 * _P4;
95303     +_P4 = _LPMAX * _P4;
MPRINT(EM_DIAGRAM):   _P4 = _LPMAX * _P4;
95304     +
95305     +REGDR1:
95306     +
95307     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
95308     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
95309     +   R_Age_group85_ = .;
MPRINT(EM_DIAGRAM):   R_Age_group85_ = .;
95310     +   R_Age_group65_84 = .;
MPRINT(EM_DIAGRAM):   R_Age_group65_84 = .;
95311     +   R_Age_group25_44 = .;
MPRINT(EM_DIAGRAM):   R_Age_group25_44 = .;
95312     +   R_Age_group18_24 = .;
MPRINT(EM_DIAGRAM):   R_Age_group18_24 = .;
95313     +   R_Age_group0_17 = .;
MPRINT(EM_DIAGRAM):   R_Age_group0_17 = .;
95314     +end;
MPRINT(EM_DIAGRAM):   end;
95315     +else do;
MPRINT(EM_DIAGRAM):   else do;
95316     +    label R_Age_group85_ = 'Residual: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label R_Age_group85_ = 'Residual: Age_group=85+' ;
95317     +    label R_Age_group65_84 = 'Residual: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label R_Age_group65_84 = 'Residual: Age_group=65-84' ;
95318     +    label R_Age_group25_44 = 'Residual: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label R_Age_group25_44 = 'Residual: Age_group=25-44' ;
95319     +    label R_Age_group18_24 = 'Residual: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label R_Age_group18_24 = 'Residual: Age_group=18-24' ;
95320     +    label R_Age_group0_17 = 'Residual: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label R_Age_group0_17 = 'Residual: Age_group=0-17' ;
95321     +   R_Age_group85_ = - _P0;
MPRINT(EM_DIAGRAM):   R_Age_group85_ = - _P0;
95322     +   R_Age_group65_84 = - _P1;
MPRINT(EM_DIAGRAM):   R_Age_group65_84 = - _P1;
95323     +   R_Age_group25_44 = - _P2;
MPRINT(EM_DIAGRAM):   R_Age_group25_44 = - _P2;
95324     +   R_Age_group18_24 = - _P3;
MPRINT(EM_DIAGRAM):   R_Age_group18_24 = - _P3;
95325     +   R_Age_group0_17 = - _P4;
MPRINT(EM_DIAGRAM):   R_Age_group0_17 = - _P4;
95326     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
95327     +      when (0)  R_Age_group85_ = R_Age_group85_ + 1;
MPRINT(EM_DIAGRAM):   when (0) R_Age_group85_ = R_Age_group85_ + 1;
95328     +      when (1)  R_Age_group65_84 = R_Age_group65_84 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_Age_group65_84 = R_Age_group65_84 + 1;
95329     +      when (2)  R_Age_group25_44 = R_Age_group25_44 + 1;
MPRINT(EM_DIAGRAM):   when (2) R_Age_group25_44 = R_Age_group25_44 + 1;
95330     +      when (3)  R_Age_group18_24 = R_Age_group18_24 + 1;
MPRINT(EM_DIAGRAM):   when (3) R_Age_group18_24 = R_Age_group18_24 + 1;
95331     +      when (4)  R_Age_group0_17 = R_Age_group0_17 + 1;
MPRINT(EM_DIAGRAM):   when (4) R_Age_group0_17 = R_Age_group0_17 + 1;
95332     +   end;
MPRINT(EM_DIAGRAM):   end;
95333     +end;
MPRINT(EM_DIAGRAM):   end;
95334     +
95335     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
95336     +label P_Age_group85_ = 'Predicted: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label P_Age_group85_ = 'Predicted: Age_group=85+' ;
95337     +label P_Age_group65_84 = 'Predicted: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label P_Age_group65_84 = 'Predicted: Age_group=65-84' ;
95338     +label P_Age_group25_44 = 'Predicted: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label P_Age_group25_44 = 'Predicted: Age_group=25-44' ;
95339     +label P_Age_group18_24 = 'Predicted: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label P_Age_group18_24 = 'Predicted: Age_group=18-24' ;
95340     +label P_Age_group0_17 = 'Predicted: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label P_Age_group0_17 = 'Predicted: Age_group=0-17' ;
95341     +P_Age_group85_ = _P0;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = _P0;
95342     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
95343     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
95344     +P_Age_group65_84 = _P1;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = _P1;
95345     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
95346     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
95347     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
95348     +end;
MPRINT(EM_DIAGRAM):   end;
95349     +P_Age_group25_44 = _P2;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = _P2;
95350     +if (_P2 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P2 > _MAXP + 1E-8) then do;
95351     +   _MAXP = _P2;
MPRINT(EM_DIAGRAM):   _MAXP = _P2;
95352     +   _IY = 3;
MPRINT(EM_DIAGRAM):   _IY = 3;
95353     +end;
MPRINT(EM_DIAGRAM):   end;
95354     +P_Age_group18_24 = _P3;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = _P3;
95355     +if (_P3 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P3 > _MAXP + 1E-8) then do;
95356     +   _MAXP = _P3;
MPRINT(EM_DIAGRAM):   _MAXP = _P3;
95357     +   _IY = 4;
MPRINT(EM_DIAGRAM):   _IY = 4;
95358     +end;
MPRINT(EM_DIAGRAM):   end;
95359     +P_Age_group0_17 = _P4;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = _P4;
95360     +if (_P4 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P4 > _MAXP + 1E-8) then do;
95361     +   _MAXP = _P4;
MPRINT(EM_DIAGRAM):   _MAXP = _P4;
95362     +   _IY = 5;
MPRINT(EM_DIAGRAM):   _IY = 5;
95363     +end;
MPRINT(EM_DIAGRAM):   end;
95364     +I_Age_group = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_Age_group = REGDRF[_IY];
95365     +U_Age_group = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_Age_group = REGDRU[_IY];
95366     +
95367     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
95368     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
95369     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
95370      run;

NOTE: DATA STEP view saved on file EMWS1.REG_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
95371      quit;
95372      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
95373      filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base
95373    ! Model\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
95374      *------------------------------------------------------------*;
95375      * Reg: Scoring VALIDATE data;
95376      *------------------------------------------------------------*;
95377      data EMWS1.Reg_VALIDATE
95378      / view=EMWS1.Reg_VALIDATE
95379      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_VALIDATE / view=EMWS1.Reg_VALIDATE ;
95380      set EMWS1.Part3_VALIDATE
95381      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part3_VALIDATE ;
95382      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final 
      Project\AA490_Project\Base Model\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
95383     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
95384     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
95385     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
95386     +
95387     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
95388     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
95389     +
95390     +length I_Age_group $ 19;
MPRINT(EM_DIAGRAM):   length I_Age_group $ 19;
95391     +label I_Age_group = 'Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label I_Age_group = 'Into: Age_group' ;
95392     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
95393     +array REGDRF [5] $19 _temporary_ ('85+' '65-84' '25-44' '18-24' '0-17' );
MPRINT(EM_DIAGRAM):   array REGDRF [5] $19 _temporary_ ('85+' '65-84' '25-44' '18-24' '0-17' );
95394     +label U_Age_group = 'Unnormalized Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label U_Age_group = 'Unnormalized Into: Age_group' ;
95395     +length U_Age_group $ 19;
MPRINT(EM_DIAGRAM):   length U_Age_group $ 19;
95396     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
95397     +array REGDRU[5] $ 19 _temporary_ ('85+                '
95398     +'65-84              '  '25-44              '  '18-24              '
95399     +'0-17               ' );
MPRINT(EM_DIAGRAM):   array REGDRU[5] $ 19 _temporary_ ('85+                ' '65-84           
   ' '25-44              ' '18-24              ' '0-17               ' );
95400     +
95401     +*** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
95402     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
95403     +label F_Age_group = 'From: Age_group' ;
MPRINT(EM_DIAGRAM):   label F_Age_group = 'From: Age_group' ;
95404     +length F_Age_group $ 19;
MPRINT(EM_DIAGRAM):   length F_Age_group $ 19;
95405     +%DMNORMCP( Age_group , F_Age_group )
MPRINT(DMNORMCP):   F_Age_group=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95406     +if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
95407     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
95408     +end;
MPRINT(EM_DIAGRAM):   end;
95409     +else do;
MPRINT(EM_DIAGRAM):   else do;
95410     +   if F_Age_group = '25-44'  then do;
MPRINT(EM_DIAGRAM):   if F_Age_group = '25-44' then do;
95411     +      _Y = 2;
MPRINT(EM_DIAGRAM):   _Y = 2;
95412     +   end;
MPRINT(EM_DIAGRAM):   end;
95413     +   else if F_Age_group = '65-84'  then do;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '65-84' then do;
95414     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
95415     +   end;
MPRINT(EM_DIAGRAM):   end;
95416     +   else if F_Age_group = '85+'  then do;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '85+' then do;
95417     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
95418     +   end;
MPRINT(EM_DIAGRAM):   end;
95419     +   else if F_Age_group = '18-24'  then do;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '18-24' then do;
95420     +      _Y = 3;
MPRINT(EM_DIAGRAM):   _Y = 3;
95421     +   end;
MPRINT(EM_DIAGRAM):   end;
95422     +   else if F_Age_group = '0-17'  then do;
MPRINT(EM_DIAGRAM):   else if F_Age_group = '0-17' then do;
95423     +      _Y = 4;
MPRINT(EM_DIAGRAM):   _Y = 4;
95424     +   end;
MPRINT(EM_DIAGRAM):   end;
95425     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95426     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
95427     +   end;
MPRINT(EM_DIAGRAM):   end;
95428     +end;
MPRINT(EM_DIAGRAM):   end;
95429     +
95430     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
95431     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
95432     +
95433     +*** Check Projected_Sum_Pop for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Projected_Sum_Pop for missing values ;
95434     +if missing( Projected_Sum_Pop ) then do;
MPRINT(EM_DIAGRAM):   if missing( Projected_Sum_Pop ) then do;
95435     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95436     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95437     +end;
MPRINT(EM_DIAGRAM):   end;
95438     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
95439     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
95440     +   _P0 = 0.2045454545;
MPRINT(EM_DIAGRAM):   _P0 = 0.2045454545;
95441     +   _P1 = 0.2045454545;
MPRINT(EM_DIAGRAM):   _P1 = 0.2045454545;
95442     +   _P2 = 0.2045454545;
MPRINT(EM_DIAGRAM):   _P2 = 0.2045454545;
95443     +   _P3 = 0.1904761905;
MPRINT(EM_DIAGRAM):   _P3 = 0.1904761905;
95444     +   _P4 = 0.1958874459;
MPRINT(EM_DIAGRAM):   _P4 = 0.1958874459;
95445     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
95446     +end;
MPRINT(EM_DIAGRAM):   end;
95447     +
95448     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
95449     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
95450     +drop _LP0  _LP1 _LP2 _LP3;
MPRINT(EM_DIAGRAM):   drop _LP0 _LP1 _LP2 _LP3;
95451     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
95452     +_LP1 = 0;
MPRINT(EM_DIAGRAM):   _LP1 = 0;
95453     +_LP2 = 0;
MPRINT(EM_DIAGRAM):   _LP2 = 0;
95454     +_LP3 = 0;
MPRINT(EM_DIAGRAM):   _LP3 = 0;
95455     +
95456     +***  Effect: Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   *** Effect: Projected_Sum_Pop ;
95457     +_TEMP = Projected_Sum_Pop ;
MPRINT(EM_DIAGRAM):   _TEMP = Projected_Sum_Pop ;
95458     +_LP0 = _LP0 + (   -0.00005237216765 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00005237216765 * _TEMP);
95459     +_LP1 = _LP1 + (    0.00007409396434 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP1 = _LP1 + ( 0.00007409396434 * _TEMP);
95460     +_LP2 = _LP2 + (    0.00004594744223 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP2 = _LP2 + ( 0.00004594744223 * _TEMP);
95461     +_LP3 = _LP3 + (   -0.00001602024499 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP3 = _LP3 + ( -0.00001602024499 * _TEMP);
95462     +
95463     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
95464     +drop _MAXP _IY _P0 _P1 _P2 _P3 _P4;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1 _P2 _P3 _P4;
95465     +drop _LPMAX;
MPRINT(EM_DIAGRAM):   drop _LPMAX;
95466     +_LPMAX= 0;
MPRINT(EM_DIAGRAM):   _LPMAX= 0;
95467     +_LP0 =     34.6944595978139 + _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 34.6944595978139 + _LP0;
95468     +if _LPMAX < _LP0 then _LPMAX = _LP0;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP0 then _LPMAX = _LP0;
95469     +_LP1 =    -143.743698657692 + _LP1;
MPRINT(EM_DIAGRAM):   _LP1 = -143.743698657692 + _LP1;
95470     +if _LPMAX < _LP1 then _LPMAX = _LP1;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP1 then _LPMAX = _LP1;
95471     +_LP2 =    -81.8323041687444 + _LP2;
MPRINT(EM_DIAGRAM):   _LP2 = -81.8323041687444 + _LP2;
95472     +if _LPMAX < _LP2 then _LPMAX = _LP2;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP2 then _LPMAX = _LP2;
95473     +_LP3 =     18.3099747103227 + _LP3;
MPRINT(EM_DIAGRAM):   _LP3 = 18.3099747103227 + _LP3;
95474     +if _LPMAX < _LP3 then _LPMAX = _LP3;
MPRINT(EM_DIAGRAM):   if _LPMAX < _LP3 then _LPMAX = _LP3;
95475     +_LP0 = exp(_LP0 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP0 = exp(_LP0 - _LPMAX);
95476     +_LP1 = exp(_LP1 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP1 = exp(_LP1 - _LPMAX);
95477     +_LP2 = exp(_LP2 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP2 = exp(_LP2 - _LPMAX);
95478     +_LP3 = exp(_LP3 - _LPMAX);
MPRINT(EM_DIAGRAM):   _LP3 = exp(_LP3 - _LPMAX);
95479     +_LPMAX = exp(-_LPMAX);
MPRINT(EM_DIAGRAM):   _LPMAX = exp(-_LPMAX);
95480     +_P4 = 1 / (_LPMAX + _LP0 + _LP1 + _LP2 + _LP3);
MPRINT(EM_DIAGRAM):   _P4 = 1 / (_LPMAX + _LP0 + _LP1 + _LP2 + _LP3);
95481     +_P0 = _LP0 * _P4;
MPRINT(EM_DIAGRAM):   _P0 = _LP0 * _P4;
95482     +_P1 = _LP1 * _P4;
MPRINT(EM_DIAGRAM):   _P1 = _LP1 * _P4;
95483     +_P2 = _LP2 * _P4;
MPRINT(EM_DIAGRAM):   _P2 = _LP2 * _P4;
95484     +_P3 = _LP3 * _P4;
MPRINT(EM_DIAGRAM):   _P3 = _LP3 * _P4;
95485     +_P4 = _LPMAX * _P4;
MPRINT(EM_DIAGRAM):   _P4 = _LPMAX * _P4;
95486     +
95487     +REGDR1:
95488     +
95489     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
95490     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
95491     +   R_Age_group85_ = .;
MPRINT(EM_DIAGRAM):   R_Age_group85_ = .;
95492     +   R_Age_group65_84 = .;
MPRINT(EM_DIAGRAM):   R_Age_group65_84 = .;
95493     +   R_Age_group25_44 = .;
MPRINT(EM_DIAGRAM):   R_Age_group25_44 = .;
95494     +   R_Age_group18_24 = .;
MPRINT(EM_DIAGRAM):   R_Age_group18_24 = .;
95495     +   R_Age_group0_17 = .;
MPRINT(EM_DIAGRAM):   R_Age_group0_17 = .;
95496     +end;
MPRINT(EM_DIAGRAM):   end;
95497     +else do;
MPRINT(EM_DIAGRAM):   else do;
95498     +    label R_Age_group85_ = 'Residual: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label R_Age_group85_ = 'Residual: Age_group=85+' ;
95499     +    label R_Age_group65_84 = 'Residual: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label R_Age_group65_84 = 'Residual: Age_group=65-84' ;
95500     +    label R_Age_group25_44 = 'Residual: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label R_Age_group25_44 = 'Residual: Age_group=25-44' ;
95501     +    label R_Age_group18_24 = 'Residual: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label R_Age_group18_24 = 'Residual: Age_group=18-24' ;
95502     +    label R_Age_group0_17 = 'Residual: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label R_Age_group0_17 = 'Residual: Age_group=0-17' ;
95503     +   R_Age_group85_ = - _P0;
MPRINT(EM_DIAGRAM):   R_Age_group85_ = - _P0;
95504     +   R_Age_group65_84 = - _P1;
MPRINT(EM_DIAGRAM):   R_Age_group65_84 = - _P1;
95505     +   R_Age_group25_44 = - _P2;
MPRINT(EM_DIAGRAM):   R_Age_group25_44 = - _P2;
95506     +   R_Age_group18_24 = - _P3;
MPRINT(EM_DIAGRAM):   R_Age_group18_24 = - _P3;
95507     +   R_Age_group0_17 = - _P4;
MPRINT(EM_DIAGRAM):   R_Age_group0_17 = - _P4;
95508     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
95509     +      when (0)  R_Age_group85_ = R_Age_group85_ + 1;
MPRINT(EM_DIAGRAM):   when (0) R_Age_group85_ = R_Age_group85_ + 1;
95510     +      when (1)  R_Age_group65_84 = R_Age_group65_84 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_Age_group65_84 = R_Age_group65_84 + 1;
95511     +      when (2)  R_Age_group25_44 = R_Age_group25_44 + 1;
MPRINT(EM_DIAGRAM):   when (2) R_Age_group25_44 = R_Age_group25_44 + 1;
95512     +      when (3)  R_Age_group18_24 = R_Age_group18_24 + 1;
MPRINT(EM_DIAGRAM):   when (3) R_Age_group18_24 = R_Age_group18_24 + 1;
95513     +      when (4)  R_Age_group0_17 = R_Age_group0_17 + 1;
MPRINT(EM_DIAGRAM):   when (4) R_Age_group0_17 = R_Age_group0_17 + 1;
95514     +   end;
MPRINT(EM_DIAGRAM):   end;
95515     +end;
MPRINT(EM_DIAGRAM):   end;
95516     +
95517     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
95518     +label P_Age_group85_ = 'Predicted: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label P_Age_group85_ = 'Predicted: Age_group=85+' ;
95519     +label P_Age_group65_84 = 'Predicted: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label P_Age_group65_84 = 'Predicted: Age_group=65-84' ;
95520     +label P_Age_group25_44 = 'Predicted: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label P_Age_group25_44 = 'Predicted: Age_group=25-44' ;
95521     +label P_Age_group18_24 = 'Predicted: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label P_Age_group18_24 = 'Predicted: Age_group=18-24' ;
95522     +label P_Age_group0_17 = 'Predicted: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label P_Age_group0_17 = 'Predicted: Age_group=0-17' ;
95523     +P_Age_group85_ = _P0;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = _P0;
95524     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
95525     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
95526     +P_Age_group65_84 = _P1;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = _P1;
95527     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
95528     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
95529     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
95530     +end;
MPRINT(EM_DIAGRAM):   end;
95531     +P_Age_group25_44 = _P2;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = _P2;
95532     +if (_P2 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P2 > _MAXP + 1E-8) then do;
95533     +   _MAXP = _P2;
MPRINT(EM_DIAGRAM):   _MAXP = _P2;
95534     +   _IY = 3;
MPRINT(EM_DIAGRAM):   _IY = 3;
95535     +end;
MPRINT(EM_DIAGRAM):   end;
95536     +P_Age_group18_24 = _P3;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = _P3;
95537     +if (_P3 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P3 > _MAXP + 1E-8) then do;
95538     +   _MAXP = _P3;
MPRINT(EM_DIAGRAM):   _MAXP = _P3;
95539     +   _IY = 4;
MPRINT(EM_DIAGRAM):   _IY = 4;
95540     +end;
MPRINT(EM_DIAGRAM):   end;
95541     +P_Age_group0_17 = _P4;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = _P4;
95542     +if (_P4 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P4 > _MAXP + 1E-8) then do;
95543     +   _MAXP = _P4;
MPRINT(EM_DIAGRAM):   _MAXP = _P4;
95544     +   _IY = 5;
MPRINT(EM_DIAGRAM):   _IY = 5;
95545     +end;
MPRINT(EM_DIAGRAM):   end;
95546     +I_Age_group = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_Age_group = REGDRF[_IY];
95547     +U_Age_group = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_Age_group = REGDRU[_IY];
95548     +
95549     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
95550     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
95551     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
95552      run;

NOTE: DATA STEP view saved on file EMWS1.REG_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
95553      quit;
95554      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
95555      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
95556      * Reg: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg: Computing metadata for TRAIN data;
95557      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\student\Desktop\AA 490\Final 
Project\AA490_Project\Base Model\Workspaces\EMWS1\Reg\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg_TRAIN out=WORK.M1GIBTYK noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1GIBTYK;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1GIBTYK(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1GIBTYK;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1GIBTYK;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1N2Z_1U NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1N2Z_1U;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1N2Z_1U;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1F54YL3(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1N2Z_1U;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1N2Z_1U;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1N2Z_1U;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then 
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1N2Z_1U;
MPRINT(EMADVISECOLUMNS):   set WORK.M1N2Z_1U;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("AGE_GROUP") model = "Reg";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'PROJECTED_SUM_POP' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
95912      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
95913      set EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO;
95914      where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
95915      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG_EMINFO.
      WHERE (DATA='Reg') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

95916      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMINFO;
95917      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
95918      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
95919      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
95923      run;
95924      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMINFO;
95925      set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
95926      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

95927      proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
95928      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
95929      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

95930      proc sort data = EMWS1.Ids3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
95931      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
95932      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.IDS3_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

95933      proc sort data = EMWS1.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
95934      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
95935      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

95936      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMINFO;
95937      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
95938      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
95939      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.REG_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

95940      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
95941      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
95942      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
95943      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
