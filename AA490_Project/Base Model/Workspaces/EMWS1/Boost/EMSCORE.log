MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 14, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:23:57" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 14, 2019
Time:                16:23:57
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2NOS8NA "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2NOS8NA new;
MPRINT(EM_DIAGRAM):   run;
58308      %let EMEXCEPTIONSTRING=;
58309      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
58310      * SCORE: Boost;
MPRINT(EM_DIAGRAM):   * SCORE: Boost;
58311      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
58312      %let EM_ACTION = SCORE;
58313      %let syscc = 0;
58314      %macro main;
58315      
58316        filename temp catalog 'sashelp.emmodl.boost_macros.source';
58317        %include temp;
58318        filename temp;
58319      
58320        %setProperties;
58321      
58322        %if %upcase(&EM_ACTION) = CREATE %then %do;
58323          filename temp catalog 'sashelp.emmodl.boost_create.source';
58324          %include temp;
58325          filename temp;
58326      
58327          %create;
58328        %end;
58329      
58330         %else
58331         %if %upcase(&EM_ACTION) = TRAIN %then %do;
58332      
58333             filename temp catalog 'sashelp.emmodl.boost_train.source';
58334             %include temp;
58335             filename temp;
58336             %train;
58337         %end;
58338      
58339        %else
58340        %if %upcase(&EM_ACTION) = SCORE %then %do;
58341          filename temp catalog 'sashelp.emmodl.boost_score.source';
58342          %include temp;
58343          filename temp;
58344      
58345          %score;
58346      
58347        %end;
58348      
58349        %else
58350        %if %upcase(&EM_ACTION) = REPORT %then %do;
58351      
58352             filename temp catalog 'sashelp.emmodl.boost_report.source';
58353             %include temp;
58354             filename temp;
58355      
58356             %report;
58357         %end;
58358      
58359         %doendm:
58360      %mend main;
58361      
58362      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
58363     +
58364     +%macro SetProperties;
58365     +
58366     +     /* boost options */
58367     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
58368     +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
58369     +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
58370     +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
58371     +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
58372     +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
58373     +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
58374     +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
58375     +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
58376     +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
58377     +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
58378     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
58379     +
58380     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
58381     +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
58382     +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
58383     +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
58384     +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
58385     +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
58386     +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
58387     +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
58388     +
58389     +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
58390     +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
58391     +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
58392     +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
58393     +
58394     +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
58395     +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
58396     +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
58397     +
58398     +%mend SetProperties;
58399     +
58400     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_SCORE.SOURCE.
58402     +%global ntrees ni nclasses;
58403     +%macro selectSubseries;
58405     +  %let arborkluge= "work._BoostDMDB";
58406     +  %if ^%sysfunc(cexist(work._BoostDMDB)) %then %do;
58407     +      filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
58408     +      %include temp;
58409     +      filename temp;
58411     +     %let target_var = %EM_TARGET;
58412     +     %em_boost_makeDMDB(indata=&EM_IMPORT_DATA, target=&target_Var, nLevel=_nTargetLevel);
58413     +  %end;
58415     +    %EM_GETNAME(key=MODEL, type=DATA);
58416     +    %EM_GETNAME(key=IMPORTANCE, type=DATA);
58417     +    proc arbor proc=treeboost data=&EM_IMPORT_DATA inmodel=&EM_USER_MODEL;
58419     +    %if &EM_PROPERTY_SUBSERIES ne %then %do;
58420     +      subseries
58421     +      %if &EM_PROPERTY_SUBSERIES eq ITERATIONS %then %do;
58422     +         &EM_PROPERTY_SUBSERIES = &EM_PROPERTY_ITERATIONNUM
58423     +      %end;
58424     +      %else %do;
58425     +         &EM_PROPERTY_SUBSERIES
58426     +      %end;
58427     +    %end;
58428     +    ;
58430     +    makemacro nimportant=ni nclasses=nclasses
58431     +    %if &EM_PROPERTY_SUBSERIES eq BEST %then %do;
58432     +       nitsase=nitsase nitsmisc=nitsmisc nitsprofit=nitsprofit
58433     +    %end;
58434     +    ;
58436     +    %if &EM_PROPERTY_ASSESSMEASURE ne %then %do;
58437     +      assess
58438     +      %if &EM_IMPORT_VALIDATE ne %then %do;
58439     +        Validata=&EM_IMPORT_VALIDATE
58440     +      %end;
58441     +      %else %do;
58442     +        NoValidata
58443     +      %end;
58445     +      %if &EM_PROPERTY_ASSESSMEASURE eq PROFIT %then %do;
58446     +         %if %sysfunc(exist(&EM_DEC_DECMETA, DATA)) eq 0 %then %do;
58447     +           %if %upcase(&Target_Level) eq INTERVAL %then %do;
58448     +             %let EM_PROPERTY_MEASURE = ASE;
58449     +           %end;
58450     +           %else %do;
58451     +             %let EM_PROPERTY_MEASURE= MISC;
58452     +           %end;
58453     +           %let note = %sysfunc(sasmsg(sashelp.dmine, profitlossmatrix_note, NOQUOTE));
58454     +           %put &note;
58455     +           %let note = %sysfunc(sasmsg(sashelp.dmine, assessmearerest_note, NOQUOTE));
58456     +           %put &note;
58457     +         %end;
58458     +         %else %do;
58459     +            %let dsid = %sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
58460     +            %if &dsid eq %then %do;
58461     +               %if %upcase(&Target_Level) eq INTERVAL %then %do;
58462     +                  %let EM_PROPERTY_MEASURE = ASE;
58463     +               %end;
58464     +               %else %do;
58465     +                  %let EM_PROPERTY_MEASURE = MISC;
58466     +               %end;
58467     +               %let note = %sysfunc(sasmsg(sashelp.dmine, profitlossmatrix_note, NOQUOTE));
58468     +               %put &note;
58469     +               %let note = %sysfunc(sasmsg(sashelp.dmine, assessmeasurereset_note, NOQUOTE));
58470     +               %put &note;
58471     +            %end;
58472     +            %else %do;
58473     +               %let firstobs = %sysfunc(fetchobs(&dsid, 1));
58474     +               %let usenum   = %sysfunc(VARNUM(&dsid, USE));
58475     +               %let use      = %sysfunc(getvarc(&dsid, &usenum));
58477     +               %if &use eq N %then %do;
58478     +                 %if %upcase(&Target_Level) eq INTERVAL %then %do;
58479     +                    %let EM_PROPERTY_MEASURE = ASE;
58480     +                 %end;
58481     +                 %else %do;
58482     +                    %let EM_PROPERTY_MEASURE = MISC;
58483     +                 %end;
58484     +                 %let note = %sysfunc(sasmsg(sashelp.dmine, profitlossmatrix_note, NOQUOTE));
58485     +                 %put &note;
58486     +                 %let note = %sysfunc(sasmsg(sashelp.dmine, assessmeasurereset_note, NOQUOTE));
58487     +                 %put &note;
58489     +               %end;
58490     +               %else %do;
58491     +                 %let EM_PROPERTY_MEASURE = PROFIT;
58492     +               %end;
58493     +            %end;
58494     +            %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
58495     +         %end;
58496     +      %end;
58497     +      %else %if &EM_PROPERTY_ASSESSMEASURE eq MISC %then %do;
58498     +         %if %upcase(&Target_Level) eq INTERVAL %then %do;
58499     +           %let EM_PROPERTY_MEASURE = ASE;
58500     +         %end;
58501     +         %else %do;
58502     +           %let EM_PROPERTY_MEASURE = MISC;
58503     +         %end;
58504     +      %end;
58505     +      %else %if &EM_PROPERTY_ASSESSMEASURE eq ASE %then %do;
58506     +         %let EM_PROPERTY_MEASURE = ASE;
58507     +      %end;
58509     +      measure = &EM_PROPERTY_MEASURE
58511     +      ;
58512     +    %end;
58514     +    %let lookupString = ;
58515     +    %if ^%symexist(EM_OPTION) %then
58516     +        %let EM_OPTION=;
58518     +    %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
58519     +           %let lookupString = LOOKUP=SELECT;
58520     +    %end;
58522     +    code file="&EM_FILE_EMFLOWSCORECODE" res group=&emloopid &lookupString;
58523     +    code file="&EM_FILE_EMPUBLISHSCORECODE" nores group=&emloopid &lookupString;
58525     +    save fit=SUBFIT importance=&EM_USER_IMPORTANCE model=&EM_USER_MODEL;
58527     +    score data=&EM_IMPORT_DATA out=fds(keep= p_:) outfit=work.fit_train role=TRAIN;
58528     +    %if &EM_IMPORT_VALIDATE ne %then %do;
58529     +      score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
58530     +    %end;
58531     +    %if &EM_IMPORT_TEST ne %then %do;
58532     +      score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
58533     +    %end;
58535     +    run;
58536     +    quit;
58538     +    %if %sysfunc(cexist(work._BoostDMDB)) %then %do;
58539     +        /* Delete DMDB catalog */
58540     +        proc datasets lib=work nolist;
58541     +           delete _BoostDMDB / mt=cat;
58542     +        run;
58543     +    %end;
58547     +    /* set ntrees macro to selected iteration based on subseries property */
58548     +    %if &EM_PROPERTY_SUBSERIES eq ITERATIONS %then %do;
58549     +      %let ntrees = &EM_PROPERTY_ITERATIONNUM;
58550     +    %end;
58551     +    %else %if &EM_PROPERTY_SUBSERIES eq LONGEST %then %do;
58552     +      %let ntrees = &EM_PROPERTY_ITERATIONS;
58553     +    %end;
58554     +    %else %if &EM_PROPERTY_SUBSERIES eq BEST %then %do;
58555     +       %if &EM_PROPERTY_MEASURE eq ASE %then %let ntrees=&NITSASE;
58556     +       %else %if &EM_PROPERTY_MEASURE eq MISC %then %let ntrees=&NITSMISC;
58557     +       %else %let ntrees=&NITSPROFIT;
58558     +    %end;
58559     +%mend selectSubseries;
58561     +%macro createSubFit;
58563     +  %EM_GETNAME(key=SUBFIT, type=DATA);
58564     +   data &EM_USER_SUBFIT;
58565     +     length datarole $8;
58566     +     set SUBFIT;
58567     +     datarole = "TRAIN";
58568     +     label  _MISC_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_misclassrate_title, noquote))"
58569     +            _MAX_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_maxabserror_vlabel, noquote))"
58570     +            _SSE_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_sumsqerror_vlabel, noquote))"
58571     +            _ASE_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_avgsquareerror_title, noquote))"
58572     +            _RASE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_rootavgsqerror_vlabel, noquote))"
58573     +            _APROF_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_avgprofit_vlabel, noquote))"
58574     +            _PROF_   = "%sysfunc(sasmsg(sashelp.dmine, assmt_profitt_vlabel, noquote))"
58575     +            _PASE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_avgsqerrprior_vlabel, noquote))"
58576     +            _PMISC_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_missprior_vlabel, noquote))"
58577     +            _NLEAVES_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nleaves_vlabel, noquote))"
58578     +            _ITERATION_="%sysfunc(sasmsg(sashelp.dmine, rpt_iter_vlabel , noquote))"
58579     +            _NW_ = "%sysfunc(sasmsg(sashelp.dmine,  rpt_nleaves_vlabel , noquote))"
58580     +            datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel  , noquote))";
58581     +     keep _ITERATION_ _NW_ _MISC_ _MAX_ _SSE_ _ASE_ _RASE_ _NLEAVES_ datarole
58582     +          %if &EM_DEC_DECDATA ne %then %do;
58583     +            _APROF_ _PROF_ _PASE_ _PMISC_
58584     +          %end;
58585     +          ;
58586     +   run;
58588     +   %if &EM_IMPORT_VALIDATE ne %then %do;
58589     +      data tempvalid;
58590     +        length datarole $8;
58591     +        set SUBFIT;
58592     +        rename  _VMISC_ = _MISC_
58593     +                _VMAX_  = _MAX_
58594     +                _VSSE_ = _SSE_
58595     +                _VASE_ = _ASE_
58596     +                _VRASE_ = _RASE_
58597     +                %if &EM_DEC_DECDATA ne %then %do;
58598     +                  _VAPROF_ = _APROF_
58599     +                  _VPROF_  = _PROF_
58600     +                  _VPASE_  = _PASE_
58601     +                  _VPMISC_ = _PMISC_
58602     +                %end;
58603     +                ;
58604     +        datarole = "VALID";
58605     +         label  _VMISC_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_misclassrate_title, noquote))"
58606     +                _VMAX_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_maxabserror_vlabel, noquote))"
58607     +                _VSSE_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_sumsqerror_vlabel, noquote))"
58608     +                _VASE_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_avgsquareerror_title, noquote))"
58609     +                _VRASE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_rootavgsqerror_vlabel, noquote))"
58610     +                _VAPROF_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_avgprofit_vlabel, noquote))"
58611     +                _VPROF_   = "%sysfunc(sasmsg(sashelp.dmine, assmt_profitt_vlabel, noquote))"
58612     +                _VPASE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_avgsqerrprior_vlabel, noquote))"
58613     +                _VPMISC_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_missprior_vlabel, noquote))"
58614     +                _NLEAVES_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nleaves_vlabel, noquote))"
58615     +                datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel, noquote))";
58616     +        keep _ITERATION_ _NW_ _VMISC_ _VMAX_ _VSSE_ _VASE_ _VRASE_ _NLEAVES_ datarole
58617     +             %if &EM_DEC_DECDATA ne %then %do;
58618     +                _VAPROF_ _VPROF_ _VPASE_ _VPMISC_
58619     +             %end;
58620     +             ;
58621     +      run;
58623     +      data &EM_USER_SUBFIT;
58624     +        set &EM_USER_SUBFIT tempvalid;
58625     +      run;
58627     +      proc datasets library=work nolist;
58628     +        delete tempvalid;
58629     +      run;
58630     +   %end;
58632     +   proc datasets library=work nolist;
58633     +     delete subfit;
58634     +   run;
58636     +%mend createSubFit;
58638     +%macro createFitStatistics;
58640     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
58641     +   data &EM_USER_EMOUTFIT;
58642     +     length target $32;
58643     +     merge work.fit_train
58644     +     %if &EM_IMPORT_VALIDATE ne %then %do;
58645     +       work.fit_valid
58646     +     %end;
58647     +     %if &EM_IMPORT_TEST ne %then %do;
58648     +       work.fit_test
58649     +     %end;
58650     +     ;
58651     +     target = "%EM_TARGET";
58652     +     drop _NW_;
58653     +   run;
58655     +   %if &EM_IMPORT_VALIDATE ne %then %do;
58656     +     proc datasets library=work nolist;
58657     +       delete fit_valid;
58658     +     run;
58659     +   %end;
58660     +   %if &EM_IMPORT_TEST ne %then %do;
58661     +     proc datasets library=work nolist;
58662     +       delete fit_test;
58663     +     run;
58664     +   %end;
58667     +%mend createFitStatistics;
58669     +%macro generatePartialDependencyTable(iteration= ,ds1=, var=);
58671     +  %EM_GETNAME(key=PARTIALDEPENDENCY, type=DATA);
58673     +  %if &iteration eq 1 %then %do;
58674     +    data &EM_USER_PARTIALDEPENDENCY;
58675     +    run;
58676     +  %end;
58678     +  %let partialvar = partial&iteration;
58679     +  data &EM_USER_PARTIALDEPENDENCY;
58680     +    merge &EM_USER_PARTIALDEPENDENCY &ds1(rename=(P_BAD1=&partialvar) keep=P_BAD1 &var);
58681     +    label &partialvar = "%sysfunc(sasmsg(sashelp.dmine, rpt_partialdep_vlabel, noquote, &var))";
58682     +  run;
58684     +%mend generatePartialDependencyTable;
58686     +%macro merge_imp_h (iactds=, impds= );
58687     +   %if &ni gt 0 %then %do;
58688     +    data _imp;
58689     +       set &impds.;
58690     +       _obs_ = _n_;
58691     +    run;
58692     +    proc sort data=_imp;
58693     +       by name;
58694     +    run;
58695     +    proc sort data= &iactds.;
58696     +       by name;
58697     +    run;
58698     +    data &impds;
58699     +       merge _imp &iactds;
58700     +       by name;
58701     +    run;
58702     +    proc sort data=&impds;
58703     +       by _obs_;
58704     +    run;
58705     +    data &impds;
58706     +       set &impds;
58707     +       drop _obs_;
58708     +    run;
58709     +    quit;
58710     +    %end;
58711     +%mend;
58713     +***************************************************************************
58714     +** MACROS FOR DISCOVERING INTERACTION OF INPUTS IN ARBORETUM MODELS
58715     +**
58716     +** AUTHOR:    saspgn
58717     +** REVISED:    1 MAY 2007
58718     +**
58719     +** REFERENCE: Jerome H. Friedman and Bogdan E. Popescu
58720     +**                  Predictive Models via Rule Ensembles
58721     +**                  28 Feb 2005
58722     +***************************************************************************;
MPRINT(MAIN):   *************************************************************************** ** MACROS FOR DISCOVERING INTERACTION OF INPUTS IN ARBORETUM MODELS ** ** AUTHOR: saspgn ** REVISED: 1 MAY 2007 ** ** REFERENCE: Jerome H. Friedman and Bogdan E. 
Popescu ** Predictive Models via Rule Ensembles ** 28 Feb 2005 ***************************************************************************;
58724     +%macro compute_iact_h(data=, model=, outds=);
58726     +/*** NOTE: this macro was modified to also calculation 1 way partial dependency values as well ****/
58728     +***************************************************************************
58729     +** MACRO:     COMPUTE_IACT_H
58730     +** PURPOSE:   ESTIMATE INTERACTION OF INPUT TO ANY OTHER INPUTS IN MODEL
58731     +** AUTHOR:    saspgn
58732     +** DATE:      30 APR 2007
58733     +**
58734     +** ARGUMENTS: DATA=  data with which to evaluate interaction.
58735     +**                   Typically training data.
58736     +**            MODEL= Model data set from SAVE MODEL= option
58737     +**                   of PROC ARBORETUM  (or SPLIT, FOREST, TREEBOOST)
58738     +**            OUTDS= output data set from this macro.
58739     +**                   Contains two variables:
58740     +**                   NAME   containing name of input variable
58741     +**                   H      containing the H statistic for interaction.
58742     +**
58743     +** DETAILS:   In Predictive Models via Rule Ensembles the authors
58744     +**            define statistic Hj that will be greater than 0 to
58745     +**            the extant that input variable j interacts with some
58746     +**            other variable (section 8.1, equation 45 ).
58747     +**            Macro COMPUTE_IACT_H computes Hj for all variables
58748     +**            used as a primary splitting rule in the model.
58749     +**            The computation of interactions is time consuming.
58750     +**            The user might therefore consult Hj before selecting
58751     +**            which interactions to compute.
58752     +**
58753     +** REFERENCE: Jerome H. Friedman and Bogdan E. Popescu
58754     +**                  Predictive Models via Rule Ensembles
58755     +**                  28 Feb 2005
58756     +**                  http://www.stat-stanford.edu/~jhf
58757     +**************************************************************************;
58759     +    %do v=1 %to &ni;
58760     +        proc arbor proc=treeboost inmodel=&model;
58761     +            makemacro importantid=&v  var=var;
58762     +            partialdep data=&data out=vds(keep= p_: &var) var= (&var);
58763     +            partialdep data=&data out=eds(keep= p_:) exceptvar= (&var);
58764     +        quit;
58766     +        %let predvar=;
58767     +        %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='PREDICTED'))));
58768     +        %let varnum =%sysfunc(varnum(&dsid, VARIABLE));
58769     +        %do %while(^ %sysfunc(fetch(&dsid)));
58770     +           %let variable = %sysfunc(getvarc(&dsid, &varnum));
58771     +           %let predvar = &predvar &variable;
58772     +        %end;
58773     +        %let dsid = %sysfunc(close(&dsid));
58775     +        data fds;  set fds;  keep &predvar; run;
58776     +        data vds;  set vds;  keep &predvar; run;
58777     +        data eds;  set eds;  keep &predvar; run;
58780     +        %compute_iact_sub(ds1=fds, ds2=vds, ds3=eds, nc=&nclasses, outds=h);
58782     +        /* generates table same size as training data -- too large to plot; removing for now
58783     +        %generatePartialDependencyTable(iteration=&v, ds1=vds, var=&var); */
58785     +        data h;
58786     +             set h;
58787     +             length name $ 32;
58788     +             name = "&var";
58789     +        run;
58790     +        data &outds;
58791     +          set
58792     +              %if &v ne 1 %then %do;
58793     +                  &outds
58794     +              %end;
58795     +               h;
58796     +        run;
58798     +    %end;
58799     +%mend;
58801     +%macro compute_iact_sub(ds1=, ds2=, ds3=, nc=, outds=);
58803     +        %if &nc eq 0 %then %do;
58804     +             data ads; set &ds1; array r p_:; keep a; a = r(1); run;
58805     +             data bds; set &ds2; array r p_:; keep b; b = r(1); run;
58806     +             data cds; set &ds3; array r p_:; keep c; c = r(1); run;
58807     +             data mds; merge ads bds cds;         run;
58809     +             proc stdize data= mds method=mean out=sds;
58810     +                  var a b c;
58811     +             run;
58813     +             data &outds;
58814     +                 retain ss 0  sf 0;
58815     +                 set sds end=the_end;
58816     +                 keep H;
58818     +                 s = a - b - c;
58819     +                 ss = ss + s*s;
58820     +                 sf = sf + a * a;
58822     +                 if the_end ne 0 then do;
58823     +                    H = ss/sf;
58824     +                    output;
58825     +                 end;
58826     +             run;
58827     +        %end;
58829     +        %else %do;  * categorical response. nclasses > 0 ;
58830     +            data ads;
58831     +                 set &ds1;
58832     +                 array r{*} p_:;
58833     +                 keep a:;
58834     +                 %do j = 1 %to &nclasses;
58835     +                     a&j = r(&j);
58836     +                 %end;
58837     +              run;
58838     +              data bds;
58839     +                 set &ds2;
58840     +                 array r{*} p_:;
58841     +                 keep b:;
58842     +                 %do j = 1 %to &nclasses;
58843     +                     b&j = r(&j);
58844     +                 %end;
58845     +              run;
58846     +              data cds;
58847     +                 set &ds3;
58848     +                 array r{*} p_:;
58849     +                 keep c:;
58850     +                 %do j = 1 %to &nclasses;
58851     +                     c&j = r(&j);
58852     +                 %end;
58853     +              run;
58855     +              data mds;
58856     +                   merge ads bds cds;
58857     +              run;
58858     +              proc stdize data=mds method=mean out=sds;
58859     +                   var a: b: c:;
58860     +              run;
58862     +             data &outds;
58863     +                 retain ss 0  sf 0;
58864     +                 set sds end=the_end;
58865     +                 array ra a:;
58866     +                 array rb b:;
58867     +                 array rc c:;
58868     +                 keep H;
58870     +                 do j = 1 to dim(ra);
58871     +                    s = ra(j) - rb(j) - rc(j);
58872     +                    ss = ss + s*s;
58873     +                    sf = sf + ra(j) * ra(j);
58874     +                 end;
58876     +                 if the_end ne 0 then do;
58877     +                    H = ss/sf;
58878     +                    output;
58879     +                 end;
58880     +            run;
58881     +        %end;
58882     +%mend;
58884     +%macro score;
58886     +   /* retrieve target information */
58887     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
58889     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
58890     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
58891     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
58892     +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
58893     +   %do %while(^ %sysfunc(fetch(&dsid)));
58894     +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
58895     +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
58896     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
58897     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
58898     +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
58899     +   %end;
58900     +   %let dsid = %sysfunc(close(&dsid));
58902     +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be thrown */
58903     +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq . )) %then %do;
58904     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
58905     +        %put &em_codebar;
58906     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note, NOQUOTE));
58907     +        %put &errormsg;
58908     +        %put &em_codebar;
58909     +        %goto doendm;
58910     +   %end;
58912     +   /* score based on selected subseries */
58913     +   %selectSubseries;
58915     +   /* detect variables that have interaction with other input variables in model;    */
58916     +   /* also used to calculate 1 way partial dependency statistics                     */
58917     +   %if %symexist(EM_PROPERTY_CREATEHSTAT) %then %do;
58918     +     %if &EM_PROPERTY_CREATEHSTAT eq Y %then %do;
58919     +       %compute_iact_h(data=&EM_IMPORT_DATA, model=&EM_USER_MODEL, outds=iact);
58920     +     %end;
58921     +   %end;
58923     +   /* determine whether priors were used during modelling */
58924     +   %let usePriors = N;
58925     +   data _null_;
58926     +     set &EM_DEC_DECMETA(where=(_TYPE_='DECPRIOR'));
58927     +     call symput('usePriors', strip(USE));
58928     +   run;
58930     +   /* update scorecode with code to calculated unadjusted residual variables if priors were detected */
58931     +   %if &usePriors eq Y %then %do;
58932     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
58933     +      %include temp;
58934     +      filename temp;
58936     +      %EM_GETNAME(key=ADJUSTEDRESIDUALS, type=FILE, extension=sas);
58937     +      filename adjref "&EM_USER_ADJUSTEDRESIDUALS";
58938     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
58940     +      /* append adjusted residual code to already populated flowscorecode */
58941     +      filename temp catalog 'sashelp.emutil.em_copyfile.source';
58942     +      %include temp;
58943     +      filename temp;
58945     +      filename fref "&EM_FILE_EMFLOWSCORECODE";
58946     +      %em_copyfile(infref=adjref, outfref=fref, append=Y);
58947     +      filename adjref;
58948     +      filenmae fref;
58950     +   %end;
58952     +   /* set all Q variables created by proc arbor to have a role of ASSESS */
58953     +   %let numLevels = 0;
58954     +   data _null_;
58955     +     set &EM_DEC_DECMETA end=eof;
58956     +     where _TYPE_ ='RESIDUAL';
58957     +     call symput('res_vars'!!strip(put(_N_,BEST.)),   strip(Variable));
58958     +     if eof then
58959     +       call symput('numLevels', strip(put(_N_,BEST.)));
58960     +   run;
58962     +   %do i=1 %to &numLevels;
58963     +     %let qvar = &&res_vars&i;
58964     +     %let qvar = %substr(&qvar,2);
58965     +     %let qvar = Q&qvar;
58966     +     %em_metachange(name=&qvar, role=ASSESS);
58967     +   %end;
58969     +   /* merge H Statistic into the outimportance dataset */
58970     +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
58971     +   %if %symexist(EM_PROPERTY_CREATEHSTAT) %then %do;
58972     +     %if &EM_PROPERTY_CREATEHSTAT eq Y %then %do;
58973     +       %merge_imp_h(iactds=iact, impds=&EM_USER_IMPORTANCE);
58974     +     %end;
58975     +   %end;
58977     +   /* add labels to importance table */
58978     +   data &EM_USER_IMPORTANCE;
58979     +     set &EM_USER_IMPORTANCE;
58980     +     label  NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
58981     +            LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
58982     +            NRULES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
58983     +            IMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
58984     +            %if %symexist(EM_PROPERTY_CREATEHSTAT) %then %do;
58985     +              %if &EM_PROPERTY_CREATEHSTAT eq Y %then %do;
58986     +                H = "%sysfunc(sasmsg(sashelp.dmine, rpt_h_vlabel, noquote))"
58987     +              %end;
58988     +            %end;
58989     +            %if &EM_IMPORT_VALIDATE ne %then %do;
58990     +              VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
58991     +              RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
58992     +            %end;
58993     +            %let nsurrs = ;
58994     +            %if &EM_PROPERTY_NSURRS ne %then %do;
58995     +              %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
58996     +              %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
58997     +              %if &nsurrs gt 0 %then %do;
58998     +                 NSURROGATES =  "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))";
58999     +              %end;
59000     +            %end;
59001     +            ;
59002     +   run;
59004     +   /* print outimportance dataset to output window */
59005     +   %let title10 = %sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title, NOQUOTE));
59006     +   %if &EM_PROPERTY_NSURRS gt 0 %then %do;
59007     +     title10 "&title10";
59009     +     %if &ni gt 0 %then %do;
59010     +       proc print data=&EM_USER_IMPORTANCE (where=((nrules>0) OR (nsurrogates > 0)
59011     +       %if %symexist(EM_PROPERTY_CREATEHSTAT) %then %do;
59012     +         %if &EM_PROPERTY_CREATEHSTAT eq Y %then %do;
59013     +         OR (H ne .)
59014     +         %end;
59015     +       %end;
59016     +       ));
59017     +     %end;
59018     +     %else %do;
59019     +       proc print data=&EM_USER_IMPORTANCE (where=((nrules>0) OR (nsurrogates > 0)));
59020     +     %end;
59021     +     run;
59022     +     title10;
59023     +   %end;
59024     +   %else %do;
59025     +     title10 "&title10";
59026     +     %if &ni gt 0 %then %do;
59027     +       proc print data=&EM_USER_IMPORTANCE (where=((nrules>0)
59028     +      %if %symexist(EM_PROPERTY_CREATEHSTAT) %then %do;
59029     +         %if &EM_PROPERTY_CREATEHSTAT eq Y %then %do;
59030     +           OR (H ne .)
59031     +         %end;
59032     +      %end;
59033     +      ));
59034     +     %end;
59035     +     %else %do;
59036     +       proc print data=&EM_USER_IMPORTANCE (where=((nrules>0)));
59037     +     %end;
59038     +     run;
59039     +     title10;
59040     +   %end;
59042     +   /* generate EM_USER_SUBFIT dataset to plot train and validation data across iterations*/
59043     +   %createSubFit;
59045     +   /* generate fit statistics for train, valid and test datasets */
59046     +   %createFitStatistics;
59048     +   /* refresh exports */
59049     +    /* variable selection based on importance values */
59050     +    %if &EM_PROPERTY_VARSELECTION eq Y %then %do;
59051     +      %let dsid = %sysfunc(open(&EM_USER_IMPORTANCE));
59052     +      %if &dsid %then %do;
59053     +        %let obs= %sysfunc(fetch(&dsid));
59054     +        %let imp_num = %sysfunc(VARNUM(&dsid, IMPORTANCE));
59055     +        %let var_num = %sysfunc(VARNUM(&dsid, NAME));
59056     +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
59058     +        %if ((&imp_num ne 0 ) AND (&var_num ne 0)) %then %do;
59059     +          %do %while(&obs=0);
59060     +             %let nobs = %eval(&nobs-1);
59061     +             %let imp_value = %sysfunc(getvarn(&dsid, &imp_num));
59062     +             %let varname = %upcase(%sysfunc(getvarc(&dsid, &var_num)));
59064     +             %if &imp_value lt 0.05 %then %do;
59065     +               %em_metachange(name=&varname, role=REJECTED);
59066     +             %end;
59067     +             %else %do;
59068     +               %em_metachange(name=&varname, role=INPUT);
59069     +             %end;
59070     +             %let obs= %sysfunc(fetch(&dsid));
59071     +          %end;
59072     +        %end;
59073     +      %end;
59074     +      %if &dsid %then %let dsid= %sysfunc(close(&dsid));
59075     +    %end;
59077     +   /* build reports dependent on subseries selection */
59078     +   %EM_REPORT(key=SUBFIT, viewtype=LINEPLOT, block=MODEL, view=1, X=_ITERATION_, Y=_ASE_, group=dataRole, autodisplay=Y, xref=&ntrees, DESCRIPTION=SUBFIT);
59079     +   %EM_REPORT(VIEW=1, Y=_NW_, xref=&ntrees);
59080     +   %EM_REPORT(VIEW=1, Y=_MISC_, xref=&ntrees);
59081     +   %EM_REPORT(VIEW=1, Y=_MAX_, xref=&ntrees);
59082     +   %EM_REPORT(VIEW=1, Y=_SSE_, xref=&ntrees);
59083     +   %EM_REPORT(VIEW=1, Y=_ASE_, xref=&ntrees);
59084     +   %EM_REPORT(VIEW=1, Y=_RASE_, xref=&ntrees);
59085     +   %EM_REPORT(VIEW=1, Y=_APROF_, xref=&ntrees);
59086     +   %EM_REPORT(VIEW=1, Y=_PROF_, xref=&ntrees);
59087     +   %EM_REPORT(VIEW=1, Y=_PASE_, xref=&ntrees);
59088     +   %EM_REPORT(VIEW=1, Y=_PMISC_, xref=&ntrees);
59090     +   /* build importance table including H statistics for display */
59091     +   %EM_REPORT(key=IMPORTANCE, viewtype=DATA, block=MODEL, DESCRIPTION=IMPORTANCE, AUTODISPLAY=Y);
59093     +   %doendm:
59094     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SELECTSUBSERIES):  ;
MPRINT(SELECTSUBSERIES):  ;
MPRINT(SELECTSUBSERIES):   proc arbor proc=treeboost data=EMWS1.Part3_TRAIN inmodel=EMWS1.Boost_MODEL;
NOTE: 1627477 kilobytes of physical memory.
MPRINT(SELECTSUBSERIES):   subseries BEST ;
NOTE: Will use 943 out of 943 training cases.
NOTE: Using memory pool with 44839936 bytes.
NOTE: Passed training data 690 times.
NOTE: Current TREEBOOST model contains 50 terms with a total of 250 trees.
NOTE: Training used 168200 bytes of work memory.
NOTE: Current TREEBOOST model contains 1 terms with a total of 5 trees.
MPRINT(SELECTSUBSERIES):   makemacro nimportant=ni nclasses=nclasses nitsase=nitsase nitsmisc=nitsmisc nitsprofit=nitsprofit ;
NOTE: Created macro variable NCLASSES equal to 5.
NOTE: Created macro variable NI equal to 2.
NOTE: Created macro variable NITSASE equal to 50.
NOTE: Created macro variable NITSMISC equal to 1.
NOTE: Created macro variable NITSPROFIT equal to 0.
A profit/loss matrix must be defined for AssessMeasure=PROFIT/LOSS
The value for Assessment Measure has been reset to DECISION.
MPRINT(SELECTSUBSERIES):   assess Validata=EMWS1.Part3_VALIDATE measure = MISC ;
NOTE: Current TREEBOOST model contains 1 terms with a total of 5 trees.
MPRINT(SELECTSUBSERIES):   code file="C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMFLOWSCORE.sas" res group=Boost ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMFLOWSCORE.sas opened.
MPRINT(SELECTSUBSERIES):   code file="C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMPUBLISHSCORE.sas" nores group=Boost ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMPUBLISHSCORE.sas opened.
MPRINT(SELECTSUBSERIES):   save fit=SUBFIT importance=EMWS1.Boost_IMPORTANCE model=EMWS1.Boost_MODEL;
NOTE: The data set WORK.SUBFIT has 50 observations and 19 variables.
NOTE: The data set EMWS1.BOOST_IMPORTANCE has 2 observations and 7 variables.
NOTE: The data set EMWS1.BOOST_MODEL has 53315 observations and 4 variables.
MPRINT(SELECTSUBSERIES):   score data=EMWS1.Part3_TRAIN out=fds(keep= p_:) outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: The data set WORK.FDS has 943 observations and 5 variables.
MPRINT(SELECTSUBSERIES):   score data=EMWS1.Part3_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
MPRINT(SELECTSUBSERIES):   run;

MPRINT(SELECTSUBSERIES):   quit;

NOTE: There were 943 observations read from the data set EMWS1.PART3_TRAIN.
NOTE: The data set WORK._NAMEDAT has 5 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.76 seconds
      cpu time            1.70 seconds
      

MPRINT(SELECTSUBSERIES):   proc datasets lib=work nolist;
MPRINT(SELECTSUBSERIES):   delete _BoostDMDB / mt=cat;
MPRINT(SELECTSUBSERIES):   run;

NOTE: Deleting WORK._BOOSTDMDB (memtype=CATALOG).
MPRINT(SCORE):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   set EMWS1.Ids3_Age_group_DM(where=(_TYPE_='DECPRIOR'));
MPRINT(SCORE):   call symput('usePriors', strip(USE));
MPRINT(SCORE):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS3_AGE_GROUP_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   set EMWS1.Ids3_Age_group_DM end=eof;
MPRINT(SCORE):   where _TYPE_ ='RESIDUAL';
MPRINT(SCORE):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(SCORE):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(SCORE):   run;

NOTE: There were 5 observations read from the data set EMWS1.IDS3_AGE_GROUP_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Age_group85_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;

NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Age_group65_84");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Age_group25_44");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Age_group18_24");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Age_group0_17");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   data EMWS1.Boost_IMPORTANCE;
MPRINT(SCORE):   set EMWS1.Boost_IMPORTANCE;
MPRINT(SCORE):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training Importance" NSURROGATES = "Number of Surrogate 
Rules";
MPRINT(SCORE):   ;
MPRINT(SCORE):   run;

NOTE: There were 2 observations read from the data set EMWS1.BOOST_IMPORTANCE.
NOTE: The data set EMWS1.BOOST_IMPORTANCE has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(SCORE):   title10 "Variable Importance";
MPRINT(SCORE):   proc print data=EMWS1.Boost_IMPORTANCE (where=((nrules>0) OR (nsurrogates > 0) ));
MPRINT(SCORE):   run;

NOTE: There were 2 observations read from the data set EMWS1.BOOST_IMPORTANCE.
      WHERE (nrules>0) or (nsurrogates>0);
NOTE: The PROCEDURE PRINT printed page 29.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):   title10;
MPRINT(CREATESUBFIT):  ;
MPRINT(CREATESUBFIT):   data EMWS1.Boost_SUBFIT;
MPRINT(CREATESUBFIT):   length datarole $8;
MPRINT(CREATESUBFIT):   set SUBFIT;
MPRINT(CREATESUBFIT):   datarole = "TRAIN";
MPRINT(CREATESUBFIT):   label _MISC_ = "Misclassification Rate" _MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Square Error" _RASE_ = "Root Average Square Error" _APROF_ = "Average Profit" _PROF_ = "Total Computed Profit" 
_PASE_ = "Average Square Error with Priors" _PMISC_ = "Misclassification Rate with Priors" _NLEAVES_ = "Number of Leaves" _ITERATION_= "Iteration" _NW_ = "Number of Leaves" datarole = "Data Role";
MPRINT(CREATESUBFIT):   keep _ITERATION_ _NW_ _MISC_ _MAX_ _SSE_ _ASE_ _RASE_ _NLEAVES_ datarole _APROF_ _PROF_ _PASE_ _PMISC_ ;
MPRINT(CREATESUBFIT):   run;

NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _PROF_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: Variable _PMISC_ is uninitialized.
NOTE: Variable _NLEAVES_ is uninitialized.
WARNING: The variable _NLEAVES_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _APROF_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _PROF_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _PASE_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _PMISC_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 50 observations read from the data set WORK.SUBFIT.
NOTE: The data set EMWS1.BOOST_SUBFIT has 50 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(CREATESUBFIT):   data tempvalid;
MPRINT(CREATESUBFIT):   length datarole $8;
MPRINT(CREATESUBFIT):   set SUBFIT;
MPRINT(CREATESUBFIT):   rename _VMISC_ = _MISC_ _VMAX_ = _MAX_ _VSSE_ = _SSE_ _VASE_ = _ASE_ _VRASE_ = _RASE_ _VAPROF_ = _APROF_ _VPROF_ = _PROF_ _VPASE_ = _PASE_ _VPMISC_ = _PMISC_ ;
MPRINT(CREATESUBFIT):   datarole = "VALID";
MPRINT(CREATESUBFIT):   label _VMISC_ = "Misclassification Rate" _VMAX_ = "Maximum Absolute Error" _VSSE_ = "Sum of Square Errors" _VASE_ = "Average Square Error" _VRASE_ = "Root Average Square Error" _VAPROF_ = "Average Profit" _VPROF_ = "Total Computed 
Profit" _VPASE_ = "Average Square Error with Priors" _VPMISC_ = "Misclassification Rate with Priors" _NLEAVES_ = "Number of Leaves" datarole = "Data Role";
MPRINT(CREATESUBFIT):   keep _ITERATION_ _NW_ _VMISC_ _VMAX_ _VSSE_ _VASE_ _VRASE_ _NLEAVES_ datarole _VAPROF_ _VPROF_ _VPASE_ _VPMISC_ ;
MPRINT(CREATESUBFIT):   run;

NOTE: Variable _VAPROF_ is uninitialized.
NOTE: Variable _VPROF_ is uninitialized.
NOTE: Variable _VPASE_ is uninitialized.
NOTE: Variable _VPMISC_ is uninitialized.
NOTE: Variable _NLEAVES_ is uninitialized.
WARNING: The variable _NLEAVES_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _VAPROF_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _VPROF_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _VPASE_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _VPMISC_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _VAPROF_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _VPROF_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _VPASE_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _VPMISC_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 50 observations read from the data set WORK.SUBFIT.
NOTE: The data set WORK.TEMPVALID has 50 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATESUBFIT):   data EMWS1.Boost_SUBFIT;
MPRINT(CREATESUBFIT):   set EMWS1.Boost_SUBFIT tempvalid;
MPRINT(CREATESUBFIT):   run;

NOTE: There were 50 observations read from the data set EMWS1.BOOST_SUBFIT.
NOTE: There were 50 observations read from the data set WORK.TEMPVALID.
NOTE: The data set EMWS1.BOOST_SUBFIT has 100 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATESUBFIT):   proc datasets library=work nolist;
MPRINT(CREATESUBFIT):   delete tempvalid;
MPRINT(CREATESUBFIT):   run;

NOTE: Deleting WORK.TEMPVALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(CREATESUBFIT):   proc datasets library=work nolist;
MPRINT(CREATESUBFIT):   delete subfit;
MPRINT(CREATESUBFIT):   run;

NOTE: Deleting WORK.SUBFIT (memtype=DATA).
MPRINT(SCORE):  ;
MPRINT(CREATEFITSTATISTICS):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATEFITSTATISTICS):   data EMWS1.Boost_EMOUTFIT;
MPRINT(CREATEFITSTATISTICS):   length target $32;
MPRINT(CREATEFITSTATISTICS):   merge work.fit_train work.fit_valid ;
MPRINT(CREATEFITSTATISTICS):   target =
MPRINT(CREATEFITSTATISTICS):   "Age_group";
MPRINT(CREATEFITSTATISTICS):   drop _NW_;
MPRINT(CREATEFITSTATISTICS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.BOOST_EMOUTFIT has 1 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATEFITSTATISTICS):   proc datasets library=work nolist;
MPRINT(CREATEFITSTATISTICS):   delete fit_valid;
MPRINT(CREATEFITSTATISTICS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
MPRINT(SCORE):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("PROJECTED_SUM_POP");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("OG_CASES_IN_THOUSANDS");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("INPUT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "SUBFIT";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LINEPLOT";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "SUBFIT";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_ITERATION_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_ASE_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "dataRole";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 133 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_NW_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 133 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 266 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_MISC_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 266 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 399 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_MAX_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 399 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 532 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_SSE_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
The SAS System

MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 532 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 665 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_ASE_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 665 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 798 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_RASE_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 798 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 931 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_APROF_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 931 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1064 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_PROF_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 1064 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1197 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_PASE_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 1197 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1330 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_PMISC_";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "1";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 1330 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1463 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11986230272793;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 1463 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1595 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Boost;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
59095      *------------------------------------------------------------*;
59096      * End SCORE: Boost;
59097      *------------------------------------------------------------*;
59098      

59099      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
59100      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
59101      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

59102      filename x "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\CDELTA_TRAIN.sas";
59103      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
59104      file x;
MPRINT(EM_DIAGRAM):   file x;
59105      put 'if upcase(NAME) = "OG_CASES_IN_THOUSANDS" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "OG_CASES_IN_THOUSANDS" then do;';
59106      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
59107      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
59108      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
59109      put 'if upcase(NAME) = "PROJECTED_SUM_POP" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "PROJECTED_SUM_POP" then do;';
59110      put 'ROLE = "INPUT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "INPUT";';
59111      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
59112      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
59113      put 'if upcase(NAME) = "Q_AGE_GROUP0_17" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_AGE_GROUP0_17" then do;';
59114      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
59115      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
59116      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
59117      put 'if upcase(NAME) = "Q_AGE_GROUP18_24" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_AGE_GROUP18_24" then do;';
59118      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
59119      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
59120      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
59121      put 'if upcase(NAME) = "Q_AGE_GROUP25_44" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_AGE_GROUP25_44" then do;';
59122      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
59123      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
59124      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
59125      put 'if upcase(NAME) = "Q_AGE_GROUP65_84" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_AGE_GROUP65_84" then do;';
59126      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
59127      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
59128      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
59129      put 'if upcase(NAME) = "Q_AGE_GROUP85_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_AGE_GROUP85_" then do;';
59130      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
59131      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
59132      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file X is:
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14Nov2019:16:24:00,
      Create Time=14Nov2019:15:47:00

NOTE: 27 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

59133      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
59134      filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
59135      *------------------------------------------------------------*;
59136      * Boost: Scoring DATA data;
59137      *------------------------------------------------------------*;
59138      data EMWS1.Boost_TRAIN
59139      / view=EMWS1.Boost_TRAIN
59140      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Boost_TRAIN / view=EMWS1.Boost_TRAIN ;
59141      set EMWS1.Part3_TRAIN
59142      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part3_TRAIN ;
59143      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMFLOWSCORE.sas.
59144     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
59145     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
59146     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
59147     +
59148     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
59149     +LENGTH F_Age_group  $   19;
MPRINT(EM_DIAGRAM):   LENGTH F_Age_group $ 19;
59150     +LENGTH I_Age_group  $   19;
MPRINT(EM_DIAGRAM):   LENGTH I_Age_group $ 19;
59151     +LENGTH U_Age_group  $   19;
MPRINT(EM_DIAGRAM):   LENGTH U_Age_group $ 19;
59152     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
59153     +
59154     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
59155     +label P_Age_group0_17 = 'Predicted: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label P_Age_group0_17 = 'Predicted: Age_group=0-17' ;
59156     +      P_Age_group0_17  = 0;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0;
59157     +label P_Age_group18_24 = 'Predicted: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label P_Age_group18_24 = 'Predicted: Age_group=18-24' ;
59158     +      P_Age_group18_24  = 0;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 0;
59159     +label P_Age_group25_44 = 'Predicted: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label P_Age_group25_44 = 'Predicted: Age_group=25-44' ;
59160     +      P_Age_group25_44  = 0;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 0;
59161     +label P_Age_group65_84 = 'Predicted: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label P_Age_group65_84 = 'Predicted: Age_group=65-84' ;
59162     +      P_Age_group65_84  = 0;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0;
59163     +label P_Age_group85_ = 'Predicted: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label P_Age_group85_ = 'Predicted: Age_group=85+' ;
59164     +      P_Age_group85_  = 0;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 0;
59165     +label Q_Age_group0_17 = 'Unadjusted P: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label Q_Age_group0_17 = 'Unadjusted P: Age_group=0-17' ;
59166     +      Q_Age_group0_17  = 0;
MPRINT(EM_DIAGRAM):   Q_Age_group0_17 = 0;
59167     +label Q_Age_group18_24 = 'Unadjusted P: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label Q_Age_group18_24 = 'Unadjusted P: Age_group=18-24' ;
59168     +      Q_Age_group18_24  = 0;
MPRINT(EM_DIAGRAM):   Q_Age_group18_24 = 0;
59169     +label Q_Age_group25_44 = 'Unadjusted P: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label Q_Age_group25_44 = 'Unadjusted P: Age_group=25-44' ;
59170     +      Q_Age_group25_44  = 0;
MPRINT(EM_DIAGRAM):   Q_Age_group25_44 = 0;
59171     +label Q_Age_group65_84 = 'Unadjusted P: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label Q_Age_group65_84 = 'Unadjusted P: Age_group=65-84' ;
59172     +      Q_Age_group65_84  = 0;
MPRINT(EM_DIAGRAM):   Q_Age_group65_84 = 0;
59173     +label Q_Age_group85_ = 'Unadjusted P: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label Q_Age_group85_ = 'Unadjusted P: Age_group=85+' ;
59174     +      Q_Age_group85_  = 0;
MPRINT(EM_DIAGRAM):   Q_Age_group85_ = 0;
59175     +label R_Age_group0_17 = 'Residual: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label R_Age_group0_17 = 'Residual: Age_group=0-17' ;
59176     +label R_Age_group18_24 = 'Residual: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label R_Age_group18_24 = 'Residual: Age_group=18-24' ;
59177     +label R_Age_group25_44 = 'Residual: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label R_Age_group25_44 = 'Residual: Age_group=25-44' ;
59178     +label R_Age_group65_84 = 'Residual: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label R_Age_group65_84 = 'Residual: Age_group=65-84' ;
59179     +label R_Age_group85_ = 'Residual: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label R_Age_group85_ = 'Residual: Age_group=85+' ;
59180     +label F_Age_group = 'From: Age_group' ;
MPRINT(EM_DIAGRAM):   label F_Age_group = 'From: Age_group' ;
59181     +label I_Age_group = 'Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label I_Age_group = 'Into: Age_group' ;
59182     +label U_Age_group = 'Unnormalized Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label U_Age_group = 'Unnormalized Into: Age_group' ;
59183     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
59184     +
59185     +
59186     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
59187     +LENGTH _ARBFMT_19 $     19; DROP _ARBFMT_19;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_19 $ 19;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_19;
59188     +_ARBFMT_19 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = ' ';
59189     +
59190     +
59191     +_ARBFMT_19 = PUT( Age_group , $19.);
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = PUT( Age_group , $19.);
59192     + %DMNORMCP( _ARBFMT_19, F_Age_group );
MPRINT(DMNORMCP):   F_Age_group=dmnorm(_ARBFMT_19,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
59193     +
59194     +ARRAY BOOST_ARB_Y_VEC_[5] _TEMPORARY_ ;
MPRINT(EM_DIAGRAM):   ARRAY BOOST_ARB_Y_VEC_[5] _TEMPORARY_ ;
59195     +   BOOST_ARB_Y_VEC_[1] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[1] = 0;
59196     +   BOOST_ARB_Y_VEC_[2] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[2] = 0;
59197     +   BOOST_ARB_Y_VEC_[3] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[3] = 0;
59198     +   BOOST_ARB_Y_VEC_[4] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[4] = 0;
59199     +   BOOST_ARB_Y_VEC_[5] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[5] = 0;
59200     +ARRAY BOOST_ARB_BADF_VEC_[5] _TEMPORARY_ ;
MPRINT(EM_DIAGRAM):   ARRAY BOOST_ARB_BADF_VEC_[5] _TEMPORARY_ ;
59201     +   BOOST_ARB_BADF_VEC_[1] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_BADF_VEC_[1] = 0;
59202     +   BOOST_ARB_BADF_VEC_[2] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_BADF_VEC_[2] = 0;
59203     +   BOOST_ARB_BADF_VEC_[3] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_BADF_VEC_[3] = 0;
59204     +   BOOST_ARB_BADF_VEC_[4] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_BADF_VEC_[4] = 0;
59205     +   BOOST_ARB_BADF_VEC_[5] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_BADF_VEC_[5] = 0;
59206     +
59207     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
59208     + DROP _ARB_P_;
MPRINT(EM_DIAGRAM):   DROP _ARB_P_;
59209     + _ARB_P_ = 0;
MPRINT(EM_DIAGRAM):   _ARB_P_ = 0;
59210     + DROP _ARB_PPATH_; _ARB_PPATH_ = 1;
MPRINT(EM_DIAGRAM):   DROP _ARB_PPATH_;
MPRINT(EM_DIAGRAM):   _ARB_PPATH_ = 1;
59211     +
59212     +********** LEAF     1  NODE  2182 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 1 NODE 2182 ***************;
59213     +IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
59214     +
59215     +   DROP _BRANCH_;
MPRINT(EM_DIAGRAM):   DROP _BRANCH_;
59216     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59217     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59218     +    Projected_Sum_Pop  <              1780976 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND Projected_Sum_Pop < 1780976 THEN DO;
59219     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59220     +    END;
MPRINT(EM_DIAGRAM):   END;
59221     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
59222     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
59223     +        IF OG_Cases_in_Thousands  <                20145 THEN DO;
MPRINT(EM_DIAGRAM):   IF OG_Cases_in_Thousands < 20145 THEN DO;
59224     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59225     +        END;
MPRINT(EM_DIAGRAM):   END;
59226     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59227     +      END;
MPRINT(EM_DIAGRAM):   END;
59228     +    END;
MPRINT(EM_DIAGRAM):   END;
59229     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59230     +     IF MISSING( Projected_Sum_Pop  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN _BRANCH_ = 1;
59231     +  END;
MPRINT(EM_DIAGRAM):   END;
59232     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59233     +
59234     +    _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59235     +      IF  NOT MISSING(Projected_Sum_Pop ) AND
59236     +      Projected_Sum_Pop  <            1144855.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND Projected_Sum_Pop < 1144855.5 THEN DO;
59237     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59238     +      END;
MPRINT(EM_DIAGRAM):   END;
59239     +    IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59240     +       IF MISSING( Projected_Sum_Pop  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN _BRANCH_ = 1;
59241     +    END;
MPRINT(EM_DIAGRAM):   END;
59242     +    IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59243     +      BOOST_ARB_Y_VEC_[1] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[1] + -0.1;
59244     +      END;
MPRINT(EM_DIAGRAM):   END;
59245     +    END;
MPRINT(EM_DIAGRAM):   END;
59246     +  END;
MPRINT(EM_DIAGRAM):   END;
59247     +
59248     +********** LEAF     2  NODE  2183 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 2 NODE 2183 ***************;
59249     +IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
59250     +
59251     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59252     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59253     +    Projected_Sum_Pop  <              1780976 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND Projected_Sum_Pop < 1780976 THEN DO;
59254     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59255     +    END;
MPRINT(EM_DIAGRAM):   END;
59256     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
59257     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
59258     +        IF OG_Cases_in_Thousands  <                20145 THEN DO;
MPRINT(EM_DIAGRAM):   IF OG_Cases_in_Thousands < 20145 THEN DO;
59259     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59260     +        END;
MPRINT(EM_DIAGRAM):   END;
59261     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59262     +      END;
MPRINT(EM_DIAGRAM):   END;
59263     +    END;
MPRINT(EM_DIAGRAM):   END;
59264     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59265     +     IF MISSING( Projected_Sum_Pop  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN _BRANCH_ = 1;
59266     +  END;
MPRINT(EM_DIAGRAM):   END;
59267     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59268     +
59269     +    _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59270     +      IF  NOT MISSING(Projected_Sum_Pop ) AND
59271     +                 1144855.5 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND 1144855.5 <= Projected_Sum_Pop THEN DO;
59272     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59273     +      END;
MPRINT(EM_DIAGRAM):   END;
59274     +
59275     +    IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59276     +      BOOST_ARB_Y_VEC_[1] + 0.4;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[1] + 0.4;
59277     +      END;
MPRINT(EM_DIAGRAM):   END;
59278     +    END;
MPRINT(EM_DIAGRAM):   END;
59279     +  END;
MPRINT(EM_DIAGRAM):   END;
59280     +
59281     +********** LEAF     3  NODE  2173 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 3 NODE 2173 ***************;
59282     +IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
59283     +
59284     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59285     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59286     +                 1780976 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND 1780976 <= Projected_Sum_Pop THEN DO;
59287     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59288     +    END;
MPRINT(EM_DIAGRAM):   END;
59289     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
59290     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
59291     +        IF                20145 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF 20145 <= OG_Cases_in_Thousands THEN DO;
59292     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59293     +        END;
MPRINT(EM_DIAGRAM):   END;
59294     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59295     +      END;
MPRINT(EM_DIAGRAM):   END;
59296     +    END;
MPRINT(EM_DIAGRAM):   END;
59297     +
59298     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59299     +    BOOST_ARB_Y_VEC_[1] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[1] + -0.1;
59300     +    END;
MPRINT(EM_DIAGRAM):   END;
59301     +  END;
MPRINT(EM_DIAGRAM):   END;
59302     +
59303     +********** LEAF     4  NODE  2174 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 4 NODE 2174 ***************;
59304     +IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN DO;
59305     +
59306     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59307     +    IF  NOT MISSING(OG_Cases_in_Thousands ) AND
59308     +    OG_Cases_in_Thousands  <                 1245 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND OG_Cases_in_Thousands < 1245 THEN DO;
59309     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59310     +    END;
MPRINT(EM_DIAGRAM):   END;
59311     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59312     +     IF MISSING( OG_Cases_in_Thousands  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( OG_Cases_in_Thousands ) THEN _BRANCH_ = 1;
59313     +  END;
MPRINT(EM_DIAGRAM):   END;
59314     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59315     +    BOOST_ARB_Y_VEC_[2] + 0.3788135593;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[2] + 0.3788135593;
59316     +    END;
MPRINT(EM_DIAGRAM):   END;
59317     +  END;
MPRINT(EM_DIAGRAM):   END;
59318     +
59319     +********** LEAF     5  NODE  2175 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 5 NODE 2175 ***************;
59320     +IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN DO;
59321     +
59322     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59323     +    IF  NOT MISSING(OG_Cases_in_Thousands ) AND
59324     +                    1245 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND 1245 <= OG_Cases_in_Thousands THEN DO;
59325     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59326     +    END;
MPRINT(EM_DIAGRAM):   END;
59327     +
59328     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59329     +    BOOST_ARB_Y_VEC_[2] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[2] + -0.1;
59330     +    END;
MPRINT(EM_DIAGRAM):   END;
59331     +  END;
MPRINT(EM_DIAGRAM):   END;
59332     +
59333     +********** LEAF     6  NODE  2176 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 6 NODE 2176 ***************;
59334     +IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
59335     +
59336     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59337     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59338     +    Projected_Sum_Pop  <              1780976 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND Projected_Sum_Pop < 1780976 THEN DO;
59339     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59340     +    END;
MPRINT(EM_DIAGRAM):   END;
59341     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
59342     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
59343     +        IF OG_Cases_in_Thousands  <                20145 THEN DO;
MPRINT(EM_DIAGRAM):   IF OG_Cases_in_Thousands < 20145 THEN DO;
59344     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59345     +        END;
MPRINT(EM_DIAGRAM):   END;
59346     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59347     +      END;
MPRINT(EM_DIAGRAM):   END;
59348     +    END;
MPRINT(EM_DIAGRAM):   END;
59349     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59350     +     IF MISSING( Projected_Sum_Pop  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN _BRANCH_ = 1;
59351     +  END;
MPRINT(EM_DIAGRAM):   END;
59352     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59353     +    BOOST_ARB_Y_VEC_[3] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[3] + -0.1;
59354     +    END;
MPRINT(EM_DIAGRAM):   END;
59355     +  END;
MPRINT(EM_DIAGRAM):   END;
59356     +
59357     +********** LEAF     7  NODE  2184 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 7 NODE 2184 ***************;
59358     +IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
59359     +
59360     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59361     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59362     +                 1780976 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND 1780976 <= Projected_Sum_Pop THEN DO;
59363     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59364     +    END;
MPRINT(EM_DIAGRAM):   END;
59365     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
59366     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
59367     +        IF                20145 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF 20145 <= OG_Cases_in_Thousands THEN DO;
59368     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59369     +        END;
MPRINT(EM_DIAGRAM):   END;
59370     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59371     +      END;
MPRINT(EM_DIAGRAM):   END;
59372     +    END;
MPRINT(EM_DIAGRAM):   END;
59373     +
59374     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59375     +
59376     +    _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59377     +      IF  NOT MISSING(OG_Cases_in_Thousands ) AND
59378     +      OG_Cases_in_Thousands  <                19365 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND OG_Cases_in_Thousands < 19365 THEN DO;
59379     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59380     +      END;
MPRINT(EM_DIAGRAM):   END;
59381     +     IF MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
59382     +      IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
59383     +          IF Projected_Sum_Pop  <            2194576.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF Projected_Sum_Pop < 2194576.5 THEN DO;
59384     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59385     +          END;
MPRINT(EM_DIAGRAM):   END;
59386     +        ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59387     +        END;
MPRINT(EM_DIAGRAM):   END;
59388     +      END;
MPRINT(EM_DIAGRAM):   END;
59389     +    IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59390     +       IF MISSING( OG_Cases_in_Thousands  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( OG_Cases_in_Thousands ) THEN _BRANCH_ = 1;
59391     +    END;
MPRINT(EM_DIAGRAM):   END;
59392     +    IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59393     +      BOOST_ARB_Y_VEC_[3] + 0.4;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[3] + 0.4;
59394     +      END;
MPRINT(EM_DIAGRAM):   END;
59395     +    END;
MPRINT(EM_DIAGRAM):   END;
59396     +  END;
MPRINT(EM_DIAGRAM):   END;
59397     +
59398     +********** LEAF     8  NODE  2185 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 8 NODE 2185 ***************;
59399     +IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
59400     +
59401     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59402     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59403     +                 1780976 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND 1780976 <= Projected_Sum_Pop THEN DO;
59404     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59405     +    END;
MPRINT(EM_DIAGRAM):   END;
59406     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
59407     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
59408     +        IF                20145 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF 20145 <= OG_Cases_in_Thousands THEN DO;
59409     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59410     +        END;
MPRINT(EM_DIAGRAM):   END;
59411     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59412     +      END;
MPRINT(EM_DIAGRAM):   END;
59413     +    END;
MPRINT(EM_DIAGRAM):   END;
59414     +
59415     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59416     +
59417     +    _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59418     +      IF  NOT MISSING(OG_Cases_in_Thousands ) AND
59419     +                     19365 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND 19365 <= OG_Cases_in_Thousands THEN DO;
59420     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59421     +      END;
MPRINT(EM_DIAGRAM):   END;
59422     +     IF MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
59423     +      IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
59424     +          IF            2194576.5 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF 2194576.5 <= Projected_Sum_Pop THEN DO;
59425     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59426     +          END;
MPRINT(EM_DIAGRAM):   END;
59427     +        ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59428     +        END;
MPRINT(EM_DIAGRAM):   END;
59429     +      END;
MPRINT(EM_DIAGRAM):   END;
59430     +
59431     +    IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59432     +      BOOST_ARB_Y_VEC_[3] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[3] + -0.1;
59433     +      END;
MPRINT(EM_DIAGRAM):   END;
59434     +    END;
MPRINT(EM_DIAGRAM):   END;
59435     +  END;
MPRINT(EM_DIAGRAM):   END;
59436     +
59437     +********** LEAF     9  NODE  2178 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 9 NODE 2178 ***************;
59438     +IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN DO;
59439     +
59440     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59441     +    IF  NOT MISSING(OG_Cases_in_Thousands ) AND
59442     +    OG_Cases_in_Thousands  <                20145 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND OG_Cases_in_Thousands < 20145 THEN DO;
59443     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59444     +    END;
MPRINT(EM_DIAGRAM):   END;
59445     +   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
59446     +    IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
59447     +        IF Projected_Sum_Pop  <            2194576.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF Projected_Sum_Pop < 2194576.5 THEN DO;
59448     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59449     +        END;
MPRINT(EM_DIAGRAM):   END;
59450     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59451     +      END;
MPRINT(EM_DIAGRAM):   END;
59452     +    END;
MPRINT(EM_DIAGRAM):   END;
59453     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59454     +     IF MISSING( OG_Cases_in_Thousands  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( OG_Cases_in_Thousands ) THEN _BRANCH_ = 1;
59455     +  END;
MPRINT(EM_DIAGRAM):   END;
59456     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59457     +    BOOST_ARB_Y_VEC_[4] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[4] + -0.1;
59458     +    END;
MPRINT(EM_DIAGRAM):   END;
59459     +  END;
MPRINT(EM_DIAGRAM):   END;
59460     +
59461     +********** LEAF    10  NODE  2179 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 10 NODE 2179 ***************;
59462     +IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN DO;
59463     +
59464     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59465     +    IF  NOT MISSING(OG_Cases_in_Thousands ) AND
59466     +                   20145 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND 20145 <= OG_Cases_in_Thousands THEN DO;
59467     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59468     +    END;
MPRINT(EM_DIAGRAM):   END;
59469     +   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
59470     +    IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
59471     +        IF            2194576.5 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF 2194576.5 <= Projected_Sum_Pop THEN DO;
59472     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59473     +        END;
MPRINT(EM_DIAGRAM):   END;
59474     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59475     +      END;
MPRINT(EM_DIAGRAM):   END;
59476     +    END;
MPRINT(EM_DIAGRAM):   END;
59477     +
59478     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59479     +    BOOST_ARB_Y_VEC_[4] + 0.4;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[4] + 0.4;
59480     +    END;
MPRINT(EM_DIAGRAM):   END;
59481     +  END;
MPRINT(EM_DIAGRAM):   END;
59482     +
59483     +********** LEAF    11  NODE  2180 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 11 NODE 2180 ***************;
59484     +IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN DO;
59485     +
59486     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59487     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59488     +    Projected_Sum_Pop  <             450380.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND Projected_Sum_Pop < 450380.5 THEN DO;
59489     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59490     +    END;
MPRINT(EM_DIAGRAM):   END;
59491     +
59492     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59493     +    BOOST_ARB_Y_VEC_[5] + 0.4;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[5] + 0.4;
59494     +    END;
MPRINT(EM_DIAGRAM):   END;
59495     +  END;
MPRINT(EM_DIAGRAM):   END;
59496     +
59497     +********** LEAF    12  NODE  2181 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 12 NODE 2181 ***************;
59498     +IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN DO;
59499     +
59500     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59501     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59502     +                450380.5 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND 450380.5 <= Projected_Sum_Pop THEN DO;
59503     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59504     +    END;
MPRINT(EM_DIAGRAM):   END;
59505     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59506     +     IF MISSING( Projected_Sum_Pop  ) THEN _BRANCH_ = 2;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN _BRANCH_ = 2;
59507     +  END;
MPRINT(EM_DIAGRAM):   END;
59508     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59509     +    BOOST_ARB_Y_VEC_[5] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[5] + -0.1;
59510     +    END;
MPRINT(EM_DIAGRAM):   END;
59511     +  END;
MPRINT(EM_DIAGRAM):   END;
59512     + DROP _ARB_ONE_;
MPRINT(EM_DIAGRAM):   DROP _ARB_ONE_;
59513     + DROP _ARB_I_ _ARB_IP_;
MPRINT(EM_DIAGRAM):   DROP _ARB_I_ _ARB_IP_;
59514     + _ARB_P_   = 0;
MPRINT(EM_DIAGRAM):   _ARB_P_ = 0;
59515     + _ARB_ONE_ = 0;
MPRINT(EM_DIAGRAM):   _ARB_ONE_ = 0;
59516     +
59517     +*****  CHECK FOR PERFECT PREDICTION ****;
MPRINT(EM_DIAGRAM):   ***** CHECK FOR PERFECT PREDICTION ****;
59518     +IF BOOST_ARB_BADF_VEC_[1] EQ 0 AND BOOST_ARB_Y_VEC_[1] > 45 THEN _ARB_ONE_ =
59519     +        1;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[1] EQ 0 AND BOOST_ARB_Y_VEC_[1] > 45 THEN _ARB_ONE_ = 1;
59520     +IF BOOST_ARB_BADF_VEC_[2] EQ 0 AND BOOST_ARB_Y_VEC_[2] > 45 THEN _ARB_ONE_ =
59521     +        2;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[2] EQ 0 AND BOOST_ARB_Y_VEC_[2] > 45 THEN _ARB_ONE_ = 2;
59522     +IF BOOST_ARB_BADF_VEC_[3] EQ 0 AND BOOST_ARB_Y_VEC_[3] > 45 THEN _ARB_ONE_ =
59523     +        3;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[3] EQ 0 AND BOOST_ARB_Y_VEC_[3] > 45 THEN _ARB_ONE_ = 3;
59524     +IF BOOST_ARB_BADF_VEC_[4] EQ 0 AND BOOST_ARB_Y_VEC_[4] > 45 THEN _ARB_ONE_ =
59525     +        4;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[4] EQ 0 AND BOOST_ARB_Y_VEC_[4] > 45 THEN _ARB_ONE_ = 4;
59526     +IF BOOST_ARB_BADF_VEC_[5] EQ 0 AND BOOST_ARB_Y_VEC_[5] > 45 THEN _ARB_ONE_ =
59527     +        5;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[5] EQ 0 AND BOOST_ARB_Y_VEC_[5] > 45 THEN _ARB_ONE_ = 5;
59528     +
59529     +*****  COMPUTE POSTERIOR PROBABILITY *************;
MPRINT(EM_DIAGRAM):   ***** COMPUTE POSTERIOR PROBABILITY *************;
59530     +IF _ARB_ONE_ NE 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ NE 0 THEN DO;
59531     +  IF _ARB_ONE_ EQ 1 THEN P_Age_group0_17  = 1.0;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 1 THEN P_Age_group0_17 = 1.0;
59532     +  ELSE  P_Age_group0_17  = 0.0;
MPRINT(EM_DIAGRAM):   ELSE P_Age_group0_17 = 0.0;
59533     +END;
MPRINT(EM_DIAGRAM):   END;
59534     +ELSE IF BOOST_ARB_BADF_VEC_[1] NE 0 OR BOOST_ARB_Y_VEC_[1] < -45 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF BOOST_ARB_BADF_VEC_[1] NE 0 OR BOOST_ARB_Y_VEC_[1] < -45 THEN DO;
59535     +  P_Age_group0_17  = 0.0;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0.0;
59536     +END;
MPRINT(EM_DIAGRAM):   END;
59537     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59538     +  P_Age_group0_17  = EXP(BOOST_ARB_Y_VEC_[1]);
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = EXP(BOOST_ARB_Y_VEC_[1]);
59539     +   _ARB_P_ + P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group0_17 ;
59540     +END;
MPRINT(EM_DIAGRAM):   END;
59541     +
59542     +IF _ARB_ONE_ NE 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ NE 0 THEN DO;
59543     +  IF _ARB_ONE_ EQ 2 THEN P_Age_group18_24  = 1.0;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 2 THEN P_Age_group18_24 = 1.0;
59544     +  ELSE  P_Age_group18_24  = 0.0;
MPRINT(EM_DIAGRAM):   ELSE P_Age_group18_24 = 0.0;
59545     +END;
MPRINT(EM_DIAGRAM):   END;
59546     +ELSE IF BOOST_ARB_BADF_VEC_[2] NE 0 OR BOOST_ARB_Y_VEC_[2] < -45 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF BOOST_ARB_BADF_VEC_[2] NE 0 OR BOOST_ARB_Y_VEC_[2] < -45 THEN DO;
59547     +  P_Age_group18_24  = 0.0;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 0.0;
59548     +END;
MPRINT(EM_DIAGRAM):   END;
59549     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59550     +  P_Age_group18_24  = EXP(BOOST_ARB_Y_VEC_[2]);
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = EXP(BOOST_ARB_Y_VEC_[2]);
59551     +   _ARB_P_ + P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group18_24 ;
59552     +END;
MPRINT(EM_DIAGRAM):   END;
59553     +
59554     +IF _ARB_ONE_ NE 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ NE 0 THEN DO;
59555     +  IF _ARB_ONE_ EQ 3 THEN P_Age_group25_44  = 1.0;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 3 THEN P_Age_group25_44 = 1.0;
59556     +  ELSE  P_Age_group25_44  = 0.0;
MPRINT(EM_DIAGRAM):   ELSE P_Age_group25_44 = 0.0;
59557     +END;
MPRINT(EM_DIAGRAM):   END;
59558     +ELSE IF BOOST_ARB_BADF_VEC_[3] NE 0 OR BOOST_ARB_Y_VEC_[3] < -45 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF BOOST_ARB_BADF_VEC_[3] NE 0 OR BOOST_ARB_Y_VEC_[3] < -45 THEN DO;
59559     +  P_Age_group25_44  = 0.0;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 0.0;
59560     +END;
MPRINT(EM_DIAGRAM):   END;
59561     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59562     +  P_Age_group25_44  = EXP(BOOST_ARB_Y_VEC_[3]);
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = EXP(BOOST_ARB_Y_VEC_[3]);
59563     +   _ARB_P_ + P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group25_44 ;
59564     +END;
MPRINT(EM_DIAGRAM):   END;
59565     +
59566     +IF _ARB_ONE_ NE 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ NE 0 THEN DO;
59567     +  IF _ARB_ONE_ EQ 4 THEN P_Age_group65_84  = 1.0;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 4 THEN P_Age_group65_84 = 1.0;
59568     +  ELSE  P_Age_group65_84  = 0.0;
MPRINT(EM_DIAGRAM):   ELSE P_Age_group65_84 = 0.0;
59569     +END;
MPRINT(EM_DIAGRAM):   END;
59570     +ELSE IF BOOST_ARB_BADF_VEC_[4] NE 0 OR BOOST_ARB_Y_VEC_[4] < -45 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF BOOST_ARB_BADF_VEC_[4] NE 0 OR BOOST_ARB_Y_VEC_[4] < -45 THEN DO;
59571     +  P_Age_group65_84  = 0.0;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0.0;
59572     +END;
MPRINT(EM_DIAGRAM):   END;
59573     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59574     +  P_Age_group65_84  = EXP(BOOST_ARB_Y_VEC_[4]);
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = EXP(BOOST_ARB_Y_VEC_[4]);
59575     +   _ARB_P_ + P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group65_84 ;
59576     +END;
MPRINT(EM_DIAGRAM):   END;
59577     +
59578     +IF _ARB_ONE_ NE 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ NE 0 THEN DO;
59579     +  IF _ARB_ONE_ EQ 5 THEN P_Age_group85_  = 1.0;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 5 THEN P_Age_group85_ = 1.0;
59580     +  ELSE  P_Age_group85_  = 0.0;
MPRINT(EM_DIAGRAM):   ELSE P_Age_group85_ = 0.0;
59581     +END;
MPRINT(EM_DIAGRAM):   END;
59582     +ELSE IF BOOST_ARB_BADF_VEC_[5] NE 0 OR BOOST_ARB_Y_VEC_[5] < -45 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF BOOST_ARB_BADF_VEC_[5] NE 0 OR BOOST_ARB_Y_VEC_[5] < -45 THEN DO;
59583     +  P_Age_group85_  = 0.0;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 0.0;
59584     +END;
MPRINT(EM_DIAGRAM):   END;
59585     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59586     +  P_Age_group85_  = EXP(BOOST_ARB_Y_VEC_[5]);
MPRINT(EM_DIAGRAM):   P_Age_group85_ = EXP(BOOST_ARB_Y_VEC_[5]);
59587     +   _ARB_P_ + P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group85_ ;
59588     +END;
MPRINT(EM_DIAGRAM):   END;
59589     +
59590     +IF _ARB_ONE_ EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 0 THEN DO;
59591     +  IF _ARB_P_ > 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_P_ > 0 THEN DO;
59592     +    _ARB_I_ = 0;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 0;
59593     +    IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN P_Age_group0_17  = P_Age_group0_17  /
59594     +        _ARB_P_;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN P_Age_group0_17 = P_Age_group0_17 / _ARB_P_;
59595     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59596     +      P_Age_group0_17  = 0.1993637328;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0.1993637328;
59597     +      _ARB_I_ = _ARB_I_ + 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = _ARB_I_ + 1;
59598     +    END;
MPRINT(EM_DIAGRAM):   END;
59599     +    IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN P_Age_group18_24  = P_Age_group18_24
59600     +        / _ARB_P_;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN P_Age_group18_24 = P_Age_group18_24 / _ARB_P_;
59601     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59602     +      P_Age_group18_24  = 0.1993637328;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 0.1993637328;
59603     +      _ARB_I_ = _ARB_I_ + 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = _ARB_I_ + 1;
59604     +    END;
MPRINT(EM_DIAGRAM):   END;
59605     +    IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN P_Age_group25_44  = P_Age_group25_44
59606     +        / _ARB_P_;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN P_Age_group25_44 = P_Age_group25_44 / _ARB_P_;
59607     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59608     +      P_Age_group25_44  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 0.2004241782;
59609     +      _ARB_I_ = _ARB_I_ + 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = _ARB_I_ + 1;
59610     +    END;
MPRINT(EM_DIAGRAM):   END;
59611     +    IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN P_Age_group65_84  = P_Age_group65_84
59612     +        / _ARB_P_;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN P_Age_group65_84 = P_Age_group65_84 / _ARB_P_;
59613     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59614     +      P_Age_group65_84  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0.2004241782;
59615     +      _ARB_I_ = _ARB_I_ + 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = _ARB_I_ + 1;
59616     +    END;
MPRINT(EM_DIAGRAM):   END;
59617     +    IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN P_Age_group85_  = P_Age_group85_  /
59618     +        _ARB_P_;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN P_Age_group85_ = P_Age_group85_ / _ARB_P_;
59619     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59620     +      P_Age_group85_  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 0.2004241782;
59621     +      _ARB_I_ = _ARB_I_ + 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = _ARB_I_ + 1;
59622     +    END;
MPRINT(EM_DIAGRAM):   END;
59623     +    IF _ARB_I_ > 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_I_ > 0 THEN DO;
59624     +       _ARB_P_   = 0;
MPRINT(EM_DIAGRAM):   _ARB_P_ = 0;
59625     +       _ARB_P_ + P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group0_17 ;
59626     +       _ARB_P_ + P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group18_24 ;
59627     +       _ARB_P_ + P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group25_44 ;
59628     +       _ARB_P_ + P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group65_84 ;
59629     +       _ARB_P_ + P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group85_ ;
59630     +      P_Age_group0_17  = P_Age_group0_17  / _ARB_P_;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = P_Age_group0_17 / _ARB_P_;
59631     +      P_Age_group18_24  = P_Age_group18_24  / _ARB_P_;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = P_Age_group18_24 / _ARB_P_;
59632     +      P_Age_group25_44  = P_Age_group25_44  / _ARB_P_;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = P_Age_group25_44 / _ARB_P_;
59633     +      P_Age_group65_84  = P_Age_group65_84  / _ARB_P_;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = P_Age_group65_84 / _ARB_P_;
59634     +      P_Age_group85_  = P_Age_group85_  / _ARB_P_;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = P_Age_group85_ / _ARB_P_;
59635     +    END;
MPRINT(EM_DIAGRAM):   END;
59636     +  END;
MPRINT(EM_DIAGRAM):   END;
59637     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59638     +    P_Age_group0_17  = 0.1993637328;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0.1993637328;
59639     +    P_Age_group18_24  = 0.1993637328;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 0.1993637328;
59640     +    P_Age_group25_44  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 0.2004241782;
59641     +    P_Age_group65_84  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0.2004241782;
59642     +    P_Age_group85_  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 0.2004241782;
59643     +  END;
MPRINT(EM_DIAGRAM):   END;
59644     +END;
MPRINT(EM_DIAGRAM):   END;
59645     +*****  CREATE Q_: POSTERIORS WITHOUT PRIORS ****;
MPRINT(EM_DIAGRAM):   ***** CREATE Q_: POSTERIORS WITHOUT PRIORS ****;
59646     +Q_Age_group0_17  = P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   Q_Age_group0_17 = P_Age_group0_17 ;
59647     +Q_Age_group18_24  = P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   Q_Age_group18_24 = P_Age_group18_24 ;
59648     +Q_Age_group25_44  = P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   Q_Age_group25_44 = P_Age_group25_44 ;
59649     +Q_Age_group65_84  = P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   Q_Age_group65_84 = P_Age_group65_84 ;
59650     +Q_Age_group85_  = P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   Q_Age_group85_ = P_Age_group85_ ;
59651     +
59652     +*****  I_ AND U_ VARIABLES *******************;
MPRINT(EM_DIAGRAM):   ***** I_ AND U_ VARIABLES *******************;
59653     + _ARB_IP_ = -1.0;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = -1.0;
59654     + IF _ARB_IP_ + 1.0/32768.0 < P_Age_group0_17 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_IP_ + 1.0/32768.0 < P_Age_group0_17 THEN DO;
59655     +   _ARB_IP_ = P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = P_Age_group0_17 ;
59656     +   _ARB_I_  = 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 1;
59657     +   END;
MPRINT(EM_DIAGRAM):   END;
59658     + IF _ARB_IP_ + 1.0/32768.0 < P_Age_group18_24 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_IP_ + 1.0/32768.0 < P_Age_group18_24 THEN DO;
59659     +   _ARB_IP_ = P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = P_Age_group18_24 ;
59660     +   _ARB_I_  = 2;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 2;
59661     +   END;
MPRINT(EM_DIAGRAM):   END;
59662     + IF _ARB_IP_ + 1.0/32768.0 < P_Age_group25_44 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_IP_ + 1.0/32768.0 < P_Age_group25_44 THEN DO;
59663     +   _ARB_IP_ = P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = P_Age_group25_44 ;
59664     +   _ARB_I_  = 3;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 3;
59665     +   END;
MPRINT(EM_DIAGRAM):   END;
59666     + IF _ARB_IP_ + 1.0/32768.0 < P_Age_group65_84 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_IP_ + 1.0/32768.0 < P_Age_group65_84 THEN DO;
59667     +   _ARB_IP_ = P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = P_Age_group65_84 ;
59668     +   _ARB_I_  = 4;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 4;
59669     +   END;
MPRINT(EM_DIAGRAM):   END;
59670     + IF _ARB_IP_ + 1.0/32768.0 < P_Age_group85_ THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_IP_ + 1.0/32768.0 < P_Age_group85_ THEN DO;
59671     +   _ARB_IP_ = P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = P_Age_group85_ ;
59672     +   _ARB_I_  = 5;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 5;
59673     +   END;
MPRINT(EM_DIAGRAM):   END;
59674     + SELECT( _ARB_I_);
MPRINT(EM_DIAGRAM):   SELECT( _ARB_I_);
59675     +  WHEN( 1) DO;
MPRINT(EM_DIAGRAM):   WHEN( 1) DO;
59676     +    I_Age_group  = '0-17' ;
MPRINT(EM_DIAGRAM):   I_Age_group = '0-17' ;
59677     +    U_Age_group  = '0-17' ;
MPRINT(EM_DIAGRAM):   U_Age_group = '0-17' ;
59678     +     END;
MPRINT(EM_DIAGRAM):   END;
59679     +  WHEN( 2) DO;
MPRINT(EM_DIAGRAM):   WHEN( 2) DO;
59680     +    I_Age_group  = '18-24' ;
MPRINT(EM_DIAGRAM):   I_Age_group = '18-24' ;
59681     +    U_Age_group  = '18-24' ;
MPRINT(EM_DIAGRAM):   U_Age_group = '18-24' ;
59682     +     END;
MPRINT(EM_DIAGRAM):   END;
59683     +  WHEN( 3) DO;
MPRINT(EM_DIAGRAM):   WHEN( 3) DO;
59684     +    I_Age_group  = '25-44' ;
MPRINT(EM_DIAGRAM):   I_Age_group = '25-44' ;
59685     +    U_Age_group  = '25-44' ;
MPRINT(EM_DIAGRAM):   U_Age_group = '25-44' ;
59686     +     END;
MPRINT(EM_DIAGRAM):   END;
59687     +  WHEN( 4) DO;
MPRINT(EM_DIAGRAM):   WHEN( 4) DO;
59688     +    I_Age_group  = '65-84' ;
MPRINT(EM_DIAGRAM):   I_Age_group = '65-84' ;
59689     +    U_Age_group  = '65-84' ;
MPRINT(EM_DIAGRAM):   U_Age_group = '65-84' ;
59690     +     END;
MPRINT(EM_DIAGRAM):   END;
59691     +  WHEN( 5) DO;
MPRINT(EM_DIAGRAM):   WHEN( 5) DO;
59692     +    I_Age_group  = '85+' ;
MPRINT(EM_DIAGRAM):   I_Age_group = '85+' ;
59693     +    U_Age_group  = '85+' ;
MPRINT(EM_DIAGRAM):   U_Age_group = '85+' ;
59694     +     END;
MPRINT(EM_DIAGRAM):   END;
59695     +   END;
MPRINT(EM_DIAGRAM):   END;
59696     +
59697     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
59698     +IF  F_Age_group  NE '0-17'
59699     +AND F_Age_group  NE '18-24'
59700     +AND F_Age_group  NE '25-44'
59701     +AND F_Age_group  NE '65-84'
59702     +AND F_Age_group  NE '85+'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_Age_group NE '0-17' AND F_Age_group NE '18-24' AND F_Age_group NE '25-44' AND F_Age_group NE '65-84' AND F_Age_group NE '85+' THEN DO;
59703     +        R_Age_group0_17  = .;
MPRINT(EM_DIAGRAM):   R_Age_group0_17 = .;
59704     +        R_Age_group18_24  = .;
MPRINT(EM_DIAGRAM):   R_Age_group18_24 = .;
59705     +        R_Age_group25_44  = .;
MPRINT(EM_DIAGRAM):   R_Age_group25_44 = .;
59706     +        R_Age_group65_84  = .;
MPRINT(EM_DIAGRAM):   R_Age_group65_84 = .;
59707     +        R_Age_group85_  = .;
MPRINT(EM_DIAGRAM):   R_Age_group85_ = .;
59708     + END;
MPRINT(EM_DIAGRAM):   END;
59709     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
59710     +       R_Age_group0_17  =  -P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   R_Age_group0_17 = -P_Age_group0_17 ;
59711     +       R_Age_group18_24  =  -P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   R_Age_group18_24 = -P_Age_group18_24 ;
59712     +       R_Age_group25_44  =  -P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   R_Age_group25_44 = -P_Age_group25_44 ;
59713     +       R_Age_group65_84  =  -P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   R_Age_group65_84 = -P_Age_group65_84 ;
59714     +       R_Age_group85_  =  -P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   R_Age_group85_ = -P_Age_group85_ ;
59715     +       SELECT( F_Age_group  );
MPRINT(EM_DIAGRAM):   SELECT( F_Age_group );
59716     +          WHEN( '0-17'  ) R_Age_group0_17  = R_Age_group0_17  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0-17' ) R_Age_group0_17 = R_Age_group0_17 +1;
59717     +          WHEN( '18-24'  ) R_Age_group18_24  = R_Age_group18_24  +1;
MPRINT(EM_DIAGRAM):   WHEN( '18-24' ) R_Age_group18_24 = R_Age_group18_24 +1;
59718     +          WHEN( '25-44'  ) R_Age_group25_44  = R_Age_group25_44  +1;
MPRINT(EM_DIAGRAM):   WHEN( '25-44' ) R_Age_group25_44 = R_Age_group25_44 +1;
59719     +          WHEN( '65-84'  ) R_Age_group65_84  = R_Age_group65_84  +1;
MPRINT(EM_DIAGRAM):   WHEN( '65-84' ) R_Age_group65_84 = R_Age_group65_84 +1;
59720     +          WHEN( '85+'  ) R_Age_group85_  = R_Age_group85_  +1;
MPRINT(EM_DIAGRAM):   WHEN( '85+' ) R_Age_group85_ = R_Age_group85_ +1;
59721     +       END;
MPRINT(EM_DIAGRAM):   END;
59722     + END;
MPRINT(EM_DIAGRAM):   END;
59723     +
59724     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
59725     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
59726     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
59727     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
59728      run;

NOTE: DATA STEP view saved on file EMWS1.BOOST_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
59729      quit;
59730      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
59731      filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
59732      *------------------------------------------------------------*;
59733      * Boost: Scoring VALIDATE data;
59734      *------------------------------------------------------------*;
59735      data EMWS1.Boost_VALIDATE
59736      / view=EMWS1.Boost_VALIDATE
59737      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Boost_VALIDATE / view=EMWS1.Boost_VALIDATE ;
59738      set EMWS1.Part3_VALIDATE
59739      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part3_VALIDATE ;
59740      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\EMFLOWSCORE.sas.
59741     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
59742     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
59743     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
59744     +
59745     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
59746     +LENGTH F_Age_group  $   19;
MPRINT(EM_DIAGRAM):   LENGTH F_Age_group $ 19;
59747     +LENGTH I_Age_group  $   19;
MPRINT(EM_DIAGRAM):   LENGTH I_Age_group $ 19;
59748     +LENGTH U_Age_group  $   19;
MPRINT(EM_DIAGRAM):   LENGTH U_Age_group $ 19;
59749     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
59750     +
59751     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
59752     +label P_Age_group0_17 = 'Predicted: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label P_Age_group0_17 = 'Predicted: Age_group=0-17' ;
59753     +      P_Age_group0_17  = 0;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0;
59754     +label P_Age_group18_24 = 'Predicted: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label P_Age_group18_24 = 'Predicted: Age_group=18-24' ;
59755     +      P_Age_group18_24  = 0;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 0;
59756     +label P_Age_group25_44 = 'Predicted: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label P_Age_group25_44 = 'Predicted: Age_group=25-44' ;
59757     +      P_Age_group25_44  = 0;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 0;
59758     +label P_Age_group65_84 = 'Predicted: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label P_Age_group65_84 = 'Predicted: Age_group=65-84' ;
59759     +      P_Age_group65_84  = 0;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0;
59760     +label P_Age_group85_ = 'Predicted: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label P_Age_group85_ = 'Predicted: Age_group=85+' ;
59761     +      P_Age_group85_  = 0;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 0;
59762     +label Q_Age_group0_17 = 'Unadjusted P: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label Q_Age_group0_17 = 'Unadjusted P: Age_group=0-17' ;
59763     +      Q_Age_group0_17  = 0;
MPRINT(EM_DIAGRAM):   Q_Age_group0_17 = 0;
59764     +label Q_Age_group18_24 = 'Unadjusted P: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label Q_Age_group18_24 = 'Unadjusted P: Age_group=18-24' ;
59765     +      Q_Age_group18_24  = 0;
MPRINT(EM_DIAGRAM):   Q_Age_group18_24 = 0;
59766     +label Q_Age_group25_44 = 'Unadjusted P: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label Q_Age_group25_44 = 'Unadjusted P: Age_group=25-44' ;
59767     +      Q_Age_group25_44  = 0;
MPRINT(EM_DIAGRAM):   Q_Age_group25_44 = 0;
59768     +label Q_Age_group65_84 = 'Unadjusted P: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label Q_Age_group65_84 = 'Unadjusted P: Age_group=65-84' ;
59769     +      Q_Age_group65_84  = 0;
MPRINT(EM_DIAGRAM):   Q_Age_group65_84 = 0;
59770     +label Q_Age_group85_ = 'Unadjusted P: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label Q_Age_group85_ = 'Unadjusted P: Age_group=85+' ;
59771     +      Q_Age_group85_  = 0;
MPRINT(EM_DIAGRAM):   Q_Age_group85_ = 0;
59772     +label R_Age_group0_17 = 'Residual: Age_group=0-17' ;
MPRINT(EM_DIAGRAM):   label R_Age_group0_17 = 'Residual: Age_group=0-17' ;
59773     +label R_Age_group18_24 = 'Residual: Age_group=18-24' ;
MPRINT(EM_DIAGRAM):   label R_Age_group18_24 = 'Residual: Age_group=18-24' ;
59774     +label R_Age_group25_44 = 'Residual: Age_group=25-44' ;
MPRINT(EM_DIAGRAM):   label R_Age_group25_44 = 'Residual: Age_group=25-44' ;
59775     +label R_Age_group65_84 = 'Residual: Age_group=65-84' ;
MPRINT(EM_DIAGRAM):   label R_Age_group65_84 = 'Residual: Age_group=65-84' ;
59776     +label R_Age_group85_ = 'Residual: Age_group=85+' ;
MPRINT(EM_DIAGRAM):   label R_Age_group85_ = 'Residual: Age_group=85+' ;
59777     +label F_Age_group = 'From: Age_group' ;
MPRINT(EM_DIAGRAM):   label F_Age_group = 'From: Age_group' ;
59778     +label I_Age_group = 'Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label I_Age_group = 'Into: Age_group' ;
59779     +label U_Age_group = 'Unnormalized Into: Age_group' ;
MPRINT(EM_DIAGRAM):   label U_Age_group = 'Unnormalized Into: Age_group' ;
59780     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
59781     +
59782     +
59783     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
59784     +LENGTH _ARBFMT_19 $     19; DROP _ARBFMT_19;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_19 $ 19;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_19;
59785     +_ARBFMT_19 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = ' ';
59786     +
59787     +
59788     +_ARBFMT_19 = PUT( Age_group , $19.);
MPRINT(EM_DIAGRAM):   _ARBFMT_19 = PUT( Age_group , $19.);
59789     + %DMNORMCP( _ARBFMT_19, F_Age_group );
MPRINT(DMNORMCP):   F_Age_group=dmnorm(_ARBFMT_19,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
59790     +
59791     +ARRAY BOOST_ARB_Y_VEC_[5] _TEMPORARY_ ;
MPRINT(EM_DIAGRAM):   ARRAY BOOST_ARB_Y_VEC_[5] _TEMPORARY_ ;
59792     +   BOOST_ARB_Y_VEC_[1] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[1] = 0;
59793     +   BOOST_ARB_Y_VEC_[2] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[2] = 0;
59794     +   BOOST_ARB_Y_VEC_[3] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[3] = 0;
59795     +   BOOST_ARB_Y_VEC_[4] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[4] = 0;
59796     +   BOOST_ARB_Y_VEC_[5] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[5] = 0;
59797     +ARRAY BOOST_ARB_BADF_VEC_[5] _TEMPORARY_ ;
MPRINT(EM_DIAGRAM):   ARRAY BOOST_ARB_BADF_VEC_[5] _TEMPORARY_ ;
59798     +   BOOST_ARB_BADF_VEC_[1] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_BADF_VEC_[1] = 0;
59799     +   BOOST_ARB_BADF_VEC_[2] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_BADF_VEC_[2] = 0;
59800     +   BOOST_ARB_BADF_VEC_[3] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_BADF_VEC_[3] = 0;
59801     +   BOOST_ARB_BADF_VEC_[4] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_BADF_VEC_[4] = 0;
59802     +   BOOST_ARB_BADF_VEC_[5] = 0;
MPRINT(EM_DIAGRAM):   BOOST_ARB_BADF_VEC_[5] = 0;
59803     +
59804     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
59805     + DROP _ARB_P_;
MPRINT(EM_DIAGRAM):   DROP _ARB_P_;
59806     + _ARB_P_ = 0;
MPRINT(EM_DIAGRAM):   _ARB_P_ = 0;
59807     + DROP _ARB_PPATH_; _ARB_PPATH_ = 1;
MPRINT(EM_DIAGRAM):   DROP _ARB_PPATH_;
MPRINT(EM_DIAGRAM):   _ARB_PPATH_ = 1;
59808     +
59809     +********** LEAF     1  NODE  2182 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 1 NODE 2182 ***************;
59810     +IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
59811     +
59812     +   DROP _BRANCH_;
MPRINT(EM_DIAGRAM):   DROP _BRANCH_;
59813     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59814     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59815     +    Projected_Sum_Pop  <              1780976 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND Projected_Sum_Pop < 1780976 THEN DO;
59816     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59817     +    END;
MPRINT(EM_DIAGRAM):   END;
59818     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
59819     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
59820     +        IF OG_Cases_in_Thousands  <                20145 THEN DO;
MPRINT(EM_DIAGRAM):   IF OG_Cases_in_Thousands < 20145 THEN DO;
59821     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59822     +        END;
MPRINT(EM_DIAGRAM):   END;
59823     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59824     +      END;
MPRINT(EM_DIAGRAM):   END;
59825     +    END;
MPRINT(EM_DIAGRAM):   END;
59826     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59827     +     IF MISSING( Projected_Sum_Pop  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN _BRANCH_ = 1;
59828     +  END;
MPRINT(EM_DIAGRAM):   END;
59829     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59830     +
59831     +    _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59832     +      IF  NOT MISSING(Projected_Sum_Pop ) AND
59833     +      Projected_Sum_Pop  <            1144855.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND Projected_Sum_Pop < 1144855.5 THEN DO;
59834     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59835     +      END;
MPRINT(EM_DIAGRAM):   END;
59836     +    IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59837     +       IF MISSING( Projected_Sum_Pop  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN _BRANCH_ = 1;
59838     +    END;
MPRINT(EM_DIAGRAM):   END;
59839     +    IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59840     +      BOOST_ARB_Y_VEC_[1] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[1] + -0.1;
59841     +      END;
MPRINT(EM_DIAGRAM):   END;
59842     +    END;
MPRINT(EM_DIAGRAM):   END;
59843     +  END;
MPRINT(EM_DIAGRAM):   END;
59844     +
59845     +********** LEAF     2  NODE  2183 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 2 NODE 2183 ***************;
59846     +IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
59847     +
59848     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59849     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59850     +    Projected_Sum_Pop  <              1780976 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND Projected_Sum_Pop < 1780976 THEN DO;
59851     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59852     +    END;
MPRINT(EM_DIAGRAM):   END;
59853     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
59854     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
59855     +        IF OG_Cases_in_Thousands  <                20145 THEN DO;
MPRINT(EM_DIAGRAM):   IF OG_Cases_in_Thousands < 20145 THEN DO;
59856     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59857     +        END;
MPRINT(EM_DIAGRAM):   END;
59858     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59859     +      END;
MPRINT(EM_DIAGRAM):   END;
59860     +    END;
MPRINT(EM_DIAGRAM):   END;
59861     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59862     +     IF MISSING( Projected_Sum_Pop  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN _BRANCH_ = 1;
59863     +  END;
MPRINT(EM_DIAGRAM):   END;
59864     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59865     +
59866     +    _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59867     +      IF  NOT MISSING(Projected_Sum_Pop ) AND
59868     +                 1144855.5 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND 1144855.5 <= Projected_Sum_Pop THEN DO;
59869     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59870     +      END;
MPRINT(EM_DIAGRAM):   END;
59871     +
59872     +    IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59873     +      BOOST_ARB_Y_VEC_[1] + 0.4;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[1] + 0.4;
59874     +      END;
MPRINT(EM_DIAGRAM):   END;
59875     +    END;
MPRINT(EM_DIAGRAM):   END;
59876     +  END;
MPRINT(EM_DIAGRAM):   END;
59877     +
59878     +********** LEAF     3  NODE  2173 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 3 NODE 2173 ***************;
59879     +IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN DO;
59880     +
59881     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59882     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59883     +                 1780976 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND 1780976 <= Projected_Sum_Pop THEN DO;
59884     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59885     +    END;
MPRINT(EM_DIAGRAM):   END;
59886     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
59887     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
59888     +        IF                20145 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF 20145 <= OG_Cases_in_Thousands THEN DO;
59889     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59890     +        END;
MPRINT(EM_DIAGRAM):   END;
59891     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59892     +      END;
MPRINT(EM_DIAGRAM):   END;
59893     +    END;
MPRINT(EM_DIAGRAM):   END;
59894     +
59895     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59896     +    BOOST_ARB_Y_VEC_[1] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[1] + -0.1;
59897     +    END;
MPRINT(EM_DIAGRAM):   END;
59898     +  END;
MPRINT(EM_DIAGRAM):   END;
59899     +
59900     +********** LEAF     4  NODE  2174 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 4 NODE 2174 ***************;
59901     +IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN DO;
59902     +
59903     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59904     +    IF  NOT MISSING(OG_Cases_in_Thousands ) AND
59905     +    OG_Cases_in_Thousands  <                 1245 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND OG_Cases_in_Thousands < 1245 THEN DO;
59906     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59907     +    END;
MPRINT(EM_DIAGRAM):   END;
59908     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59909     +     IF MISSING( OG_Cases_in_Thousands  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( OG_Cases_in_Thousands ) THEN _BRANCH_ = 1;
59910     +  END;
MPRINT(EM_DIAGRAM):   END;
59911     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59912     +    BOOST_ARB_Y_VEC_[2] + 0.3788135593;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[2] + 0.3788135593;
59913     +    END;
MPRINT(EM_DIAGRAM):   END;
59914     +  END;
MPRINT(EM_DIAGRAM):   END;
59915     +
59916     +********** LEAF     5  NODE  2175 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 5 NODE 2175 ***************;
59917     +IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN DO;
59918     +
59919     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59920     +    IF  NOT MISSING(OG_Cases_in_Thousands ) AND
59921     +                    1245 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND 1245 <= OG_Cases_in_Thousands THEN DO;
59922     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59923     +    END;
MPRINT(EM_DIAGRAM):   END;
59924     +
59925     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59926     +    BOOST_ARB_Y_VEC_[2] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[2] + -0.1;
59927     +    END;
MPRINT(EM_DIAGRAM):   END;
59928     +  END;
MPRINT(EM_DIAGRAM):   END;
59929     +
59930     +********** LEAF     6  NODE  2176 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 6 NODE 2176 ***************;
59931     +IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
59932     +
59933     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59934     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59935     +    Projected_Sum_Pop  <              1780976 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND Projected_Sum_Pop < 1780976 THEN DO;
59936     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59937     +    END;
MPRINT(EM_DIAGRAM):   END;
59938     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
59939     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
59940     +        IF OG_Cases_in_Thousands  <                20145 THEN DO;
MPRINT(EM_DIAGRAM):   IF OG_Cases_in_Thousands < 20145 THEN DO;
59941     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59942     +        END;
MPRINT(EM_DIAGRAM):   END;
59943     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59944     +      END;
MPRINT(EM_DIAGRAM):   END;
59945     +    END;
MPRINT(EM_DIAGRAM):   END;
59946     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59947     +     IF MISSING( Projected_Sum_Pop  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN _BRANCH_ = 1;
59948     +  END;
MPRINT(EM_DIAGRAM):   END;
59949     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59950     +    BOOST_ARB_Y_VEC_[3] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[3] + -0.1;
59951     +    END;
MPRINT(EM_DIAGRAM):   END;
59952     +  END;
MPRINT(EM_DIAGRAM):   END;
59953     +
59954     +********** LEAF     7  NODE  2184 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 7 NODE 2184 ***************;
59955     +IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
59956     +
59957     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59958     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
59959     +                 1780976 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND 1780976 <= Projected_Sum_Pop THEN DO;
59960     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59961     +    END;
MPRINT(EM_DIAGRAM):   END;
59962     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
59963     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
59964     +        IF                20145 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF 20145 <= OG_Cases_in_Thousands THEN DO;
59965     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
59966     +        END;
MPRINT(EM_DIAGRAM):   END;
59967     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59968     +      END;
MPRINT(EM_DIAGRAM):   END;
59969     +    END;
MPRINT(EM_DIAGRAM):   END;
59970     +
59971     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59972     +
59973     +    _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59974     +      IF  NOT MISSING(OG_Cases_in_Thousands ) AND
59975     +      OG_Cases_in_Thousands  <                19365 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND OG_Cases_in_Thousands < 19365 THEN DO;
59976     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59977     +      END;
MPRINT(EM_DIAGRAM):   END;
59978     +     IF MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
59979     +      IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
59980     +          IF Projected_Sum_Pop  <            2194576.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF Projected_Sum_Pop < 2194576.5 THEN DO;
59981     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
59982     +          END;
MPRINT(EM_DIAGRAM):   END;
59983     +        ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
59984     +        END;
MPRINT(EM_DIAGRAM):   END;
59985     +      END;
MPRINT(EM_DIAGRAM):   END;
59986     +    IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
59987     +       IF MISSING( OG_Cases_in_Thousands  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( OG_Cases_in_Thousands ) THEN _BRANCH_ = 1;
59988     +    END;
MPRINT(EM_DIAGRAM):   END;
59989     +    IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
59990     +      BOOST_ARB_Y_VEC_[3] + 0.4;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[3] + 0.4;
59991     +      END;
MPRINT(EM_DIAGRAM):   END;
59992     +    END;
MPRINT(EM_DIAGRAM):   END;
59993     +  END;
MPRINT(EM_DIAGRAM):   END;
59994     +
59995     +********** LEAF     8  NODE  2185 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 8 NODE 2185 ***************;
59996     +IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN DO;
59997     +
59998     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
59999     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
60000     +                 1780976 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND 1780976 <= Projected_Sum_Pop THEN DO;
60001     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
60002     +    END;
MPRINT(EM_DIAGRAM):   END;
60003     +   IF MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(Projected_Sum_Pop ) THEN DO;
60004     +    IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(OG_Cases_in_Thousands ) THEN DO;
60005     +        IF                20145 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF 20145 <= OG_Cases_in_Thousands THEN DO;
60006     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
60007     +        END;
MPRINT(EM_DIAGRAM):   END;
60008     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
60009     +      END;
MPRINT(EM_DIAGRAM):   END;
60010     +    END;
MPRINT(EM_DIAGRAM):   END;
60011     +
60012     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
60013     +
60014     +    _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
60015     +      IF  NOT MISSING(OG_Cases_in_Thousands ) AND
60016     +                     19365 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND 19365 <= OG_Cases_in_Thousands THEN DO;
60017     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
60018     +      END;
MPRINT(EM_DIAGRAM):   END;
60019     +     IF MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
60020     +      IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
60021     +          IF            2194576.5 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF 2194576.5 <= Projected_Sum_Pop THEN DO;
60022     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
60023     +          END;
MPRINT(EM_DIAGRAM):   END;
60024     +        ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
60025     +        END;
MPRINT(EM_DIAGRAM):   END;
60026     +      END;
MPRINT(EM_DIAGRAM):   END;
60027     +
60028     +    IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
60029     +      BOOST_ARB_Y_VEC_[3] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[3] + -0.1;
60030     +      END;
MPRINT(EM_DIAGRAM):   END;
60031     +    END;
MPRINT(EM_DIAGRAM):   END;
60032     +  END;
MPRINT(EM_DIAGRAM):   END;
60033     +
60034     +********** LEAF     9  NODE  2178 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 9 NODE 2178 ***************;
60035     +IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN DO;
60036     +
60037     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
60038     +    IF  NOT MISSING(OG_Cases_in_Thousands ) AND
60039     +    OG_Cases_in_Thousands  <                20145 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND OG_Cases_in_Thousands < 20145 THEN DO;
60040     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
60041     +    END;
MPRINT(EM_DIAGRAM):   END;
60042     +   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
60043     +    IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
60044     +        IF Projected_Sum_Pop  <            2194576.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF Projected_Sum_Pop < 2194576.5 THEN DO;
60045     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
60046     +        END;
MPRINT(EM_DIAGRAM):   END;
60047     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
60048     +      END;
MPRINT(EM_DIAGRAM):   END;
60049     +    END;
MPRINT(EM_DIAGRAM):   END;
60050     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
60051     +     IF MISSING( OG_Cases_in_Thousands  ) THEN _BRANCH_ = 1;
MPRINT(EM_DIAGRAM):   IF MISSING( OG_Cases_in_Thousands ) THEN _BRANCH_ = 1;
60052     +  END;
MPRINT(EM_DIAGRAM):   END;
60053     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
60054     +    BOOST_ARB_Y_VEC_[4] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[4] + -0.1;
60055     +    END;
MPRINT(EM_DIAGRAM):   END;
60056     +  END;
MPRINT(EM_DIAGRAM):   END;
60057     +
60058     +********** LEAF    10  NODE  2179 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 10 NODE 2179 ***************;
60059     +IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN DO;
60060     +
60061     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
60062     +    IF  NOT MISSING(OG_Cases_in_Thousands ) AND
60063     +                   20145 <= OG_Cases_in_Thousands  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(OG_Cases_in_Thousands ) AND 20145 <= OG_Cases_in_Thousands THEN DO;
60064     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
60065     +    END;
MPRINT(EM_DIAGRAM):   END;
60066     +   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(OG_Cases_in_Thousands ) THEN DO;
60067     +    IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(Projected_Sum_Pop ) THEN DO;
60068     +        IF            2194576.5 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF 2194576.5 <= Projected_Sum_Pop THEN DO;
60069     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
60070     +        END;
MPRINT(EM_DIAGRAM):   END;
60071     +      ELSE _BRANCH_ = 0;
MPRINT(EM_DIAGRAM):   ELSE _BRANCH_ = 0;
60072     +      END;
MPRINT(EM_DIAGRAM):   END;
60073     +    END;
MPRINT(EM_DIAGRAM):   END;
60074     +
60075     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
60076     +    BOOST_ARB_Y_VEC_[4] + 0.4;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[4] + 0.4;
60077     +    END;
MPRINT(EM_DIAGRAM):   END;
60078     +  END;
MPRINT(EM_DIAGRAM):   END;
60079     +
60080     +********** LEAF    11  NODE  2180 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 11 NODE 2180 ***************;
60081     +IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN DO;
60082     +
60083     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
60084     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
60085     +    Projected_Sum_Pop  <             450380.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND Projected_Sum_Pop < 450380.5 THEN DO;
60086     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
60087     +    END;
MPRINT(EM_DIAGRAM):   END;
60088     +
60089     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
60090     +    BOOST_ARB_Y_VEC_[5] + 0.4;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[5] + 0.4;
60091     +    END;
MPRINT(EM_DIAGRAM):   END;
60092     +  END;
MPRINT(EM_DIAGRAM):   END;
60093     +
60094     +********** LEAF    12  NODE  2181 ***************;
MPRINT(EM_DIAGRAM):   ********** LEAF 12 NODE 2181 ***************;
60095     +IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN DO;
60096     +
60097     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
60098     +    IF  NOT MISSING(Projected_Sum_Pop ) AND
60099     +                450380.5 <= Projected_Sum_Pop  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(Projected_Sum_Pop ) AND 450380.5 <= Projected_Sum_Pop THEN DO;
60100     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
60101     +    END;
MPRINT(EM_DIAGRAM):   END;
60102     +  IF _BRANCH_ LT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN DO;
60103     +     IF MISSING( Projected_Sum_Pop  ) THEN _BRANCH_ = 2;
MPRINT(EM_DIAGRAM):   IF MISSING( Projected_Sum_Pop ) THEN _BRANCH_ = 2;
60104     +  END;
MPRINT(EM_DIAGRAM):   END;
60105     +  IF _BRANCH_ GT 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ GT 0 THEN DO;
60106     +    BOOST_ARB_Y_VEC_[5] + -0.1;
MPRINT(EM_DIAGRAM):   BOOST_ARB_Y_VEC_[5] + -0.1;
60107     +    END;
MPRINT(EM_DIAGRAM):   END;
60108     +  END;
MPRINT(EM_DIAGRAM):   END;
60109     + DROP _ARB_ONE_;
MPRINT(EM_DIAGRAM):   DROP _ARB_ONE_;
60110     + DROP _ARB_I_ _ARB_IP_;
MPRINT(EM_DIAGRAM):   DROP _ARB_I_ _ARB_IP_;
60111     + _ARB_P_   = 0;
MPRINT(EM_DIAGRAM):   _ARB_P_ = 0;
60112     + _ARB_ONE_ = 0;
MPRINT(EM_DIAGRAM):   _ARB_ONE_ = 0;
60113     +
60114     +*****  CHECK FOR PERFECT PREDICTION ****;
MPRINT(EM_DIAGRAM):   ***** CHECK FOR PERFECT PREDICTION ****;
60115     +IF BOOST_ARB_BADF_VEC_[1] EQ 0 AND BOOST_ARB_Y_VEC_[1] > 45 THEN _ARB_ONE_ =
60116     +        1;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[1] EQ 0 AND BOOST_ARB_Y_VEC_[1] > 45 THEN _ARB_ONE_ = 1;
60117     +IF BOOST_ARB_BADF_VEC_[2] EQ 0 AND BOOST_ARB_Y_VEC_[2] > 45 THEN _ARB_ONE_ =
60118     +        2;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[2] EQ 0 AND BOOST_ARB_Y_VEC_[2] > 45 THEN _ARB_ONE_ = 2;
60119     +IF BOOST_ARB_BADF_VEC_[3] EQ 0 AND BOOST_ARB_Y_VEC_[3] > 45 THEN _ARB_ONE_ =
60120     +        3;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[3] EQ 0 AND BOOST_ARB_Y_VEC_[3] > 45 THEN _ARB_ONE_ = 3;
60121     +IF BOOST_ARB_BADF_VEC_[4] EQ 0 AND BOOST_ARB_Y_VEC_[4] > 45 THEN _ARB_ONE_ =
60122     +        4;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[4] EQ 0 AND BOOST_ARB_Y_VEC_[4] > 45 THEN _ARB_ONE_ = 4;
60123     +IF BOOST_ARB_BADF_VEC_[5] EQ 0 AND BOOST_ARB_Y_VEC_[5] > 45 THEN _ARB_ONE_ =
60124     +        5;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[5] EQ 0 AND BOOST_ARB_Y_VEC_[5] > 45 THEN _ARB_ONE_ = 5;
60125     +
60126     +*****  COMPUTE POSTERIOR PROBABILITY *************;
MPRINT(EM_DIAGRAM):   ***** COMPUTE POSTERIOR PROBABILITY *************;
60127     +IF _ARB_ONE_ NE 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ NE 0 THEN DO;
60128     +  IF _ARB_ONE_ EQ 1 THEN P_Age_group0_17  = 1.0;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 1 THEN P_Age_group0_17 = 1.0;
60129     +  ELSE  P_Age_group0_17  = 0.0;
MPRINT(EM_DIAGRAM):   ELSE P_Age_group0_17 = 0.0;
60130     +END;
MPRINT(EM_DIAGRAM):   END;
60131     +ELSE IF BOOST_ARB_BADF_VEC_[1] NE 0 OR BOOST_ARB_Y_VEC_[1] < -45 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF BOOST_ARB_BADF_VEC_[1] NE 0 OR BOOST_ARB_Y_VEC_[1] < -45 THEN DO;
60132     +  P_Age_group0_17  = 0.0;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0.0;
60133     +END;
MPRINT(EM_DIAGRAM):   END;
60134     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60135     +  P_Age_group0_17  = EXP(BOOST_ARB_Y_VEC_[1]);
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = EXP(BOOST_ARB_Y_VEC_[1]);
60136     +   _ARB_P_ + P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group0_17 ;
60137     +END;
MPRINT(EM_DIAGRAM):   END;
60138     +
60139     +IF _ARB_ONE_ NE 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ NE 0 THEN DO;
60140     +  IF _ARB_ONE_ EQ 2 THEN P_Age_group18_24  = 1.0;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 2 THEN P_Age_group18_24 = 1.0;
60141     +  ELSE  P_Age_group18_24  = 0.0;
MPRINT(EM_DIAGRAM):   ELSE P_Age_group18_24 = 0.0;
60142     +END;
MPRINT(EM_DIAGRAM):   END;
60143     +ELSE IF BOOST_ARB_BADF_VEC_[2] NE 0 OR BOOST_ARB_Y_VEC_[2] < -45 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF BOOST_ARB_BADF_VEC_[2] NE 0 OR BOOST_ARB_Y_VEC_[2] < -45 THEN DO;
60144     +  P_Age_group18_24  = 0.0;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 0.0;
60145     +END;
MPRINT(EM_DIAGRAM):   END;
60146     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60147     +  P_Age_group18_24  = EXP(BOOST_ARB_Y_VEC_[2]);
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = EXP(BOOST_ARB_Y_VEC_[2]);
60148     +   _ARB_P_ + P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group18_24 ;
60149     +END;
MPRINT(EM_DIAGRAM):   END;
60150     +
60151     +IF _ARB_ONE_ NE 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ NE 0 THEN DO;
60152     +  IF _ARB_ONE_ EQ 3 THEN P_Age_group25_44  = 1.0;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 3 THEN P_Age_group25_44 = 1.0;
60153     +  ELSE  P_Age_group25_44  = 0.0;
MPRINT(EM_DIAGRAM):   ELSE P_Age_group25_44 = 0.0;
60154     +END;
MPRINT(EM_DIAGRAM):   END;
60155     +ELSE IF BOOST_ARB_BADF_VEC_[3] NE 0 OR BOOST_ARB_Y_VEC_[3] < -45 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF BOOST_ARB_BADF_VEC_[3] NE 0 OR BOOST_ARB_Y_VEC_[3] < -45 THEN DO;
60156     +  P_Age_group25_44  = 0.0;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 0.0;
60157     +END;
MPRINT(EM_DIAGRAM):   END;
60158     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60159     +  P_Age_group25_44  = EXP(BOOST_ARB_Y_VEC_[3]);
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = EXP(BOOST_ARB_Y_VEC_[3]);
60160     +   _ARB_P_ + P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group25_44 ;
60161     +END;
MPRINT(EM_DIAGRAM):   END;
60162     +
60163     +IF _ARB_ONE_ NE 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ NE 0 THEN DO;
60164     +  IF _ARB_ONE_ EQ 4 THEN P_Age_group65_84  = 1.0;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 4 THEN P_Age_group65_84 = 1.0;
60165     +  ELSE  P_Age_group65_84  = 0.0;
MPRINT(EM_DIAGRAM):   ELSE P_Age_group65_84 = 0.0;
60166     +END;
MPRINT(EM_DIAGRAM):   END;
60167     +ELSE IF BOOST_ARB_BADF_VEC_[4] NE 0 OR BOOST_ARB_Y_VEC_[4] < -45 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF BOOST_ARB_BADF_VEC_[4] NE 0 OR BOOST_ARB_Y_VEC_[4] < -45 THEN DO;
60168     +  P_Age_group65_84  = 0.0;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0.0;
60169     +END;
MPRINT(EM_DIAGRAM):   END;
60170     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60171     +  P_Age_group65_84  = EXP(BOOST_ARB_Y_VEC_[4]);
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = EXP(BOOST_ARB_Y_VEC_[4]);
60172     +   _ARB_P_ + P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group65_84 ;
60173     +END;
MPRINT(EM_DIAGRAM):   END;
60174     +
60175     +IF _ARB_ONE_ NE 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ NE 0 THEN DO;
60176     +  IF _ARB_ONE_ EQ 5 THEN P_Age_group85_  = 1.0;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 5 THEN P_Age_group85_ = 1.0;
60177     +  ELSE  P_Age_group85_  = 0.0;
MPRINT(EM_DIAGRAM):   ELSE P_Age_group85_ = 0.0;
60178     +END;
MPRINT(EM_DIAGRAM):   END;
60179     +ELSE IF BOOST_ARB_BADF_VEC_[5] NE 0 OR BOOST_ARB_Y_VEC_[5] < -45 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF BOOST_ARB_BADF_VEC_[5] NE 0 OR BOOST_ARB_Y_VEC_[5] < -45 THEN DO;
60180     +  P_Age_group85_  = 0.0;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 0.0;
60181     +END;
MPRINT(EM_DIAGRAM):   END;
60182     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60183     +  P_Age_group85_  = EXP(BOOST_ARB_Y_VEC_[5]);
MPRINT(EM_DIAGRAM):   P_Age_group85_ = EXP(BOOST_ARB_Y_VEC_[5]);
60184     +   _ARB_P_ + P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group85_ ;
60185     +END;
MPRINT(EM_DIAGRAM):   END;
60186     +
60187     +IF _ARB_ONE_ EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_ONE_ EQ 0 THEN DO;
60188     +  IF _ARB_P_ > 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_P_ > 0 THEN DO;
60189     +    _ARB_I_ = 0;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 0;
60190     +    IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN P_Age_group0_17  = P_Age_group0_17  /
60191     +        _ARB_P_;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[1] EQ 0 THEN P_Age_group0_17 = P_Age_group0_17 / _ARB_P_;
60192     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60193     +      P_Age_group0_17  = 0.1993637328;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0.1993637328;
60194     +      _ARB_I_ = _ARB_I_ + 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = _ARB_I_ + 1;
60195     +    END;
MPRINT(EM_DIAGRAM):   END;
60196     +    IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN P_Age_group18_24  = P_Age_group18_24
60197     +        / _ARB_P_;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[2] EQ 0 THEN P_Age_group18_24 = P_Age_group18_24 / _ARB_P_;
60198     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60199     +      P_Age_group18_24  = 0.1993637328;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 0.1993637328;
60200     +      _ARB_I_ = _ARB_I_ + 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = _ARB_I_ + 1;
60201     +    END;
MPRINT(EM_DIAGRAM):   END;
60202     +    IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN P_Age_group25_44  = P_Age_group25_44
60203     +        / _ARB_P_;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[3] EQ 0 THEN P_Age_group25_44 = P_Age_group25_44 / _ARB_P_;
60204     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60205     +      P_Age_group25_44  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 0.2004241782;
60206     +      _ARB_I_ = _ARB_I_ + 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = _ARB_I_ + 1;
60207     +    END;
MPRINT(EM_DIAGRAM):   END;
60208     +    IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN P_Age_group65_84  = P_Age_group65_84
60209     +        / _ARB_P_;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[4] EQ 0 THEN P_Age_group65_84 = P_Age_group65_84 / _ARB_P_;
60210     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60211     +      P_Age_group65_84  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0.2004241782;
60212     +      _ARB_I_ = _ARB_I_ + 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = _ARB_I_ + 1;
60213     +    END;
MPRINT(EM_DIAGRAM):   END;
60214     +    IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN P_Age_group85_  = P_Age_group85_  /
60215     +        _ARB_P_;
MPRINT(EM_DIAGRAM):   IF BOOST_ARB_BADF_VEC_[5] EQ 0 THEN P_Age_group85_ = P_Age_group85_ / _ARB_P_;
60216     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60217     +      P_Age_group85_  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 0.2004241782;
60218     +      _ARB_I_ = _ARB_I_ + 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = _ARB_I_ + 1;
60219     +    END;
MPRINT(EM_DIAGRAM):   END;
60220     +    IF _ARB_I_ > 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_I_ > 0 THEN DO;
60221     +       _ARB_P_   = 0;
MPRINT(EM_DIAGRAM):   _ARB_P_ = 0;
60222     +       _ARB_P_ + P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group0_17 ;
60223     +       _ARB_P_ + P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group18_24 ;
60224     +       _ARB_P_ + P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group25_44 ;
60225     +       _ARB_P_ + P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group65_84 ;
60226     +       _ARB_P_ + P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   _ARB_P_ + P_Age_group85_ ;
60227     +      P_Age_group0_17  = P_Age_group0_17  / _ARB_P_;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = P_Age_group0_17 / _ARB_P_;
60228     +      P_Age_group18_24  = P_Age_group18_24  / _ARB_P_;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = P_Age_group18_24 / _ARB_P_;
60229     +      P_Age_group25_44  = P_Age_group25_44  / _ARB_P_;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = P_Age_group25_44 / _ARB_P_;
60230     +      P_Age_group65_84  = P_Age_group65_84  / _ARB_P_;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = P_Age_group65_84 / _ARB_P_;
60231     +      P_Age_group85_  = P_Age_group85_  / _ARB_P_;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = P_Age_group85_ / _ARB_P_;
60232     +    END;
MPRINT(EM_DIAGRAM):   END;
60233     +  END;
MPRINT(EM_DIAGRAM):   END;
60234     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60235     +    P_Age_group0_17  = 0.1993637328;
MPRINT(EM_DIAGRAM):   P_Age_group0_17 = 0.1993637328;
60236     +    P_Age_group18_24  = 0.1993637328;
MPRINT(EM_DIAGRAM):   P_Age_group18_24 = 0.1993637328;
60237     +    P_Age_group25_44  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group25_44 = 0.2004241782;
60238     +    P_Age_group65_84  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group65_84 = 0.2004241782;
60239     +    P_Age_group85_  = 0.2004241782;
MPRINT(EM_DIAGRAM):   P_Age_group85_ = 0.2004241782;
60240     +  END;
MPRINT(EM_DIAGRAM):   END;
60241     +END;
MPRINT(EM_DIAGRAM):   END;
60242     +*****  CREATE Q_: POSTERIORS WITHOUT PRIORS ****;
MPRINT(EM_DIAGRAM):   ***** CREATE Q_: POSTERIORS WITHOUT PRIORS ****;
60243     +Q_Age_group0_17  = P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   Q_Age_group0_17 = P_Age_group0_17 ;
60244     +Q_Age_group18_24  = P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   Q_Age_group18_24 = P_Age_group18_24 ;
60245     +Q_Age_group25_44  = P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   Q_Age_group25_44 = P_Age_group25_44 ;
60246     +Q_Age_group65_84  = P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   Q_Age_group65_84 = P_Age_group65_84 ;
60247     +Q_Age_group85_  = P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   Q_Age_group85_ = P_Age_group85_ ;
60248     +
60249     +*****  I_ AND U_ VARIABLES *******************;
MPRINT(EM_DIAGRAM):   ***** I_ AND U_ VARIABLES *******************;
60250     + _ARB_IP_ = -1.0;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = -1.0;
60251     + IF _ARB_IP_ + 1.0/32768.0 < P_Age_group0_17 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_IP_ + 1.0/32768.0 < P_Age_group0_17 THEN DO;
60252     +   _ARB_IP_ = P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = P_Age_group0_17 ;
60253     +   _ARB_I_  = 1;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 1;
60254     +   END;
MPRINT(EM_DIAGRAM):   END;
60255     + IF _ARB_IP_ + 1.0/32768.0 < P_Age_group18_24 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_IP_ + 1.0/32768.0 < P_Age_group18_24 THEN DO;
60256     +   _ARB_IP_ = P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = P_Age_group18_24 ;
60257     +   _ARB_I_  = 2;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 2;
60258     +   END;
MPRINT(EM_DIAGRAM):   END;
60259     + IF _ARB_IP_ + 1.0/32768.0 < P_Age_group25_44 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_IP_ + 1.0/32768.0 < P_Age_group25_44 THEN DO;
60260     +   _ARB_IP_ = P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = P_Age_group25_44 ;
60261     +   _ARB_I_  = 3;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 3;
60262     +   END;
MPRINT(EM_DIAGRAM):   END;
60263     + IF _ARB_IP_ + 1.0/32768.0 < P_Age_group65_84 THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_IP_ + 1.0/32768.0 < P_Age_group65_84 THEN DO;
60264     +   _ARB_IP_ = P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = P_Age_group65_84 ;
60265     +   _ARB_I_  = 4;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 4;
60266     +   END;
MPRINT(EM_DIAGRAM):   END;
60267     + IF _ARB_IP_ + 1.0/32768.0 < P_Age_group85_ THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARB_IP_ + 1.0/32768.0 < P_Age_group85_ THEN DO;
60268     +   _ARB_IP_ = P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   _ARB_IP_ = P_Age_group85_ ;
60269     +   _ARB_I_  = 5;
MPRINT(EM_DIAGRAM):   _ARB_I_ = 5;
60270     +   END;
MPRINT(EM_DIAGRAM):   END;
60271     + SELECT( _ARB_I_);
MPRINT(EM_DIAGRAM):   SELECT( _ARB_I_);
60272     +  WHEN( 1) DO;
MPRINT(EM_DIAGRAM):   WHEN( 1) DO;
60273     +    I_Age_group  = '0-17' ;
MPRINT(EM_DIAGRAM):   I_Age_group = '0-17' ;
60274     +    U_Age_group  = '0-17' ;
MPRINT(EM_DIAGRAM):   U_Age_group = '0-17' ;
60275     +     END;
MPRINT(EM_DIAGRAM):   END;
60276     +  WHEN( 2) DO;
MPRINT(EM_DIAGRAM):   WHEN( 2) DO;
60277     +    I_Age_group  = '18-24' ;
MPRINT(EM_DIAGRAM):   I_Age_group = '18-24' ;
60278     +    U_Age_group  = '18-24' ;
MPRINT(EM_DIAGRAM):   U_Age_group = '18-24' ;
60279     +     END;
MPRINT(EM_DIAGRAM):   END;
60280     +  WHEN( 3) DO;
MPRINT(EM_DIAGRAM):   WHEN( 3) DO;
60281     +    I_Age_group  = '25-44' ;
MPRINT(EM_DIAGRAM):   I_Age_group = '25-44' ;
60282     +    U_Age_group  = '25-44' ;
MPRINT(EM_DIAGRAM):   U_Age_group = '25-44' ;
60283     +     END;
MPRINT(EM_DIAGRAM):   END;
60284     +  WHEN( 4) DO;
MPRINT(EM_DIAGRAM):   WHEN( 4) DO;
60285     +    I_Age_group  = '65-84' ;
MPRINT(EM_DIAGRAM):   I_Age_group = '65-84' ;
60286     +    U_Age_group  = '65-84' ;
MPRINT(EM_DIAGRAM):   U_Age_group = '65-84' ;
60287     +     END;
MPRINT(EM_DIAGRAM):   END;
60288     +  WHEN( 5) DO;
MPRINT(EM_DIAGRAM):   WHEN( 5) DO;
60289     +    I_Age_group  = '85+' ;
MPRINT(EM_DIAGRAM):   I_Age_group = '85+' ;
60290     +    U_Age_group  = '85+' ;
MPRINT(EM_DIAGRAM):   U_Age_group = '85+' ;
60291     +     END;
MPRINT(EM_DIAGRAM):   END;
60292     +   END;
MPRINT(EM_DIAGRAM):   END;
60293     +
60294     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
60295     +IF  F_Age_group  NE '0-17'
60296     +AND F_Age_group  NE '18-24'
60297     +AND F_Age_group  NE '25-44'
60298     +AND F_Age_group  NE '65-84'
60299     +AND F_Age_group  NE '85+'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_Age_group NE '0-17' AND F_Age_group NE '18-24' AND F_Age_group NE '25-44' AND F_Age_group NE '65-84' AND F_Age_group NE '85+' THEN DO;
60300     +        R_Age_group0_17  = .;
MPRINT(EM_DIAGRAM):   R_Age_group0_17 = .;
60301     +        R_Age_group18_24  = .;
MPRINT(EM_DIAGRAM):   R_Age_group18_24 = .;
60302     +        R_Age_group25_44  = .;
MPRINT(EM_DIAGRAM):   R_Age_group25_44 = .;
60303     +        R_Age_group65_84  = .;
MPRINT(EM_DIAGRAM):   R_Age_group65_84 = .;
60304     +        R_Age_group85_  = .;
MPRINT(EM_DIAGRAM):   R_Age_group85_ = .;
60305     + END;
MPRINT(EM_DIAGRAM):   END;
60306     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
60307     +       R_Age_group0_17  =  -P_Age_group0_17 ;
MPRINT(EM_DIAGRAM):   R_Age_group0_17 = -P_Age_group0_17 ;
60308     +       R_Age_group18_24  =  -P_Age_group18_24 ;
MPRINT(EM_DIAGRAM):   R_Age_group18_24 = -P_Age_group18_24 ;
60309     +       R_Age_group25_44  =  -P_Age_group25_44 ;
MPRINT(EM_DIAGRAM):   R_Age_group25_44 = -P_Age_group25_44 ;
60310     +       R_Age_group65_84  =  -P_Age_group65_84 ;
MPRINT(EM_DIAGRAM):   R_Age_group65_84 = -P_Age_group65_84 ;
60311     +       R_Age_group85_  =  -P_Age_group85_ ;
MPRINT(EM_DIAGRAM):   R_Age_group85_ = -P_Age_group85_ ;
60312     +       SELECT( F_Age_group  );
MPRINT(EM_DIAGRAM):   SELECT( F_Age_group );
60313     +          WHEN( '0-17'  ) R_Age_group0_17  = R_Age_group0_17  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0-17' ) R_Age_group0_17 = R_Age_group0_17 +1;
60314     +          WHEN( '18-24'  ) R_Age_group18_24  = R_Age_group18_24  +1;
MPRINT(EM_DIAGRAM):   WHEN( '18-24' ) R_Age_group18_24 = R_Age_group18_24 +1;
60315     +          WHEN( '25-44'  ) R_Age_group25_44  = R_Age_group25_44  +1;
MPRINT(EM_DIAGRAM):   WHEN( '25-44' ) R_Age_group25_44 = R_Age_group25_44 +1;
60316     +          WHEN( '65-84'  ) R_Age_group65_84  = R_Age_group65_84  +1;
MPRINT(EM_DIAGRAM):   WHEN( '65-84' ) R_Age_group65_84 = R_Age_group65_84 +1;
60317     +          WHEN( '85+'  ) R_Age_group85_  = R_Age_group85_  +1;
MPRINT(EM_DIAGRAM):   WHEN( '85+' ) R_Age_group85_ = R_Age_group85_ +1;
60318     +       END;
MPRINT(EM_DIAGRAM):   END;
60319     + END;
MPRINT(EM_DIAGRAM):   END;
60320     +
60321     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
60322     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
60323     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
60324     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
60325      run;

NOTE: DATA STEP view saved on file EMWS1.BOOST_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
60326      quit;
60327      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS1.BOOST_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
60329      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
60330      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
60331      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1595 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1595 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

60332      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
60333      * Boost: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Boost: Computing metadata for TRAIN data;
60334      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.BOOST_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Boost\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Boost_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Boost_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Boost_TRAIN out=WORK.M2MYC7DF noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2MYC7DF;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2MYC7DF(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2MYC7DF;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2MYC7DF;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1G0D8XD NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1G0D8XD;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1G0D8XD;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2C42IW9(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1G0D8XD;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1G0D8XD;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1G0D8XD;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1G0D8XD;
MPRINT(EMADVISECOLUMNS):   set WORK.M1G0D8XD;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Boost_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Boost";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Boost";
MPRINT(EM_DIAGRAM):   when("AGE_GROUP") model = "Boost";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "OG_CASES_IN_THOUSANDS" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "PROJECTED_SUM_POP" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_AGE_GROUP0_17" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_AGE_GROUP18_24" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_AGE_GROUP25_44" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_AGE_GROUP65_84" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_AGE_GROUP85_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
60707      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
60708      set EMWS1.Boost_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Boost_EMINFO;
60709      where DATA='Boost' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Boost' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
60710      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.BOOST_EMINFO.
      WHERE (DATA='Boost') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

60711      data EMWS1.Boost_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Boost_EMINFO;
60712      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
60713      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
60714      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.BOOST_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
60718      run;
60719      data EMWS1.Boost_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Boost_EMINFO;
60720      set EMWS1.Boost_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Boost_EMINFO WORK.MODELTEMP_INFO;
60721      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.BOOST_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.BOOST_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

60722      proc sort data = EMWS1.Boost_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Boost_EMINFO NOTHREADS;
60723      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
60724      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.BOOST_EMINFO.
NOTE: The data set EMWS1.BOOST_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

60725      proc sort data = EMWS1.Ids3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
60726      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
60727      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.IDS3_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

60728      proc sort data = EMWS1.Boost_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Boost_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
60729      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
60730      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.BOOST_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

60731      data EMWS1.Boost_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Boost_EMINFO;
60732      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
60733      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
60734      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.BOOST_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

60735      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
60736      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
60737      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
60738      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS1.BOOST_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS1.BOOST_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
