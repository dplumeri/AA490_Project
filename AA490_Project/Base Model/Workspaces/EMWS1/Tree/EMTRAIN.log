MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 12, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:20" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 12, 2019
Time:                16:26:20
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2V3K142 "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2V3K142 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 12, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:20" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 12, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:26:20" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
34933      proc freq data=EMWS1.Tree_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree_VariableSet noprint;
34934      table ROLE*LEVEL/out=WORK.TreeMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TreeMETA;
34935      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

34936      proc print data=WORK.TreeMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TreeMETA label noobs;
34937      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
34938      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
34939      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
34940      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
34941      run;

NOTE: There were 4 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

34942      title10;
MPRINT(EM_DIAGRAM):   title10;
34943      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN 
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN EMWS1 Part2_TRAIN 
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN 
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN EMWS1 Part2_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "OG_Cases_in_Thousands"." 
34944      proc print data = EMWS1.Ids_OG_Cases_in_Thou_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_OG_Cases_in_Thou_DM noobs label;
34945      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
34946      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
34947      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
34948      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
34949      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
34950      run;

NOTE: There were 3 observations read from the data set EMWS1.IDS_OG_CASES_IN_THOU_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

34951      title10;
MPRINT(EM_DIAGRAM):   title10;
34952      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify OG_Cases_in_Thousands(type=PROFIT label= OG_Cases_in_Thousands);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Base Model';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.OG_Cases_in_Thousands(label="OG_Cases_in_Thousands");
MPRINT(EM_DECDATA):   length OG_Cases_in_Thousands 8 ;
MPRINT(EM_DECDATA):   OG_Cases_in_Thousands=60;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   OG_Cases_in_Thousands=96360;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   OG_Cases_in_Thousands=48210;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify OG_Cases_in_Thousands(type=PROFIT label= OG_Cases_in_Thousands);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify OG_Cases_in_Thousands(type=PROFIT label= OG_Cases_in_Thousands);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="OG_Cases_in_Thousands";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_OG_Cases_in_Thou_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_OG_Cases_in_Thou_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="OG_Cases_in_Thousands";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_OG_Cases_in_Thou_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_OG_Cases_in_Thou_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
35437      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35438      * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
35439      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
35440      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

35441      %let EMEXCEPTIONSTRING=;
35442      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35443      * TRAIN: Tree;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree;
35444      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35445      %let EM_ACTION = TRAIN;
35446      %let syscc = 0;
35447      %macro main;
35448      
35449        %if %upcase(&EM_ACTION) = CREATE %then %do;
35450          filename temp catalog 'sashelp.emmodl.tree_create.source';
35451          %include temp;
35452          filename temp;
35453      
35454          %em_tree_create;
35455        %end;
35456      
35457         %else
35458         %if %upcase(&EM_ACTION) = TRAIN %then %do;
35459      
35460             filename temp catalog 'sashelp.emmodl.tree_train.source';
35461             %include temp;
35462             filename temp;
35463             %em_tree_train;
35464         %end;
35465      
35466        %else
35467        %if %upcase(&EM_ACTION) = SCORE %then %do;
35468          filename temp catalog 'sashelp.emmodl.tree_score.source';
35469          %include temp;
35470          filename temp;
35471      
35472          %em_tree_score;
35473      
35474        %end;
35475      
35476        %else
35477        %if %upcase(&EM_ACTION) = REPORT %then %do;
35478      
35479             filename temp catalog 'sashelp.emmodl.tree_report.source';
35480             %include temp;
35481             filename temp;
35482      
35483             %em_tree_report;
35484         %end;
35485      
35486        %else
35487        %if %upcase(&EM_ACTION) = OPENINT %then %do;
35488      
35489             filename temp catalog 'sashelp.emmodl.tree_actions.source';
35490             %include temp;
35491             filename temp;
35492             %EM_TREE_OPENTREEVIEWER;
35493      
35494         %end;
35495      
35496        %else
35497        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
35498      
35499             filename temp catalog 'sashelp.emmodl.tree_actions.source';
35500             %include temp;
35501             filename temp;
35502             %EM_TREE_CLOSETREEVIEWER;
35503      
35504         %end;
35505      
35506      
35507         %doendm:
35508      %mend main;
35509      
35510      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
35512     +%macro em_tree_train;
35514     +   %if &EM_IMPORT_DATA eq %then %do;
35515     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
35516     +       %put &em_codebar;
35517     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
35518     +       %put &errormsg;
35519     +       %put &em_codebar;
35520     +       %goto doendm;
35521     +   %end;
35522     +   %else
35523     +       %let EMEXCEPTIONSTRING =;
35525     +   %if  &EM_NUM_TARGET lt 1 %then %do;
35526     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
35527     +        %put &em_codebar;
35528     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
35529     +        %put &errormsg;
35530     +        %put &em_codebar;
35531     +        %goto doendm;
35532     +   %end;
35534     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
35535     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
35536     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
35537     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
35538     +        %put &em_codebar;
35539     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
35540     +        %put &errormsg;
35541     +        %put &em_codebar;
35542     +        %goto doendm;
35543     +   %end;
35545     +   /* Initialize property macro variables */
35546     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
35547     +   %include temp;
35548     +   filename temp;
35550     +   %EM_SetProperties;
35552     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
35553     +   %EM_GETNAME(key=EMTREE, type=DATA);
35554     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
35555     +     /* if import eq Y and no importtable defined, throw an exception */
35556     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
35557     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
35558     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
35559     +         %put &em_codebar;
35560     +         %put &errmsg;
35561     +         %put &em_codebar;
35562     +         %goto doendm;
35563     +      %end;
35564     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
35565     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
35566     +         %put &em_codebar;
35567     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
35568     +         %put &errormsg;
35569     +         %put &em_codebar;
35570     +         %goto doendm;
35571     +      %end;
35572     +      %else %do;
35573     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
35574     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
35575     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
35576     +         %let varnumX = %sysfunc(varnum(&dsid,X));
35577     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
35578     +         %let dsid = %sysfunc(close(&dsid));
35579     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
35580     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
35581     +            %put &em_codebar;
35582     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
35583     +            %put &errormsg;
35584     +            %put &em_codebar;
35585     +            %goto doendm;
35586     +         %end;
35587     +      %end;
35588     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
35589     +         proc delete data=&EM_USER_EMTREE;
35590     +         run;
35591     +      %end;
35592     +   %end;
35593     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
35594     +      proc delete data=&EM_USER_EMTREE;
35595     +      run;
35596     +   %end;
35598     +   /* load tree macros */
35599     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
35600     +   %include temp;
35601     +   filename temp;
35603     +   /* data sets */
35604     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
35605     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
35606     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
35608     +   /* files */
35609     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
35611     +   /* check actual num of target levels */
35612     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
35613     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
35614     +                              nLevel=_nTargetLevel );
35615     +      %if &_nTargetLevel  > 2 %then %do;
35616     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
35617     +        %put &em_codebar;
35618     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
35619     +        %put &errormsg;
35620     +        %put &em_codebar;
35621     +        %goto doendm;
35622     +      %end;
35623     +   %end;
35625     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
35626     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
35627     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
35628     +        %let costflag=0;
35629     +        data _null_;
35630     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
35631     +          if eof then call symput("costflag", _N_);
35632     +        run;
35633     +        %if &costflag gt 0 %then %do;
35634     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
35635     +          %put &em_codebar;
35636     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
35637     +          %put &errormsg;
35638     +          %put &em_codebar;
35639     +          %goto doendm;
35640     +       %end;
35641     +     %end;
35642     +   %end;
35644     +   /* determine if multiple targets will be processed */
35645     +   %let em_tree_multipleTargets=N;
35646     +   %let em_tree_numTarget = 1;
35647     +   %let em_tree_targetVars=;
35649     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
35650     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
35651     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
35652     +         %let em_tree_multipleTargets=N;
35653     +      %end;
35654     +      %else %do;
35655     +         /* create macro array of targets  */
35656     +         data _null_;
35657     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
35658     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
35659     +           if eof then
35660     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
35661     +        run;
35663     +        %if &em_tree_numTarget gt 1 %then %do;
35664     +           %let em_tree_multipleTargets=Y;
35665     +        %end;
35666     +      %end;
35667     +   %end;
35669     +   /* create view of only necessary variable for performance reasons */
35670     +   %let tempData = &EM_LIB..em_&EM_NODEID;
35671     +   data &tempData / view=&tempData;
35672     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
35673     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
35674     +       %EM_TARGET
35675     +     %end;
35676     +     %else %do;
35677     +       %if &em_tree_numTarget ne 0 %then %do;
35678     +         %do i=1 %to &em_tree_numTarget;
35679     +            &&em_tree_targetVars&i
35680     +         %end;
35681     +       %end;
35682     +     %end;
35683     +     );
35684     +   run;
35686     +   /* run Tree procedure */
35687     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
35689     +   /* Check return code and throw exception if error is detected */
35690     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
35691     +   %if &syserr %then %do;
35692     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
35693     +     %goto doendm;
35694     +   %end;
35696     +   /* add decision score code if multiple targets are processed */
35697     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
35698     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
35699     +   %end;
35701     +   /* create outfit dataset if multiple score statements have been executed */
35702     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
35704     +   /* create English Rules */
35705     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
35706     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
35707     +       %em_tree_makeEnglishRules;
35709     +       /* English Rules */
35710     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
35712     +     %end;
35713     +   filename x;
35715     +   %doendm:
35716     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
35717     +%macro EM_SetProperties;
35719     +   /* train properties */
35720     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
35721     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
35722     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
35723     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
35724     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
35725     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
35726     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
35727     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
35728     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
35729     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
35730     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
35731     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
35732     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
35733     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
35734     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
35735     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
35736     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
35737     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
35738     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
35739     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
35740     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
35741     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
35742     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
35743     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
35744     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
35745     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
35746     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
35747     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
35748     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
35749     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
35750     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
35751     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
35752     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
35753     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
35754     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
35755     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
35756     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
35757     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
35758     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
35759     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
35760     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
35762     +   /* properties for interactive sample */
35763     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
35764     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
35765     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
35766     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
35768     +   /* report properties */
35769     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
35770     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
35771     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
35772     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
35773     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
35774     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
35775     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
35776     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
35777     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
35778     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
35779     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
35780     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
35781     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
35783     +   /* score properties */
35784     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
35785     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
35787     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
35789     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
35790     +  %global &nLevel;
35791     +  proc dmdb batch data=&indata
35792     +    classout=_tmp_dmdbout;
35793     +    class &target;
35794     +  run;
35795     +  data _tmp_dmdbout;
35796     +    set _tmp_dmdbout;
35797     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
35798     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
35799     +  run;
35800     +  data _null_;
35801     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
35802     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
35803     +    %let dsid = %sysfunc(close(&dsid));
35804     +     call symput("&nLevel", put(&_obs, Best12.));
35805     +  run;
35807     +  proc datasets lib=work nolist;
35808     +     delete _tmp_dmdbout;
35809     +  run;
35810     +  quit;
35811     +%Mend EM_CheckBinaryTargetLevel;
35814     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
35816     +  /* determine the number of obs in training data */
35817     +  proc sql;
35818     +    reset noprint;
35819     +    select count(*) into :em_nobs from &indata;
35820     +  quit;
35822     +  /* determine the number of input variables */
35823     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
35824     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
35826     +  /* retrieve targetEvent from decmeta */
35827     +  %let targetEvent=;
35828     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
35829     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
35830     +      data _null_;
35831     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
35832     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
35833     +      run;
35834     +    %end;
35835     +  %end;
35837     +  /* create targetTable if multipleTar eq Y */
35838     +  data temptarget;
35839     +    set &EM_DATA_VARIABLESET;
35840     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
35841     +  run;
35843     + /* data sets */
35844     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
35845     + %EM_GETNAME(key=EMTREE,        type=DATA);
35846     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
35847     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
35848     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
35849     + %EM_GETNAME(key=OUTNODES,      type=DATA);
35850     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
35851     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
35852     + %EM_GETNAME(key=OUTPATH,       type=DATA);
35853     + %EM_GETNAME(key=OUTRULES,      type=DATA);
35855     + /* files */
35856     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
35857     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
35859     + /* turn on pmml if requested */
35860     + %let nnpmml=0;
35861     + %if %symexist(EM_PMML) %then %do;
35862     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
35863     +       %let nnpmml=1;
35865     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
35866     +   %end;
35867     +%end;
35869     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
35871     +%if &nnpmml or &numClassTarget %then %do;
35873     +    /* create dmdb needed for pmml generation */
35874     +    %let tree_maxlevel = 512;
35875     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
35876     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
35877     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
35878     +      %end;
35879     +    %end;
35880     +    %if &tree_maxlevel gt 0 %then %do;
35881     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
35882     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
35883     +    %end;
35885     +    %let targetOrderString =;
35886     +    %let targetString = ;
35887     +    data _null_;
35888     +       length orderString nameString $10000;
35889     +       retain orderString nameString;
35890     +       set &em_data_variableset end=eof;
35891     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
35892     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
35893     +       %end;
35894     +       %else %do;
35895     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
35896     +       %end;          select(order);
35897     +         when('')        order ='DESC';
35898     +         when('FMTASC')  order='ASCFMT';
35899     +         when('FMTDESC') order='DESFMT';
35900     +         otherwise;
35901     +       end;
35902     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
35903     +       nameString = trim(nameString)!!' '!!trim(NAME);
35905     +       if eof then do;
35906     +          call symput('targetOrderString', trim(orderString));
35907     +          call symput('targetString', trim(nameString));
35908     +       end;
35909     +    run;
35911     +    %let arborkluge= "work._treeDMDB";
35913     +    proc dmdb batch data=&indata
35914     +    %if &nnpmml %then %do;
35915     +        PMML
35916     +    %end;
35917     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
35919     +      %if &nnpmml %then %do;
35920     +           %if "%EM_ID" ne "" %then %do;
35921     +             id %EM_ID;
35922     +           %end;
35923     +           %if &EM_NUM_CLASS gt 0 %then %do;
35924     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
35925     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
35926     +                  &targetOrderString;
35927     +           %end;
35928     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
35929     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
35930     +           %end;
35931     +           target &targetString %EM_INTERVAL_TARGET;
35932     +           %if "%EM_FREQ" ne "" %then %do;
35933     +             freq %EM_FREQ;
35934     +           %end;
35935     +      %end;
35936     +      %else %do;
35937     +         class  &targetOrderString;
35938     +         target &targetString %EM_INTERVAL_TARGET;
35939     +      %end;
35940     +    run;
35941     +    quit;
35943     +    proc datasets lib=work nolist;
35944     +       delete classout varout;
35945     +    run;
35946     +    quit;
35948     + %end;
35951     + /* run Arbor procedure */
35952     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
35953     +  proc arbor data=&INDATA
35955     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
35956     +    Leafsize = &EM_PROPERTY_LEAFSIZE
35957     +  %end;
35959     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
35960     +    Splitsize = &EM_PROPERTY_SPLITSIZE
35961     +  %end;
35963     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
35964     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
35965     +  %end;
35967     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
35968     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
35969     +  %end;
35971     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
35972     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
35973     +  %end;
35975     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
35976     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
35977     +  %end;
35978     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
35979     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
35980     +  %end;
35981     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
35982     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
35983     +  %end;
35985     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
35986     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
35987     +      alpha = &EM_PROPERTY_SIGLEVEL
35988     +    %end;
35989     +  %end;
35991     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
35992     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
35993     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
35994     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
35995     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
35997     +        padjust =
35998     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
35999     +          &chaid
36000     +        %end;
36001     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
36002     +          DEPTH
36003     +        %end;
36004     +      %end;
36005     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
36006     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
36007     +         pvars = &num_inputs
36008     +      %end;
36009     +    %end;
36010     +  %end;
36011     +  %else %do;
36012     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
36013     +         padjust = NONE
36014     +      %end;
36015     +  %end;
36017     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
36018     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
36019     +    Maxrules = &num_nrules
36020     +  %end;
36022     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
36023     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
36024     +    Maxsurrs = &num_nsurrs
36025     +  %end;
36027     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
36028     +     Missing=&EM_PROPERTY_MISSINGVALUE
36029     +  %end;
36031     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
36032     +     USEVARONCE
36033     +  %end;
36035     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
36036     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
36037     +  %end;
36040     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
36041     +    event = "&targetEvent"
36042     +  %end;
36044     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
36045     +     DECSEARCH
36046     +  %end;
36048     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
36049     +     PRIORSSEARCH
36050     +  %end;
36052     +  %if &arbor_1 ne %then %do;
36053     +    &arbor_1
36054     +  %end;
36056     +  %if &em_arbor ne %then %do;
36057     +     &em_arbor
36058     +  %end;
36059     +  ;
36060     + %end;
36061     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
36062     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
36063     +       Performance &EM_PROPERTY_PERFORMANCE
36064     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
36065     +         nodesize=&EM_PROPERTY_NODESAMPLE
36066     +       %end;
36067     +       ;
36068     +       interact;
36069     + %end;
36070     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
36071     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
36072     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
36073     +    %put &em_codebar;
36074     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
36075     +    %put &errormsg;
36076     +    %put &em_codebar;
36077     +    %goto doendm;
36078     +   %end;
36079     +   %else %do;
36080     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
36081     +       Performance &EM_PROPERTY_PERFORMANCE
36082     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
36083     +         nodesize=&EM_PROPERTY_NODESAMPLE
36084     +       %end;
36085     +       ;
36086     +       interact;
36087     +   %end;
36088     + %end;
36090     + %else %do;
36091     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
36092     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
36093     +    %put &em_codebar;
36094     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
36095     +    %put &errormsg;
36096     +    %put &em_codebar;
36097     +    %goto doendm;
36098     +   %end;
36099     +   %else %do;
36100     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
36101     +       Performance &EM_PROPERTY_PERFORMANCE
36102     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
36103     +         nodesize=&EM_PROPERTY_NODESAMPLE
36104     +       %end;
36105     +       ;
36106     +        interact;
36107     +   %end;
36108     + %end;
36110     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
36111     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
36112     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
36113     +    %end;
36115     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
36116     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
36117     +    %end;
36119     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
36120     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
36121     +    %end;
36123     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
36124     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
36125     +    %end;
36127     +    %if "%EM_FREQ" ne "" %then %do;
36128     +       freq %EM_FREQ;
36129     +    %end;
36131     +    %if "&multipleTar" eq "Y" %then %do;
36132     +       /* cycle through all target vars in variableset */
36133     +       %let tdsid = %sysfunc(open(temptarget));
36134     +       %if &tdsid %then %do;
36135     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
36136     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
36137     +          %do %while(^ %sysfunc(fetch(&tdsid)));
36138     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
36139     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
36140     +             target &var / level = &lvl
36141     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
36142     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
36143     +             %end;
36144     +             %else %if "&lvl" eq "INTERVAL" %then %do;
36145     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
36146     +             %end;
36147     +             %else %if "&lvl" eq "ORDINAL" %then %do;
36148     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
36149     +             %end;
36150     +          %end;
36151     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
36152     +       %end;
36153     +       useTarget variable = %EM_TARGET;
36154     +    %end;
36155     +    %else %do;
36156     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
36157     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
36158     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
36159     +      %end;
36160     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
36161     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
36162     +      %end;
36163     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
36164     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
36165     +      %end;
36166     +    %end;
36168     +    %if "&multipleTar" eq "N" %then %do;
36169     +      &EM_DEC_STATEMENT;
36170     +    %end;
36172     +    Performance &EM_PROPERTY_PERFORMANCE
36173     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
36174     +      nodesize=&EM_PROPERTY_NODESAMPLE
36175     +    %end;
36176     +    ;
36178     +    %if "&intFlag" eq "Y" %then %do;
36179     +       INTERACT Largest;
36180     +       Train maxnewdepth=0;
36181     +    %end;
36183     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
36184     +         Assess
36185     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
36186     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
36187     +              %put &em_codebar;
36188     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
36189     +              %put &errormsg;
36190     +              %put &em_codebar;
36191     +            %end;
36192     +            %else %do;
36193     +               Validata=&EM_IMPORT_VALIDATE
36194     +            %end;
36195     +         %end;
36196     +         %else %do;
36197     +           NoValidata
36198     +         %end;
36199     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
36200     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
36201     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
36202     +               %if &dsid %then %do;
36203     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
36204     +                 %do %while(^ %sysfunc(fetch(&dsid)));
36205     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
36206     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
36207     +                   %else %do;
36208     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
36209     +                      %else %let measure= MISC;
36210     +                   %end;
36211     +                 %end;
36212     +               %end;
36213     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
36214     +            %end;
36215     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
36216     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
36217     +                 %let measure=ASE;
36218     +              %end;
36219     +              %else %do;
36220     +                 %let measure=MISC;
36221     +              %end;
36222     +            %end;
36223     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
36224     +              %let measure=ASE;
36225     +            %end;
36226     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
36227     +               %let measure = LIFT;
36228     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
36229     +               %if &dsid %then %do;
36230     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
36231     +                 %do %while(^ %sysfunc(fetch(&dsid)));
36232     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
36233     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
36234     +                 %end;
36235     +               %end;
36236     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
36237     +            %end;
36238     +            measure=&measure
36239     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
36240     +               event = "&targetEvent"
36241     +            %end;
36242     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
36243     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
36244     +            %end;
36245     +         %end;
36246     +         %if "&multipleTar" eq "N" %then %do;
36247     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
36248     +               CV
36249     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
36250     +                 CVNITer = &EM_PROPERTY_CVNITER
36251     +               %end;
36252     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
36253     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
36254     +               %end;
36255     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
36256     +                 CVSeed = &EM_PROPERTY_CVSEED
36257     +               %end;
36258     +            %end;
36259     +         %end;
36260     +       %end;
36261     +      ;
36263     +      %if "&intFlag" ne "Y" %then %do;
36264     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
36265     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
36266     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
36267     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
36269     +          SUBTREE &subtree
36270     +          %if "&subtree" eq "NLEAVES" %then %do;
36271     +            =&EM_PROPERTY_NSUBTREE
36272     +          %end;
36273     +          ;
36274     +        %end;
36276     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
36277     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
36278     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
36279     +          %end;
36280     +       %end;
36281     +      %end;
36282     + %end;
36285     + MakeMacro nleaves = nleaves;
36286     + save
36287     + %if "&EM_USER_EMTREE" ne "" %then %do;
36288     +   MODEL=&EM_USER_EMTREE
36289     + %end;
36290     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
36291     +   SEQUENCE=&EM_USER_OUTSEQ
36292     + %end;
36293     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
36294     +   IMPORTANCE=&EM_USER_OUTIMPORT
36295     + %end;
36296     + %if "&EM_USER_OUTNODES" ne "" %then %do;
36297     +   NODESTAT=&EM_USER_OUTNODES
36298     + %end;
36299     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
36300     +   SUMMARY=&EM_USER_OUTSUMMARY
36301     + %end;
36302     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
36303     +   STATSBYNODE=&EM_USER_OUTSTATS
36304     + %end;
36305     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
36306     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
36307     + %end;
36308     + %if "&EM_USER_OUTPATH" ne "" %then %do;
36309     +   Pathlistnonmissing=&EM_USER_OUTPATH
36310     + %end;
36311     + %if "&EM_USER_OUTRULES" ne "" %then %do;
36312     +   RULES = &EM_USER_OUTRULES
36313     + %end;
36314     + ;
36316     + %if "&intFlag" ne "Y" %then %do;
36318     +   %let lookupString = ;
36319     +   %if ^%symexist(EM_OPTION) %then
36320     +      %let EM_OPTION=;
36322     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
36323     +      %let lookupString = LOOKUP=SELECT;
36324     +   %end;
36326     +   %let codetext=;
36327     +   %let norescodetxt=;
36329     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
36330     +     %let codetext=&codetext DUMMY;
36331     +     %let norescodetxt=&norescodetxt DUMMY;
36332     +   %end;
36333     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
36334     +     %let codetext=&codetext NOLEAFID;
36335     +     %let norescodetxt=&norescodetxt NOLEAFID;
36336     +   %end;
36337     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
36338     +     %let norescodetxt=&norescodetxt NOPRED;
36339     +   %end;
36341     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
36342     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
36344     +   %if &nnpmml %then %do;
36345     +     code pmml;
36346     +   %end;
36348     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
36349     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
36350     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
36351     +   %end;
36352     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
36353     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
36354     +   %end;
36355     + %end;
36357     + run;
36358     + quit;
36360     + /*%em_checkerror(); */
36361     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
36362     +   /* Delete DMDB catalog */
36363     +   proc datasets lib=work nolist;
36364     +       delete _treeDMDB / mt=cat;
36365     +  run;
36366     +  %end;
36368     + %if &nnpmml %then %do;
36369     +    ods pmml close;
36370     + %end;
36372     +  %doendm:
36374     +%mend em_tree_runTreeProcedure;
36376     +%macro em_tree_createFitStats( multipleTar= );
36379     +  /* create targetTable is multipleTar eq Y */
36380     +  data temptarget;
36381     +    set &EM_DATA_VARIABLESET;
36382     +    where ROLE="TARGET";
36383     +  run;
36385     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
36386     +   data &EM_USER_EMOUTFIT;
36387     +     length target $32;
36388     +     merge work.fit_train
36389     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
36390     +       work.fit_valid
36391     +     %end;
36392     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
36393     +       work.fit_test
36394     +     %end;
36395     +     ;
36396     +     %if "&multipleTar" eq "N" %then %do;
36397     +       target="%EM_TARGET";
36398     +     %end;
36399     +     %else %do;
36400     +       target = _TARGET_;
36401     +     %end;
36402     +     drop _NW_ _SUMW_
36403     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
36404     +        _VSUMW_
36405     +     %end;
36406     +     ;
36407     +   run;
36409     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
36410     +     proc datasets library=work nolist;
36411     +       delete fit_valid;
36412     +     run;
36413     +   %end;
36414     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
36415     +     proc datasets library=work nolist;
36416     +       delete fit_test;
36417     +     run;
36418     +   %end;
36420     +%mend em_tree_createFitStats;
36423     +%macro em_tree_makeEnglishRules;
36425     +  %EM_GETNAME(key=OUTNODES, type=DATA);
36426     +  %EM_GETNAME(key=OUTPATH, type=DATA);
36428     +  /* verify that necessary tables exist and if not, skip processing */
36429     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
36430     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
36431     +    %goto doendm;
36432     +  %end;
36433     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
36434     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
36435     +    %goto doendm;
36436     +  %end;
36438     +  /* determine length of variable in outpath dataset */
36439     +  %let vlength= ;
36440     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
36441     +  %if &dsid ne %then %do;
36442     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
36443     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
36444     +  %end;
36445     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
36447     +  data tempoutpath;
36448     +    length varname $&vlength;
36449     +    retain varname;
36450     +    set &EM_USER_OUTPATH;
36452     +    if ^missing(variable) then varname=variable;
36453     +    else if ^missing(var_name) then varname=var_name;
36454     +    output;
36455     +  run;
36457     +  /* create an array of generated predicted variable names */
36458     +  %let tree_pred_vars = ;
36459     +  %let tree_pred_label = ;
36460     +  %let numpred= 0;
36461     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
36463     +    data _null_;
36464     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
36465     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
36466     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
36467     +     if eof then
36468     +       call symput('numpred', strip(put(_N_, BEST.)));
36469     +    run;
36470     +  %end;
36472     +  /* determine if NPRIORS exists in outnodes  */
36473     +  %local nprior_flag;
36474     +  data _null_;
36475     +    set &EM_USER_OUTNODES(obs=2) end=eof;
36476     +    if eof then do;
36477     +      call symput('nprior_flag', strip(put(npriors, best.)));
36478     +    end;
36479     +  run;
36481     +  proc sort data=tempoutpath; by node; run;
36482     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
36484     +  data tempoutpath;
36485     +    merge tempoutpath(in=_a) outnodes(keep= node
36486     +    %if "&nprior_flag" ne "." %then %do;
36487     +      NPRIORS
36488     +    %end;
36489     +    %else %do;
36490     +      N
36491     +    %end;
36492     +    %if &numpred gt 0 %then %do;
36493     +      %do i=1 %to &numpred;
36494     +        &&tree_pred_vars&i
36495     +      %end;
36496     +    %end;
36497     +    );
36498     +    by node;
36499     +    if _a;
36500     +  run;
36502     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
36504     +  data _null_;
36505     +    file x;
36506     +    set tempoutpath;
36507     +    by node descending varname;
36508     +    retain origvar oldnode string;
36509     +    length origvar $32 oldnode 8 string $200;
36511     +    if _N_ = 1 then do;
36512     +      origvar = varname;
36513     +      oldnode = node;
36514     +    end;
36516     +    if first.node then do;
36517     +       put "&EM_CODEBAR";
36518     +       put " Node = " node;
36519     +       put "&EM_CODEBAR";
36520     +    end;
36522     +      if first.varname then do;
36523     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
36524     +            if MISSING(CHARACTER_VALUE) then do;
36525     +             if NUMERIC_VALUE ne .  then do;
36526     +              if ^first.node then do;
36527     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
36528     +              end;
36529     +              else do;
36530     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
36531     +              end;
36532     +             end;
36533     +            end;
36534     +            else do;
36535     +              if ^first.node then do;
36536     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
36537     +              end;
36538     +              else do;
36539     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
36540     +              end;
36541     +             end;
36542     +         end;
36543     +         else if RELATION in ("=") then do;
36544     +            if ^first.node then do;
36545     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
36546     +            end;
36547     +            else do;
36548     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
36549     +            end;
36550     +         end;
36551     +         else if RELATION in ("ISMISSING") then do;
36552     +            if ^first.node then do;
36553     +              string = " AND "|| strip(varname) || " equals Missing";
36554     +            end;
36555     +            else do;
36556     +              string = "if "|| strip(varname) ||" equals Missing";
36557     +            end;
36558     +         end;
36559     +         else if RELATION in ("ISNOTMISSING") then do;
36560     +            if ^first.node then do;
36561     +              string = " AND "|| strip(varname) || " equals All Values";
36562     +            end;
36563     +            else do;
36564     +              string = "if "|| strip(varname) ||" equals All Values";
36565     +            end;
36566     +         end;
36567     +         if ^missing(varname) then origvar = varname;
36568     +         oldnode=node;
36570     +      end;
36571     +      else do;
36572     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
36573     +          if MISSING(CHARACTER_VALUE) then do;
36574     +           if  NUMERIC_VALUE ne .  then do;
36575     +            if ^MISSING(string) then
36576     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
36577     +            else
36578     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
36579     +           end;
36580     +          end;
36581     +          else do;
36582     +            if ^MISSING(string) then
36583     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
36584     +            else
36585     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
36586     +          end;
36588     +         end;
36589     +         else if RELATION in ("=") then do;
36590     +           string = strip(string)||", "||strip(character_value);
36591     +         end;
36592     +         else if RELATION in ("ISMISSING") then do;
36594     +         end;
36595     +         if ^missing(varname) then origvar = varname;
36596     +         oldnode=node;
36597     +      end;
36598     +      if last.varname then do;
36599     +         if RELATION in ("ISMISSING") then do;
36600     +           if ^first.varname then do;
36601     +             string = strip(string) || " or MISSING";
36602     +           end;
36603     +         end;
36604     +         put string;
36605     +         if ^missing(varname) then origvar = varname;
36606     +         oldnode=node;
36607     +      end;
36609     +      if last.node then do;
36610     +         put "then ";
36611     +         put " Tree Node Identifier   = " node;
36613     +         %if "&nprior_flag" ne "." %then %do;
36614     +           put " Number of Observations = " NPRIORS;
36615     +         %end;
36616     +         %else %do;
36617     +           put " Number of Observations = " N;
36618     +         %end;
36620     +         %if &numpred gt 0 %then %do;
36621     +           %do i=1 %to &numpred;
36622     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
36623     +           %end;
36624     +         %end;
36626     +         put " ";
36627     +         if ^missing(varname) then origvar = varname;
36628     +         oldnode=node;
36629     +      end;
36631     +  run;
36633     +  proc datasets lib=work nolist;
36634     +    delete tempoutpath outnodes;
36635     +  run;
36637     +  %doendm:
36638     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree / view=EMWS1.em_Tree;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Part2_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =Age_group Gender Projected_Sum_Pop Year OG_Cases_in_Thousands OG_Cases_in_Thousands );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree;
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 630 observations read from the data set EMWS1.PART2_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree Leafsize = 5 MinCatSize = 5 MaxBranch = 2 MaxDepth = 6
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 4 Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   Projected_Sum_Pop Year
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Age_group Gender
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   OG_Cases_in_Thousands
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   INTERVAL
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBF;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.Part2_VALIDATE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   measure=ASE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1584277 kilobytes of physical memory.
NOTE: Will use 621 out of 630 training cases.
NOTE: Using memory pool with 32690176 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 90008 bytes of work memory.
NOTE: The subtree sequence contains 25 subtrees. The largest has 49 nodes and 25 leaves.
NOTE: Using subtree with 47 nodes and 24 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 47 nodes and 24 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 24.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree_EMTREE SEQUENCE=EMWS1.Tree_OUTSEQ IMPORTANCE=EMWS1.Tree_OUTIMPORT NODESTAT=EMWS1.Tree_OUTNODES SUMMARY=EMWS1.Tree_OUTSUMMARY STATSBYNODE=EMWS1.Tree_OUTSTATS TOPOLOGY=EMWS1.Tree_OUTTOPOLOGY 
Pathlistnonmissing=EMWS1.Tree_OUTPATH RULES = EMWS1.Tree_OUTRULES ;
NOTE: The data set EMWS1.TREE_OUTIMPORT has 4 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 1111 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 47 observations and 16 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 175 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 238 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 25 observations and 18 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 282 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 47 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\TREEFLOW.sas" res group=Tree ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\TREEPUBLISH.sas" nores group=Tree ;
NOTE: External file C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 630 observations read from the data set EMWS1.PART2_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part2_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part2_TEST out=_NULL_ outfit=work.fit_test role=TEST;
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.09 seconds
      
NOTE: There were 630 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 630 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid work.fit_test ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "OG_Cases_in_Thousands";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_test;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $17;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 175 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 175 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Ids_OG_Cases_in_Thou_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS_OG_CASES_IN_THOU_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 175 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 175 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 47 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 47 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node N P_OG_Cases_in_Thousands );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 175 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 47 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 175 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 175 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 175 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " N;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: OG_Cases_in_Thousands = " P_OG_Cases_in_Thousands;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195   
NOTE: The file X is:
      Filename=C:\Users\student\Desktop\AA 490\Final Project\AA490_Project\Base Model\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=12Nov2019:16:26:21,
      Create Time=12Nov2019:16:26:21

NOTE: 276 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 175 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57306737432864;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36640      
36641      *------------------------------------------------------------*;
36642      * End TRAIN: Tree;
36643      *------------------------------------------------------------*;

36644      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
36645      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
36646      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36647      ;
MPRINT(EM_DIAGRAM):   ;
36648      ;
MPRINT(EM_DIAGRAM):   ;
36649      ;
MPRINT(EM_DIAGRAM):   ;
36650      ;
MPRINT(EM_DIAGRAM):   ;
36651      quit;
MPRINT(EM_DIAGRAM):   quit;
36652      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36653      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
36654      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36655      /*; *"; *'; */
36656      ;
MPRINT(EM_DIAGRAM):   ;
36657      run;
MPRINT(EM_DIAGRAM):   run;
36658      quit;
MPRINT(EM_DIAGRAM):   quit;
36659      /* Reset EM Options */
36660      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
36661      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
36662      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
36663      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
36664      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
36665      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
