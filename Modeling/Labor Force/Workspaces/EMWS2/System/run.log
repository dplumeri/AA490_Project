NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: Traverser invoked.  MPCONNECT command is !sascmdv -nosyntaxcheck -noasynchio -noobjectserver. 
Traverser: Beginning flow traversal 
13299      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
13300      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
13301      put '<Node Id="Ids3" Event="Run" Pid="22780" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids3" Event="Run" Pid="22780" Gridid=""/>';
13302      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WINDOWS-MLD7D7P,
      Local Host IP addr=fe80::f91d:cf02:5abc:f880%17,
      Peer Hostname Name=WINDOWS-MLD7D7P,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=54071,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

13303      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Ids3 : Beginning update before running 
* datetime : 14NOV2019:16:46:53 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force\Workspaces\EMWS2\Ids3\PROPERTIES.xml' encoding="UTF-8" NOBOM;
13305      %let _HPDMGRIDHOST=;
13306      %let _HPDMGRIDINSTALLLOC=;
13307      %let _HPDMGRIDDATASERVER=;
13308      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Ids3 : End update 
* datetime : 14NOV2019:16:46:54 
* 
*------------------------------------------------------------* 
13309      %em_getactionstatus(emlib =EMWS2, nodeid=Ids3);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

13310      %let em_Train = N;
13311      %let em_Score = N;
13312      %let em_Report = N;
13313      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Ids3" has already run. 
Node "Ids3" succeeded. 
13314      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
13315      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
13316      put '<Node Id="Ids3" Event="Complete" Pid="22780" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids3" Event="Complete" Pid="22780" Gridid=""/>';
13317      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WINDOWS-MLD7D7P,
      Local Host IP addr=fe80::f91d:cf02:5abc:f880%17,
      Peer Hostname Name=WINDOWS-MLD7D7P,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=54071,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "META" 
traverser_readyNode_note 
13318      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
13319      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
13320      put '<Node Id="Stat2" Event="Run" Pid="22780" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Stat2" Event="Run" Pid="22780" Gridid=""/>';
13321      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WINDOWS-MLD7D7P,
      Local Host IP addr=fe80::f91d:cf02:5abc:f880%17,
      Peer Hostname Name=WINDOWS-MLD7D7P,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=54071,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

13322      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Stat2 : Beginning update before running 
* datetime : 14NOV2019:16:46:54 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Stat2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS2.Ids3_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force\Workspaces\EMWS2\Stat2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
13343      %let _HPDMGRIDHOST=;
13344      %let _HPDMGRIDINSTALLLOC=;
13345      %let _HPDMGRIDDATASERVER=;
13346      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Stat2 : End update 
* datetime : 14NOV2019:16:46:54 
* 
*------------------------------------------------------------* 
13347      %em_getactionstatus(emlib =EMWS2, nodeid=Stat2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

13348      %let em_filemodtime=;
13349      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
13350      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
13351      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
13352      where fileref eq "#LN00141";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00141";
13353      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
13354      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00141';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13355      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
13356      %let em_Train = N;
13357      %let em_Score = N;
13358      %let em_Report = N;
13359      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Stat2" has already run. 
Node "Stat2" succeeded. 
13360      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
13361      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
13362      put '<Node Id="Stat2" Event="Complete" Pid="22780" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Stat2" Event="Complete" Pid="22780" Gridid=""/>';
13363      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WINDOWS-MLD7D7P,
      Local Host IP addr=fe80::f91d:cf02:5abc:f880%17,
      Peer Hostname Name=WINDOWS-MLD7D7P,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=54071,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

traverser_readyNode_note 
13364      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
13365      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
13366      put '<Node Id="Meta" Event="Run" Pid="22780" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Meta" Event="Run" Pid="22780" Gridid=""/>';
13367      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=WINDOWS-MLD7D7P,
      Local Host IP addr=fe80::f91d:cf02:5abc:f880%17,
      Peer Hostname Name=WINDOWS-MLD7D7P,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=54071,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

13368      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Meta : Beginning update before running 
* datetime : 14NOV2019:16:46:55 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Meta_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS2.Stat2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "CLUSMEAN" "CLUSSTAT" "ESTIMATE" "RANK" "REPORTFIT" "RULES" "SCOREDIST" "TERMS" "TREE" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
13400      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
13401      set EMWS2.Stat2_CMeta_TRAIN (obs=1);
MPRINT(EM_DIAGRAM):   set EMWS2.Stat2_CMeta_TRAIN (obs=1);
13402      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS2.STAT2_CMETA_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13403      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
13404      * Meta: Update DATA Variables Set;
MPRINT(EM_DIAGRAM):   * Meta: Update DATA Variables Set;
13405      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

13406      data WORK.META_TEMP;
MPRINT(EM_DIAGRAM):    data WORK.META_TEMP;
13407      set EMWS2.Stat2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS2.Stat2_CMeta_TRAIN;
13408      length Hidden $1;
MPRINT(EM_DIAGRAM):   length Hidden $1;
13409      retain Hidden 'N';
MPRINT(EM_DIAGRAM):   retain Hidden 'N';
13410      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set EMWS2.STAT2_CMETA_TRAIN.
NOTE: The data set WORK.META_TEMP has 5 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13411      %emAdviseColumns(EMWS2.Stat2_TRAIN, outdata=WORK.META_TEMP, newdataflag=N);
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;

13412      %let SYSCC = 0;
13413      options validvarname=any;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
13414      proc contents data=EMWS2.Stat2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.Stat2_TRAIN out=_tempAdvisor noprint;
13415      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK._TEMPADVISOR has 5 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

13416      options validvarname=V7;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
13417      %let _dsidTable = 0;
13418      %let _engineTable =;
13419      data _null_;
MPRINT(EMADVISECOLUMNS):    data _null_;
13420      dsid = open('EMWS2.Stat2_TRAIN');
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.Stat2_TRAIN');
13421      call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
13422      if dsid then do;
MPRINT(EMADVISECOLUMNS):   if dsid then do;
13423      call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
13424      dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
13425      end;
MPRINT(EMADVISECOLUMNS):   end;
13426      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: View EMWS2.STAT2_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

13427      proc contents data=EMWS2.Stat2_TRAIN
13428      out=WORK.M1Y0PUD7 noprint;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.Stat2_TRAIN out=WORK.M1Y0PUD7 noprint;
13429      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK.M1Y0PUD7 has 5 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

13430      data WORK.M1Y0PUD7;
MPRINT(EMADVISECOLUMNS):    data WORK.M1Y0PUD7;
13431      length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
13432      label NAME =;
MPRINT(EMADVISECOLUMNS):   label NAME =;
13433      set WORK.M1Y0PUD7(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   set WORK.M1Y0PUD7(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
13434      if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
13435      else type = 'C';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
13436      if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
13437      if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
13438      if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
13439      else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
13440      end;
MPRINT(EMADVISECOLUMNS):   end;
13441      else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
13442      end;
MPRINT(EMADVISECOLUMNS):   end;
13443      else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
13444      if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
13445      if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
13446      if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
13447      else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
13448      end;
MPRINT(EMADVISECOLUMNS):   end;
13449      else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
13450      end;
MPRINT(EMADVISECOLUMNS):   end;
13451      else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
13452      if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
13453      else index = "Y";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
13454      indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
13455      drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
13456      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 5 observations read from the data set WORK.M1Y0PUD7.
NOTE: The data set WORK.M1Y0PUD7 has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13457      data WORK.M2Y0T80G;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Y0T80G;
13458      length UNAME $64;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
13459      set WORK.M2Y0T80G;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Y0T80G;
13460      UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
13461      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 5 observations read from the data set WORK.M2Y0T80G.
NOTE: The data set WORK.M2Y0T80G has 5 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13462      data WORK.M1Y0PUD7;
MPRINT(EMADVISECOLUMNS):    data WORK.M1Y0PUD7;
13463      length UNAME $64;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
13464      set WORK.M1Y0PUD7;
MPRINT(EMADVISECOLUMNS):   set WORK.M1Y0PUD7;
13465      UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
13466      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 5 observations read from the data set WORK.M1Y0PUD7.
NOTE: The data set WORK.M1Y0PUD7 has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1Y0PUD7 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort data=WORK.M2Y0T80G NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   data WORK.M2Y0T80G;
MPRINT(EMADVISECOLUMNS):   merge WORK.M2Y0T80G(in=_a) WORK.M1Y0PUD7(in=_b);
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   if _a and ^_b then delete;
MPRINT(EMADVISECOLUMNS):   run;
13478      data WORK.M2Y0T80G;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Y0T80G;
13479      drop UNAME;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
13480      set WORK.M2Y0T80G;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Y0T80G;
13481      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 5 observations read from the data set WORK.M2Y0T80G.
NOTE: The data set WORK.M2Y0T80G has 5 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    data WORK.M1CDX4J7(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Y0T80G;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Y0T80G;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Y0T80G;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Y0T80G;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Y0T80G;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.34 seconds
      cpu time            0.31 seconds
      

MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
13732      data WORK.META_TEMP;
MPRINT(EM_DIAGRAM):   data WORK.META_TEMP;
13733      set WORK.META_TEMP;
MPRINT(EM_DIAGRAM):   set WORK.META_TEMP;
13734      if Hidden eq '' then do;
MPRINT(EM_DIAGRAM):   if Hidden eq '' then do;
13735      Role = 'REJECTED';
MPRINT(EM_DIAGRAM):   Role = 'REJECTED';
13736      Hidden = 'Y';
MPRINT(EM_DIAGRAM):   Hidden = 'Y';
13737      end;
MPRINT(EM_DIAGRAM):   end;
13738      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK.META_TEMP.
NOTE: The data set WORK.META_TEMP has 5 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13739      %let EM_LIB = EMWS2;
13740      %em_path(NODEID=Meta, OUTDS=work.path, NODES=PATH);
MPRINT(EM_PATH):   proc display c=sashelp.emutil.path.scl;
MPRINT(EM_PATH):   run;

13741      data work.path;
MPRINT(EM_PATH):   data work.path;
13742      length nodelabel $32 component $32;
MPRINT(EM_PATH):   length nodelabel $32 component $32;
13743      nodelabel="Ids3";
MPRINT(EM_PATH):   nodelabel="Ids3";
13744      component="DataSource";
MPRINT(EM_PATH):   component="DataSource";
13745      output;
MPRINT(EM_PATH):   output;
13746      nodelabel="Stat2";
MPRINT(EM_PATH):   nodelabel="Stat2";
13747      component="StatExplore";
MPRINT(EM_PATH):   component="StatExplore";
13748      output;
MPRINT(EM_PATH):   output;
13749      run;
MPRINT(EM_PATH):   run;

NOTE: The data set WORK.PATH has 2 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_PATH):   
MPRINT(EM_DIAGRAM):  ;
13750      data temp;
MPRINT(EM_DIAGRAM):   data temp;
13751      set WORK.META_TEMP;
MPRINT(EM_DIAGRAM):   set WORK.META_TEMP;
13752      where Hidden = 'Y';
MPRINT(EM_DIAGRAM):   where Hidden = 'Y';
13753      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK.META_TEMP.
      WHERE Hidden='Y';
NOTE: The data set WORK.TEMP has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13754      data creator;
MPRINT(EM_DIAGRAM):    data creator;
13755      set
13756      EMWS2.Stat2_cmeta_TRAIN(keep=NAME LEVEL CREATOR where=(CREATOR ne ''))
13757      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Stat2_cmeta_TRAIN(keep=NAME LEVEL CREATOR where=(CREATOR ne '')) ;

NOTE: There were 0 observations read from the data set EMWS2.STAT2_CMETA_TRAIN.
      WHERE CREATOR not = ' ';
NOTE: The data set WORK.CREATOR has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13758      proc sort data=creator nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=creator nodupkey;
13759      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
13760      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.CREATOR has 0 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13761      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
13762      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
13763      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is empty.
NOTE: The data set WORK.TEMP has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13764      data temp;
MPRINT(EM_DIAGRAM):   data temp;
13765      merge temp(in=a) creator;
MPRINT(EM_DIAGRAM):   merge temp(in=a) creator;
13766      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
13767      keep NAME LEVEL CREATOR;
MPRINT(EM_DIAGRAM):   keep NAME LEVEL CREATOR;
13768      if a then output;
MPRINT(EM_DIAGRAM):   if a then output;
13769      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK.TEMP.
NOTE: There were 0 observations read from the data set WORK.CREATOR.
NOTE: The data set WORK.TEMP has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13770      proc sort data=WORK.META_TEMP;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.META_TEMP;
13771      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
13772      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK.META_TEMP.
NOTE: The data set WORK.META_TEMP has 5 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13773      data WORK.META_TEMP;
MPRINT(EM_DIAGRAM):   data WORK.META_TEMP;
13774      merge WORK.META_TEMP temp;
MPRINT(EM_DIAGRAM):   merge WORK.META_TEMP temp;
13775      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
13776      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK.META_TEMP.
NOTE: There were 0 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.META_TEMP has 5 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13777      data EMWS2.Meta_VariableSet;
MPRINT(EM_DIAGRAM):    data EMWS2.Meta_VariableSet;
13778      length NEWROLE $32;
MPRINT(EM_DIAGRAM):   length NEWROLE $32;
13779      label NEWROLE = "New Role";
MPRINT(EM_DIAGRAM):   label NEWROLE = "New Role";
13780      length NEWLEVEL $8;
MPRINT(EM_DIAGRAM):   length NEWLEVEL $8;
13781      label NEWLEVEL = "New Level";
MPRINT(EM_DIAGRAM):   label NEWLEVEL = "New Level";
13782      length NEWREPORT $1;
MPRINT(EM_DIAGRAM):   length NEWREPORT $1;
13783      length NEWORDER $8;
MPRINT(EM_DIAGRAM):   length NEWORDER $8;
13784      label NEWORDER = "New Order";
MPRINT(EM_DIAGRAM):   label NEWORDER = "New Order";
13785      length HIDDEN $1;
MPRINT(EM_DIAGRAM):   length HIDDEN $1;
13786      length HIDE $1;
MPRINT(EM_DIAGRAM):   length HIDE $1;
13787      set WORK.META_TEMP;
MPRINT(EM_DIAGRAM):   set WORK.META_TEMP;
13788      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable NEWROLE is uninitialized.
NOTE: Variable NEWLEVEL is uninitialized.
NOTE: Variable NEWREPORT is uninitialized.
NOTE: Variable NEWORDER is uninitialized.
NOTE: Variable HIDE is uninitialized.
NOTE: There were 5 observations read from the data set WORK.META_TEMP.
NOTE: The data set EMWS2.META_VARIABLESET has 5 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13789      %let EM_LIB=EMWS2;
13790      %em_path(NODEID=Meta, OUTDS=META_PREDECESSOR, NODES=PREDECESSOR);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_PATH):   proc display c=sashelp.emutil.path.scl;
MPRINT(EM_PATH):   run;

13791      data META_PREDECESSOR;
MPRINT(EM_PATH):   data META_PREDECESSOR;
13792      length nodelabel $32 component $32;
MPRINT(EM_PATH):   length nodelabel $32 component $32;
13793      nodelabel="Stat2";
MPRINT(EM_PATH):   nodelabel="Stat2";
13794      component="StatExplore";
MPRINT(EM_PATH):   component="StatExplore";
13795      output;
MPRINT(EM_PATH):   output;
13796      run;
MPRINT(EM_PATH):   run;

NOTE: The data set WORK.META_PREDECESSOR has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_PATH):   
MPRINT(EM_DIAGRAM):  ;

13797      data EMWS2.Meta_CHOICE(rename=(role=Key dataset=Choice));
MPRINT(EM_DIAGRAM):    data EMWS2.Meta_CHOICE(rename=(role=Key dataset=Choice));
13798      retain Variable 'DATASET';
MPRINT(EM_DIAGRAM):   retain Variable 'DATASET';
13799      set
13800      EMWS2.Stat2_exportset
13801      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Stat2_exportset ;
13802      where ROLE in('RAW', 'TRAIN', 'VALIDATE', 'TEST', 'SCORE', 'TRANSACTION') and export='Y';
MPRINT(EM_DIAGRAM):   where ROLE in('RAW', 'TRAIN', 'VALIDATE', 'TEST', 'SCORE', 'TRANSACTION') and export='Y';
13803      if ROLE in('RAW','TRAIN') then ROLE='TRAIN';
MPRINT(EM_DIAGRAM):   if ROLE in('RAW','TRAIN') then ROLE='TRAIN';
13804      drop export needupdate importport applydelta applyscore deltacode;
MPRINT(EM_DIAGRAM):   drop export needupdate importport applydelta applyscore deltacode;
13805      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS2.STAT2_EXPORTSET.
      WHERE ROLE in ('RAW', 'SCORE', 'TEST', 'TRAIN', 'TRANSACTION', 'VALIDATE') and (export='Y');
NOTE: The data set EMWS2.META_CHOICE has 1 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13806      %let hiddenNum=0;
13807      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
13808      length string $200;
MPRINT(EM_DIAGRAM):   length string $200;
13809      set EMWS2.Meta_VariableSet end = eof;
MPRINT(EM_DIAGRAM):   set EMWS2.Meta_VariableSet end = eof;
13810      file #LN00164;
MPRINT(EM_DIAGRAM):   file #LN00164;
13811      where HIDDEN = 'Y' and HIDE = 'N';
MPRINT(EM_DIAGRAM):   where HIDDEN = 'Y' and HIDE = 'N';
13812      if _N_=1 then do;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
13813      put "*------------------------------------------------------------*;";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*;";
13814      put '* Unhide Variables;';
MPRINT(EM_DIAGRAM):   put '* Unhide Variables;';
13815      put "*------------------------------------------------------------*;";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*;";
13816      put 'length NAME $32 ROLE $32 LEVEL $10 ORDER $8 CREATOR $32 REPORT $1 FORMATTYPE $10';
MPRINT(EM_DIAGRAM):   put 'length NAME $32 ROLE $32 LEVEL $10 ORDER $8 CREATOR $32 REPORT $1 FORMATTYPE $10';
13817      put '       LABEL $200 FORMAT INFORMAT $36 INDEX $1 INDEXTYPE $9;';
MPRINT(EM_DIAGRAM):   put '       LABEL $200 FORMAT INFORMAT $36 INDEX $1 INDEXTYPE $9;';
13818      end;
MPRINT(EM_DIAGRAM):   end;
13819      string = 'NAME="'!!strip(NAME)!!'";';
MPRINT(EM_DIAGRAM):   string = 'NAME="'!!strip(NAME)!!'";';
13820      put string;
MPRINT(EM_DIAGRAM):   put string;
13821      if NEWROLE ne 'DEFAULT' then ROLE = NEWROLE;
MPRINT(EM_DIAGRAM):   if NEWROLE ne 'DEFAULT' then ROLE = NEWROLE;
13822      string = 'ROLE="'!!strip(ROLE)!!'";';
MPRINT(EM_DIAGRAM):   string = 'ROLE="'!!strip(ROLE)!!'";';
13823      put string;
MPRINT(EM_DIAGRAM):   put string;
13824      if NEWLEVEL ne 'DEFAULT' then LEVEL = NEWLEVEL;
MPRINT(EM_DIAGRAM):   if NEWLEVEL ne 'DEFAULT' then LEVEL = NEWLEVEL;
13825      string = 'LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(EM_DIAGRAM):   string = 'LEVEL="'!!strip(LEVEL)!!'";';
13826      put string;
MPRINT(EM_DIAGRAM):   put string;
13827      if NEWREPORT ne 'D' then REPORT = NEWREPORT;
MPRINT(EM_DIAGRAM):   if NEWREPORT ne 'D' then REPORT = NEWREPORT;
13828      string = 'REPORT="'!!strip(REPORT)!!'";';
MPRINT(EM_DIAGRAM):   string = 'REPORT="'!!strip(REPORT)!!'";';
13829      put string;
MPRINT(EM_DIAGRAM):   put string;
13830      if NEWORDER ne 'DEFAULT' then ORDER = NEWORDER;
MPRINT(EM_DIAGRAM):   if NEWORDER ne 'DEFAULT' then ORDER = NEWORDER;
13831      string = 'ORDER="'!!strip(ORDER)!!'";';
MPRINT(EM_DIAGRAM):   string = 'ORDER="'!!strip(ORDER)!!'";';
13832      put string;
MPRINT(EM_DIAGRAM):   put string;
13833      string = 'CREATOR="'!!strip(CREATOR)!!'";';
MPRINT(EM_DIAGRAM):   string = 'CREATOR="'!!strip(CREATOR)!!'";';
13834      put string;
MPRINT(EM_DIAGRAM):   put string;
13835      string = 'FORMATTYPE="'!!strip(FORMATTYPE)!!'";';
MPRINT(EM_DIAGRAM):   string = 'FORMATTYPE="'!!strip(FORMATTYPE)!!'";';
13836      put string;
MPRINT(EM_DIAGRAM):   put string;
13837      string = 'TYPE="'!!strip(TYPE)!!'";';
MPRINT(EM_DIAGRAM):   string = 'TYPE="'!!strip(TYPE)!!'";';
13838      put string;
MPRINT(EM_DIAGRAM):   put string;
13839      string = 'LABEL="'!!strip(LABEL)!!'";';
MPRINT(EM_DIAGRAM):   string = 'LABEL="'!!strip(LABEL)!!'";';
13840      put string;
MPRINT(EM_DIAGRAM):   put string;
13841      string = 'FORMAT="'!!strip(FORMAT)!!'";';
MPRINT(EM_DIAGRAM):   string = 'FORMAT="'!!strip(FORMAT)!!'";';
13842      put string;
MPRINT(EM_DIAGRAM):   put string;
13843      string = 'INFORMAT="'!!strip(INFORMAT)!!'";';
MPRINT(EM_DIAGRAM):   string = 'INFORMAT="'!!strip(INFORMAT)!!'";';
13844      put string;
MPRINT(EM_DIAGRAM):   put string;
13845      string = 'INDEX="'!!strip(INDEX)!!'";';
MPRINT(EM_DIAGRAM):   string = 'INDEX="'!!strip(INDEX)!!'";';
13846      put string;
MPRINT(EM_DIAGRAM):   put string;
13847      string = 'INDEXTYPE="'!!strip(INDEXTYPE)!!'";';
MPRINT(EM_DIAGRAM):   string = 'INDEXTYPE="'!!strip(INDEXTYPE)!!'";';
13848      put string;
MPRINT(EM_DIAGRAM):   put string;
13849      string = 'LENGTH='!!strip(put(length, best.))!!';';
MPRINT(EM_DIAGRAM):   string = 'LENGTH='!!strip(put(length, best.))!!';';
13850      put string;
MPRINT(EM_DIAGRAM):   put string;
13851      put 'output;';
MPRINT(EM_DIAGRAM):   put 'output;';
13852      if eof then call symput('hiddenNum', '1');
MPRINT(EM_DIAGRAM):   if eof then call symput('hiddenNum', '1');
13853      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file #LN00164 is:
      Filename=C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force\Workspaces\EMWS2\Meta\UNHIDECODE_DATA.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14Nov2019:16:46:55,
      Create Time=14Nov2019:16:46:55

NOTE: 0 records were written to the file #LN00164.
NOTE: There were 0 observations read from the data set EMWS2.META_VARIABLESET.
      WHERE (HIDDEN='Y') and (HIDE='N');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13854      data _TEMP;
MPRINT(EM_DIAGRAM):    data _TEMP;
13855      set EMWS2.Stat2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS2.Stat2_CMeta_TRAIN;
13856      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set EMWS2.STAT2_CMETA_TRAIN.
NOTE: The data set WORK._TEMP has 5 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13857      proc sort data=_TEMP;
MPRINT(EM_DIAGRAM):    proc sort data=_TEMP;
13858      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
13859      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 5 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13860      data EMWS2.Meta_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):    data EMWS2.Meta_CMeta_TRAIN;
13861      set _TEMP;
MPRINT(EM_DIAGRAM):   set _TEMP;
13862      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS2.META_CMETA_TRAIN has 5 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

13863      * Meta: End of Update DATA Variables Set;
MPRINT(EM_DIAGRAM):    * Meta: End of Update DATA Variables Set;
13864      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

13865      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
13866      * Meta: Update VALIDATE Variables Set;
MPRINT(EM_DIAGRAM):   * Meta: Update VALIDATE Variables Set;
13867      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

13868      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
13869      * Meta: Update TEST Variables Set;
MPRINT(EM_DIAGRAM):   * Meta: Update TEST Variables Set;
13870      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

13871      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
13872      * Meta: Update SCORE Variables Set;
MPRINT(EM_DIAGRAM):   * Meta: Update SCORE Variables Set;
13873      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

13874      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
13875      * Meta: Update TRANSACTION Variables Set;
MPRINT(EM_DIAGRAM):   * Meta: Update TRANSACTION Variables Set;
13876      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

13877      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
13878      * Meta: Update DOCUMENT Variables Set;
MPRINT(EM_DIAGRAM):   * Meta: Update DOCUMENT Variables Set;
13879      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force\Workspaces\EMWS2\Meta\PROPERTIES.xml' encoding="UTF-8" NOBOM;
13881      %let _HPDMGRIDHOST=;
13882      %let _HPDMGRIDINSTALLLOC=;
13883      %let _HPDMGRIDDATASERVER=;
13884      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Meta : End update 
* datetime : 14NOV2019:16:46:56 
* 
*------------------------------------------------------------* 
13885      %em_getactionstatus(emlib =EMWS2, nodeid=Meta);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

13886      %let em_Train = Y;
13887      %let em_Report = Y;
13888      %let em_Score = Y;
13889      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

13890      %let emloopmode =;
13891      %let emloopnumber =0;
13892      %let emloopId =Meta;
*------------------------------------------------------------* 
* 
* Meta : Running 
* datetime : 14NOV2019:16:46:56 
* 
*------------------------------------------------------------* 
13893      %let SYSCC =0;
13894      %let EMGROUPMODE =;
13895      %let EMGROUPID =;
MPRINT(EM_DIAGRAM):      filename temp catalog 'sashelp.emutil.em_vardist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_classdist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checksetinit.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checkerror.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odsliston.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odslistoff.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_getvarname.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    filename L3RCAKB6 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force\Workspaces\EMWS2\Meta\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto log=L3RCAKB6 new;
MPRINT(EM_DIAGRAM):   run;
