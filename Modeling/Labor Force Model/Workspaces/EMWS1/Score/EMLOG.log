*------------------------------------------------------------*
User:                student
Date:                December 10, 2019
Time:                15:49:03
Site:                70082322
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 10, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:48:54" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 10, 2019
Time:                15:48:54
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3M75HQY "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3M75HQY new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 10, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:48:54" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 10, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:48:55" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
45352      proc freq data=EMWS1.Score_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Score_VariableSet noprint;
45353      table ROLE*LEVEL/out=WORK.ScoreMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ScoreMETA;
45354      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.SCORE_VARIABLESET.
NOTE: The data set WORK.SCOREMETA has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
45355      proc print data=WORK.ScoreMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ScoreMETA label noobs;
45356      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
45357      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
45358      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
45359      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
45360      run;
 
NOTE: There were 2 observations read from the data set WORK.SCOREMETA.
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
45361      title10;
MPRINT(EM_DIAGRAM):   title10;
45362      %let groupid =;
45363      %let endGroupid =;
45364      %let prescoreid =;
45365      %let idsTable =;
45366      %let hpdmTable =;
45367      %let lasthptm =;
45368      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
45369      set EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMINFO;
45370      where upcase(key) in('LASTHPTM', 'IDSTABLE', 'HPDMSAMPLE', 'PRESCORECODE','ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where upcase(key) in('LASTHPTM', 'IDSTABLE', 'HPDMSAMPLE', 'PRESCORECODE','ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
45371      select(upcase(key));
MPRINT(EM_DIAGRAM):   select(upcase(key));
45372      when('LASTHPTM') call symput('lasthptm', DATA);
MPRINT(EM_DIAGRAM):   when('LASTHPTM') call symput('lasthptm', DATA);
45373      when('IDSTABLE') call symput('idsTable', DATA);
MPRINT(EM_DIAGRAM):   when('IDSTABLE') call symput('idsTable', DATA);
45374      when('HPDMSAMPLE') call symput('hpdmSample', DATA);
MPRINT(EM_DIAGRAM):   when('HPDMSAMPLE') call symput('hpdmSample', DATA);
45375      when('PRESCORECODE') call symput('prescoreId', DATA);
MPRINT(EM_DIAGRAM):   when('PRESCORECODE') call symput('prescoreId', DATA);
45376      when('ENDGROUP') call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   when('ENDGROUP') call symput('endGroupId', DATA);
45377      otherwise call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   otherwise call symput('groupId', DATA);
45378      end;
MPRINT(EM_DIAGRAM):   end;
45379      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG2_EMINFO.
      WHERE UPCASE(key) in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'HPDMSAMPLE', 'IDSTABLE', 'INDEXINFO', 'LASTHPTM', 'PRESCORECODE', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
45380      %let lastModelid =;
45381      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
45382      set EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMINFO;
45383      where upcase(key) = 'MODEL' and TARGET = "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   where upcase(key) = 'MODEL' and TARGET = "Sum_Labor_Force_Pop";
45384      call symput('lastModelID', DATA);
MPRINT(EM_DIAGRAM):   call symput('lastModelID', DATA);
45385      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG2_EMINFO.
      WHERE (UPCASE(key)='MODEL') and (TARGET='Sum_Labor_Force_Pop');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
NOTE: There were 1 observations read from the data set EMWS1.REG2_EMINFO.
      WHERE (TARGET='Sum_Labor_Force_Pop') and (KEY='MODEL');
NOTE: The data set WORK.EMINFO407OXVRP has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL NUMELEMENTS >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
NOTE: There were 1 observations read from the data set EMWS1.REG2_EMINFO.
      WHERE (TARGET='Sum_Labor_Force_Pop') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO40L_SQYD has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
45386      %let em_rootkey=;
45387      %let em_keytype=;
45388      %let em_keylen=;
45389      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
45390      set EMWS1.Ids_cmeta_data;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_cmeta_data;
45391      where role='KEY';
MPRINT(EM_DIAGRAM):   where role='KEY';
45392      call symput('em_rootkey', strip(NAME));
MPRINT(EM_DIAGRAM):   call symput('em_rootkey', strip(NAME));
45393      call symput('em_keytype', strip(TYPE));
MPRINT(EM_DIAGRAM):   call symput('em_keytype', strip(TYPE));
45394      call symput('em_rootlen', strip(put(length, best.)));
MPRINT(EM_DIAGRAM):   call symput('em_rootlen', strip(put(length, best.)));
45395      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_CMETA_DATA.
      WHERE role='KEY';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    data EMWS1.Score_SCORE;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids2_DATA;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: WINDOWS-MLD7D7P;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling;
MPRINT(EM_DIAGRAM):   * Project Name: Labor Force Model;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Labor Force;
MPRINT(EM_DIAGRAM):   * Generated by: student;
MPRINT(EM_DIAGRAM):   * Date: 10DEC2019:15:48:55;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Part;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Regression;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * NODE: Reg2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Check Population for missing values ;
MPRINT(EM_DIAGRAM):   if missing( Population ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 _0_2 ;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm19 = '45 TO 64' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '65+' then do;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Industry ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( Industry ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm111 $ 111;
MPRINT(EM_DIAGRAM):   drop _dm111;
MPRINT(EM_DIAGRAM):   _dm111 = put( Industry , $CHAR111. );
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm32 = 'SERVICE OCCUPATIONS' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _LP0 = 6470696.42857143;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: Population*Age_group*Industry ;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.11715613953136) * _TEMP * _0_0 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02700341050736) * _TEMP * _0_0 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01251898117875) * _TEMP * _0_0 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01863889821193) * _TEMP * _0_0 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09663568488618) * _TEMP * _0_1 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03979851587655) * _TEMP * _0_1 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03370616598682) * _TEMP * _0_1 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00628489271812) * _TEMP * _0_1 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09152611804654) * _TEMP * _0_2 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03738941285564) * _TEMP * _0_2 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02229371492902) * _TEMP * _0_2 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00483071597825) * _TEMP * _0_2 * _1_3;
MPRINT(EM_DIAGRAM):   *** Effect: Age_group ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1151827.58078611) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3344383.07340614) * _TEMP * _0_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1719019.78617864) * _TEMP * _0_2;
MPRINT(EM_DIAGRAM):   *** Effect: Industry ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3665917.37954249) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2802842.40028867) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2038406.8909291) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1644635.92898508) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   *** Effect: Population ;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.10026222163702 * _TEMP);
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1131306.73108067);
MPRINT(EM_DIAGRAM):   REG2DR1: *** Predicted Value;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = _LP0;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Model Compare Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: MdlComp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = b_Sum_Labor_Force_;
MPRINT(EM_DIAGRAM):   LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   EM_PREDICTION = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Score_VALIDATE;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_VALIDATE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: WINDOWS-MLD7D7P;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling;
MPRINT(EM_DIAGRAM):   * Project Name: Labor Force Model;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Labor Force;
MPRINT(EM_DIAGRAM):   * Generated by: student;
MPRINT(EM_DIAGRAM):   * Date: 10DEC2019:15:48:55;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   drop Date;
MPRINT(EM_DIAGRAM):   drop Gender;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Part;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Regression;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * NODE: Reg2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   drop _Y;
MPRINT(EM_DIAGRAM):   _Y = Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Check Population for missing values ;
MPRINT(EM_DIAGRAM):   if missing( Population ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 _0_2 ;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm19 = '45 TO 64' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '65+' then do;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Industry ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( Industry ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm111 $ 111;
MPRINT(EM_DIAGRAM):   drop _dm111;
MPRINT(EM_DIAGRAM):   _dm111 = put( Industry , $CHAR111. );
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm32 = 'SERVICE OCCUPATIONS' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _LP0 = 6470696.42857143;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: Population*Age_group*Industry ;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.11715613953136) * _TEMP * _0_0 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02700341050736) * _TEMP * _0_0 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01251898117875) * _TEMP * _0_0 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01863889821193) * _TEMP * _0_0 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09663568488618) * _TEMP * _0_1 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03979851587655) * _TEMP * _0_1 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03370616598682) * _TEMP * _0_1 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00628489271812) * _TEMP * _0_1 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09152611804654) * _TEMP * _0_2 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03738941285564) * _TEMP * _0_2 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02229371492902) * _TEMP * _0_2 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00483071597825) * _TEMP * _0_2 * _1_3;
MPRINT(EM_DIAGRAM):   *** Effect: Age_group ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1151827.58078611) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3344383.07340614) * _TEMP * _0_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1719019.78617864) * _TEMP * _0_2;
MPRINT(EM_DIAGRAM):   *** Effect: Industry ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3665917.37954249) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2802842.40028867) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2038406.8909291) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1644635.92898508) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   *** Effect: Population ;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.10026222163702 * _TEMP);
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1131306.73108067);
MPRINT(EM_DIAGRAM):   REG2DR1: *** Predicted Value, Error, and Residual;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = _LP0;
MPRINT(EM_DIAGRAM):   drop _R;
MPRINT(EM_DIAGRAM):   if _Y = . then do;
MPRINT(EM_DIAGRAM):   R_Sum_Labor_Force_Pop = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _R = _Y - _LP0;
MPRINT(EM_DIAGRAM):   label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   R_Sum_Labor_Force_Pop = _R;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Model Compare Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: MdlComp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = b_Sum_Labor_Force_;
MPRINT(EM_DIAGRAM):   LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   EM_PREDICTION = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   LABEL = 'Target Variable: Sum_Labor_Force_Pop';
MPRINT(EM_DIAGRAM):   EM_VALUETARGET = Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   run;
WARNING: The variable Date in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable Gender in the DROP, KEEP, or RENAME list has never been referenced.
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 10, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:48:56" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 10, 2019
Time:                15:48:56
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1JYXN30 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1JYXN30 new;
MPRINT(EM_DIAGRAM):   run;
46110      filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46111      *------------------------------------------------------------*;
46112      * Score: Scoring DATA data;
46113      *------------------------------------------------------------*;
46114      data EMWS1.Score_TRAIN
46115      / view=EMWS1.Score_TRAIN
46116      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_TRAIN / view=EMWS1.Score_TRAIN ;
46117      set EMWS1.MdlComp_TRAIN
46118      ;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_TRAIN ;
46119      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMFLOWSCORE.sas.
46120     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46121     +* Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
46122     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46123     +LABEL EM_SEGMENT = 'Segment';
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment';
46124     +EM_SEGMENT = b_Sum_Labor_Force_;
MPRINT(EM_DIAGRAM):   EM_SEGMENT = b_Sum_Labor_Force_;
46125     +LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
46126     +EM_PREDICTION = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   EM_PREDICTION = P_Sum_Labor_Force_Pop;
46127     +LABEL = 'Target Variable: Sum_Labor_Force_Pop';
MPRINT(EM_DIAGRAM):   LABEL = 'Target Variable: Sum_Labor_Force_Pop';
46128     +EM_VALUETARGET = Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   EM_VALUETARGET = Sum_Labor_Force_Pop;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
46129      run;
 
NOTE: DATA STEP view saved on file EMWS1.SCORE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
46130      quit;
46131      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
46132      filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46133      *------------------------------------------------------------*;
46134      * Score: Scoring TEST data;
46135      *------------------------------------------------------------*;
46136      data EMWS1.Score_TEST
46137      / view=EMWS1.Score_TEST
46138      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_TEST / view=EMWS1.Score_TEST ;
46139      set EMWS1.MdlComp_TEST
46140      ;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_TEST ;
46141      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMFLOWSCORE.sas.
46142     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46143     +* Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
46144     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46145     +LABEL EM_SEGMENT = 'Segment';
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment';
46146     +EM_SEGMENT = b_Sum_Labor_Force_;
MPRINT(EM_DIAGRAM):   EM_SEGMENT = b_Sum_Labor_Force_;
46147     +LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
46148     +EM_PREDICTION = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   EM_PREDICTION = P_Sum_Labor_Force_Pop;
46149     +LABEL = 'Target Variable: Sum_Labor_Force_Pop';
MPRINT(EM_DIAGRAM):   LABEL = 'Target Variable: Sum_Labor_Force_Pop';
46150     +EM_VALUETARGET = Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   EM_VALUETARGET = Sum_Labor_Force_Pop;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
46151      run;
 
NOTE: DATA STEP view saved on file EMWS1.SCORE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP_TEST.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
46152      quit;
46153      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
46154      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
46155      * Score: Creating Publish Score Variables Table;
MPRINT(EM_DIAGRAM):   * Score: Creating Publish Score Variables Table;
46156      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46157      proc sort data=EMWS1.MdlComp_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp;
46158      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46159      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
NOTE: The data set WORK._TEMP has 9 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46160      proc sort data=EMWS1.Ids_cmeta_data(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_cmeta_data(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp2;
46161      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46162      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.IDS_CMETA_DATA.
NOTE: The data set WORK._TEMP2 has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46163      data EMWS1.Score_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_EMINPUTVARS;
46164      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
46165      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46166      length HIDE $1 SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length HIDE $1 SCOREVAR $1;
46167      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine,  meta_role_vlabel ,    NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" COMMENT =
46168         "%sysfunc(sasmsg(sashelp.dmine,  meta_comment_vlabel , NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))" HIDE = "%sysfunc(sasmsg(sashelp.dmine, rpt_hiddenVariable_vlabel,  NOQUOTE))" SCOREVAR =
46169         "%sysfunc(sasmsg(sashelp.dmine,  rpt_scoreVar_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" ROLE = "Role" CREATOR = "Creator" COMMENT = "Comment" LABEL = "Label" HIDE = "Variable Hidden" SCOREVAR = "Used in Score Code";
46170      if _a and ^_b then HIDE = 'Y';
MPRINT(EM_DIAGRAM):   if _a and ^_b then HIDE = 'Y';
46171      if upcase(NAME) = "AGE_GROUP" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "AGE_GROUP" then HIDE = "N";
46172      if upcase(NAME) = "INDUSTRY" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "INDUSTRY" then HIDE = "N";
46173      if upcase(NAME) = "P_SUM_LABOR_FORCE_POP" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "P_SUM_LABOR_FORCE_POP" then HIDE = "N";
46174      if upcase(NAME) = "POPULATION" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "POPULATION" then HIDE = "N";
46175      if upcase(NAME) = "R_SUM_LABOR_FORCE_POP" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "R_SUM_LABOR_FORCE_POP" then HIDE = "N";
46176      if upcase(NAME) = "SUM_LABOR_FORCE_POP" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "SUM_LABOR_FORCE_POP" then HIDE = "N";
46177      if upcase(NAME) = "_WARN_" then delete;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_WARN_" then delete;
46178      if upcase(NAME) = "_DATAOBS_" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_DATAOBS_" then HIDE = "N";
46179      if upcase(NAME) = "B_SUM_LABOR_FORCE_" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "B_SUM_LABOR_FORCE_" then HIDE = "N";
46180      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable SCOREVAR is uninitialized.
NOTE: There were 4 observations read from the data set WORK._TEMP2.
NOTE: There were 9 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.SCORE_EMINPUTVARS has 8 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
46181      proc sort data=EMWS1.Score_EMINPUTVARS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score_EMINPUTVARS nodupkey;
46182      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46183      where CREATOR='' or (NAME="SUM_LABOR_FORCE_POP" and CREATOR='');
MPRINT(EM_DIAGRAM):   where CREATOR='' or (NAME="SUM_LABOR_FORCE_POP" and CREATOR='');
46184      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.SCORE_EMINPUTVARS.
      WHERE (CREATOR=' ') or ((NAME='SUM_LABOR_FORCE_POP') and (CREATOR=' '));
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.SCORE_EMINPUTVARS has 4 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46185      %let em_rootkey=;
46186      %let em_keytype=;
46187      %let em_keylen=;
46188      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
46189      set EMWS1.Ids_cmeta_data;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_cmeta_data;
46190      where role='KEY';
MPRINT(EM_DIAGRAM):   where role='KEY';
46191      call symput('em_rootkey', strip(NAME));
MPRINT(EM_DIAGRAM):   call symput('em_rootkey', strip(NAME));
46192      call symput('em_keytype', strip(TYPE));
MPRINT(EM_DIAGRAM):   call symput('em_keytype', strip(TYPE));
46193      call symput('em_rootlen', strip(put(length, best.)));
MPRINT(EM_DIAGRAM):   call symput('em_rootlen', strip(put(length, best.)));
46194      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_CMETA_DATA.
      WHERE role='KEY';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
46195      filename _pref "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas";
46196      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
46197      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
46198      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas.
46199     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46200     +* Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
46201     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46202     +LABEL EM_SEGMENT = 'Segment';
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment';
46203     +EM_SEGMENT = b_Sum_Labor_Force_;
MPRINT(EM_DIAGRAM):   EM_SEGMENT = b_Sum_Labor_Force_;
46204     +LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
46205     +EM_PREDICTION = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   EM_PREDICTION = P_Sum_Labor_Force_Pop;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
46206      run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
46207      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
46208      quit;
46209      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
46210      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
46211      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
46212      retain ID 1 Node "Score";
MPRINT(EM_DIAGRAM):   retain ID 1 Node "Score";
46213      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
46214      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 2 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46215      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
46216      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46217      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 2 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46218      proc sort data=EMWS1.MdlComp_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
46219      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46220      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
46221      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
46222      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
46223      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
46224      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46225      proc contents data=EMWS1.Score_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Score_train out=_meta(keep=NAME) noprint;
46226      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 13 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
46227      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
46228      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46229      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 13 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
46230      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
46231      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
46232      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46233      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 13 observations read from the data set WORK._META.
NOTE: There were 9 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
46234      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
46235      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 2 rows and 5 columns.
 
46236      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
46237      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
46238      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 2 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS1.SCORE_FCMP has 2 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
46239      filename _pref "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
46240      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
46241      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
46242      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
46243     +if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
46244     +b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
46245     +end;
MPRINT(EM_DIAGRAM):   end;
46246     +else
46247     +if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
46248     +b_Sum_Labor_Force_ = 2;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 2;
46249     +end;
MPRINT(EM_DIAGRAM):   end;
46250     +else
46251     +if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
46252     +b_Sum_Labor_Force_ = 3;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 3;
46253     +end;
MPRINT(EM_DIAGRAM):   end;
46254     +else
46255     +if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
46256     +b_Sum_Labor_Force_ = 4;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 4;
46257     +end;
MPRINT(EM_DIAGRAM):   end;
46258     +else
46259     +if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
46260     +b_Sum_Labor_Force_ = 5;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 5;
46261     +end;
MPRINT(EM_DIAGRAM):   end;
46262     +else
46263     +if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
46264     +b_Sum_Labor_Force_ = 6;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 6;
46265     +end;
MPRINT(EM_DIAGRAM):   end;
46266     +else
46267     +if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
46268     +b_Sum_Labor_Force_ = 7;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 7;
46269     +end;
MPRINT(EM_DIAGRAM):   end;
46270     +else
46271     +if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
46272     +b_Sum_Labor_Force_ = 8;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 8;
46273     +end;
MPRINT(EM_DIAGRAM):   end;
46274     +else
46275     +if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
46276     +b_Sum_Labor_Force_ = 9;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 9;
46277     +end;
MPRINT(EM_DIAGRAM):   end;
46278     +else
46279     +if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
46280     +b_Sum_Labor_Force_ = 10;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 10;
46281     +end;
MPRINT(EM_DIAGRAM):   end;
46282     +else
46283     +if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
46284     +b_Sum_Labor_Force_ = 11;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 11;
46285     +end;
MPRINT(EM_DIAGRAM):   end;
46286     +else
46287     +if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
46288     +b_Sum_Labor_Force_ = 12;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 12;
46289     +end;
MPRINT(EM_DIAGRAM):   end;
46290     +else
46291     +if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
46292     +b_Sum_Labor_Force_ = 13;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 13;
46293     +end;
MPRINT(EM_DIAGRAM):   end;
46294     +else
46295     +if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
46296     +b_Sum_Labor_Force_ = 14;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 14;
46297     +end;
MPRINT(EM_DIAGRAM):   end;
46298     +else
46299     +if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
46300     +b_Sum_Labor_Force_ = 15;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 15;
46301     +end;
MPRINT(EM_DIAGRAM):   end;
46302     +else
46303     +if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
46304     +b_Sum_Labor_Force_ = 16;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 16;
46305     +end;
MPRINT(EM_DIAGRAM):   end;
46306     +else
46307     +if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
46308     +b_Sum_Labor_Force_ = 17;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 17;
46309     +end;
MPRINT(EM_DIAGRAM):   end;
46310     +else
46311     +if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
46312     +b_Sum_Labor_Force_ = 18;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 18;
46313     +end;
MPRINT(EM_DIAGRAM):   end;
46314     +else
46315     +if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
46316     +b_Sum_Labor_Force_ = 19;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 19;
46317     +end;
MPRINT(EM_DIAGRAM):   end;
46318     +else
46319     +do;
MPRINT(EM_DIAGRAM):   else do;
46320     +b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
46321     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
46322      run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46323      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
46324      quit;
46325      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
46326      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
46327      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
46328      retain ID 2 Node "MdlComp";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "MdlComp";
46329      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
46330      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
46331      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
46332      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46333      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46334      proc sort data=EMWS1.Reg2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg2_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
46335      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46336      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG2_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46337      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
46338      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
46339      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
46340      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
46341      proc contents data=EMWS1.MdlComp_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.MdlComp_train out=_meta(keep=NAME) noprint;
46342      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 9 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
46343      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
46344      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46345      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 9 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
46346      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
46347      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
46348      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46349      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 9 observations read from the data set WORK._META.
NOTE: There were 8 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
46350      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
46351      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 1 rows and 5 columns.
 
46352      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
46353      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
46354      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: There were 1 observations read from the data set WORK._TEMPX.
NOTE: 1 observations added.
NOTE: The data set EMWS1.SCORE_FCMP has 3 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
46355      filename _pref "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMPUBLISHSCORE.sas";
46356      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
46357      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
46358      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMPUBLISHSCORE.sas.
46359     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
46360     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
46361     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
46362     +
46363     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
46364     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
46365     +
46366     +
46367     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
46368     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
46369     +
46370     +*** Check Population for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Population for missing values ;
46371     +if missing( Population ) then do;
MPRINT(EM_DIAGRAM):   if missing( Population ) then do;
46372     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
46373     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
46374     +end;
MPRINT(EM_DIAGRAM):   end;
46375     +
46376     +*** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
46377     +drop _0_0 _0_1 _0_2 ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 _0_2 ;
46378     +if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
46379     +   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
46380     +   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
46381     +   _0_2 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
46382     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
46383     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
46384     +end;
MPRINT(EM_DIAGRAM):   end;
46385     +else do;
MPRINT(EM_DIAGRAM):   else do;
46386     +   length _dm19 $ 19; drop _dm19 ;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
46387     +   %DMNORMCP( Age_group , _dm19 )
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
NOTE: Numeric value converted to character for argument 1 of 'DMNORM' operation.
46388     +   if _dm19 = '45 TO 64'  then do;
MPRINT(EM_DIAGRAM):   if _dm19 = '45 TO 64' then do;
46389     +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
46390     +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
46391     +      _0_2 = 1;
MPRINT(EM_DIAGRAM):   _0_2 = 1;
46392     +   end;
MPRINT(EM_DIAGRAM):   end;
46393     +   else if _dm19 = '65+'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '65+' then do;
46394     +      _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
46395     +      _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
46396     +      _0_2 = -1;
MPRINT(EM_DIAGRAM):   _0_2 = -1;
46397     +   end;
MPRINT(EM_DIAGRAM):   end;
46398     +   else if _dm19 = '16 TO 24'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
46399     +      _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
46400     +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
46401     +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
46402     +   end;
MPRINT(EM_DIAGRAM):   end;
46403     +   else if _dm19 = '25 TO 44'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
46404     +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
46405     +      _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
46406     +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
46407     +   end;
MPRINT(EM_DIAGRAM):   end;
46408     +   else do;
MPRINT(EM_DIAGRAM):   else do;
46409     +      _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
46410     +      _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
46411     +      _0_2 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
46412     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
46413     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
46414     +   end;
MPRINT(EM_DIAGRAM):   end;
46415     +end;
MPRINT(EM_DIAGRAM):   end;
46416     +
46417     +*** Generate dummy variables for Industry ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Industry ;
46418     +drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
46419     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
46420     +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
46421     +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
46422     +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
46423     +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
46424     +if missing( Industry ) then do;
MPRINT(EM_DIAGRAM):   if missing( Industry ) then do;
46425     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
46426     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
46427     +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
46428     +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
46429     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
46430     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
46431     +end;
MPRINT(EM_DIAGRAM):   end;
46432     +else do;
MPRINT(EM_DIAGRAM):   else do;
46433     +   length _dm32 $ 32; drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
46434     +   length _dm111 $ 111; drop _dm111;
MPRINT(EM_DIAGRAM):   length _dm111 $ 111;
MPRINT(EM_DIAGRAM):   drop _dm111;
46435     +   _dm111 = put( Industry , $CHAR111. );
MPRINT(EM_DIAGRAM):   _dm111 = put( Industry , $CHAR111. );
46436     +   %DMNORMCP( _dm111, _dm32 )
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
46437     +   if _dm32 = 'SERVICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   if _dm32 = 'SERVICE OCCUPATIONS' then do;
46438     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
46439     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
46440     +      _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
46441     +      _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
46442     +   end;
MPRINT(EM_DIAGRAM):   end;
46443     +   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
46444     +      _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
46445     +   end;
MPRINT(EM_DIAGRAM):   end;
46446     +   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
46447     +      _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
46448     +   end;
MPRINT(EM_DIAGRAM):   end;
46449     +   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
46450     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
46451     +   end;
MPRINT(EM_DIAGRAM):   end;
46452     +   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
46453     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
46454     +   end;
MPRINT(EM_DIAGRAM):   end;
46455     +   else do;
MPRINT(EM_DIAGRAM):   else do;
46456     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
46457     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
46458     +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
46459     +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
46460     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
46461     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
46462     +   end;
MPRINT(EM_DIAGRAM):   end;
46463     +end;
MPRINT(EM_DIAGRAM):   end;
46464     +
46465     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
46466     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
46467     +   _LP0 =     6470696.42857143;
MPRINT(EM_DIAGRAM):   _LP0 = 6470696.42857143;
46468     +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
46469     +end;
MPRINT(EM_DIAGRAM):   end;
46470     +
46471     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
46472     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
46473     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
46474     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
46475     +
46476     +***  Effect: Population*Age_group*Industry ;
MPRINT(EM_DIAGRAM):   *** Effect: Population*Age_group*Industry ;
46477     +_TEMP = Population ;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
46478     +_LP0 = _LP0 + (   -0.11715613953136) * _TEMP * _0_0 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.11715613953136) * _TEMP * _0_0 * _1_0;
46479     +_LP0 = _LP0 + (    0.02700341050736) * _TEMP * _0_0 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02700341050736) * _TEMP * _0_0 * _1_1;
46480     +_LP0 = _LP0 + (    0.01251898117875) * _TEMP * _0_0 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01251898117875) * _TEMP * _0_0 * _1_2;
46481     +_LP0 = _LP0 + (    0.01863889821193) * _TEMP * _0_0 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01863889821193) * _TEMP * _0_0 * _1_3;
46482     +_LP0 = _LP0 + (    0.09663568488618) * _TEMP * _0_1 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09663568488618) * _TEMP * _0_1 * _1_0;
46483     +_LP0 = _LP0 + (   -0.03979851587655) * _TEMP * _0_1 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03979851587655) * _TEMP * _0_1 * _1_1;
46484     +_LP0 = _LP0 + (   -0.03370616598682) * _TEMP * _0_1 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03370616598682) * _TEMP * _0_1 * _1_2;
46485     +_LP0 = _LP0 + (    0.00628489271812) * _TEMP * _0_1 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00628489271812) * _TEMP * _0_1 * _1_3;
46486     +_LP0 = _LP0 + (    0.09152611804654) * _TEMP * _0_2 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09152611804654) * _TEMP * _0_2 * _1_0;
46487     +_LP0 = _LP0 + (   -0.03738941285564) * _TEMP * _0_2 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03738941285564) * _TEMP * _0_2 * _1_1;
46488     +_LP0 = _LP0 + (   -0.02229371492902) * _TEMP * _0_2 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02229371492902) * _TEMP * _0_2 * _1_2;
46489     +_LP0 = _LP0 + (    0.00483071597825) * _TEMP * _0_2 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00483071597825) * _TEMP * _0_2 * _1_3;
46490     +
46491     +***  Effect: Age_group ;
MPRINT(EM_DIAGRAM):   *** Effect: Age_group ;
46492     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
46493     +_LP0 = _LP0 + (   -1151827.58078611) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1151827.58078611) * _TEMP * _0_0;
46494     +_LP0 = _LP0 + (    3344383.07340614) * _TEMP * _0_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3344383.07340614) * _TEMP * _0_1;
46495     +_LP0 = _LP0 + (    1719019.78617864) * _TEMP * _0_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1719019.78617864) * _TEMP * _0_2;
46496     +
46497     +***  Effect: Industry ;
MPRINT(EM_DIAGRAM):   *** Effect: Industry ;
46498     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
46499     +_LP0 = _LP0 + (    3665917.37954249) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3665917.37954249) * _TEMP * _1_0;
46500     +_LP0 = _LP0 + (   -2802842.40028867) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2802842.40028867) * _TEMP * _1_1;
46501     +_LP0 = _LP0 + (    -2038406.8909291) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2038406.8909291) * _TEMP * _1_2;
46502     +_LP0 = _LP0 + (    1644635.92898508) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1644635.92898508) * _TEMP * _1_3;
46503     +
46504     +***  Effect: Population ;
MPRINT(EM_DIAGRAM):   *** Effect: Population ;
46505     +_TEMP = Population ;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
46506     +_LP0 = _LP0 + (    0.10026222163702 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.10026222163702 * _TEMP);
46507     +*--- Intercept ---*;
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
46508     +_LP0 = _LP0 + (    1131306.73108067);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1131306.73108067);
46509     +
46510     +REG2DR1:
46511     +
46512     +*** Predicted Value;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Predicted Value;
46513     +label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
46514     +P_Sum_Labor_Force_Pop = _LP0;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = _LP0;
46515     +
46516     +
46517     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
46518     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
46519     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
46520      run;
 
NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
46521      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
46522      quit;
46523      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
46524      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
46525      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
46526      retain ID 3 Node "Reg2";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "Reg2";
46527      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
46528      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 86 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 86 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
46529      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
46530      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46531      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 86 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 86 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
46532      proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
46533      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46534      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.TRANS_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
46535      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
46536      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
46537      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
46538      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
46539      proc contents data=EMWS1.Reg2_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Reg2_train out=_meta(keep=NAME) noprint;
46540      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._META has 8 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
46541      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
46542      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46543      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 8 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
46544      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
46545      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
46546      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46547      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 8 observations read from the data set WORK._META.
NOTE: There were 5 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
46548      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
46549      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 26 rows and 5 columns.
 
46550      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
46551      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
46552      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: There were 26 observations read from the data set WORK._TEMPX.
NOTE: 26 observations added.
NOTE: The data set EMWS1.SCORE_FCMP has 29 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
46553      %macro varDept(fcmpdata=,id=);
46554      %global nobs&id scoreFlag&id;
46555      %let scoreFlag&id = 0;
46556      %if &id=1 or ^&fcmpStart %then %do;
46557      proc sort data=&fcmpdata out=_temp&id nodupkey;
46558      by NAME;
46559      %if EM_SEGMENT EM_PREDICTION ne %then %do;
46560      where id=&id and (LHS in( %let j=1;
46561      %do %while(%scan(EM_SEGMENT EM_PREDICTION, &j) ne );
46562      %let var = %scan(EM_SEGMENT EM_PREDICTION, &j);
46563      "&var" %let j = %eval(&j+1);
46564      %end;
46565      ) or substr(LHS, 1, 3)='EM_');
46566      %end;
46567      %else %do;
46568      where id=&id and substr(LHS, 1, 3)='EM_';
46569      %end;
46570      run;
46571      %let dsid = %sysfunc(open(_temp&id));
46572      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
46573      %let dsid = %sysfunc(close(&dsid));
46574      %if &&nobs&id %then %do;
46575      %let scoreFlag&id = 1;
46576      %let fcmpStart = 1;
46577      %end;
46578      %else %let fcmpStart = 0;
46579      %end;
46580      %else %do;
46581      proc sort data=&fcmpdata out=_tempid;
46582      where id=&id;
46583      by LHS;
46584      run;
46585      %let dsid = %sysfunc(open(_tempid));
46586      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
46587      %let dsid = %sysfunc(close(&dsid));
46588      %if ^&&nobs&id %then %do;
46589      proc datasets lib=work nolist;
46590      delete _tempid;
46591      run;
46592      quit;
46593      %end;
46594      %else %do;
46595      data _tempAll;
46596      set %let j=%eval(&id-1);
46597      %do x=1 %to &j;
46598      %if &&nobs&x %then %do;
46599      _temp&x %end;
46600      %end;
46601      ;
46602      run;
46603      proc sql;
46604      create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
46605      quit;
46606      data _temp&id;
46607      set _temp&id;
46608      where LHS ne '' and NAME ne '' and Node ne '';
46609      run;
46610      proc datasets lib=work nolist;
46611      delete _tempAll;
46612      run;
46613      %let dsid = %sysfunc(open(_temp&id));
46614      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
46615      %let dsid = %sysfunc(close(&dsid));
46616      %if ^&&nobs&id %then %do;
46617      proc datasets lib=work nolist;
46618      delete _temp&id;
46619      run;
46620      quit;
46621      %end;
46622      %else %do;
46623      %let scoreFlag&id = 1;
46624      data _temp&id;
46625      set _temp&id;
46626      where LHS ne NAME and node ne '';
46627      run;
46628      %let dsid = %sysfunc(open(_temp&id));
46629      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
46630      %let dsid = %sysfunc(close(&dsid));
46631      %if ^&&nobs&id %then %do;
46632      proc datasets lib=work nolist;
46633      delete _temp&id;
46634      run;
46635      quit;
46636      %end;
46637      %else %do;
46638      proc sort data=_temp&id nodupkey;
46639      by LHS NAME;
46640      run;
46641      %end;
46642      %end;
46643      %end;
46644      %end;
46645      %mend varDept;
46646      %macro optCode(outdata=);
46647      %global fcmpStart;
46648      %let fcmpStart = 0;
46649      %let outputVars = EM_SEGMENT EM_PREDICTION;
46650      %let NumNodes=7;
46651      %do k=1 %to &NumNodes;
46652      %vardept(fcmpdata=&outdata, id=&k);
46653      %end;
46654      %mend optCode;
46655      %optcode(outData=EMWS1.Score_FCMP);
MPRINT(EM_DIAGRAM):
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and (LHS in( "EM_SEGMENT" "EM_PREDICTION" ) or substr(LHS, 1, 3)='EM_');
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE (id=1) and (LHS in ('EM_PREDICTION', 'EM_SEGMENT') or (SUBSTR(LHS, 1, 3)='EM_'));
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP1 has 2 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=2;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=2;
NOTE: The data set WORK._TEMPID has 1 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP1.
NOTE: The data set WORK._TEMPALL has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp2 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP2 created, with 1 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp2 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 1 observations read from the data set WORK._TEMP2.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: There were 26 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 26 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 ;
MPRINT(VARDEPT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMP1.
NOTE: There were 1 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 3 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp3 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP3 created, with 6 rows and 3 columns.
 
MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP3 has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPALL (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP3 has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc sort data=_temp3 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;
 
NOTE: There were 6 observations read from the data set WORK._TEMP3.
NOTE: 3 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP3 has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=7;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=7;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;
 
NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine Score Inputs;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\OPTIMIZEDCODE.sas";
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: WINDOWS-MLD7D7P;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling;
MPRINT(EM_DIAGRAM):   * Project Name: Labor Force Model;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Labor Force;
MPRINT(EM_DIAGRAM):   * Generated by: student;
MPRINT(EM_DIAGRAM):   * Date: 10DEC2019:15:48:57;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Part;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Regression;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * NODE: Reg2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Check Population for missing values ;
MPRINT(EM_DIAGRAM):   if missing( Population ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 _0_2 ;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm19 = '45 TO 64' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '65+' then do;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Industry ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( Industry ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm111 $ 111;
MPRINT(EM_DIAGRAM):   drop _dm111;
MPRINT(EM_DIAGRAM):   _dm111 = put( Industry , $CHAR111. );
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm32 = 'SERVICE OCCUPATIONS' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _LP0 = 6470696.42857143;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: Population*Age_group*Industry ;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.11715613953136) * _TEMP * _0_0 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02700341050736) * _TEMP * _0_0 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01251898117875) * _TEMP * _0_0 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01863889821193) * _TEMP * _0_0 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09663568488618) * _TEMP * _0_1 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03979851587655) * _TEMP * _0_1 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03370616598682) * _TEMP * _0_1 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00628489271812) * _TEMP * _0_1 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09152611804654) * _TEMP * _0_2 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03738941285564) * _TEMP * _0_2 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02229371492902) * _TEMP * _0_2 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00483071597825) * _TEMP * _0_2 * _1_3;
MPRINT(EM_DIAGRAM):   *** Effect: Age_group ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1151827.58078611) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3344383.07340614) * _TEMP * _0_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1719019.78617864) * _TEMP * _0_2;
MPRINT(EM_DIAGRAM):   *** Effect: Industry ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3665917.37954249) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2802842.40028867) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2038406.8909291) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1644635.92898508) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   *** Effect: Population ;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.10026222163702 * _TEMP);
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1131306.73108067);
MPRINT(EM_DIAGRAM):   REG2DR1: *** Predicted Value;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = _LP0;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Model Compare Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: MdlComp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = b_Sum_Labor_Force_;
MPRINT(EM_DIAGRAM):   LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   EM_PREDICTION = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   filename _pref;
MPRINT(EM_DIAGRAM):   data _temp;
MPRINT(EM_DIAGRAM):   set _temp;
MPRINT(EM_DIAGRAM):   length UNAME $32;
MPRINT(EM_DIAGRAM):   UNAME = upcase(RHS);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp(keep=UNAME) NODUPKEY;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
46971      %let validvarany = 0;
46972      data _temp2;
MPRINT(EM_DIAGRAM):    data _temp2;
46973      set EMWS1.Score_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   set EMWS1.Score_EMINPUTVARS;
46974      length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
46975      UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
46976      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.SCORE_EMINPUTVARS.
NOTE: The data set WORK._TEMP2 has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
46977      proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
46978      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
46979      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 4 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
46980      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
46981      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
46982      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
46983      drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
46984      length SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length SCOREVAR $1;
46985      label SCOREVAR = "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreVar_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SCOREVAR = "Used in Score Code";
46986      SCOREVAR='Y';
MPRINT(EM_DIAGRAM):   SCOREVAR='Y';
46987      if ROLE='TARGET' then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   if ROLE='TARGET' then SCOREVAR='N';
46988      else if UNAME=:"EM_" then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   else if UNAME=:"EM_" then SCOREVAR='N';
46989      if (_a and _b) or ROLE='TARGET' then do;
MPRINT(EM_DIAGRAM):   if (_a and _b) or ROLE='TARGET' then do;
46990      if notname(trim(UNAME)) or kcount(UNAME) then do;
MPRINT(EM_DIAGRAM):   if notname(trim(UNAME)) or kcount(UNAME) then do;
46991      call symput('validvarany', '1');
MPRINT(EM_DIAGRAM):   call symput('validvarany', '1');
46992      end;
MPRINT(EM_DIAGRAM):   end;
46993      output;
MPRINT(EM_DIAGRAM):   output;
46994      end;
MPRINT(EM_DIAGRAM):   end;
46995      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP2.
NOTE: There were 19 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP2 has 4 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
46996      proc sort data=_temp2 out=EMWS1.Score_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2 out=EMWS1.Score_EMINPUTVARS;
46997      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46998      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._TEMP2.
NOTE: The data set EMWS1.SCORE_EMINPUTVARS has 4 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   proc contents data=SASUSER.OG_LABOR_JOIN noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpvvn "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD22040_WINDOWS-MLD7D7P_\Prc2\DROPVVN.sas";
MPRINT(EM_DIAGRAM):   data _originalvar;
MPRINT(EM_DIAGRAM):   file _drpvvn;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   if notname(trim(NAME)) or kcount(NAME) or ktrim(substr(NAME, 1, 1)) in('1','2','3','4','5','6','7','8','9','0') then do;
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   call symput('_vvnflag', '1');
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else output;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD22040_WINDOWS-MLD7D7P_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   dsid = open('SASUSER.OG_LABOR_JOIN');
MPRINT(EM_DIAGRAM):   if dsid then do;
MPRINT(EM_DIAGRAM):   call symput('_inputEngine', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   set SASUSER.OG_LABOR_JOIN;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * Host: WINDOWS-MLD7D7P;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling;
MPRINT(EM_DIAGRAM):   * Project Name: Labor Force Model;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Labor Force;
MPRINT(EM_DIAGRAM):   * Generated by: student;
MPRINT(EM_DIAGRAM):   * Date: 10DEC2019:15:48:57;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Part;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Regression;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * NODE: Reg2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Check Population for missing values ;
MPRINT(EM_DIAGRAM):   if missing( Population ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 _0_2 ;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm19 = '45 TO 64' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '65+' then do;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Industry ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( Industry ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm111 $ 111;
MPRINT(EM_DIAGRAM):   drop _dm111;
MPRINT(EM_DIAGRAM):   _dm111 = put( Industry , $CHAR111. );
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm32 = 'SERVICE OCCUPATIONS' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _LP0 = 6470696.42857143;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: Population*Age_group*Industry ;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.11715613953136) * _TEMP * _0_0 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02700341050736) * _TEMP * _0_0 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01251898117875) * _TEMP * _0_0 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01863889821193) * _TEMP * _0_0 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09663568488618) * _TEMP * _0_1 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03979851587655) * _TEMP * _0_1 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03370616598682) * _TEMP * _0_1 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00628489271812) * _TEMP * _0_1 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09152611804654) * _TEMP * _0_2 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03738941285564) * _TEMP * _0_2 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02229371492902) * _TEMP * _0_2 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00483071597825) * _TEMP * _0_2 * _1_3;
MPRINT(EM_DIAGRAM):   *** Effect: Age_group ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1151827.58078611) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3344383.07340614) * _TEMP * _0_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1719019.78617864) * _TEMP * _0_2;
MPRINT(EM_DIAGRAM):   *** Effect: Industry ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3665917.37954249) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2802842.40028867) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2038406.8909291) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1644635.92898508) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   *** Effect: Population ;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.10026222163702 * _TEMP);
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1131306.73108067);
MPRINT(EM_DIAGRAM):   REG2DR1: *** Predicted Value;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = _LP0;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Model Compare Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: MdlComp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment';
MPRINT(EM_DIAGRAM):   EM_SEGMENT = b_Sum_Labor_Force_;
MPRINT(EM_DIAGRAM):   LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   EM_PREDICTION = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   drop 'Age_group'n 'Date'n 'Gender'n 'Industry'n 'Population'n 'Sum_Labor_Force_Pop'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   proc contents data =EMWS1.Score_EMOUTPUTVARS noprint out=EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _drpvvn;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
47356      data EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):    data EMWS1.Score_EMOUTPUTVARS;
47357      set EMWS1.Score_EMOUTPUTVARS(keep=name type label rename=(type=itype));
MPRINT(EM_DIAGRAM):   set EMWS1.Score_EMOUTPUTVARS(keep=name type label rename=(type=itype));
47358      length FUNCTION $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   length FUNCTION $32 name_prefix $8;
47359      if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
47360      else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
47361      drop name_prefix itype;
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
47362      if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
47363      else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') then FUNCTION = 'PREDICT';
47364      else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 'CLASSIFICATION';
47365      else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
47366      else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 'EM_CLASSTARGET') then FUNCTION = 'ASSESS' /* removed EM_ROI */
47367      ;
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 'EM_CLASSTARGET') then FUNCTION = 'ASSESS' ;
47368      else do;
MPRINT(EM_DIAGRAM):   else do;
47369      name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
47370      if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
47371      else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
47372      else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then FUNCTION = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then FUNCTION = 'RESIDUAL';
47373      else if name_prefix ='D' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then FUNCTION = 'DECISION';
47374      else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then FUNCTION = 'ASSESS';
47375      else FUNCTION = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   else FUNCTION = 'TRANSFORM';
47376      end;
MPRINT(EM_DIAGRAM):   end;
47377      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE_EMOUTPUTVARS has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
47378      proc sort data=EMWS1.MdlComp_CMeta_TRAIN out=WORK.META(KEEP=NAME CREATOR);
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.MdlComp_CMeta_TRAIN out=WORK.META(KEEP=NAME CREATOR);
47379      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47380      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
NOTE: The data set WORK.META has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47381      proc sort data=EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score_EMOUTPUTVARS;
47382      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47383      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE_EMOUTPUTVARS has 5 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47384      data EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_EMOUTPUTVARS;
47385      merge WORK.META EMWS1.Score_EMOUTPUTVARS(in=_a);
MPRINT(EM_DIAGRAM):   merge WORK.META EMWS1.Score_EMOUTPUTVARS(in=_a);
47386      label CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))" FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,  NOQUOTE))" TYPE = "%sysfunc(sasmsg(sashelp.dmine,  meta_type_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label CREATOR = "Creator" FUNCTION = "Function" TYPE = "Type";
47387      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47388      if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score";
MPRINT(EM_DIAGRAM):   if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score";
47389      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
47390      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set WORK.META.
NOTE: There were 5 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE_EMOUTPUTVARS has 5 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
47391      %let _cn = %sysfunc(getoption(CENTER));
47392      %let _nb = %sysfunc(getoption(NUMBER));
47393      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
47394      title;
MPRINT(EM_DIAGRAM):   title;
47395      proc print data=EMWS1.Score_EMINPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score_EMINPUTVARS noobs label;
47396      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,  NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" CREATOR = "Creator" LABEL = "Label";
47397      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
47398      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreInputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Input Variables";
MPRINT(EM_DIAGRAM):   run;
47399      run;
 
NOTE: There were 4 observations read from the data set EMWS1.SCORE_EMINPUTVARS.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
47400      title10;
MPRINT(EM_DIAGRAM):   title10;
47401      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
47402      %let _cn = %sysfunc(getoption(CENTER));
47403      %let _nb = %sysfunc(getoption(NUMBER));
47404      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
47405      title;
MPRINT(EM_DIAGRAM):   title;
47406      proc print data=EMWS1.Score_EMOUTPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score_EMOUTPUTVARS noobs label;
47407      var NAME FUNCTION CREATOR LABEL;
MPRINT(EM_DIAGRAM):   var NAME FUNCTION CREATOR LABEL;
47408      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))" FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,    NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" LABEL =
47409         "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" FUNCTION = "Function" CREATOR = "Creator" LABEL = "Label";
47410      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
47411      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreOutputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Output Variables";
MPRINT(EM_DIAGRAM):   run;
47412      run;
 
NOTE: There were 5 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The PROCEDURE PRINT printed page 12.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
47413      title10;
MPRINT(EM_DIAGRAM):   title10;
47414      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
47415      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
47416      * Score: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Score: Computing metadata for TRAIN data;
47417      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.SCORE_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score_TRAIN out=WORK.M3U4SQQC noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3U4SQQC;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3U4SQQC(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3U4SQQC;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3U4SQQC;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2WDDRO0 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2WDDRO0;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2WDDRO0;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M08KENUG(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2WDDRO0;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2WDDRO0;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2WDDRO0;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2WDDRO0;
MPRINT(EMADVISECOLUMNS):   set WORK.M2WDDRO0;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.MdlComp_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "P_Sum_Labor_Force_Pop" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.SCORE_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: View EMWS1.SCORE_TEST.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
47765      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
47766      * Score: Computing metadata for SCORE data;
MPRINT(EM_DIAGRAM):   * Score: Computing metadata for SCORE data;
47767      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for SCORE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score_SCORE out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score_SCORE');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS1.Score_SCORE;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score_SCORE out=WORK.M1NJH1GL noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1NJH1GL;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1NJH1GL(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1NJH1GL;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1NJH1GL;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M12BXK9R NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12BXK9R;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M12BXK9R;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0GUCWB4(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M12BXK9R;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12BXK9R;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M12BXK9R;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12BXK9R;
MPRINT(EMADVISECOLUMNS):   set WORK.M12BXK9R;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Ids2_DATA noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids2_CMeta_DATA out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_CMeta_SCORE;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "P_Sum_Labor_Force_Pop" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 10, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:48:59" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                December 10, 2019
Time:                15:48:59
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1D30_VZ "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1D30_VZ new;
MPRINT(EM_DIAGRAM):   run;
48146      data WORK.SCOREFREQMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREFREQMETA;
48147      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
48148      NAME="b_Sum_Labor_Force_";
MPRINT(EM_DIAGRAM):   NAME="b_Sum_Labor_Force_";
48149      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
48150      LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
48151      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
48152      output;
MPRINT(EM_DIAGRAM):   output;
48153      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREFREQMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48154      data WORK.SCOREHISTMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREHISTMETA;
48155      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
48156      NAME="P_Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   NAME="P_Sum_Labor_Force_Pop";
48157      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
48158      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
48159      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
48160      output;
MPRINT(EM_DIAGRAM):   output;
48161      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREHISTMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.10 seconds
 
48162      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
48163      ods output onewayfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output onewayfreqs=WORK.TEMPFREQ;
48164      proc freq data = EMWS1.MdlComp_TRAIN order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS1.MdlComp_TRAIN order=formatted addnames;
48165      table b_Sum_Labor_Force_ / missing;
MPRINT(EM_DIAGRAM):   table b_Sum_Labor_Force_ / missing;
48166      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 112 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 112 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: There were 112 observations read from the data set EMWS1.REG2_TRAIN.
NOTE: The data set WORK.TEMPFREQ has 20 observations and 8 variables.
NOTE: There were 112 observations read from the data set EMWS1.MDLCOMP_TRAIN.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
48167      quit;
48168      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
48169      data WORK.Score_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data WORK.Score_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
48170      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ =
48171         "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" Type = "Type" _X_ = "Numeric Value" _XLABEL_ = "Formatted Value" COUNT = "Frequency Count" PERCENT = "Percent";
48172      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
48173      varnum = varnum(dsid, 'VARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'VARIABLE');
48174      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
48175      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
48176      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
48177      length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
MPRINT(EM_DIAGRAM):   length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
48178      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
48179      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
48180      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
48181      percent= getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent= getvarn(dsid, pvarnum);
48182      vvarnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   vvarnum = varnum(dsid, _VARIABLE_);
48183      type = vartype(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, vvarnum);
48184      fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
MPRINT(EM_DIAGRAM):   fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
48185      _XLABEL_ = left(getvarc(dsid, fvarnum));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(getvarc(dsid, fvarnum));
48186      _X_ = .;
MPRINT(EM_DIAGRAM):   _X_ = .;
48187      if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
48188      output;
MPRINT(EM_DIAGRAM):   output;
48189      end;
MPRINT(EM_DIAGRAM):   end;
48190      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
48191      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCORE_BAR has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
48192      proc sort data=WORK.Score_BAR NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Score_BAR NOTHREADS;
48193      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
48194      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.SCORE_BAR.
NOTE: The data set WORK.SCORE_BAR has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48195      proc sort data=WORK.M3PR28MZ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M3PR28MZ;
48196      by Name;
MPRINT(EM_DIAGRAM):   by Name;
48197      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M3PR28MZ.
NOTE: The data set WORK.M3PR28MZ has 1 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48198      data WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   data WORK.Score_BAR;
48199      merge WORK.Score_BAR(in=_a) WORK.M3PR28MZ(keep=Name Role rename=(Name=_Variable_));
MPRINT(EM_DIAGRAM):   merge WORK.Score_BAR(in=_a) WORK.M3PR28MZ(keep=Name Role rename=(Name=_Variable_));
48200      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
48201      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Role";
48202      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
48203      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.SCORE_BAR.
NOTE: There were 1 observations read from the data set WORK.M3PR28MZ.
NOTE: The data set WORK.SCORE_BAR has 20 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48204      data WORK.Score_BAR;
MPRINT(EM_DIAGRAM):    data WORK.Score_BAR;
48205      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48206      retain DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN";
48207      set WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   set WORK.Score_BAR;
48208      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.SCORE_BAR.
NOTE: The data set WORK.SCORE_BAR has 20 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48209      proc append base=EMWS1.Score_BAR data=WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_BAR data=WORK.Score_BAR;
48210      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_BAR to EMWS1.SCORE_BAR.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 20 observations read from the data set WORK.SCORE_BAR.
NOTE: The data set EMWS1.SCORE_BAR has 20 observations and 8 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48211      %var_profile(DATA=EMWS1.MdlComp_TRAIN, OUTPUT=work.Score_VARHIST, METADATA=WORK.SCOREHISTMETA, COMPUTESTAT=N, BINDATA=_bindata, STAT=_STAT, PCTLSTAT=work.Score_SUMDATA, FREQ=, BIN=Y, NUMBARS= 16);
MPRINT(EM_DIAGRAM):
*------------------------------------------------------------*
* Score: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set WORK.SCOREHISTMETA(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK.SCOREHISTMETA.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   length _VARS $80;
MPRINT(VAR_PROFILE):   retain _vars;
MPRINT(VAR_PROFILE):   if _n_ =1 then put '%macro _vars;';
MPRINT(VAR_PROFILE):   set WORK.SCOREHISTMETA end=eof;
MPRINT(VAR_PROFILE):   where LEVEL = 'INTERVAL' or ROLE='FREQ';
MPRINT(VAR_PROFILE):   if ROLE='FREQ' then call symput('FREQ', trim(NAME));
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   if length(strip(_vars)) + length(strip(NAME)) + 1 <80 then _vars = strip(_vars)!! ' ' !!strip(NAME);
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   put _Vars;
MPRINT(VAR_PROFILE):   _vars = strip(NAME);
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   if eof then do;
MPRINT(VAR_PROFILE):   put _Vars;
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Tue, Dec 10, 2019 03:48:59 PM,
      Last Modified=Tue, Dec 10, 2019 03:48:59 PM,
      Filename=C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD22040_WINDOWS-MLD7D7P_\Prc2\macros.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=WINDOWS-MLD7D7P\student,
      File Size=             5KB,
      File Size (bytes)=5120
 
NOTE: 3 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 21.
NOTE: There were 1 observations read from the data set WORK.SCOREHISTMETA.
      WHERE (LEVEL='INTERVAL') or (ROLE='FREQ');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
48212     +%macro _vars;
48213     +P_Sum_Labor_Force_Pop
48214     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
*------------------------------------------------------------*
* computingmidpoints_note
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename fref catalog 'work.em.profileformat.source';
MPRINT(VAR_PROFILE):   proc dmdb data=EMWS1.MdlComp_TRAIN(obs=1000000) classout=_CLASSOUT maxlevel=17;
MPRINT(VAR_PROFILE):   class
MPRINT(_VARS):   P_Sum_Labor_Force_Pop
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 112   Memory used = 511K.
NOTE: There were 112 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 112 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
NOTE: There were 112 observations read from the data set EMWS1.REG2_TRAIN.
NOTE: There were 112 observations read from the data set EMWS1.MDLCOMP_TRAIN.
NOTE: The data set WORK._CLASSOUT has 17 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(VAR_PROFILE):   proc freq data=_CLASSOUT ORDER=DATA noprint;
MPRINT(VAR_PROFILE):   table NAME / OUT = _COUNT(where=(COUNT<17));
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 17 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._COUNT has 0 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_COUNT(keep=NAME COUNT rename=(COUNT=_NUMCLASSBINS_));
MPRINT(VAR_PROFILE):   by NAME;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._COUNT has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_CLASSOUT;
MPRINT(VAR_PROFILE):   by NAME;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 17 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 17 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc transpose data=_CLASSOUT out=_DISCRETEMID(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
MPRINT(VAR_PROFILE):   var NRAW;
MPRINT(VAR_PROFILE):   by NAME;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 17 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._DISCRETEMID has 1 observations and 18 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc delete data=WORK._CLASSOUT;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   dsid = open('_DISCRETEMID');
MPRINT(VAR_PROFILE):   if dsid then do;
MPRINT(VAR_PROFILE):   call symput('NUMCLASSBARS', left(trim(put(attrn(dsid, 'NVARS')-1, best12.))));
MPRINT(VAR_PROFILE):   dsid = close(dsid);
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _DISCRETEMID;
MPRINT(VAR_PROFILE):   merge _DISCRETEMID _COUNT(in=_b rename=(NAME=VARIABLE));
MPRINT(VAR_PROFILE):   keep VARIABLE _MIDPOINT1--_MIDPOINT17 _NUMCLASSBINS_;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   if _b then output;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK._DISCRETEMID.
NOTE: There were 0 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._DISCRETEMID has 0 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data _EMVARDIST / view=_EMVARDIST;
MPRINT(VAR_PROFILE):   set EMWS1.MdlComp_TRAIN(keep
MPRINT(VAR_PROFILE):  =P_Sum_Labor_Force_Pop obs=1000000);
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA STEP view saved on file WORK._EMVARDIST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
 
 
MPRINT(VAR_PROFILE):   proc stdize data=_EMVARDIST outstat=work.Score_SUMDATA out=_null_ pctlpts=(0 5 25 50 75 95 100);
MPRINT(VAR_PROFILE):   var
MPRINT(_VARS):   P_Sum_Labor_Force_Pop
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 112 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 112 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 112 observations read from the data set EMWS1.REG2_TRAIN.
NOTE: View WORK._EMVARDIST.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.20 seconds
 
NOTE: There were 112 observations read from the data set EMWS1.MDLCOMP_TRAIN.
NOTE: There were 112 observations read from the data set WORK._EMVARDIST.
NOTE: The data set WORK.SCORE_SUMDATA has 15 observations and 2 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.24 seconds
      cpu time            0.21 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=WORK NOLIST;
MPRINT(VAR_PROFILE):   delete _EMVARDIST / mt=view;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Deleting WORK._EMVARDIST (memtype=VIEW).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc transpose data=work.Score_SUMDATA out=_bindata(rename=(_NAME_=VARIABLE COL1=MIN COL2=P5 COL3=P95 COL4=MAX));
MPRINT(VAR_PROFILE):   where _type_ in('P0', 'P5', 'P95', 'P100');
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 4 observations read from the data set WORK.SCORE_SUMDATA.
      WHERE _type_ in ('P0', 'P100', 'P5', 'P95');
NOTE: The data set WORK._BINDATA has 1 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc sort data=_bindata;
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK._BINDATA.
NOTE: The data set WORK._BINDATA has 1 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   data _bindata;
MPRINT(VAR_PROFILE):   set _bindata;
MPRINT(VAR_PROFILE):   length Format $12;
MPRINT(VAR_PROFILE):   array _midpoint{28};
MPRINT(VAR_PROFILE):   array _bounds{28};
MPRINT(VAR_PROFILE):   if (max - min)>1e-10 then do;
MPRINT(VAR_PROFILE):   step = abs(P95-P5)/16;
MPRINT(VAR_PROFILE):   lstep = abs(p5- min)/5;
MPRINT(VAR_PROFILE):   ustep = abs(max-p95)/5;
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   if lstep<=step and ustep<=step then do;
MPRINT(VAR_PROFILE):   step = abs(MIN-MAX)/16;
MPRINT(VAR_PROFILE):   START=MIN;
MPRINT(VAR_PROFILE):   do i=1 to 16;
MPRINT(VAR_PROFILE):   _bounds(i) = MIN + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
MPRINT(VAR_PROFILE):   _midpoint(i) = MIN+ (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   if lstep<=step then do;
MPRINT(VAR_PROFILE):   step = abs(MIN-P95)/16;
MPRINT(VAR_PROFILE):   do i=1 to 16;
MPRINT(VAR_PROFILE):   _bounds(i) = MIN + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
MPRINT(VAR_PROFILE):   _midpoint(i) = MIN+ (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   do i=1 to 5;
MPRINT(VAR_PROFILE):   numbars = 16 + i;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P95 + i*ustep;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   do i=1 to 5;
MPRINT(VAR_PROFILE):   _bounds(i) = P5 - (5-i)*lstep;
MPRINT(VAR_PROFILE):   if abs(_bounds{i})< 1e-10 then _bounds(i)= 0;
MPRINT(VAR_PROFILE):   _midpoint(i) = P5 - (5 - i + 0.5)*lstep - abs(lstep-step)/2;
MPRINT(VAR_PROFILE):   if abs(_midpoint{i})< 1e-10 then _midpoint(i)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   if ustep<= step then do;
MPRINT(VAR_PROFILE):   step = abs(P5-MAX)/16;
MPRINT(VAR_PROFILE):   do i=1 to 16;
MPRINT(VAR_PROFILE):   numbars = i+5;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P5 + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P5 + (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   do i=1 to 16;
MPRINT(VAR_PROFILE):   numbars = i+5;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P5 + i*step;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P5 + (i-0.5)*step;
MPRINT(VAR_PROFILE):   if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   do i=1 to 5;
MPRINT(VAR_PROFILE):   numbars = 16+5+i;
MPRINT(VAR_PROFILE):   _bounds(numbars) = P95 + i*ustep;
MPRINT(VAR_PROFILE):   if abs(_bounds{numbars})< 1e-10 then _bounds(numbars)= 0;
MPRINT(VAR_PROFILE):   _midpoint(numbars) = P95 + (i-0.5)*ustep + abs(ustep-step)/2;
MPRINT(VAR_PROFILE):  if abs(_midpoint{numbars})< 1e-10 then _midpoint(numbars)= 0;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   _bounds(1) = MIN;
MPRINT(VAR_PROFILE):   _midpoint(1) = MIN;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   Format = 'F'!!trim(left(put(_n_,6.)))!!'_';
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK._BINDATA.
NOTE: The data set WORK._BINDATA has 1 observations and 69 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data _bindata;
MPRINT(VAR_PROFILE):   merge _bindata _DISCRETEMID(in = _b);
MPRINT(VAR_PROFILE):   by VARIABLE;
MPRINT(VAR_PROFILE):   if _b then _DISCRETE=1;
MPRINT(VAR_PROFILE):   else _DISCRETE=0;
MPRINT(VAR_PROFILE):   run;
 
WARNING: Multiple lengths were specified for the BY variable VARIABLE by input data sets. This might cause unexpected results.
NOTE: There were 1 observations read from the data set WORK._BINDATA.
NOTE: There were 0 observations read from the data set WORK._DISCRETEMID.
NOTE: The data set WORK._BINDATA has 1 observations and 71 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file fref;
MPRINT(VAR_PROFILE):   set _bindata end=eof;
MPRINT(VAR_PROFILE):   array _bounds{26};
MPRINT(VAR_PROFILE):   array _midpoint{26};
MPRINT(VAR_PROFILE):   if _n_=1 then put 'proc format;';
MPRINT(VAR_PROFILE):   put 'value ' Format;
MPRINT(VAR_PROFILE):   if _DISCRETE then do;
MPRINT(VAR_PROFILE):   do i=1 to 16;
MPRINT(VAR_PROFILE):   _MID = _midpoint{i};
MPRINT(VAR_PROFILE):   if _MID ne . and i<= _NUMCLASSBINS_ then put _MID '="' _MID '"';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   put ';';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   if min eq max then do;
MPRINT(VAR_PROFILE):   put 'low - high ="' MIN '";';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   _LB = MIN;
MPRINT(VAR_PROFILE):   _MID = _midpoint{1};
MPRINT(VAR_PROFILE):   _UB = _bounds{1};
MPRINT(VAR_PROFILE):   put 'LOW -' _UB '="' _MID '"';
MPRINT(VAR_PROFILE):   do i=1 to 26-1;
MPRINT(VAR_PROFILE):   _LB = _bounds{i};
MPRINT(VAR_PROFILE):   j=i+1;
MPRINT(VAR_PROFILE):   _MID = _midpoint{j};
MPRINT(VAR_PROFILE):   _UB = _bounds{j};
MPRINT(VAR_PROFILE):   if (_UB ne .) and (_LB ne _UB) then do;
MPRINT(VAR_PROFILE):   if _UB>=MAX then put _LB '-HIGH="' _MID '"';
MPRINT(VAR_PROFILE):   else put _LB '-' _UB '="' _MID '"';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   put ';';
MPRINT(VAR_PROFILE):   if eof then put 'run;';
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file FREF is:
      Catalog Name=WORK.EM.PROFILEFORMAT.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Tue, Dec 10, 2019 03:49:00 PM,
      Last Modified=Tue, Dec 10, 2019 03:49:00 PM,
      Filename=C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD22040_WINDOWS-MLD7D7P_\Prc2\em.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=WINDOWS-MLD7D7P\student,
      File Size=             5KB,
      File Size (bytes)=5120
 
NOTE: 20 records were written to the file FREF.
      The minimum record length was 1.
      The maximum record length was 43.
NOTE: There were 1 observations read from the data set WORK._BINDATA.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file FREF is file WORK.EM.PROFILEFORMAT.SOURCE.
48215     +proc format;
MPRINT(VAR_PROFILE):   proc format;
48216     +value F1_
48217     +LOW -1272400.9591 ="499299.6204 "
48218     +1272400.9591 -2818603.6365 ="2045502.2978 "
48219     +2818603.6365 -4364806.3138 ="3591704.9751 "
48220     +4364806.3138 -5911008.9912 ="5137907.6525 "
48221     +5911008.9912 -7457211.6686 ="6684110.3299 "
48222     +7457211.6686 -9003414.3459 ="8230313.0072 "
48223     +9003414.3459 -10549617.023 ="9776515.6846 "
48224     +10549617.023 -12095819.701 ="11322718.362 "
48225     +12095819.701 -13642022.378 ="12868921.039 "
48226     +13642022.378 -15188225.055 ="14415123.717 "
48227     +15188225.055 -16734427.733 ="15961326.394 "
48228     +16734427.733 -18280630.41 ="17507529.071 "
48229     +18280630.41 -19826833.087 ="19053731.749 "
48230     +19826833.087 -21373035.765 ="20599934.426 "
48231     +21373035.765 -22919238.442 ="22146137.104 "
48232     +22919238.442 -HIGH="23692339.781 "
48233     +;
MPRINT(VAR_PROFILE):   value F1_ LOW -1272400.9591 ="499299.6204 " 1272400.9591 -2818603.6365 ="2045502.2978 " 2818603.6365 -4364806.3138 ="3591704.9751 " 4364806.3138 -5911008.9912 ="5137907.6525 " 5911008.9912 -7457211.6686 ="6684110.3299 " 7457211.6686
-9003414.3459 ="8230313.0072 " 9003414.3459 -10549617.023 ="9776515.6846 " 10549617.023 -12095819.701 ="11322718.362 " 12095819.701 -13642022.378 ="12868921.039 " 13642022.378 -15188225.055 ="14415123.717 " 15188225.055 -16734427.733 ="15961326.394 "
16734427.733 -18280630.41 ="17507529.071 " 18280630.41 -19826833.087 ="19053731.749 " 19826833.087 -21373035.765 ="20599934.426 " 21373035.765 -22919238.442 ="22146137.104 " 22919238.442 -HIGH="23692339.781 " ;
NOTE: Format F1_ has been output.
MPRINT(VAR_PROFILE):   run;
48234     +run;
 
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename fref;
NOTE: Fileref FREF has been deassigned.
MPRINT(VAR_PROFILE):   data _binneddata / view=_binneddata;
MPRINT(VAR_PROFILE):   set EMWS1.MdlComp_TRAIN(obs=1000000);
MPRINT(VAR_PROFILE):   format P_Sum_Labor_Force_Pop F1_. ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA STEP view saved on file WORK._BINNEDDATA.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.14 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.17 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=_binneddata(obs=1000000) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(VAR_PROFILE):   class
MPRINT(_VARS):   P_Sum_Labor_Force_Pop
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 112   Memory used = 511K.
NOTE: There were 112 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 112 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 112 observations read from the data set EMWS1.REG2_TRAIN.
NOTE: View WORK._BINNEDDATA.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
 
NOTE: There were 112 observations read from the data set EMWS1.MDLCOMP_TRAIN.
NOTE: There were 112 observations read from the data set WORK._BINNEDDATA.
NOTE: The data set WORK._TEMPTAB has 13 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.18 seconds
      cpu time            0.20 seconds
 
 
MPRINT(VAR_PROFILE):   data work.Score_VARHIST;
MPRINT(VAR_PROFILE):   label VALUE = "Value";
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   label COUNT = "Frequency Count";
MPRINT(VAR_PROFILE):   label PERCENT = "Percent";
MPRINT(VAR_PROFILE):   set _temptab;
MPRINT(VAR_PROFILE):   format VALUE 12.3 count;
MPRINT(VAR_PROFILE):   value = inputn(level, 'best12.');
MPRINT(VAR_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 13 observations read from the data set WORK._TEMPTAB.
NOTE: The data set WORK.SCORE_VARHIST has 13 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._MINMAXDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._TEMPTAB (memtype=DATA).
NOTE: Deleting WORK._BINNEDDATA (memtype=VIEW).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
48235      data work.Score_VARHIST;
MPRINT(EM_DIAGRAM):    data work.Score_VARHIST;
48236      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48237      retain DATAROLE "TRAIN" TYPE "";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN" TYPE "";
48238      set work.Score_VARHIST(rename=(VALUE=X));
MPRINT(EM_DIAGRAM):   set work.Score_VARHIST(rename=(VALUE=X));
48239      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.SCORE_VARHIST.
NOTE: The data set WORK.SCORE_VARHIST has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48240      proc append base=work.Score_HIST data=work.Score_VARHIST;
MPRINT(EM_DIAGRAM):   proc append base=work.Score_HIST data=work.Score_VARHIST;
48241      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_VARHIST to WORK.SCORE_HIST.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 13 observations read from the data set WORK.SCORE_VARHIST.
NOTE: The data set WORK.SCORE_HIST has 13 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48242      proc transpose data=work.Score_SUMDATA out=work.Score_SUMDATA( rename=(_NAME_=VARIABLE _LABEL_=LABEL LOCATION=MEAN SCALE=STD P0=MIN P50=MEDIAN P100=MAX));
MPRINT(EM_DIAGRAM):    proc transpose data=work.Score_SUMDATA out=work.Score_SUMDATA( rename=(_NAME_=VARIABLE _LABEL_=LABEL LOCATION=MEAN SCALE=STD P0=MIN P50=MEDIAN P100=MAX));
48243      where _TYPE_ in('LOCATION' 'SCALE' 'N' 'P0' 'P25' 'P50' 'P75' 'P100');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION' 'SCALE' 'N' 'P0' 'P25' 'P50' 'P75' 'P100');
48244      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
48245      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.SCORE_SUMDATA.
      WHERE _TYPE_ in ('LOCATION', 'N', 'P0', 'P100', 'P25', 'P50', 'P75', 'SCALE');
NOTE: The data set WORK.SCORE_SUMDATA has 1 observations and 10 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
48246      data work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   data work.Score_SUMDATA;
48247      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48248      retain DATAROLE "TRAIN" Type "";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN" Type "";
48249      set work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   set work.Score_SUMDATA;
48250      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SCORE_SUMDATA.
NOTE: The data set WORK.SCORE_SUMDATA has 1 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48251      proc append base=WORK.ScoreSTAT data=work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   proc append base=WORK.ScoreSTAT data=work.Score_SUMDATA;
48252      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_SUMDATA to WORK.SCORESTAT.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK.SCORE_SUMDATA.
NOTE: The data set WORK.SCORESTAT has 1 observations and 12 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48253      data WORK.SCOREFREQMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREFREQMETA;
48254      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
48255      NAME="b_Sum_Labor_Force_";
MPRINT(EM_DIAGRAM):   NAME="b_Sum_Labor_Force_";
48256      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
48257      LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
48258      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
48259      output;
MPRINT(EM_DIAGRAM):   output;
48260      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREFREQMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48261      data WORK.SCOREHISTMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREHISTMETA;
48262      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
48263      NAME="P_Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   NAME="P_Sum_Labor_Force_Pop";
48264      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
48265      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
48266      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
48267      output;
MPRINT(EM_DIAGRAM):   output;
48268      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREHISTMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48269      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
48270      ods output onewayfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output onewayfreqs=WORK.TEMPFREQ;
48271      proc freq data = EMWS1.Score_VALIDATE order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS1.Score_VALIDATE order=formatted addnames;
48272      table b_Sum_Labor_Force_ / missing;
MPRINT(EM_DIAGRAM):   table b_Sum_Labor_Force_ / missing;
48273      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.TEMPFREQ has 19 observations and 8 variables.
NOTE: There were 84 observations read from the data set EMWS1.SCORE_VALIDATE.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
48274      quit;
48275      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
48276      data WORK.Score_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data WORK.Score_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
48277      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ =
48278         "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" Type = "Type" _X_ = "Numeric Value" _XLABEL_ = "Formatted Value" COUNT = "Frequency Count" PERCENT = "Percent";
48279      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
48280      varnum = varnum(dsid, 'VARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'VARIABLE');
48281      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
48282      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
48283      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
48284      length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
MPRINT(EM_DIAGRAM):   length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
48285      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
48286      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
48287      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
48288      percent= getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent= getvarn(dsid, pvarnum);
48289      vvarnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   vvarnum = varnum(dsid, _VARIABLE_);
48290      type = vartype(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, vvarnum);
48291      fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
MPRINT(EM_DIAGRAM):   fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
48292      _XLABEL_ = left(getvarc(dsid, fvarnum));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(getvarc(dsid, fvarnum));
48293      _X_ = .;
MPRINT(EM_DIAGRAM):   _X_ = .;
48294      if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
48295      output;
MPRINT(EM_DIAGRAM):   output;
48296      end;
MPRINT(EM_DIAGRAM):   end;
48297      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
48298      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCORE_BAR has 19 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48299      proc sort data=WORK.Score_BAR NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Score_BAR NOTHREADS;
48300      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
48301      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.SCORE_BAR.
NOTE: The data set WORK.SCORE_BAR has 19 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48302      proc sort data=WORK.M20TZG_M;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M20TZG_M;
48303      by Name;
MPRINT(EM_DIAGRAM):   by Name;
48304      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M20TZG_M.
NOTE: The data set WORK.M20TZG_M has 1 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48305      data WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   data WORK.Score_BAR;
48306      merge WORK.Score_BAR(in=_a) WORK.M20TZG_M(keep=Name Role rename=(Name=_Variable_));
MPRINT(EM_DIAGRAM):   merge WORK.Score_BAR(in=_a) WORK.M20TZG_M(keep=Name Role rename=(Name=_Variable_));
48307      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
48308      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Role";
48309      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
48310      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.SCORE_BAR.
NOTE: There were 1 observations read from the data set WORK.M20TZG_M.
NOTE: The data set WORK.SCORE_BAR has 19 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48311      data WORK.Score_BAR;
MPRINT(EM_DIAGRAM):    data WORK.Score_BAR;
48312      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48313      retain DATAROLE "VALIDATE";
MPRINT(EM_DIAGRAM):   retain DATAROLE "VALIDATE";
48314      set WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   set WORK.Score_BAR;
48315      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.SCORE_BAR.
NOTE: The data set WORK.SCORE_BAR has 19 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
48316      proc append base=EMWS1.Score_BAR data=WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_BAR data=WORK.Score_BAR;
48317      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_BAR to EMWS1.SCORE_BAR.
NOTE: There were 19 observations read from the data set WORK.SCORE_BAR.
NOTE: 19 observations added.
NOTE: The data set EMWS1.SCORE_BAR has 39 observations and 8 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
48318      %var_profile(DATA=EMWS1.Score_VALIDATE, OUTPUT=work.Score_VARHIST, METADATA=WORK.SCOREHISTMETA, COMPUTESTAT=N, BINDATA=_bindata, STAT=_STAT, PCTLSTAT=work.Score_SUMDATA, FREQ=, BIN=Y, NUMBARS= 16);
MPRINT(EM_DIAGRAM):
*------------------------------------------------------------*
* Score: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set WORK.SCOREHISTMETA(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK.SCOREHISTMETA.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   length _VARS $80;
MPRINT(VAR_PROFILE):   retain _vars;
MPRINT(VAR_PROFILE):   if _n_ =1 then put '%macro _vars;';
MPRINT(VAR_PROFILE):   set WORK.SCOREHISTMETA end=eof;
MPRINT(VAR_PROFILE):   where LEVEL = 'INTERVAL' or ROLE='FREQ';
MPRINT(VAR_PROFILE):   if ROLE='FREQ' then call symput('FREQ', trim(NAME));
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   if length(strip(_vars)) + length(strip(NAME)) + 1 <80 then _vars = strip(_vars)!! ' ' !!strip(NAME);
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   put _Vars;
MPRINT(VAR_PROFILE):   _vars = strip(NAME);
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   if eof then do;
MPRINT(VAR_PROFILE):   put _Vars;
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Tue, Dec 10, 2019 03:48:59 PM,
      Last Modified=Tue, Dec 10, 2019 03:48:59 PM,
      Filename=C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD22040_WINDOWS-MLD7D7P_\Prc2\macros.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=WINDOWS-MLD7D7P\student,
      File Size=            17KB,
      File Size (bytes)=17408
 
NOTE: 3 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 21.
NOTE: There were 1 observations read from the data set WORK.SCOREHISTMETA.
      WHERE (LEVEL='INTERVAL') or (ROLE='FREQ');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
48319     +%macro _vars;
48320     +P_Sum_Labor_Force_Pop
48321     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(VAR_PROFILE):   data _binneddata / view=_binneddata;
MPRINT(VAR_PROFILE):   set EMWS1.Score_VALIDATE(obs=1000000);
MPRINT(VAR_PROFILE):   format P_Sum_Labor_Force_Pop F1_. ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA STEP view saved on file WORK._BINNEDDATA.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=_binneddata(obs=1000000) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(VAR_PROFILE):   class
MPRINT(_VARS):   P_Sum_Labor_Force_Pop
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 84   Memory used = 511K.
NOTE: View WORK._BINNEDDATA.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 84 observations read from the data set EMWS1.SCORE_VALIDATE.
NOTE: There were 84 observations read from the data set WORK._BINNEDDATA.
NOTE: The data set WORK._TEMPTAB has 14 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(VAR_PROFILE):   data work.Score_VARHIST;
MPRINT(VAR_PROFILE):   label VALUE = "Value";
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   label COUNT = "Frequency Count";
MPRINT(VAR_PROFILE):   label PERCENT = "Percent";
MPRINT(VAR_PROFILE):   set _temptab;
MPRINT(VAR_PROFILE):   format VALUE 12.3 count;
MPRINT(VAR_PROFILE):   value = inputn(level, 'best12.');
MPRINT(VAR_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 14 observations read from the data set WORK._TEMPTAB.
NOTE: The data set WORK.SCORE_VARHIST has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._MINMAXDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._TEMPTAB (memtype=DATA).
NOTE: Deleting WORK._BINNEDDATA (memtype=VIEW).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
48322      data work.Score_VARHIST;
MPRINT(EM_DIAGRAM):    data work.Score_VARHIST;
48323      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48324      retain DATAROLE "VALIDATE" TYPE "";
MPRINT(EM_DIAGRAM):   retain DATAROLE "VALIDATE" TYPE "";
48325      set work.Score_VARHIST(rename=(VALUE=X));
MPRINT(EM_DIAGRAM):   set work.Score_VARHIST(rename=(VALUE=X));
48326      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK.SCORE_VARHIST.
NOTE: The data set WORK.SCORE_VARHIST has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48327      proc append base=work.Score_HIST data=work.Score_VARHIST;
MPRINT(EM_DIAGRAM):   proc append base=work.Score_HIST data=work.Score_VARHIST;
48328      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_VARHIST to WORK.SCORE_HIST.
NOTE: There were 14 observations read from the data set WORK.SCORE_VARHIST.
NOTE: 14 observations added.
NOTE: The data set WORK.SCORE_HIST has 27 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
48329      proc stdize data=EMWS1.Score_VALIDATE(obs=1000000) outstat=work.Score_SUMDATA out=_null_ pctlpts=(0 5 25 50 75 95 100);
MPRINT(EM_DIAGRAM):    proc stdize data=EMWS1.Score_VALIDATE(obs=1000000) outstat=work.Score_SUMDATA out=_null_ pctlpts=(0 5 25 50 75 95 100);
48330      var
48331      P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   var P_Sum_Labor_Force_Pop;
48332      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 84 observations read from the data set EMWS1.SCORE_VALIDATE.
NOTE: The data set WORK.SCORE_SUMDATA has 15 observations and 2 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
48333      quit;
 
48334      proc transpose data=work.Score_SUMDATA out=work.Score_SUMDATA( rename=(_NAME_=VARIABLE _LABEL_=LABEL LOCATION=MEAN SCALE=STD P0=MIN P50=MEDIAN P100=MAX));
MPRINT(EM_DIAGRAM):    proc transpose data=work.Score_SUMDATA out=work.Score_SUMDATA( rename=(_NAME_=VARIABLE _LABEL_=LABEL LOCATION=MEAN SCALE=STD P0=MIN P50=MEDIAN P100=MAX));
48335      where _TYPE_ in('LOCATION' 'SCALE' 'N' 'P0' 'P25' 'P50' 'P75' 'P100');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION' 'SCALE' 'N' 'P0' 'P25' 'P50' 'P75' 'P100');
48336      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
48337      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.SCORE_SUMDATA.
      WHERE _TYPE_ in ('LOCATION', 'N', 'P0', 'P100', 'P25', 'P50', 'P75', 'SCALE');
NOTE: The data set WORK.SCORE_SUMDATA has 1 observations and 10 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
48338      data work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   data work.Score_SUMDATA;
48339      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48340      retain DATAROLE "VALIDATE" Type "";
MPRINT(EM_DIAGRAM):   retain DATAROLE "VALIDATE" Type "";
48341      set work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   set work.Score_SUMDATA;
48342      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SCORE_SUMDATA.
NOTE: The data set WORK.SCORE_SUMDATA has 1 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
48343      proc append base=WORK.ScoreSTAT data=work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   proc append base=WORK.ScoreSTAT data=work.Score_SUMDATA;
48344      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_SUMDATA to WORK.SCORESTAT.
NOTE: There were 1 observations read from the data set WORK.SCORE_SUMDATA.
NOTE: 1 observations added.
NOTE: The data set WORK.SCORESTAT has 2 observations and 12 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48345      data WORK.SCOREFREQMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREFREQMETA;
48346      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
48347      NAME="b_Sum_Labor_Force_";
MPRINT(EM_DIAGRAM):   NAME="b_Sum_Labor_Force_";
48348      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
48349      LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
48350      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
48351      output;
MPRINT(EM_DIAGRAM):   output;
48352      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREFREQMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48353      data WORK.SCOREHISTMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREHISTMETA;
48354      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
48355      NAME="P_Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   NAME="P_Sum_Labor_Force_Pop";
48356      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
48357      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
48358      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
48359      output;
MPRINT(EM_DIAGRAM):   output;
48360      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREHISTMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.MDLCOMP_TEST.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
 
48361      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
48362      ods output onewayfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output onewayfreqs=WORK.TEMPFREQ;
48363      proc freq data = EMWS1.MdlComp_TEST order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS1.MdlComp_TEST order=formatted addnames;
48364      table b_Sum_Labor_Force_ / missing;
MPRINT(EM_DIAGRAM):   table b_Sum_Labor_Force_ / missing;
48365      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 84 observations read from the data set EMWS1.PART_TEST.
NOTE: There were 84 observations read from the data set EMWS1.TRANS_TEST.
NOTE: View EMWS1.MDLCOMP_TEST.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: There were 84 observations read from the data set EMWS1.REG2_TEST.
NOTE: The data set WORK.TEMPFREQ has 19 observations and 8 variables.
NOTE: There were 84 observations read from the data set EMWS1.MDLCOMP_TEST.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
48366      quit;
48367      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
48368      data WORK.Score_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data WORK.Score_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
48369      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ =
48370         "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" Type = "Type" _X_ = "Numeric Value" _XLABEL_ = "Formatted Value" COUNT = "Frequency Count" PERCENT = "Percent";
48371      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
48372      varnum = varnum(dsid, 'VARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'VARIABLE');
48373      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
48374      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
48375      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
48376      length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
MPRINT(EM_DIAGRAM):   length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
48377      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
48378      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
48379      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
48380      percent= getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent= getvarn(dsid, pvarnum);
48381      vvarnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   vvarnum = varnum(dsid, _VARIABLE_);
48382      type = vartype(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, vvarnum);
48383      fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
MPRINT(EM_DIAGRAM):   fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
48384      _XLABEL_ = left(getvarc(dsid, fvarnum));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(getvarc(dsid, fvarnum));
48385      _X_ = .;
MPRINT(EM_DIAGRAM):   _X_ = .;
48386      if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
48387      output;
MPRINT(EM_DIAGRAM):   output;
48388      end;
MPRINT(EM_DIAGRAM):   end;
48389      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
48390      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCORE_BAR has 19 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
48391      proc sort data=WORK.Score_BAR NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Score_BAR NOTHREADS;
48392      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
48393      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.SCORE_BAR.
NOTE: The data set WORK.SCORE_BAR has 19 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48394      proc sort data=WORK.M3V5L4OG;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M3V5L4OG;
48395      by Name;
MPRINT(EM_DIAGRAM):   by Name;
48396      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M3V5L4OG.
NOTE: The data set WORK.M3V5L4OG has 1 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48397      data WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   data WORK.Score_BAR;
48398      merge WORK.Score_BAR(in=_a) WORK.M3V5L4OG(keep=Name Role rename=(Name=_Variable_));
MPRINT(EM_DIAGRAM):   merge WORK.Score_BAR(in=_a) WORK.M3V5L4OG(keep=Name Role rename=(Name=_Variable_));
48399      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
48400      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Role";
48401      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
48402      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.SCORE_BAR.
NOTE: There were 1 observations read from the data set WORK.M3V5L4OG.
NOTE: The data set WORK.SCORE_BAR has 19 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
48403      data WORK.Score_BAR;
MPRINT(EM_DIAGRAM):    data WORK.Score_BAR;
48404      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48405      retain DATAROLE "TEST";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TEST";
48406      set WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   set WORK.Score_BAR;
48407      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.SCORE_BAR.
NOTE: The data set WORK.SCORE_BAR has 19 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48408      proc append base=EMWS1.Score_BAR data=WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_BAR data=WORK.Score_BAR;
48409      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_BAR to EMWS1.SCORE_BAR.
NOTE: There were 19 observations read from the data set WORK.SCORE_BAR.
NOTE: 19 observations added.
NOTE: The data set EMWS1.SCORE_BAR has 58 observations and 8 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48410      %var_profile(DATA=EMWS1.MdlComp_TEST, OUTPUT=work.Score_VARHIST, METADATA=WORK.SCOREHISTMETA, COMPUTESTAT=N, BINDATA=_bindata, STAT=_STAT, PCTLSTAT=work.Score_SUMDATA, FREQ=, BIN=Y, NUMBARS= 16);
MPRINT(EM_DIAGRAM):
*------------------------------------------------------------*
* Score: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set WORK.SCOREHISTMETA(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK.SCOREHISTMETA.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   length _VARS $80;
MPRINT(VAR_PROFILE):   retain _vars;
MPRINT(VAR_PROFILE):   if _n_ =1 then put '%macro _vars;';
MPRINT(VAR_PROFILE):   set WORK.SCOREHISTMETA end=eof;
MPRINT(VAR_PROFILE):   where LEVEL = 'INTERVAL' or ROLE='FREQ';
MPRINT(VAR_PROFILE):   if ROLE='FREQ' then call symput('FREQ', trim(NAME));
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   if length(strip(_vars)) + length(strip(NAME)) + 1 <80 then _vars = strip(_vars)!! ' ' !!strip(NAME);
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   put _Vars;
MPRINT(VAR_PROFILE):   _vars = strip(NAME);
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   if eof then do;
MPRINT(VAR_PROFILE):   put _Vars;
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Tue, Dec 10, 2019 03:48:59 PM,
      Last Modified=Tue, Dec 10, 2019 03:49:01 PM,
      Filename=C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD22040_WINDOWS-MLD7D7P_\Prc2\macros.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=WINDOWS-MLD7D7P\student,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 3 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 21.
NOTE: There were 1 observations read from the data set WORK.SCOREHISTMETA.
      WHERE (LEVEL='INTERVAL') or (ROLE='FREQ');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
48411     +%macro _vars;
48412     +P_Sum_Labor_Force_Pop
48413     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(VAR_PROFILE):   data _binneddata / view=_binneddata;
MPRINT(VAR_PROFILE):   set EMWS1.MdlComp_TEST(obs=1000000);
MPRINT(VAR_PROFILE):   format P_Sum_Labor_Force_Pop F1_. ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA STEP view saved on file WORK._BINNEDDATA.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP_TEST.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.10 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=_binneddata(obs=1000000) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(VAR_PROFILE):   class
MPRINT(_VARS):   P_Sum_Labor_Force_Pop
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 84   Memory used = 511K.
NOTE: There were 84 observations read from the data set EMWS1.PART_TEST.
NOTE: There were 84 observations read from the data set EMWS1.TRANS_TEST.
NOTE: There were 84 observations read from the data set EMWS1.REG2_TEST.
NOTE: View WORK._BINNEDDATA.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
NOTE: There were 84 observations read from the data set EMWS1.MDLCOMP_TEST.
NOTE: There were 84 observations read from the data set WORK._BINNEDDATA.
NOTE: The data set WORK._TEMPTAB has 13 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.19 seconds
      cpu time            0.18 seconds
 
 
MPRINT(VAR_PROFILE):   data work.Score_VARHIST;
MPRINT(VAR_PROFILE):   label VALUE = "Value";
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   label COUNT = "Frequency Count";
MPRINT(VAR_PROFILE):   label PERCENT = "Percent";
MPRINT(VAR_PROFILE):   set _temptab;
MPRINT(VAR_PROFILE):   format VALUE 12.3 count;
MPRINT(VAR_PROFILE):   value = inputn(level, 'best12.');
MPRINT(VAR_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 13 observations read from the data set WORK._TEMPTAB.
NOTE: The data set WORK.SCORE_VARHIST has 13 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._MINMAXDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._TEMPTAB (memtype=DATA).
NOTE: Deleting WORK._BINNEDDATA (memtype=VIEW).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
48414      data work.Score_VARHIST;
MPRINT(EM_DIAGRAM):    data work.Score_VARHIST;
48415      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48416      retain DATAROLE "TEST" TYPE "";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TEST" TYPE "";
48417      set work.Score_VARHIST(rename=(VALUE=X));
MPRINT(EM_DIAGRAM):   set work.Score_VARHIST(rename=(VALUE=X));
48418      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.SCORE_VARHIST.
NOTE: The data set WORK.SCORE_VARHIST has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48419      proc append base=work.Score_HIST data=work.Score_VARHIST;
MPRINT(EM_DIAGRAM):   proc append base=work.Score_HIST data=work.Score_VARHIST;
48420      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_VARHIST to WORK.SCORE_HIST.
NOTE: There were 13 observations read from the data set WORK.SCORE_VARHIST.
NOTE: 13 observations added.
NOTE: The data set WORK.SCORE_HIST has 40 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48421      proc stdize data=EMWS1.MdlComp_TEST(obs=1000000) outstat=work.Score_SUMDATA out=_null_ pctlpts=(0 5 25 50 75 95 100);
MPRINT(EM_DIAGRAM):    proc stdize data=EMWS1.MdlComp_TEST(obs=1000000) outstat=work.Score_SUMDATA out=_null_ pctlpts=(0 5 25 50 75 95 100);
48422      var
48423      P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   var P_Sum_Labor_Force_Pop;
48424      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 84 observations read from the data set EMWS1.PART_TEST.
NOTE: There were 84 observations read from the data set EMWS1.TRANS_TEST.
NOTE: View EMWS1.MDLCOMP_TEST.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
 
NOTE: There were 84 observations read from the data set EMWS1.REG2_TEST.
NOTE: There were 84 observations read from the data set EMWS1.MDLCOMP_TEST.
NOTE: The data set WORK.SCORE_SUMDATA has 15 observations and 2 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.16 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
48425      quit;
 
48426      proc transpose data=work.Score_SUMDATA out=work.Score_SUMDATA( rename=(_NAME_=VARIABLE _LABEL_=LABEL LOCATION=MEAN SCALE=STD P0=MIN P50=MEDIAN P100=MAX));
MPRINT(EM_DIAGRAM):    proc transpose data=work.Score_SUMDATA out=work.Score_SUMDATA( rename=(_NAME_=VARIABLE _LABEL_=LABEL LOCATION=MEAN SCALE=STD P0=MIN P50=MEDIAN P100=MAX));
48427      where _TYPE_ in('LOCATION' 'SCALE' 'N' 'P0' 'P25' 'P50' 'P75' 'P100');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION' 'SCALE' 'N' 'P0' 'P25' 'P50' 'P75' 'P100');
48428      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
48429      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.SCORE_SUMDATA.
      WHERE _TYPE_ in ('LOCATION', 'N', 'P0', 'P100', 'P25', 'P50', 'P75', 'SCALE');
NOTE: The data set WORK.SCORE_SUMDATA has 1 observations and 10 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
48430      data work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   data work.Score_SUMDATA;
48431      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48432      retain DATAROLE "TEST" Type "";
MPRINT(EM_DIAGRAM):   retain DATAROLE "TEST" Type "";
48433      set work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   set work.Score_SUMDATA;
48434      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SCORE_SUMDATA.
NOTE: The data set WORK.SCORE_SUMDATA has 1 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48435      proc append base=WORK.ScoreSTAT data=work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   proc append base=WORK.ScoreSTAT data=work.Score_SUMDATA;
48436      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_SUMDATA to WORK.SCORESTAT.
NOTE: There were 1 observations read from the data set WORK.SCORE_SUMDATA.
NOTE: 1 observations added.
NOTE: The data set WORK.SCORESTAT has 3 observations and 12 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48437      data WORK.SCOREFREQMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREFREQMETA;
48438      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
48439      NAME="b_Sum_Labor_Force_";
MPRINT(EM_DIAGRAM):   NAME="b_Sum_Labor_Force_";
48440      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
48441      LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
48442      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
48443      output;
MPRINT(EM_DIAGRAM):   output;
48444      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREFREQMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48445      data WORK.SCOREHISTMETA;
MPRINT(EM_DIAGRAM):    data WORK.SCOREHISTMETA;
48446      length NAME $32 ROLE $32 LEVEL $8;
MPRINT(EM_DIAGRAM):   length NAME $32 ROLE $32 LEVEL $8;
48447      NAME="P_Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   NAME="P_Sum_Labor_Force_Pop";
48448      ROLE="INPUT";
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
48449      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
48450      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
48451      output;
MPRINT(EM_DIAGRAM):   output;
48452      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCOREHISTMETA has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48453      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
48454      ods output onewayfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output onewayfreqs=WORK.TEMPFREQ;
48455      proc freq data = EMWS1.Score_SCORE order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS1.Score_SCORE order=formatted addnames;
48456      table b_Sum_Labor_Force_ / missing;
MPRINT(EM_DIAGRAM):   table b_Sum_Labor_Force_ / missing;
48457      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.TEMPFREQ has 18 observations and 8 variables.
NOTE: There were 200 observations read from the data set EMWS1.SCORE_SCORE.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
48458      quit;
48459      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
48460      data WORK.Score_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data WORK.Score_BAR(keep=_VARIABLE_ TYPE COUNT PERCENT _X_ _XLABEL_);
48461      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ =
48462         "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" Type = "Type" _X_ = "Numeric Value" _XLABEL_ = "Formatted Value" COUNT = "Frequency Count" PERCENT = "Percent";
48463      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
48464      varnum = varnum(dsid, 'VARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'VARIABLE');
48465      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
48466      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
48467      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
48468      length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
MPRINT(EM_DIAGRAM):   length _VARIABLE_ $32 TYPE $1 _XLABEL_ $32;
48469      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
48470      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
48471      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
48472      percent= getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent= getvarn(dsid, pvarnum);
48473      vvarnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   vvarnum = varnum(dsid, _VARIABLE_);
48474      type = vartype(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, vvarnum);
48475      fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
MPRINT(EM_DIAGRAM):   fvarnum = varnum(dsid, 'F_'!!substr(_VARIABLE_, 1, 30));
48476      _XLABEL_ = left(getvarc(dsid, fvarnum));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(getvarc(dsid, fvarnum));
48477      _X_ = .;
MPRINT(EM_DIAGRAM):   _X_ = .;
48478      if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
MPRINT(EM_DIAGRAM):   if TYPE eq 'N' then _X_ = getvarn(dsid, vvarnum);
48479      output;
MPRINT(EM_DIAGRAM):   output;
48480      end;
MPRINT(EM_DIAGRAM):   end;
48481      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
48482      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SCORE_BAR has 18 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
48483      proc sort data=WORK.Score_BAR NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Score_BAR NOTHREADS;
48484      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
48485      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK.SCORE_BAR.
NOTE: The data set WORK.SCORE_BAR has 18 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48486      proc sort data=WORK.M2Q0__W9;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M2Q0__W9;
48487      by Name;
MPRINT(EM_DIAGRAM):   by Name;
48488      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.M2Q0__W9.
NOTE: The data set WORK.M2Q0__W9 has 1 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48489      data WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   data WORK.Score_BAR;
48490      merge WORK.Score_BAR(in=_a) WORK.M2Q0__W9(keep=Name Role rename=(Name=_Variable_));
MPRINT(EM_DIAGRAM):   merge WORK.Score_BAR(in=_a) WORK.M2Q0__W9(keep=Name Role rename=(Name=_Variable_));
48491      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
48492      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Role";
48493      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
48494      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK.SCORE_BAR.
NOTE: There were 1 observations read from the data set WORK.M2Q0__W9.
NOTE: The data set WORK.SCORE_BAR has 18 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
48495      data WORK.Score_BAR;
MPRINT(EM_DIAGRAM):    data WORK.Score_BAR;
48496      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48497      retain DATAROLE "SCORE";
MPRINT(EM_DIAGRAM):   retain DATAROLE "SCORE";
48498      set WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   set WORK.Score_BAR;
48499      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK.SCORE_BAR.
NOTE: The data set WORK.SCORE_BAR has 18 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
48500      proc append base=EMWS1.Score_BAR data=WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_BAR data=WORK.Score_BAR;
48501      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_BAR to EMWS1.SCORE_BAR.
NOTE: There were 18 observations read from the data set WORK.SCORE_BAR.
NOTE: 18 observations added.
NOTE: The data set EMWS1.SCORE_BAR has 76 observations and 8 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48502      %var_profile(DATA=EMWS1.Score_SCORE, OUTPUT=work.Score_VARHIST, METADATA=WORK.SCOREHISTMETA, COMPUTESTAT=N, BINDATA=_bindata, STAT=_STAT, PCTLSTAT=work.Score_SUMDATA, FREQ=, BIN=Y, NUMBARS= 16);
MPRINT(EM_DIAGRAM):
*------------------------------------------------------------*
* Score: Computing Summary Statistics
*------------------------------------------------------------*
MPRINT(VAR_PROFILE):   filename _mac catalog 'WORK.MACROS.VARIABLES.SOURCE';
MPRINT(VAR_PROFILE):   data _null;
MPRINT(VAR_PROFILE):   set WORK.SCOREHISTMETA(where=(LEVEL = 'INTERVAL' and ROLE ne 'FREQ')) end=eof;
MPRINT(VAR_PROFILE):   if eof then call symput('_nobs', put(_N_, best.));
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 1 observations read from the data set WORK.SCOREHISTMETA.
      WHERE (LEVEL='INTERVAL') and (ROLE not = 'FREQ');
NOTE: The data set WORK._NULL has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(VAR_PROFILE):   data _null_;
MPRINT(VAR_PROFILE):   file _mac;
MPRINT(VAR_PROFILE):   length _VARS $80;
MPRINT(VAR_PROFILE):   retain _vars;
MPRINT(VAR_PROFILE):   if _n_ =1 then put '%macro _vars;';
MPRINT(VAR_PROFILE):   set WORK.SCOREHISTMETA end=eof;
MPRINT(VAR_PROFILE):   where LEVEL = 'INTERVAL' or ROLE='FREQ';
MPRINT(VAR_PROFILE):   if ROLE='FREQ' then call symput('FREQ', trim(NAME));
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   if length(strip(_vars)) + length(strip(NAME)) + 1 <80 then _vars = strip(_vars)!! ' ' !!strip(NAME);
MPRINT(VAR_PROFILE):   else do;
MPRINT(VAR_PROFILE):   put _Vars;
MPRINT(VAR_PROFILE):   _vars = strip(NAME);
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   if eof then do;
MPRINT(VAR_PROFILE):   put _Vars;
MPRINT(VAR_PROFILE):   put '%mend _vars;';
MPRINT(VAR_PROFILE):   end;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file _MAC is:
      Catalog Name=WORK.MACROS.VARIABLES.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Tue, Dec 10, 2019 03:48:59 PM,
      Last Modified=Tue, Dec 10, 2019 03:49:02 PM,
      Filename=C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD22040_WINDOWS-MLD7D7P_\Prc2\macros.sas7bcat,
      Release Created=9.0401M4,
      Host Created=X64_10PRO,
      Owner Name=WINDOWS-MLD7D7P\student,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 3 records were written to the file _MAC.
      The minimum record length was 12.
      The maximum record length was 21.
NOTE: There were 1 observations read from the data set WORK.SCOREHISTMETA.
      WHERE (LEVEL='INTERVAL') or (ROLE='FREQ');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file _MAC is file WORK.MACROS.VARIABLES.SOURCE.
48503     +%macro _vars;
48504     +P_Sum_Labor_Force_Pop
48505     +%mend _vars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(VAR_PROFILE):   filename _mac;
NOTE: Fileref _MAC has been deassigned.
MPRINT(VAR_PROFILE):   data _binneddata / view=_binneddata;
MPRINT(VAR_PROFILE):   set EMWS1.Score_SCORE(obs=1000000);
MPRINT(VAR_PROFILE):   format P_Sum_Labor_Force_Pop F1_. ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: DATA STEP view saved on file WORK._BINNEDDATA.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VAR_PROFILE):   proc dmdb data=_binneddata(obs=1000000) classout=_temptab(rename=(NAME=VARIABLE FREQUENCY=COUNT FREQPERCENT=PERCENT));
MPRINT(VAR_PROFILE):   class
MPRINT(_VARS):   P_Sum_Labor_Force_Pop
MPRINT(VAR_PROFILE):   ;
MPRINT(VAR_PROFILE):   run;
 
NOTE: Records processed = 200   Memory used = 511K.
NOTE: View WORK._BINNEDDATA.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 200 observations read from the data set EMWS1.SCORE_SCORE.
NOTE: There were 200 observations read from the data set WORK._BINNEDDATA.
NOTE: The data set WORK._TEMPTAB has 14 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
MPRINT(VAR_PROFILE):   data work.Score_VARHIST;
MPRINT(VAR_PROFILE):   label VALUE = "Value";
MPRINT(VAR_PROFILE):   label VARIABLE = "Variable";
MPRINT(VAR_PROFILE):   label COUNT = "Frequency Count";
MPRINT(VAR_PROFILE):   label PERCENT = "Percent";
MPRINT(VAR_PROFILE):   set _temptab;
MPRINT(VAR_PROFILE):   format VALUE 12.3 count;
MPRINT(VAR_PROFILE):   value = inputn(level, 'best12.');
MPRINT(VAR_PROFILE):   keep VARIABLE COUNT PERCENT VALUE;
MPRINT(VAR_PROFILE):   run;
 
NOTE: There were 14 observations read from the data set WORK._TEMPTAB.
NOTE: The data set WORK.SCORE_VARHIST has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(VAR_PROFILE):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(VAR_PROFILE):   delete _TEMPTAB _BINNEDDATA _MINMAXDATA;
MPRINT(VAR_PROFILE):   run;
 
NOTE: The file WORK._MINMAXDATA (memtype=(DATA VIEW)) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._TEMPTAB (memtype=DATA).
NOTE: Deleting WORK._BINNEDDATA (memtype=VIEW).
MPRINT(VAR_PROFILE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
48506      data work.Score_VARHIST;
MPRINT(EM_DIAGRAM):    data work.Score_VARHIST;
48507      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48508      retain DATAROLE "SCORE" TYPE "";
MPRINT(EM_DIAGRAM):   retain DATAROLE "SCORE" TYPE "";
48509      set work.Score_VARHIST(rename=(VALUE=X));
MPRINT(EM_DIAGRAM):   set work.Score_VARHIST(rename=(VALUE=X));
48510      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK.SCORE_VARHIST.
NOTE: The data set WORK.SCORE_VARHIST has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48511      proc append base=work.Score_HIST data=work.Score_VARHIST;
MPRINT(EM_DIAGRAM):   proc append base=work.Score_HIST data=work.Score_VARHIST;
48512      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_VARHIST to WORK.SCORE_HIST.
NOTE: There were 14 observations read from the data set WORK.SCORE_VARHIST.
NOTE: 14 observations added.
NOTE: The data set WORK.SCORE_HIST has 54 observations and 6 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48513      proc stdize data=EMWS1.Score_SCORE(obs=1000000) outstat=work.Score_SUMDATA out=_null_ pctlpts=(0 5 25 50 75 95 100);
MPRINT(EM_DIAGRAM):    proc stdize data=EMWS1.Score_SCORE(obs=1000000) outstat=work.Score_SUMDATA out=_null_ pctlpts=(0 5 25 50 75 95 100);
48514      var
48515      P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   var P_Sum_Labor_Force_Pop;
48516      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 200 observations read from the data set EMWS1.SCORE_SCORE.
NOTE: The data set WORK.SCORE_SUMDATA has 15 observations and 2 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
48517      quit;
 
48518      proc transpose data=work.Score_SUMDATA out=work.Score_SUMDATA( rename=(_NAME_=VARIABLE _LABEL_=LABEL LOCATION=MEAN SCALE=STD P0=MIN P50=MEDIAN P100=MAX));
MPRINT(EM_DIAGRAM):    proc transpose data=work.Score_SUMDATA out=work.Score_SUMDATA( rename=(_NAME_=VARIABLE _LABEL_=LABEL LOCATION=MEAN SCALE=STD P0=MIN P50=MEDIAN P100=MAX));
48519      where _TYPE_ in('LOCATION' 'SCALE' 'N' 'P0' 'P25' 'P50' 'P75' 'P100');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION' 'SCALE' 'N' 'P0' 'P25' 'P50' 'P75' 'P100');
48520      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
48521      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.SCORE_SUMDATA.
      WHERE _TYPE_ in ('LOCATION', 'N', 'P0', 'P100', 'P25', 'P50', 'P75', 'SCALE');
NOTE: The data set WORK.SCORE_SUMDATA has 1 observations and 10 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48522      data work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   data work.Score_SUMDATA;
48523      length DATAROLE $8 TYPE $14;
MPRINT(EM_DIAGRAM):   length DATAROLE $8 TYPE $14;
48524      retain DATAROLE "SCORE" Type "";
MPRINT(EM_DIAGRAM):   retain DATAROLE "SCORE" Type "";
48525      set work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   set work.Score_SUMDATA;
48526      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SCORE_SUMDATA.
NOTE: The data set WORK.SCORE_SUMDATA has 1 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48527      proc append base=WORK.ScoreSTAT data=work.Score_SUMDATA;
MPRINT(EM_DIAGRAM):   proc append base=WORK.ScoreSTAT data=work.Score_SUMDATA;
48528      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.SCORE_SUMDATA to WORK.SCORESTAT.
NOTE: There were 1 observations read from the data set WORK.SCORE_SUMDATA.
NOTE: 1 observations added.
NOTE: The data set WORK.SCORESTAT has 4 observations and 12 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48529      data EMWS1.Score_BAR(DROP=ROLE rename = (_VARIABLE_=VARIABLE _XLABEL_=X));
MPRINT(EM_DIAGRAM):    data EMWS1.Score_BAR(DROP=ROLE rename = (_VARIABLE_=VARIABLE _XLABEL_=X));
48530      set EMWS1.Score_BAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Score_BAR;
48531      label VARIABLE= "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,  NOQUOTE))" DATAROLE= "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_outputType_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE= "Variable Name" DATAROLE= "Data Role" TYPE = "Output Type";
48532      select(_VARIABLE_);
MPRINT(EM_DIAGRAM):   select(_VARIABLE_);
48533      when("b_Sum_Labor_Force_") TYPE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   when("b_Sum_Labor_Force_") TYPE = 'SEGMENT';
48534      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
48535      end;
MPRINT(EM_DIAGRAM):   end;
48536      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable VARIABLE is uninitialized.
NOTE: There were 76 observations read from the data set EMWS1.SCORE_BAR.
NOTE: The data set EMWS1.SCORE_BAR has 76 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
48537      proc sort data = EMWS1.Score_BAR NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Score_BAR NOTHREADS;
48538      by DATAROLE TYPE;
MPRINT(EM_DIAGRAM):   by DATAROLE TYPE;
48539      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 76 observations read from the data set EMWS1.SCORE_BAR.
NOTE: The data set EMWS1.SCORE_BAR has 76 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48540      %let _cn = %sysfunc(getoption(CENTER));
48541      %let _nb = %sysfunc(getoption(NUMBER));
48542      options nonumber nocenter;
MPRINT(EM_DIAGRAM):   options nonumber nocenter;
48543      title;
MPRINT(EM_DIAGRAM):   title;
48544      proc print data = EMWS1.Score_BAR noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS1.Score_BAR noobs label;
48545      by DATAROLE TYPE;
MPRINT(EM_DIAGRAM):   by DATAROLE TYPE;
48546      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
48547      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Class Variable Summary Statistics";
MPRINT(EM_DIAGRAM):   run;
48548      run;
 
NOTE: There were 76 observations read from the data set EMWS1.SCORE_BAR.
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48549      title10;
MPRINT(EM_DIAGRAM):   title10;
48550      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
48551      data EMWS1.Score_HIST;
MPRINT(EM_DIAGRAM):    data EMWS1.Score_HIST;
48552      set work.Score_HIST(rename=(Percent=Value));
MPRINT(EM_DIAGRAM):   set work.Score_HIST(rename=(Percent=Value));
48553      label VARIABLE= "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,      NOQUOTE))" DATAROLE= "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,   NOQUOTE))" TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_outputType_vlabel, NOQUOTE))" X =
48554         "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel,   NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,      NOQUOTE))" Value = "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE= "Variable Name" DATAROLE= "Data Role" TYPE = "Output Type" X = "Numeric Value" COUNT = "Frequency Count" Value = "Percent";
48555      select(VARIABLE);
MPRINT(EM_DIAGRAM):   select(VARIABLE);
48556      when("P_Sum_Labor_Force_Pop") TYPE = 'PREDICTED';
MPRINT(EM_DIAGRAM):   when("P_Sum_Labor_Force_Pop") TYPE = 'PREDICTED';
48557      when("b_Sum_Labor_Force_") TYPE= 'SEGMENT';
MPRINT(EM_DIAGRAM):   when("b_Sum_Labor_Force_") TYPE= 'SEGMENT';
48558      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
48559      end;
MPRINT(EM_DIAGRAM):   end;
48560      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 54 observations read from the data set WORK.SCORE_HIST.
NOTE: The data set EMWS1.SCORE_HIST has 54 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
48561      data WORK.ScoreSTAT;
MPRINT(EM_DIAGRAM):    data WORK.ScoreSTAT;
48562      set WORK.ScoreSTAT;
MPRINT(EM_DIAGRAM):   set WORK.ScoreSTAT;
48563      label VARIABLE= "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,  NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel,  NOQUOTE))" MEAN = "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,  NOQUOTE))" N =
48564         "%sysfunc(sasmsg(sashelp.dmine, rpt_nonmiss_vlabel,  NOQUOTE))" STD = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,  NOQUOTE))" MIN = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel,  NOQUOTE))" MAX =
48565         "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel,  NOQUOTE))" MEDIAN = "%sysfunc(sasmsg(sashelp.dmine, rpt_median_vlabel,  NOQUOTE))" P25 = "%sysfunc(sasmsg(sashelp.dmine, rpt_p25_vlabel,  NOQUOTE))" P75 =
48566         "%sysfunc(sasmsg(sashelp.dmine, rpt_p75_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE= "Variable Name" LABEL = "Label" MEAN = "Mean" N = "Non Missing" STD = "Standard Deviation" MIN = "Minimum" MAX = "Maximum" MEDIAN = "Median" P25 = "25th Percentile" P75 = "75th Percentile";
48567      select(VARIABLE);
MPRINT(EM_DIAGRAM):   select(VARIABLE);
48568      when("P_Sum_Labor_Force_Pop") TYPE = 'PREDICTED';
MPRINT(EM_DIAGRAM):   when("P_Sum_Labor_Force_Pop") TYPE = 'PREDICTED';
48569      when("b_Sum_Labor_Force_") TYPE= 'SEGMENT';
MPRINT(EM_DIAGRAM):   when("b_Sum_Labor_Force_") TYPE= 'SEGMENT';
48570      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
48571      end;
MPRINT(EM_DIAGRAM):   end;
48572      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SCORESTAT.
NOTE: The data set WORK.SCORESTAT has 4 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
48573      proc sort data = WORK.ScoreSTAT NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = WORK.ScoreSTAT NOTHREADS;
48574      by VARIABLE;
MPRINT(EM_DIAGRAM):   by VARIABLE;
48575      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SCORESTAT.
NOTE: The data set WORK.SCORESTAT has 4 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
48576      proc transpose data = WORK.ScoreSTAT out=WORK.ScoreSTAT(rename=(_NAME_=STATISTICS _LABEL_=LABEL));
MPRINT(EM_DIAGRAM):   proc transpose data = WORK.ScoreSTAT out=WORK.ScoreSTAT(rename=(_NAME_=STATISTICS _LABEL_=LABEL));
48577      by VARIABLE;
MPRINT(EM_DIAGRAM):   by VARIABLE;
48578      id DATAROLE;
MPRINT(EM_DIAGRAM):   id DATAROLE;
48579      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SCORESTAT.
NOTE: The data set WORK.SCORESTAT has 8 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
48580      proc datasets library=WORK nolist;
MPRINT(EM_DIAGRAM):   proc datasets library=WORK nolist;
48581      modify ScoreSTAT;
MPRINT(EM_DIAGRAM):   modify ScoreSTAT;
48582      label STATISTICS = "%sysfunc(sasmsg(sashelp.dmine, rpt_statistics_vlabel,  NOQUOTE))" VARIABLE= "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,  NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel,  NOQUOTE))" TYPE =
MPRINT(EM_DIAGRAM):   label STATISTICS = "Statistics" VARIABLE= "Variable Name" LABEL = "Label" TYPE = "Output Type";
WARNING: Variable TYPE not found in data set WORK.SCORESTAT.
48583         "%sysfunc(sasmsg(sashelp.dmine, rpt_outputType_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
48584      run;
 
NOTE: MODIFY was successful for WORK.SCORESTAT.DATA.
48585      %let _cn = %sysfunc(getoption(CENTER));
48586      %let _nb = %sysfunc(getoption(NUMBER));
48587      options nonumber nocenter;
MPRINT(EM_DIAGRAM):   options nonumber nocenter;
48588      title;
MPRINT(EM_DIAGRAM):   title;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
48589      proc print data = WORK.ScoreSTAT label noobs;
MPRINT(EM_DIAGRAM):   proc print data = WORK.ScoreSTAT label noobs;
48590      by VARIABLE;
MPRINT(EM_DIAGRAM):   by VARIABLE;
48591      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
48592      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_intervalStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Interval Variable Summary Statistics";
MPRINT(EM_DIAGRAM):   run;
48593      run;
 
NOTE: There were 8 observations read from the data set WORK.SCORESTAT.
NOTE: The PROCEDURE PRINT printed page 14.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
48594      title10;
MPRINT(EM_DIAGRAM):   title10;
48595      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
