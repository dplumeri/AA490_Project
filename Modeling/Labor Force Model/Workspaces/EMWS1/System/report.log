NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1 
1 
1 
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
544469     %let eminfo= %str();
544470     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
544471     set EMWS1.Score_ExportSet;
MPRINT(EM_DIAGRAM):   set EMWS1.Score_ExportSet;
544472     where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
MPRINT(EM_DIAGRAM):   where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
544473     call symput('eminfo', strip(eminfo));
MPRINT(EM_DIAGRAM):   call symput('eminfo', strip(eminfo));
544474     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.SCORE_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

544475     %let prescoreid = %str();
544476     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
544477     set EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMINFO;
544478     where key = 'PRESCORECODE';
MPRINT(EM_DIAGRAM):   where key = 'PRESCORECODE';
544479     if DATA ne '' then call symput('prescoreid', strip(DATA));
MPRINT(EM_DIAGRAM):   if DATA ne '' then call symput('prescoreid', strip(DATA));
544480     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG2_EMINFO.
      WHERE key='PRESCORECODE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "STAT" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
traverser_readyNode_note 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
traverser_readyNode_note 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
traverser_readyNode_note 
544481     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
544482     * Report: Determine If validvarname ANY variables are score inputs;
MPRINT(EM_DIAGRAM):   * Report: Determine If validvarname ANY variables are score inputs;
544483     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544484     filename _pref "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_32LJEUZscore.sas";
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_32LJEUZscore.sas";
544485     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
544486     %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_32LJEUZscore.sas.
544487    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544488    +* Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
544489    +*%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
544490    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544491    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544492    +* EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
544493    +* EM Version: 14.2;
MPRINT(EM_DIAGRAM):   * EM Version: 14.2;
544494    +* SAS Release: 9.04.01M4P110916;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M4P110916;
544495    +* Host: WINDOWS-MLD7D7P;
MPRINT(EM_DIAGRAM):   * Host: WINDOWS-MLD7D7P;
544496    +* Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
544497    +* Locale: en_US;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
544498    +* Project Path: C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling;
544499    +* Project Name: Labor Force Model;
MPRINT(EM_DIAGRAM):   * Project Name: Labor Force Model;
544500    +* Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
544501    +* Diagram Name: Labor Force;
MPRINT(EM_DIAGRAM):   * Diagram Name: Labor Force;
544502    +* Generated by: student;
MPRINT(EM_DIAGRAM):   * Generated by: student;
544503    +* Date: 10DEC2019:15:48:57;
MPRINT(EM_DIAGRAM):   * Date: 10DEC2019:15:48:57;
544504    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544505    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544506    +* TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
544507    +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
544508    +* NODE: Ids;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
544509    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544510    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544511    +* TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
544512    +* TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
544513    +* NODE: Stat;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
544514    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544515    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544516    +* TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
544517    +* TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
544518    +* NODE: Part;
MPRINT(EM_DIAGRAM):   * NODE: Part;
544519    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544520    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544521    +* TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
544522    +* TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
544523    +* NODE: Trans;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
544524    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544525    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544526    +* TOOL: Regression;
MPRINT(EM_DIAGRAM):   * TOOL: Regression;
544527    +* TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
544528    +* NODE: Reg2;
MPRINT(EM_DIAGRAM):   * NODE: Reg2;
544529    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544530    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
544531    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
544532    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
544533    +
544534    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
544535    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
544536    +
544537    +
544538    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
544539    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
544540    +
544541    +*** Check Population for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Population for missing values ;
544542    +if missing( Population ) then do;
MPRINT(EM_DIAGRAM):   if missing( Population ) then do;
544543    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
544544    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
544545    +end;
MPRINT(EM_DIAGRAM):   end;
544546    +
544547    +*** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
544548    +drop _0_0 _0_1 _0_2 ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 _0_2 ;
544549    +if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
544550    +   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
544551    +   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
544552    +   _0_2 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
544553    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
544554    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
544555    +end;
MPRINT(EM_DIAGRAM):   end;
544556    +else do;
MPRINT(EM_DIAGRAM):   else do;
544557    +   length _dm19 $ 19; drop _dm19 ;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
544558    +   %DMNORMCP( Age_group , _dm19 )
MPRINT(EM_DIAGRAM):   /*-------------------------------------------------------------- * * name: dmnormcp.sas * update: 03Sep2002 * reference: * purpose: normalize category levels for EM scoring code * 
--------------------------------------------------------------*/
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
NOTE: Numeric value converted to character for argument 1 of 'DMNORM' operation.
MPRINT(EM_DIAGRAM):   if _dm19 = '45 TO 64' then do;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 1;
MPRINT(EM_DIAGRAM):   end;
544559    +   if _dm19 = '45 TO 64'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '65+' then do;
544560    +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
544561    +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
544562    +      _0_2 = 1;
MPRINT(EM_DIAGRAM):   _0_2 = -1;
544563    +   end;
MPRINT(EM_DIAGRAM):   end;
544564    +   else if _dm19 = '65+'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
544565    +      _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
544566    +      _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
544567    +      _0_2 = -1;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
544568    +   end;
MPRINT(EM_DIAGRAM):   end;
544569    +   else if _dm19 = '16 TO 24'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
544570    +      _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
544571    +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
544572    +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
544573    +   end;
MPRINT(EM_DIAGRAM):   end;
544574    +   else if _dm19 = '25 TO 44'  then do;
MPRINT(EM_DIAGRAM):   else do;
544575    +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = .;
544576    +      _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = .;
544577    +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = .;
544578    +   end;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
544579    +   else do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
544580    +      _0_0 = .;
MPRINT(EM_DIAGRAM):   end;
544581    +      _0_1 = .;
MPRINT(EM_DIAGRAM):   end;
544582    +      _0_2 = .;
544583    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Industry ;
544584    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
544585    +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
544586    +end;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
544587    +
MPRINT(EM_DIAGRAM):   _1_1 = 0;
544588    +*** Generate dummy variables for Industry ;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
544589    +drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
544590    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   if missing( Industry ) then do;
544591    +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = .;
544592    +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = .;
544593    +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = .;
544594    +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = .;
544595    +if missing( Industry ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
544596    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
544597    +   _1_1 = .;
MPRINT(EM_DIAGRAM):   end;
544598    +   _1_2 = .;
MPRINT(EM_DIAGRAM):   else do;
544599    +   _1_3 = .;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
544600    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm111 $ 111;
MPRINT(EM_DIAGRAM):   drop _dm111;
544601    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _dm111 = put( Industry , $CHAR111. );
544602    +end;
544603    +else do;
544604    +   length _dm32 $ 32; drop _dm32 ;
544605    +   length _dm111 $ 111; drop _dm111;
544606    +   _dm111 = put( Industry , $CHAR111. );
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
544607    +   %DMNORMCP( _dm111, _dm32 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm32 = 'SERVICE OCCUPATIONS' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
544608    +   if _dm32 = 'SERVICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   end;
544609    +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
544610    +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
544611    +      _1_2 = -1;
MPRINT(EM_DIAGRAM):   end;
544612    +      _1_3 = -1;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
544613    +   end;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
544614    +   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   end;
544615    +      _1_3 = 1;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
544616    +   end;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
544617    +   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND'  then do;
MPRINT(EM_DIAGRAM):   end;
544618    +      _1_2 = 1;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
544619    +   end;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
544620    +   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,'  then do;
MPRINT(EM_DIAGRAM):   end;
544621    +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   else do;
544622    +   end;
MPRINT(EM_DIAGRAM):   _1_0 = .;
544623    +   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE'  then do;
MPRINT(EM_DIAGRAM):   _1_1 = .;
544624    +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = .;
544625    +   end;
MPRINT(EM_DIAGRAM):   _1_3 = .;
544626    +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
544627    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
544628    +      _1_1 = .;
MPRINT(EM_DIAGRAM):   end;
544629    +      _1_2 = .;
MPRINT(EM_DIAGRAM):   end;
544630    +      _1_3 = .;
544631    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
544632    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
544633    +   end;
MPRINT(EM_DIAGRAM):   _LP0 = 6470696.42857143;
544634    +end;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
544635    +
MPRINT(EM_DIAGRAM):   end;
544636    +*** If missing inputs, use averages;
544637    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
544638    +   _LP0 =     6470696.42857143;
MPRINT(EM_DIAGRAM):   drop _TEMP;
544639    +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   drop _LP0;
544640    +end;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
544641    +
544642    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Effect: Population*Age_group*Industry ;
544643    +drop _TEMP;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
544644    +drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.11715613953136) * _TEMP * _0_0 * _1_0;
544645    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02700341050736) * _TEMP * _0_0 * _1_1;
544646    +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01251898117875) * _TEMP * _0_0 * _1_2;
544647    +***  Effect: Population*Age_group*Industry ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01863889821193) * _TEMP * _0_0 * _1_3;
544648    +_TEMP = Population ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09663568488618) * _TEMP * _0_1 * _1_0;
544649    +_LP0 = _LP0 + (   -0.11715613953136) * _TEMP * _0_0 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03979851587655) * _TEMP * _0_1 * _1_1;
544650    +_LP0 = _LP0 + (    0.02700341050736) * _TEMP * _0_0 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03370616598682) * _TEMP * _0_1 * _1_2;
544651    +_LP0 = _LP0 + (    0.01251898117875) * _TEMP * _0_0 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00628489271812) * _TEMP * _0_1 * _1_3;
544652    +_LP0 = _LP0 + (    0.01863889821193) * _TEMP * _0_0 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.09152611804654) * _TEMP * _0_2 * _1_0;
544653    +_LP0 = _LP0 + (    0.09663568488618) * _TEMP * _0_1 * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03738941285564) * _TEMP * _0_2 * _1_1;
544654    +_LP0 = _LP0 + (   -0.03979851587655) * _TEMP * _0_1 * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.02229371492902) * _TEMP * _0_2 * _1_2;
544655    +_LP0 = _LP0 + (   -0.03370616598682) * _TEMP * _0_1 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00483071597825) * _TEMP * _0_2 * _1_3;
544656    +_LP0 = _LP0 + (    0.00628489271812) * _TEMP * _0_1 * _1_3;
544657    +_LP0 = _LP0 + (    0.09152611804654) * _TEMP * _0_2 * _1_0;
MPRINT(EM_DIAGRAM):   *** Effect: Age_group ;
544658    +_LP0 = _LP0 + (   -0.03738941285564) * _TEMP * _0_2 * _1_1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
544659    +_LP0 = _LP0 + (   -0.02229371492902) * _TEMP * _0_2 * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1151827.58078611) * _TEMP * _0_0;
544660    +_LP0 = _LP0 + (    0.00483071597825) * _TEMP * _0_2 * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3344383.07340614) * _TEMP * _0_1;
544661    +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1719019.78617864) * _TEMP * _0_2;
544662    +***  Effect: Age_group ;
544663    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   *** Effect: Industry ;
544664    +_LP0 = _LP0 + (   -1151827.58078611) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
544665    +_LP0 = _LP0 + (    3344383.07340614) * _TEMP * _0_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3665917.37954249) * _TEMP * _1_0;
544666    +_LP0 = _LP0 + (    1719019.78617864) * _TEMP * _0_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2802842.40028867) * _TEMP * _1_1;
544667    +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2038406.8909291) * _TEMP * _1_2;
544668    +***  Effect: Industry ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1644635.92898508) * _TEMP * _1_3;
544669    +_TEMP = 1;
544670    +_LP0 = _LP0 + (    3665917.37954249) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   *** Effect: Population ;
544671    +_LP0 = _LP0 + (   -2802842.40028867) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _TEMP = Population ;
544672    +_LP0 = _LP0 + (    -2038406.8909291) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.10026222163702 * _TEMP);
544673    +_LP0 = _LP0 + (    1644635.92898508) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
544674    +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1131306.73108067);
544675    +***  Effect: Population ;
544676    +_TEMP = Population ;
544677    +_LP0 = _LP0 + (    0.10026222163702 * _TEMP);
544678    +*--- Intercept ---*;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Predicted Value;
544679    +_LP0 = _LP0 + (    1131306.73108067);
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
544680    +
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = _LP0;
544681    +REG2DR1:
544682    +
544683    +*** Predicted Value;
MPRINT(EM_DIAGRAM):   *************************************;
544684    +label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
544685    +P_Sum_Labor_Force_Pop = _LP0;
MPRINT(EM_DIAGRAM):   *************************************;
544686    +
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544687    +
MPRINT(EM_DIAGRAM):   * TOOL: Model Compare Class;
544688    +*************************************;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
544689    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   * NODE: MdlComp;
544690    +*************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544691    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
544692    +* TOOL: Model Compare Class;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
544693    +* TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   end;
544694    +* NODE: MdlComp;
544695    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
544696    +if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 2;
544697    +b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   end;
544698    +end;
544699    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
544700    +if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 3;
544701    +b_Sum_Labor_Force_ = 2;
MPRINT(EM_DIAGRAM):   end;
544702    +end;
544703    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
544704    +if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 4;
544705    +b_Sum_Labor_Force_ = 3;
MPRINT(EM_DIAGRAM):   end;
544706    +end;
544707    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
544708    +if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 5;
544709    +b_Sum_Labor_Force_ = 4;
MPRINT(EM_DIAGRAM):   end;
544710    +end;
544711    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
544712    +if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 6;
544713    +b_Sum_Labor_Force_ = 5;
MPRINT(EM_DIAGRAM):   end;
544714    +end;
544715    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
544716    +if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 7;
544717    +b_Sum_Labor_Force_ = 6;
MPRINT(EM_DIAGRAM):   end;
544718    +end;
544719    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
544720    +if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 8;
544721    +b_Sum_Labor_Force_ = 7;
MPRINT(EM_DIAGRAM):   end;
544722    +end;
544723    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
544724    +if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 9;
544725    +b_Sum_Labor_Force_ = 8;
MPRINT(EM_DIAGRAM):   end;
544726    +end;
544727    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
544728    +if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 10;
544729    +b_Sum_Labor_Force_ = 9;
MPRINT(EM_DIAGRAM):   end;
544730    +end;
544731    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
544732    +if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 11;
544733    +b_Sum_Labor_Force_ = 10;
MPRINT(EM_DIAGRAM):   end;
544734    +end;
544735    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
544736    +if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 12;
544737    +b_Sum_Labor_Force_ = 11;
MPRINT(EM_DIAGRAM):   end;
544738    +end;
544739    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
544740    +if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 13;
544741    +b_Sum_Labor_Force_ = 12;
MPRINT(EM_DIAGRAM):   end;
544742    +end;
544743    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
544744    +if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 14;
544745    +b_Sum_Labor_Force_ = 13;
MPRINT(EM_DIAGRAM):   end;
544746    +end;
544747    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
544748    +if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 15;
544749    +b_Sum_Labor_Force_ = 14;
MPRINT(EM_DIAGRAM):   end;
544750    +end;
544751    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
544752    +if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 16;
544753    +b_Sum_Labor_Force_ = 15;
MPRINT(EM_DIAGRAM):   end;
544754    +end;
544755    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
544756    +if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 17;
544757    +b_Sum_Labor_Force_ = 16;
MPRINT(EM_DIAGRAM):   end;
544758    +end;
544759    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
544760    +if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 18;
544761    +b_Sum_Labor_Force_ = 17;
MPRINT(EM_DIAGRAM):   end;
544762    +end;
544763    +else
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
544764    +if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 19;
544765    +b_Sum_Labor_Force_ = 18;
MPRINT(EM_DIAGRAM):   end;
544766    +end;
544767    +else
MPRINT(EM_DIAGRAM):   else do;
544768    +if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
544769    +b_Sum_Labor_Force_ = 19;
MPRINT(EM_DIAGRAM):   end;
544770    +end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544771    +else
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
544772    +do;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
544773    +b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   * NODE: Score;
544774    +end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544775    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544776    +* TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
544777    +* TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
544778    +* NODE: Score;
MPRINT(EM_DIAGRAM):   LABEL EM_SEGMENT = 'Segment';
544779    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   EM_SEGMENT = b_Sum_Labor_Force_;
544780    +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
544781    +* Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   EM_PREDICTION = P_Sum_Labor_Force_Pop;
544782    +*------------------------------------------------------------*;
544783    +LABEL EM_SEGMENT = 'Segment';
544784    +EM_SEGMENT = b_Sum_Labor_Force_;
544785    +LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
544786    +EM_PREDICTION = P_Sum_Labor_Force_Pop;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
544787     run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
544788     quit;
544789     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
544790     proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
MPRINT(EM_DIAGRAM):    proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
544791     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
544792     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 141 observations read from the data set WORK._TEMP.
NOTE: 122 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 19 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=SASUSER.OG_LABOR_JOIN noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   set SASUSER.OG_LABOR_JOIN;
MPRINT(EM_DIAGRAM):   drop 'Age_group'n 'Date'n 'Gender'n 'Industry'n 'Population'n 'Sum_Labor_Force_Pop'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
MPRINT(EM_DIAGRAM):   proc contents data =WORK.SCORE_OUTPUTMETA noprint out=WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   length role $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   set WORK.SCORE_OUTPUTMETA(keep=name type length label format informat rename=(type=itype)) end=_eof;
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   else type = 'C';
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
MPRINT(EM_DIAGRAM):   if name = '_WARN_' then do;
MPRINT(EM_DIAGRAM):   role = 'ASSESS';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then role = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='P' then role = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix ='R' then role = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then role = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then role = 'ASSESS';
MPRINT(EM_DIAGRAM):   else role = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if _eof then call symput('NumOutputVars', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   run;
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _tempFmt;
MPRINT(EM_DIAGRAM):   length format $33;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_tempFmt;
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne '')) out=temp2(rename=(fmtname=format));
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data temp2;
MPRINT(EM_DIAGRAM):   merge temp2(in=_a) _tempFmt(in=_b);
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc sort data=temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   if first.libname and first.memname then do;
MPRINT(EM_DIAGRAM):   call execute("proc format lib="!!libname!!'.'!!memname!!"cntlout=work._fmtout;");
MPRINT(EM_DIAGRAM):   call execute("select");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call execute (format);
MPRINT(EM_DIAGRAM):   if last.libname and last.memname then do;
MPRINT(EM_DIAGRAM):   call execute(";");
MPRINT(EM_DIAGRAM):   call execute("proc append base=WORK._EMFORMAT data=work._fmtout force;");
MPRINT(EM_DIAGRAM):   call execute("run;");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK._EMFORMAT nodupkey;
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   where fmtname ne '_EMFMT';
MPRINT(EM_DIAGRAM):   run;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    options mprint;
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_32LJEUZscore.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * EM SCORE CODE;
MPRINT(SCOREXML):   * EM Version: 14.2;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M4P110916;
MPRINT(SCOREXML):   * Host: WINDOWS-MLD7D7P;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling;
MPRINT(SCOREXML):   * Project Name: Labor Force Model;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Labor Force;
MPRINT(SCOREXML):   * Generated by: student;
MPRINT(SCOREXML):   * Date: 10DEC2019:15:48:57;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Input Data Source;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: Ids;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Statistics Exploration;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Stat;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Partition Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: Part;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Transform;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Trans;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Regression;
MPRINT(SCOREXML):   * TYPE: MODEL;
MPRINT(SCOREXML):   * NODE: Reg2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   *** begin scoring code for regression;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   length _WARN_ $4;
MPRINT(SCOREXML):   label _WARN_ = 'Warnings' ;
MPRINT(SCOREXML):   drop _DM_BAD;
MPRINT(SCOREXML):   _DM_BAD=0;
MPRINT(SCOREXML):   *** Check Population for missing values ;
MPRINT(SCOREXML):   if missing( Population ) then do;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Age_group ;
MPRINT(SCOREXML):   drop _0_0 _0_1 _0_2 ;
MPRINT(SCOREXML):   if missing( Age_group ) then do;
MPRINT(SCOREXML):   _0_0 = .;
MPRINT(SCOREXML):   _0_1 = .;
MPRINT(SCOREXML):   _0_2 = .;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm19 $ 19;
MPRINT(SCOREXML):   drop _dm19 ;
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(SCOREXML):   if _dm19 = '45 TO 64' then do;
MPRINT(SCOREXML):   _0_0 = 0;
MPRINT(SCOREXML):   _0_1 = 0;
MPRINT(SCOREXML):   _0_2 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '65+' then do;
MPRINT(SCOREXML):   _0_0 = -1;
MPRINT(SCOREXML):   _0_1 = -1;
MPRINT(SCOREXML):   _0_2 = -1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '16 TO 24' then do;
MPRINT(SCOREXML):   _0_0 = 1;
MPRINT(SCOREXML):   _0_1 = 0;
MPRINT(SCOREXML):   _0_2 = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '25 TO 44' then do;
MPRINT(SCOREXML):   _0_0 = 0;
MPRINT(SCOREXML):   _0_1 = 1;
MPRINT(SCOREXML):   _0_2 = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _0_0 = .;
MPRINT(SCOREXML):   _0_1 = .;
MPRINT(SCOREXML):   _0_2 = .;
MPRINT(SCOREXML):   substr(_warn_,2,1) = 'U';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Industry ;
MPRINT(SCOREXML):   drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(SCOREXML):   *** encoding is sparse, initialize to zero;
MPRINT(SCOREXML):   _1_0 = 0;
MPRINT(SCOREXML):   _1_1 = 0;
MPRINT(SCOREXML):   _1_2 = 0;
MPRINT(SCOREXML):   _1_3 = 0;
MPRINT(SCOREXML):   if missing( Industry ) then do;
MPRINT(SCOREXML):   _1_0 = .;
MPRINT(SCOREXML):   _1_1 = .;
MPRINT(SCOREXML):   _1_2 = .;
MPRINT(SCOREXML):   _1_3 = .;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm32 $ 32;
MPRINT(SCOREXML):   drop _dm32 ;
MPRINT(SCOREXML):   length _dm111 $ 111;
MPRINT(SCOREXML):   drop _dm111;
MPRINT(SCOREXML):   _dm111 = put( Industry , $CHAR111. );
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(SCOREXML):   if _dm32 = 'SERVICE OCCUPATIONS' then do;
MPRINT(SCOREXML):   _1_0 = -1;
MPRINT(SCOREXML):   _1_1 = -1;
MPRINT(SCOREXML):   _1_2 = -1;
MPRINT(SCOREXML):   _1_3 = -1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
MPRINT(SCOREXML):   _1_3 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
MPRINT(SCOREXML):   _1_2 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
MPRINT(SCOREXML):   _1_1 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
MPRINT(SCOREXML):   _1_0 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _1_0 = .;
MPRINT(SCOREXML):   _1_1 = .;
MPRINT(SCOREXML):   _1_2 = .;
MPRINT(SCOREXML):   _1_3 = .;
MPRINT(SCOREXML):   substr(_warn_,2,1) = 'U';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** If missing inputs, use averages;
MPRINT(SCOREXML):   if _DM_BAD > 0 then do;
MPRINT(SCOREXML):   _LP0 = 6470696.42857143;
MPRINT(SCOREXML):   goto REG2DR1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Compute Linear Predictor;
MPRINT(SCOREXML):   drop _TEMP;
MPRINT(SCOREXML):   drop _LP0;
MPRINT(SCOREXML):   _LP0 = 0;
MPRINT(SCOREXML):   *** Effect: Population*Age_group*Industry ;
MPRINT(SCOREXML):   _TEMP = Population ;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.11715613953136) * _TEMP * _0_0 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.02700341050736) * _TEMP * _0_0 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.01251898117875) * _TEMP * _0_0 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.01863889821193) * _TEMP * _0_0 * _1_3;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.09663568488618) * _TEMP * _0_1 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.03979851587655) * _TEMP * _0_1 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.03370616598682) * _TEMP * _0_1 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.00628489271812) * _TEMP * _0_1 * _1_3;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.09152611804654) * _TEMP * _0_2 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.03738941285564) * _TEMP * _0_2 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.02229371492902) * _TEMP * _0_2 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.00483071597825) * _TEMP * _0_2 * _1_3;
MPRINT(SCOREXML):   *** Effect: Age_group ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -1151827.58078611) * _TEMP * _0_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 3344383.07340614) * _TEMP * _0_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 1719019.78617864) * _TEMP * _0_2;
MPRINT(SCOREXML):   *** Effect: Industry ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 3665917.37954249) * _TEMP * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -2802842.40028867) * _TEMP * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -2038406.8909291) * _TEMP * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 1644635.92898508) * _TEMP * _1_3;
MPRINT(SCOREXML):   *** Effect: Population ;
MPRINT(SCOREXML):   _TEMP = Population ;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.10026222163702 * _TEMP);
MPRINT(SCOREXML):   *--- Intercept ---*;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 1131306.73108067);
MPRINT(SCOREXML):   REG2DR1: *** Predicted Value;
MPRINT(SCOREXML):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(SCOREXML):   P_Sum_Labor_Force_Pop = _LP0;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   ***** end scoring code for regression;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Model Compare Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: MdlComp;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 3;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 4;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 5;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 6;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 7;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 8;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 9;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 10;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 11;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 12;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 13;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 14;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 15;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 16;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 17;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 18;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 19;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 20;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Score Node;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Score;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Score: Creating Fixed Names;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   LABEL EM_SEGMENT = 'Segment';
MPRINT(SCOREXML):   EM_SEGMENT = b_Sum_Labor_Force_;
MPRINT(SCOREXML):   LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
MPRINT(SCOREXML):   EM_PREDICTION = P_Sum_Labor_Force_Pop;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("SASUSER.OG_LABOR_JOIN","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("SASUSER.OG_LABOR_JOIN");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set SASUSER.OG_LABOR_JOIN;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * EM SCORE CODE;
MPRINT(SCOREXML):   * EM Version: 14.2;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M4P110916;
MPRINT(SCOREXML):   * Host: WINDOWS-MLD7D7P;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling;
MPRINT(SCOREXML):   * Project Name: Labor Force Model;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Labor Force;
MPRINT(SCOREXML):   * Generated by: student;
MPRINT(SCOREXML):   * Date: 10DEC2019:15:48:57;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Input Data Source;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: Ids;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Statistics Exploration;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Stat;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Partition Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: Part;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Transform;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Trans;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Regression;
MPRINT(SCOREXML):   * TYPE: MODEL;
MPRINT(SCOREXML):   * NODE: Reg2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   *** begin scoring code for regression;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   length _WARN_ $4;
MPRINT(SCOREXML):   label _WARN_ = 'Warnings' ;
MPRINT(SCOREXML):   drop _DM_BAD;
MPRINT(SCOREXML):   _DM_BAD=0;
MPRINT(SCOREXML):   *** Check Population for missing values ;
MPRINT(SCOREXML):   if missing( Population ) then do;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Age_group ;
MPRINT(SCOREXML):   drop _0_0 _0_1 _0_2 ;
MPRINT(SCOREXML):   if missing( Age_group ) then do;
MPRINT(SCOREXML):   _0_0 = .;
MPRINT(SCOREXML):   _0_1 = .;
MPRINT(SCOREXML):   _0_2 = .;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm19 $ 19;
MPRINT(SCOREXML):   drop _dm19 ;
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(SCOREXML):   if _dm19 = '45 TO 64' then do;
MPRINT(SCOREXML):   _0_0 = 0;
MPRINT(SCOREXML):   _0_1 = 0;
MPRINT(SCOREXML):   _0_2 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '65+' then do;
MPRINT(SCOREXML):   _0_0 = -1;
MPRINT(SCOREXML):   _0_1 = -1;
MPRINT(SCOREXML):   _0_2 = -1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '16 TO 24' then do;
MPRINT(SCOREXML):   _0_0 = 1;
MPRINT(SCOREXML):   _0_1 = 0;
MPRINT(SCOREXML):   _0_2 = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm19 = '25 TO 44' then do;
MPRINT(SCOREXML):   _0_0 = 0;
MPRINT(SCOREXML):   _0_1 = 1;
MPRINT(SCOREXML):   _0_2 = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _0_0 = .;
MPRINT(SCOREXML):   _0_1 = .;
MPRINT(SCOREXML):   _0_2 = .;
MPRINT(SCOREXML):   substr(_warn_,2,1) = 'U';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Industry ;
MPRINT(SCOREXML):   drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(SCOREXML):   *** encoding is sparse, initialize to zero;
MPRINT(SCOREXML):   _1_0 = 0;
MPRINT(SCOREXML):   _1_1 = 0;
MPRINT(SCOREXML):   _1_2 = 0;
MPRINT(SCOREXML):   _1_3 = 0;
MPRINT(SCOREXML):   if missing( Industry ) then do;
MPRINT(SCOREXML):   _1_0 = .;
MPRINT(SCOREXML):   _1_1 = .;
MPRINT(SCOREXML):   _1_2 = .;
MPRINT(SCOREXML):   _1_3 = .;
MPRINT(SCOREXML):   substr(_warn_,1,1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm32 $ 32;
MPRINT(SCOREXML):   drop _dm32 ;
MPRINT(SCOREXML):   length _dm111 $ 111;
MPRINT(SCOREXML):   drop _dm111;
MPRINT(SCOREXML):   _dm111 = put( Industry , $CHAR111. );
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(SCOREXML):   if _dm32 = 'SERVICE OCCUPATIONS' then do;
MPRINT(SCOREXML):   _1_0 = -1;
MPRINT(SCOREXML):   _1_1 = -1;
MPRINT(SCOREXML):   _1_2 = -1;
MPRINT(SCOREXML):   _1_3 = -1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
MPRINT(SCOREXML):   _1_3 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
MPRINT(SCOREXML):   _1_2 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
MPRINT(SCOREXML):   _1_1 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
MPRINT(SCOREXML):   _1_0 = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _1_0 = .;
MPRINT(SCOREXML):   _1_1 = .;
MPRINT(SCOREXML):   _1_2 = .;
MPRINT(SCOREXML):   _1_3 = .;
MPRINT(SCOREXML):   substr(_warn_,2,1) = 'U';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** If missing inputs, use averages;
MPRINT(SCOREXML):   if _DM_BAD > 0 then do;
MPRINT(SCOREXML):   _LP0 = 6470696.42857143;
MPRINT(SCOREXML):   goto REG2DR1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Compute Linear Predictor;
MPRINT(SCOREXML):   drop _TEMP;
MPRINT(SCOREXML):   drop _LP0;
MPRINT(SCOREXML):   _LP0 = 0;
MPRINT(SCOREXML):   *** Effect: Population*Age_group*Industry ;
MPRINT(SCOREXML):   _TEMP = Population ;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.11715613953136) * _TEMP * _0_0 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.02700341050736) * _TEMP * _0_0 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.01251898117875) * _TEMP * _0_0 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.01863889821193) * _TEMP * _0_0 * _1_3;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.09663568488618) * _TEMP * _0_1 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.03979851587655) * _TEMP * _0_1 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.03370616598682) * _TEMP * _0_1 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.00628489271812) * _TEMP * _0_1 * _1_3;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.09152611804654) * _TEMP * _0_2 * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.03738941285564) * _TEMP * _0_2 * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -0.02229371492902) * _TEMP * _0_2 * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.00483071597825) * _TEMP * _0_2 * _1_3;
MPRINT(SCOREXML):   *** Effect: Age_group ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -1151827.58078611) * _TEMP * _0_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 3344383.07340614) * _TEMP * _0_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 1719019.78617864) * _TEMP * _0_2;
MPRINT(SCOREXML):   *** Effect: Industry ;
MPRINT(SCOREXML):   _TEMP = 1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 3665917.37954249) * _TEMP * _1_0;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -2802842.40028867) * _TEMP * _1_1;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( -2038406.8909291) * _TEMP * _1_2;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 1644635.92898508) * _TEMP * _1_3;
MPRINT(SCOREXML):   *** Effect: Population ;
MPRINT(SCOREXML):   _TEMP = Population ;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 0.10026222163702 * _TEMP);
MPRINT(SCOREXML):   *--- Intercept ---*;
MPRINT(SCOREXML):   _LP0 = _LP0 + ( 1131306.73108067);
MPRINT(SCOREXML):   REG2DR1: *** Predicted Value;
MPRINT(SCOREXML):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(SCOREXML):   P_Sum_Labor_Force_Pop = _LP0;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   ***** end scoring code for regression;
MPRINT(SCOREXML):   *************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Model Compare Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: MdlComp;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 3;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 4;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 5;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 6;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 7;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 8;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 9;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 10;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 11;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 12;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 13;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 14;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 15;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 16;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 17;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 18;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 19;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   b_Sum_Labor_Force_ = 20;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Score Node;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Score;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Score: Creating Fixed Names;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   LABEL EM_SEGMENT = 'Segment';
MPRINT(SCOREXML):   EM_SEGMENT = b_Sum_Labor_Force_;
MPRINT(SCOREXML):   LABEL EM_PREDICTION= "Prediction for Sum_Labor_Force_Pop";
MPRINT(SCOREXML):   EM_PREDICTION = P_Sum_Labor_Force_Pop;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "3" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "5" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "3" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "3" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "5" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "5" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score_eminputvars out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   where ROLE ne 'TARGET' and Scorevar eq 'Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_CMeta_DATA out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M2F4QLHU noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2F4QLHU;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2F4QLHU(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2F4QLHU;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2F4QLHU;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M27UXULW NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M27UXULW;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M27UXULW;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3Q84KMO(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M27UXULW;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M27UXULW;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M27UXULW;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M27UXULW;
MPRINT(EMADVISECOLUMNS):   set WORK.M27UXULW;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score_emoutputvars(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Target table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\target.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.target;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   length NODEID $32;
MPRINT(EM_DIAGRAM):   where upcase(NAME) in( "SUM_LABOR_FORCE_POP" );
MPRINT(EM_DIAGRAM):   if upcase(NAME) eq "SUM_LABOR_FORCE_POP" then NODEID = "Reg2";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "SUM_LABOR_FORCE_POP" then do;
MPRINT(EM_DIAGRAM):   NAME = 'SUM_LABOR_FORCE_POP';
MPRINT(EM_DIAGRAM):   CREATOR = '';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    filename _emrprt "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\tablemeta.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.rootmeta;
MPRINT(EM_DIAGRAM):   set EMDS.oglaborjoin_TM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Reports\Final Scored Labor Force_347F4\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* Ids2 : Beginning creation of SPK report 
* datetime : 10DEC2019:16:04:30 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.Ids2_emtrainvariable compare=EMWS1.Ids2_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):    
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Ids2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Ids2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Ids2_EMTRAINVARIABLE / view=WORK.Ids2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Ids2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 10DEC2019:16:04:30 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=SASUSER.CROSS_JOIN_LABOR_2 out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('SASUSER.CROSS_JOIN_LABOR_2');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set SASUSER.CROSS_JOIN_LABOR_2;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=SASUSER.CROSS_JOIN_LABOR_2 out=WORK.M0WZ4067 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0WZ4067;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0WZ4067(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0WZ4067;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0WZ4067;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3H_BIGU NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3H_BIGU;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3H_BIGU;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3W6CTAK(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3H_BIGU;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3H_BIGU;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3H_BIGU;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3H_BIGU;
MPRINT(EMADVISECOLUMNS):   set WORK.M3H_BIGU;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.Ids2_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   set WORK.Ids2_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   retain drop 'N';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1QPX362 as select * from WORK.M240KM1U order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1QPX362 as select * from WORK.M1GSMPW_ order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1QPX362 compare=work._comp1QPX362 out=WORK._DIFF0JNH88X noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP11X2FYVZ as select * from WORK._DIFF0JNH88X where NAME in (select NAME from WORK._DIFF0JNH88X where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM1CL58ND as select * from WORK._DIFF0JNH88X where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF0JNH88X where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM1CL58ND as select * from WORK._DIFF0JNH88X where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF0JNH88X where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM1CL58ND;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM1CL58ND;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM1CL58ND;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM1CL58ND;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "STAT" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Ids : Beginning creation of SPK report 
* datetime : 10DEC2019:16:04:31 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.Ids_emtrainvariable compare=EMWS1.Ids_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):    
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Ids_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Ids_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Ids_EMTRAINVARIABLE / view=WORK.Ids_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 10DEC2019:16:04:32 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=SASUSER.OG_LABOR_JOIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('SASUSER.OG_LABOR_JOIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set SASUSER.OG_LABOR_JOIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=SASUSER.OG_LABOR_JOIN out=WORK.M0LLZ2LB noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0LLZ2LB;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0LLZ2LB(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0LLZ2LB;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0LLZ2LB;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2HWRD08 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2HWRD08;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2HWRD08;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1X5TPIG(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2HWRD08;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2HWRD08;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2HWRD08;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2HWRD08;
MPRINT(EMADVISECOLUMNS):   set WORK.M2HWRD08;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.Ids_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   set WORK.Ids_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   retain drop 'N';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3MQT7XD as select * from WORK.M2VZS5RY order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3MQT7XD as select * from WORK.M2LO5L0Q order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3MQT7XD compare=work._comp3MQT7XD out=WORK._DIFF1J21W8P noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP103JQC5S as select * from WORK._DIFF1J21W8P where NAME in (select NAME from WORK._DIFF1J21W8P where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM0QYVXC4 as select * from WORK._DIFF1J21W8P where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1J21W8P where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM0QYVXC4 as select * from WORK._DIFF1J21W8P where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1J21W8P where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM0QYVXC4;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM0QYVXC4;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM0QYVXC4;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM0QYVXC4;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Stat : Beginning creation of SPK report 
* datetime : 10DEC2019:16:04:33 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN43692";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Stat_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_EMTRAINVARIABLE / view=WORK.Stat_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_CLASS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_CLASS / view=WORK.Stat_CLASS;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "CODE"n = " (N)(6.0)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)(10.0)";
MPRINT(EM_DIAGRAM):   label "TYPE"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "LevelIndex"n = "Level Index (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "plot"n = "Plot (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_CLASS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_CLASSPLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_CLASSPLOT / view=WORK.Stat_CLASSPLOT;
MPRINT(EM_DIAGRAM):   label "OrderedInput"n = "Ordered Inputs (N)(5.0)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Percent Variability (N)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "REPORT"n = "Report (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "plot"n = "Plot (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_CLASSPLOT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_INTERVAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_INTERVAL / view=WORK.Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   label "OrderedInput"n = "Ordered Inputs (N)(5.0)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "P50"n = "Median (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "N"n = "Non Missing (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "absCV"n = "Abs C.V. (N)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "Sign"n = "Sign (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_INTERVAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_CORR OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_CORR / view=WORK.Stat_CORR;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVar"n = "Segment (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "SegmentId"n = "Segment Name:Value (C)";
MPRINT(EM_DIAGRAM):   label "CORRTYPE"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "CORRVALUE"n = "Correlation (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "ORDEREDINPUTS"n = "Ordered Inputs (N)(5.0)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_CORR(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_WORTH / view=WORK.Stat_WORTH;
MPRINT(EM_DIAGRAM):   label "Target"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "Name"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "StatVar"n = "Analysis Variable (N)(6.0)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "plot"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 10DEC2019:16:04:34 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1H9KVC0 as select * from WORK.M1NZ9PV7 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1H9KVC0 as select * from WORK.M3KH65R6 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1H9KVC0 compare=work._comp1H9KVC0 out=WORK._DIFF2BB7BHN noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Part : Beginning creation of SPK report 
* datetime : 10DEC2019:16:04:35 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Part_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Part_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Part_EMTRAINVARIABLE / view=WORK.Part_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "PARTITIONROLE"n = "Partition Role (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Part_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Part_INTRVL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Part_INTRVL / view=WORK.Part_INTRVL;
MPRINT(EM_DIAGRAM):   label "DATA"n = "Data (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NMiss"n = "Missing (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_LABEL_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Part_INTRVL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 10DEC2019:16:04:35 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2VPHTYF as select * from WORK.M2BDBB07 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2VPHTYF as select * from WORK.M1F5UN68 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2VPHTYF compare=work._comp2VPHTYF out=WORK._DIFF2SKGJRL noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Trans : Beginning creation of SPK report 
* datetime : 10DEC2019:16:04:36 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN43796";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN43797";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Trans_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Trans_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Trans_EMTRAINVARIABLE / view=WORK.Trans_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "METHOD"n = "Method (C)";
MPRINT(EM_DIAGRAM):   label "NUMBINS"n = "Number of Bins (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 10DEC2019:16:04:37 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1OK8DT8 as select * from WORK.M0VTW8HL order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1OK8DT8 as select * from WORK.M2R0976F order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1OK8DT8 compare=work._comp1OK8DT8 out=WORK._DIFF3ERZXLB noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Boost : Beginning creation of SPK report 
* datetime : 10DEC2019:16:04:38 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN43849";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Boost_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Boost_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Boost_EMTRAINVARIABLE / view=WORK.Boost_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Boost_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Boost_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Boost_EMRANK / view=WORK.Boost_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Boost_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Boost_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Boost_EMSCOREDIST / view=WORK.Boost_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Boost_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Boost_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Boost_EMOUTFIT / view=WORK.Boost_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "target"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_TNOBS_"n = "Test: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_TSUMW_"n = "Test: Sum of Weights Times Freqs (N)";
MPRINT(EM_DIAGRAM):   label "_TMAX_"n = "Test: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_TSSE_"n = "Test: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_TASE_"n = "Test: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRASE_"n = "Test: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TDIV_"n = "Test: Divisor for TASE (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Boost_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Boost_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Boost_EMREPORTFIT / view=WORK.Boost_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Boost_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Boost_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Boost_EMRESIDUAL / view=WORK.Boost_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Boost_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Boost_SUBFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Boost_SUBFIT / view=WORK.Boost_SUBFIT;
MPRINT(EM_DIAGRAM):   label "datarole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "_ITERATION_"n = "Iteration (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Number of Leaves (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Average Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Root Average Square Error (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Boost_SUBFIT(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Boost_IMPORTANCE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Boost_IMPORTANCE / view=WORK.Boost_IMPORTANCE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   label "VIMPORTANCE"n = "Validation Importance (N)";
MPRINT(EM_DIAGRAM):   label "RATIO"n = "Ratio of Validation to Training Importance (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Boost_IMPORTANCE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 10DEC2019:16:04:39 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Boost_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Part_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3E20AUC as select * from WORK.M29M9XPJ order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3E20AUC as select * from WORK.M312DT2M order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3E20AUC compare=work._comp3E20AUC out=WORK._DIFF1U2ZWPA noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Reg2 : Beginning creation of SPK report 
* datetime : 10DEC2019:16:04:40 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Reg2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMTRAINVARIABLE / view=WORK.Reg2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg2_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMRANK / view=WORK.Reg2_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg2_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMSCOREDIST / view=WORK.Reg2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg2_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMOUTFIT / view=WORK.Reg2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_TASE_"n = "Test: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TASEL_"n = "Test: Lower 95% Conf. Limit for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TASEU_"n = "Test: Upper 95% Conf. Limit for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TAVERR_"n = "Test: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TDIV_"n = "Test: Divisor for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TERR_"n = "Test: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TMAX_"n = "Test: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_TMSE_"n = "Test: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_TNOBS_"n = "Test: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_TRASE_"n = "Test: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRMSE_"n = "Test: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_TSSE_"n = "Test: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_TSUMW_"n = "Test: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg2_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMREPORTFIT / view=WORK.Reg2_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg2_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMRESIDUAL / view=WORK.Reg2_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg2_EFFECTS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EFFECTS / view=WORK.Reg2_EFFECTS;
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ClassLevel"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "EffectLabel"n = "Effect Label (C)";
MPRINT(EM_DIAGRAM):   label "Coefficient"n = "Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "tValue"n = "T-value (N)";
MPRINT(EM_DIAGRAM):   label "PValue"n = "P Value (N)";
MPRINT(EM_DIAGRAM):   label "CODE"n = "Score Code Variable (C)";
MPRINT(EM_DIAGRAM):   label "Sign"n = "Sign (C)";
MPRINT(EM_DIAGRAM):   label "Abscoefficient"n = "Absolute Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "abstvalue"n = "Absolute T-value (N)";
MPRINT(EM_DIAGRAM):   label "TEffectNum"n = "TScore Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   label "EffectNum"n = "Effect Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EFFECTS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg2_EMESTIMATE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EMESTIMATE / view=WORK.Reg2_EMESTIMATE;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Row Type (C)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Row Name (C)";
MPRINT(EM_DIAGRAM):   label "Intercept"n = "Intercept (N)";
MPRINT(EM_DIAGRAM):   label "Age_group16_TO_24MANAGEMENT__PRO"n = "Age_group 16 TO 24 * Industry MANAGEMENT, PROFESSIONAL, AND RE * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group16_TO_24NATURAL_RESOURC"n = "Age_group 16 TO 24 * Industry NATURAL RESOURCES, CONSTRUCTION, * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group16_TO_24PRODUCTION__TRA"n = "Age_group 16 TO 24 * Industry PRODUCTION, TRANSPORTATION, AND * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group16_TO_24SALES_AND_OFFIC"n = "Age_group 16 TO 24 * Industry SALES AND OFFICE OCCUPATIONS * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25_TO_44MANAGEMENT__PRO"n = "Age_group 25 TO 44 * Industry MANAGEMENT, PROFESSIONAL, AND RE * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25_TO_44NATURAL_RESOURC"n = "Age_group 25 TO 44 * Industry NATURAL RESOURCES, CONSTRUCTION, * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25_TO_44PRODUCTION__TRA"n = "Age_group 25 TO 44 * Industry PRODUCTION, TRANSPORTATION, AND * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25_TO_44SALES_AND_OFFIC"n = "Age_group 25 TO 44 * Industry SALES AND OFFICE OCCUPATIONS * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group45_TO_64MANAGEMENT__PRO"n = "Age_group 45 TO 64 * Industry MANAGEMENT, PROFESSIONAL, AND RE * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group45_TO_64NATURAL_RESOURC"n = "Age_group 45 TO 64 * Industry NATURAL RESOURCES, CONSTRUCTION, * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group45_TO_64PRODUCTION__TRA"n = "Age_group 45 TO 64 * Industry PRODUCTION, TRANSPORTATION, AND * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group45_TO_64SALES_AND_OFFIC"n = "Age_group 45 TO 64 * Industry SALES AND OFFICE OCCUPATIONS * Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "Age_group16_TO_24"n = "Age_group 16 TO 24 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25_TO_44"n = "Age_group 25 TO 44 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group45_TO_64"n = "Age_group 45 TO 64 (N)";
MPRINT(EM_DIAGRAM):   label "MANAGEMENT__PROFESSIONAL__AND_RE"n = "Industry MANAGEMENT, PROFESSIONAL, AND RE (N)";
MPRINT(EM_DIAGRAM):   label "NATURAL_RESOURCES__CONSTRUCTION_"n = "Industry NATURAL RESOURCES, CONSTRUCTION, (N)";
MPRINT(EM_DIAGRAM):   label "PRODUCTION__TRANSPORTATION__AND"n = "Industry PRODUCTION, TRANSPORTATION, AND (N)";
MPRINT(EM_DIAGRAM):   label "SALES_AND_OFFICE_OCCUPATIONS"n = "Industry SALES AND OFFICE OCCUPATIONS (N)";
MPRINT(EM_DIAGRAM):   label "Population"n = "Overal_Population (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMESTIMATE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 10DEC2019:16:04:41 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2GIUAT4 as select * from WORK.M2NAG9PT order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2GIUAT4 as select * from WORK.M3N41YSD order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2GIUAT4 compare=work._comp2GIUAT4 out=WORK._DIFF2M1PS85 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Varsel : Beginning creation of SPK report 
* datetime : 10DEC2019:16:04:42 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Varsel_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Varsel_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_EMTRAINVARIABLE / view=WORK.Varsel_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Varsel_R2DS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_R2DS / view=WORK.Varsel_R2DS;
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "DF"n = "Degree of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "R2"n = "R-Square (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_R2DS(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Varsel_EFFECTDS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_EFFECTDS / view=WORK.Varsel_EFFECTDS;
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "DF"n = "Degree of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "R2"n = "Sequential R-Square (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_EFFECTDS(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Varsel_RESULTEDVARS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_RESULTEDVARS / view=WORK.Varsel_RESULTEDVARS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "TYPE"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "COMMENT"n = "Reasons for Rejection (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_RESULTEDVARS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 10DEC2019:16:04:42 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0KKU2G4 as select * from WORK.M27R9N67 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0KKU2G4 as select * from WORK.M23N771I order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0KKU2G4 compare=work._comp0KKU2G4 out=WORK._DIFF1P379ST noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Neural : Beginning creation of SPK report 
* datetime : 10DEC2019:16:04:43 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Neural_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMTRAINVARIABLE / view=WORK.Neural_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMRANK / view=WORK.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMSCOREDIST / view=WORK.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMOUTFIT / view=WORK.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimated Weights (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_MISC_"n = "Train: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_WRONG_"n = "Train: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_VWRONG_"n = "Valid: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_TASE_"n = "Test: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TAVERR_"n = "Test: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TDIV_"n = "Test: Divisor for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TERR_"n = "Test: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TMAX_"n = "Test: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_TMSE_"n = "Test: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TNOBS_"n = "Test: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_TRASE_"n = "Test: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRMSE_"n = "Test: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TSSE_"n = "Test: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_TSUMW_"n = "Test: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_TMISC_"n = "Test: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_TWRONG_"n = "Test: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_TASEL_"n = "Test: Lower 95% Conf. Limit for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TASEU_"n = "Test: Upper 95% Conf. Limit for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TMISL_"n = "Test: Lower 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "_TMISU_"n = "Test: Upper 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "_TA4E_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TA6E_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESTD_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESKEW_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESHAP_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESCAL_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMREPORTFIT / view=WORK.Neural_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMRESIDUAL / view=WORK.Neural_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_PLOTDS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_PLOTDS / view=WORK.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):   label "_ITER_"n = "Training Iterations (N)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Name (C)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimated Weights (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_VWRONG_"n = "Valid: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_PLOTDS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_WEIGHTDS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_WEIGHTDS / view=WORK.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   label "_LABEL_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "FROM"n = "From (C)";
MPRINT(EM_DIAGRAM):   label "TO"n = "Into (C)";
MPRINT(EM_DIAGRAM):   label "WEIGHT"n = "Weight (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_WEIGHTDS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMESTIMATE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMESTIMATE / view=WORK.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   label "_TECH_"n = "Optimization Technique (C)";
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Row Type (C)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Row Name (C)";
MPRINT(EM_DIAGRAM):   label "_DECAY_"n = "Weight Decay (N)";
MPRINT(EM_DIAGRAM):   label "_SEED_"n = "Initial seed (N)";
MPRINT(EM_DIAGRAM):   label "_NOBJ_"n = "Train: Objective Function Divisor (N)";
MPRINT(EM_DIAGRAM):   label "_OBJ_"n = "Train: Objective Function (N)";
MPRINT(EM_DIAGRAM):   label "_OBJERR_"n = "Train: Objective Function (Error Part) (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (scoring) (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBJ_"n = "Valid: Objective Function Divisor (N)";
MPRINT(EM_DIAGRAM):   label "_VOBJ_"n = "Valid: Objective Function (N)";
MPRINT(EM_DIAGRAM):   label "_VOBJERR_"n = "Valid: Objective Function (Error Part) (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (scoring) (N)";
MPRINT(EM_DIAGRAM):   label "_P_NUM_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_ITER_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Population_H11"n = "Population -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "Population_H12"n = "Population -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "Population_H13"n = "Population -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group16to24_H11"n = "Age_group16 to 24 -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25to44_H11"n = "Age_group25 to 44 -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group45to64_H11"n = "Age_group45 to 64 -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "IndustryManagement_professional_"n = "IndustryManagement, professional, and related occupations -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "IndustryNaturalresources_constru"n = "IndustryNatural resources, construction, and maintenance occupations -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "IndustryProduction_transportatio"n = "IndustryProduction, transportation, and material moving occupations -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "IndustrySalesandofficeoccupation"n = "IndustrySales and office occupations -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group16to24_H12"n = "Age_group16 to 24 -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25to44_H12"n = "Age_group25 to 44 -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group45to64_H12"n = "Age_group45 to 64 -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP"n = "IndustryManagement, professional, and related occupations -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP1"n = "IndustryNatural resources, construction, and maintenance occupations -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP2"n = "IndustryProduction, transportation, and material moving occupations -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP3"n = "IndustrySales and office occupations -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group16to24_H13"n = "Age_group16 to 24 -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group25to44_H13"n = "Age_group25 to 44 -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "Age_group45to64_H13"n = "Age_group45 to 64 -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP4"n = "IndustryManagement, professional, and related occupations -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP5"n = "IndustryNatural resources, construction, and maintenance occupations -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP6"n = "IndustryProduction, transportation, and material moving occupations -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "_DUP7"n = "IndustrySales and office occupations -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H11"n = "BIAS -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H12"n = "BIAS -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H13"n = "BIAS -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "H11_Sum_Labor_Force_Pop"n = "H11 -> Sum_Labor_Force_Pop (N)";
MPRINT(EM_DIAGRAM):   label "H12_Sum_Labor_Force_Pop"n = "H12 -> Sum_Labor_Force_Pop (N)";
MPRINT(EM_DIAGRAM):   label "H13_Sum_Labor_Force_Pop"n = "H13 -> Sum_Labor_Force_Pop (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_Sum_Labor_Force_Pop"n = "BIAS -> Sum_Labor_Force_Pop (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMESTIMATE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 10DEC2019:16:04:44 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0A_XBAO as select * from WORK.M1JEBEJF order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0A_XBAO as select * from WORK.M1PX4P4V order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0A_XBAO compare=work._comp0A_XBAO out=WORK._DIFF16D2L5F noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
Traverser: WaitingNode "SCORE" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* MdlComp : Beginning creation of SPK report 
* datetime : 10DEC2019:16:04:45 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data work.MdlComp;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where (NODEID="Reg2" and LABEL ne 'Reg test') OR (NODEID="Boost" and LABEL ne 'Gradient Boosting') OR (NODEID="Neural" and LABEL ne 'Neural Network') ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\MdlComp_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMTRAINVARIABLE / view=WORK.MdlComp_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = " (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMRANK / view=WORK.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMSCOREDIST / view=WORK.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Range for Predicted (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "UPP"n = "Upper Bound (N)";
MPRINT(EM_DIAGRAM):   label "LOWP"n = "Lower Bound (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMEAN_"n = "Mean Target (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMIN_"n = "Min Target (N)";
MPRINT(EM_DIAGRAM):   label "_TARGETMAX_"n = "Max Target (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Predicted (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Predicted (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMOUTFIT / view=WORK.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "USE"n = "Selected Model (C)";
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "_CRITERION_"n = "Selection Criterion: Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_TNOBS_"n = "Test: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_TSUMW_"n = "Test: Sum of Weights Times Freqs (N)";
MPRINT(EM_DIAGRAM):   label "_TMAX_"n = "Test: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_TSSE_"n = "Test: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_TASE_"n = "Test: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRASE_"n = "Test: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TDIV_"n = "Test: Divisor for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_TASEL_"n = "Test: Lower 95% Conf. Limit for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TASEU_"n = "Test: Upper 95% Conf. Limit for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TAVERR_"n = "Test: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TERR_"n = "Test: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TMSE_"n = "Test: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRMSE_"n = "Test: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_MISC_"n = "Train: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_WRONG_"n = "Train: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_VWRONG_"n = "Valid: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_TMISC_"n = "Test: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_TWRONG_"n = "Test: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_TMISL_"n = "Test: Lower 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "_TMISU_"n = "Test: Upper 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "_TA4E_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TA6E_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESTD_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESKEW_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESHAP_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_TESCAL_"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_EMRESIDUAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMRESIDUAL / view=WORK.MdlComp_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Value (N)";
MPRINT(EM_DIAGRAM):   label "XLABEL"n = "Box Plot Marker (C)";
MPRINT(EM_DIAGRAM):   label "_VARIABLE_"n = "Residual Variable (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRESIDUAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_COMPAREFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_COMPAREFIT / view=WORK.MdlComp_COMPAREFIT;
MPRINT(EM_DIAGRAM):   label "DataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "Target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "targetlabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "Reg2"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Boost"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Neural"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_COMPAREFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 10DEC2019:16:04:46 
* 
*------------------------------------------------------------* 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1 NAME $32 ROLE $32 LEVEL $10 EVENT $32 LABEL $200;
MPRINT(EM_DIAGRAM):   NAME = "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   EVENT = '';
MPRINT(EM_DIAGRAM):   LABEL = 'Industry_Population';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   EVENT = '';
MPRINT(EM_DIAGRAM):   LABEL = 'Industry_Population';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   EVENT = '';
MPRINT(EM_DIAGRAM):   LABEL = 'Industry_Population';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MdlComp_VARSETDEFAULT nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   by NAME LEVEL;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   if _N_ = 1 then USE = "Y";
MPRINT(EM_DIAGRAM):   else USE = "N";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1W9E7AE as select * from WORK.M0GECH11 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1W9E7AE as select * from WORK.M2VSPU11 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1W9E7AE compare=work._comp1W9E7AE out=WORK._DIFF0RL_OUK noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Score : Beginning creation of SPK report 
* datetime : 10DEC2019:16:04:47 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Score_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Score_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Score_EMTRAINVARIABLE / view=WORK.Score_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "model"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Score_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Score_HIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Score_HIST / view=WORK.Score_HIST;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TYPE"n = "Output Type (C)";
MPRINT(EM_DIAGRAM):   label "X"n = "Numeric Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "Value"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Score_HIST(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Score_BAR OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Score_BAR / view=WORK.Score_BAR;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TYPE"n = "Output Type (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_X_"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "X"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Score_BAR(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Score_EMINPUTVARS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Score_EMINPUTVARS / view=WORK.Score_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "CREATOR"n = "Creator (C)";
MPRINT(EM_DIAGRAM):   label "COMMENT"n = "Comment (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "HIDE"n = "Variable Hidden (C)";
MPRINT(EM_DIAGRAM):   label "SCOREVAR"n = "Used in Score Code (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Score_EMINPUTVARS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Score_EMOUTPUTVARS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Score_EMOUTPUTVARS / view=WORK.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "CREATOR"n = "Creator (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Variable Label (C)";
MPRINT(EM_DIAGRAM):   label "FUNCTION"n = "Function (C)";
MPRINT(EM_DIAGRAM):   label "type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Score_EMOUTPUTVARS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 10DEC2019:16:04:48 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1VU00U1 as select * from WORK.M0TOSH4K order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1VU00U1 as select * from WORK.M0HHVYRX order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1VU00U1 compare=work._comp1VU00U1 out=WORK._DIFF28BG8PM noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP13WR_2Y3 as select * from WORK._DIFF28BG8PM where NAME in (select NAME from WORK._DIFF28BG8PM where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM00RU8LP as select * from WORK._DIFF28BG8PM where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF28BG8PM where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM00RU8LP as select * from WORK._DIFF28BG8PM where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF28BG8PM where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM00RU8LP;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM00RU8LP;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM00RU8LP;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM00RU8LP;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN44193;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Reports\Final Scored Labor Force_347F4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack3P5Z = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3P5Z, "Score", ' type="EM Result" version="14.2" Report="Final Scored Labor Force_347F4" nodeid="Score" description="Score" component="Score"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Score began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0E5A = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0E5A, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack0E5A, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2HBTYTL "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0E5A, "fileref:F2HBTYTL", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F36ZJLCJ "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0E5A, "fileref:F36ZJLCJ", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F15Q9M7E "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0E5A, "fileref:F15Q9M7E", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1S0RCXY "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\target.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0E5A, "fileref:F1S0RCXY", "BINARY", "text/xml", 'TARGETTABLE', 'NAME=TARGETTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\target.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2_YM2XM "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\tablemeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0E5A, "fileref:F2_YM2XM", "BINARY", "text/xml", 'TABLEMETA', 'NAME=TABLEMETA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\tablemeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F00FWKM6 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Reports\Final Scored Labor Force_347F4\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0E5A, "fileref:F00FWKM6", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Reports\Final Scored Labor Force_347F4\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1PQI = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1PQI, "CROSS_JOIN_LABOR_2", ' NAME="Ids2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package CROSS_JOIN_LABOR_2 began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3M22Q3A "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Ids2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1PQI, "fileref:F3M22Q3A", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Ids2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1YY7Q2K "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1PQI, "fileref:F1YY7Q2K", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3RJYDDH "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1PQI, "fileref:F3RJYDDH", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1PQI, "work", "Ids2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F28P8KB5 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1PQI, "fileref:F28P8KB5", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F152JU3Q "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1PQI, "fileref:F152JU3Q", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F05LEVC_ "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1PQI, "fileref:F05LEVC_", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F13CVRJK "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1PQI, "fileref:F13CVRJK", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack1PQI, rc, "NESTED_NAME", "Ids2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1AUB = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1AUB, "OG_LABOR_JOIN", ' NAME="Ids"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package OG_LABOR_JOIN began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2Z_CQ7Y "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Ids_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1AUB, "fileref:F2Z_CQ7Y", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Ids_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F13FNPEO "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1AUB, "fileref:F13FNPEO", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0DO2IUG "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1AUB, "fileref:F0DO2IUG", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1AUB, "work", "Ids_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2YHJPLO "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1AUB, "fileref:F2YHJPLO", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F00_AT2L "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1AUB, "fileref:F00_AT2L", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0V95ZP9 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1AUB, "fileref:F0V95ZP9", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F13OCYTS "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1AUB, "fileref:F13OCYTS", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0M2RUHG "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1AUB, "fileref:F0M2RUHG", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack1AUB, rc, "NESTED_NAME", "Ids");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1N7W = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1N7W, "StatExplore", ' NAME="Stat"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package StatExplore began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2FTH2V3 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Stat_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1N7W, "fileref:F2FTH2V3", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Stat_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2T4QZI7 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1N7W, "fileref:F2T4QZI7", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3AZKC0F "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1N7W, "fileref:F3AZKC0F", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1N7W, "work", "Stat_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1_MQLBW "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1N7W, "fileref:F1_MQLBW", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1HRCUXE "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1N7W, "fileref:F1HRCUXE", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1E9NU6M "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1N7W, "fileref:F1E9NU6M", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1VXN_M5 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1N7W, "fileref:F1VXN_M5", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1N7W, "work", "Stat_CLASS", "Class", "NAME=CLASS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLASS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1N7W, "work", "Stat_CLASSPLOT", "CLASSPLOT", "NAME=CLASSPLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLASSPLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1N7W, "work", "Stat_INTERVAL", "INTERVAL", "NAME=INTERVAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INTERVAL inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1N7W, "work", "Stat_CORR", "CORR", "NAME=CORR TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CORR inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1N7W, "work", "Stat_WORTH", "WORTH", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file WORTH inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack1N7W, rc, "NESTED_NAME", "Stat");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3W2C = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3W2C, "Data Partition", ' NAME="Part"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Data Partition began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F298RMSZ "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Part_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3W2C, "fileref:F298RMSZ", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Part_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F10MJCK9 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3W2C, "fileref:F10MJCK9", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2CT8SS7 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3W2C, "fileref:F2CT8SS7", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3W2C, "work", "Part_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2CDHPKP "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3W2C, "fileref:F2CDHPKP", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3SR07QE "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3W2C, "fileref:F3SR07QE", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2D_7KHO "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3W2C, "fileref:F2D_7KHO", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F27YTL6Q "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3W2C, "fileref:F27YTL6Q", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3W2C, "work", "Part_INTRVL", "INTRVLSTAT", "NAME=INTRVL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INTRVLSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack3W2C, rc, "NESTED_NAME", "Part");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack34I2 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack34I2, "Transform Variables", ' NAME="Trans"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Transform Variables began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2KU6A_Y "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Trans_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34I2, "fileref:F2KU6A_Y", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Trans_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F034NC0E "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34I2, "fileref:F034NC0E", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3TN4S45 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34I2, "fileref:F3TN4S45", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack34I2, "work", "Trans_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F11TAQOD "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34I2, "fileref:F11TAQOD", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2WA2I65 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34I2, "fileref:F2WA2I65", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1UVWGQR "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34I2, "fileref:F1UVWGQR", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3K7IUXX "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34I2, "fileref:F3K7IUXX", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack34I2, rc, "NESTED_NAME", "Trans");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1OW3 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1OW3, "Gradient Boosting", ' NAME="Boost"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Gradient Boosting began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F14BYOC7 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Boost_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1OW3, "fileref:F14BYOC7", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Boost_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ZAR1E5 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1OW3, "fileref:F0ZAR1E5", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0I7EOU9 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1OW3, "fileref:F0I7EOU9", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1OW3, "work", "Boost_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2438TJB "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1OW3, "fileref:F2438TJB", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1Y5W1VM "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1OW3, "fileref:F1Y5W1VM", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1D5QHRT "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1OW3, "fileref:F1D5QHRT", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1SDBUMO "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1OW3, "fileref:F1SDBUMO", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1MOGHB2 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1OW3, "fileref:F1MOGHB2", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3MT46QV "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1OW3, "fileref:F3MT46QV", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1QT7KWD "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1OW3, "fileref:F1QT7KWD", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1OW3, "work", "Boost_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1OW3, "work", "Boost_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1OW3, "work", "Boost_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1OW3, "work", "Boost_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1OW3, "work", "Boost_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1OW3, "work", "Boost_SUBFIT", "SUBFIT", "NAME=SUBFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file SUBFIT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1OW3, "work", "Boost_IMPORTANCE", "IMPORTANCE", "NAME=IMPORTANCE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack1OW3, rc, "NESTED_NAME", "Boost");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1Q8E = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1Q8E, "Reg test", ' NAME="Reg2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Reg test began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1LXOHID "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Reg2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1Q8E, "fileref:F1LXOHID", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Reg2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3QGSR80 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1Q8E, "fileref:F3QGSR80", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1EU2Y6K "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1Q8E, "fileref:F1EU2Y6K", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1Q8E, "work", "Reg2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F086GPQT "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1Q8E, "fileref:F086GPQT", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2MZ97D1 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1Q8E, "fileref:F2MZ97D1", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2CEELDN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1Q8E, "fileref:F2CEELDN", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2K093JZ "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1Q8E, "fileref:F2K093JZ", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0AAV94P "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1Q8E, "fileref:F0AAV94P", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F00W5VO9 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1Q8E, "fileref:F00W5VO9", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F13RJ3OW "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1Q8E, "fileref:F13RJ3OW", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1Q8E, "work", "Reg2_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1Q8E, "work", "Reg2_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1Q8E, "work", "Reg2_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1Q8E, "work", "Reg2_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1Q8E, "work", "Reg2_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1Q8E, "work", "Reg2_EFFECTS", "Effects", "NAME=EFFECTS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REGEFFECTS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1Q8E, "work", "Reg2_EMESTIMATE", "ESTIMATEDS", "NAME=EMESTIMATE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ESTIMATEDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack1Q8E, rc, "NESTED_NAME", "Reg2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack33JE = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack33JE, "Variable Selection", ' NAME="Varsel"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Variable Selection began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2G66W4B "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Varsel_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33JE, "fileref:F2G66W4B", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Varsel_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1CAEPER "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33JE, "fileref:F1CAEPER", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2FWNEBV "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33JE, "fileref:F2FWNEBV", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack33JE, "work", "Varsel_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F07IC7ZT "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33JE, "fileref:F07IC7ZT", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0_DSC7N "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33JE, "fileref:F0_DSC7N", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F18D2JMT "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33JE, "fileref:F18D2JMT", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2EPHP1C "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33JE, "fileref:F2EPHP1C", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F240HT_U "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33JE, "fileref:F240HT_U", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F22UQAUL "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33JE, "fileref:F22UQAUL", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack33JE, "work", "Varsel_R2DS", "R2 Values", "NAME=R2DS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file R2 Values inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack33JE, "work", "Varsel_EFFECTDS", "Effects in Model", "NAME=EFFECTDS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Effects in Model inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack33JE, "work", "Varsel_RESULTEDVARS", "Variable Selection", "NAME=RESULTEDVARS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Variable Selection inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack33JE, rc, "NESTED_NAME", "Varsel");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0YMI = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0YMI, "Neural Network", ' NAME="Neural"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Neural Network began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F19FU_N4 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Neural_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YMI, "fileref:F19FU_N4", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Neural_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F296E173 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YMI, "fileref:F296E173", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3DUTFFF "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YMI, "fileref:F3DUTFFF", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YMI, "work", "Neural_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0OUO7NZ "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YMI, "fileref:F0OUO7NZ", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F31XW4WL "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YMI, "fileref:F31XW4WL", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0EMI24A "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YMI, "fileref:F0EMI24A", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F09_ZO1M "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YMI, "fileref:F09_ZO1M", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0INR59X "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YMI, "fileref:F0INR59X", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3U94TS1 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YMI, "fileref:F3U94TS1", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YMI, "work", "Neural_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YMI, "work", "Neural_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YMI, "work", "Neural_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YMI, "work", "Neural_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YMI, "work", "Neural_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YMI, "work", "Neural_PLOTDS", "PLOTDS", "NAME=PLOTDS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PLOTDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YMI, "work", "Neural_WEIGHTDS", "WEIGHTDS", "NAME=WEIGHTDS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file WEIGHTDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YMI, "work", "Neural_EMESTIMATE", "HISTWEIGHT", "NAME=EMESTIMATE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file HISTWEIGHT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack0YMI, rc, "NESTED_NAME", "Neural");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3QCP = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3QCP, "Model Comparison", ' NAME="MdlComp"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Model Comparison began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3PFH27X "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\MdlComp_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QCP, "fileref:F3PFH27X", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\MdlComp_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1SIXKZ7 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QCP, "fileref:F1SIXKZ7", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1CP42RZ "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QCP, "fileref:F1CP42RZ", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3QCP, "work", "MdlComp_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1R3A3M0 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QCP, "fileref:F1R3A3M0", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F23BD1TC "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QCP, "fileref:F23BD1TC", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2K2B0KF "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QCP, "fileref:F2K2B0KF", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1MYY68F "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QCP, "fileref:F1MYY68F", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F29KTF3H "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QCP, "fileref:F29KTF3H", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1JBED06 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QCP, "fileref:F1JBED06", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2MIOMYS "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QCP, "fileref:F2MIOMYS", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3QCP, "work", "MdlComp_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3QCP, "work", "MdlComp_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3QCP, "work", "MdlComp_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3QCP, "work", "MdlComp_EMRESIDUAL", "Residual statistics", "NAME=EMRESIDUAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file RESIDUALSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3QCP, "work", "MdlComp_COMPAREFIT", "COMPAREFIT", "NAME=COMPAREFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file COMPAREFIT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack3QCP, rc, "NESTED_NAME", "MdlComp");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0Y36 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0Y36, "Score", ' NAME="Score"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Score began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0VJC6V6 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Score_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0Y36, "fileref:F0VJC6V6", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Score_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0PO1P0X "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0Y36, "fileref:F0PO1P0X", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1FAJ3XF "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0Y36, "fileref:F1FAJ3XF", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0Y36, "work", "Score_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2KDS6DD "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0Y36, "fileref:F2KDS6DD", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1SI9X0B "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0Y36, "fileref:F1SI9X0B", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3SOINSV "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0Y36, "fileref:F3SOINSV", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0OATHLP "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0Y36, "fileref:F0OATHLP", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0Q1MN7H "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\PATHFLOWSCORECODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0Y36, "fileref:F0Q1MN7H", "TEXT", "text/plain", 'PATHFLOWCODE', 'NAME=PATHFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\PATHFLOWSCORECODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F28KQXXM "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\OPTIMIZEDCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0Y36, "fileref:F28KQXXM", "TEXT", "text/plain", 'OPTIMIZEDCODE', 'NAME=OPTIMIZEDCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\OPTIMIZEDCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0YU6KFY "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\PATHPUBLISHSCORECODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0Y36, "fileref:F0YU6KFY", "TEXT", "text/plain", 'PATHPUBCODE', 'NAME=PATHPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\PATHPUBLISHSCORECODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0Y36, "work", "Score_HIST", "HISTPLOT", "NAME=HIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file HISTPLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0Y36, "work", "Score_BAR", "BARPLOT", "NAME=BAR TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file BARPLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0Y36, "work", "Score_EMINPUTVARS", "SCOREINPUTVARS", "NAME=EMINPUTVARS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file SCOREINPUTVARS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0Y36, "work", "Score_EMOUTPUTVARS", "SCOREOUTPUTVARS", "NAME=EMOUTPUTVARS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file SCOREOUTPUTVARS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack0Y36, rc, "NESTED_NAME", "Score");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3RBQ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3RBQ, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack3RBQ, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3D53GCS "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3RBQ, "fileref:F3D53GCS", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2V3SEUI "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3RBQ, "fileref:F2V3SEUI", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0TMXOTG "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3RBQ, "fileref:F0TMXOTG", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0KTX1QO "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3P5Z, "fileref:F0KTX1QO", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0ZAH = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0ZAH, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3P5Z, Pack0ZAH, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0LJG = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0LJG, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0ZAH, Pack0LJG, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1V10JV3 "C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_32LJEUZscore.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0LJG, "fileref:F1V10JV3", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_32LJEUZscore.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3JT2 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3JT2, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0ZAH, Pack3JT2, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Reports\Final Scored Labor Force_347F4";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack3P5Z, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack3P5Z successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack3P5Z, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack3P5Z ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package Score began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\scorexml.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\input.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\output.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\target.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\tablemeta.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Reports\Final Scored Labor Force_347F4\miningResult.xml inserted successfully.
Package CROSS_JOIN_LABOR_2 began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Ids2_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids2\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package OG_LABOR_JOIN began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Ids_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Ids\EMFLOWSCORE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package StatExplore began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Stat_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Stat\EMCUSTOMGRAPH.xml inserted successfully.
CSV file CLASS inserted successfully.
CSV file CLASSPLOT inserted successfully.
CSV file INTERVAL inserted successfully.
CSV file CORR inserted successfully.
CSV file WORTH inserted successfully.
spk_PACKAGEINSERT_note
Package Data Partition began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Part_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Part\EMTRAINCODE.sas inserted successfully.
CSV file INTRVLSTAT inserted successfully.
spk_PACKAGEINSERT_note
Package Transform Variables began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Trans_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Trans\EMCUSTOMGRAPH.xml inserted successfully.
spk_PACKAGEINSERT_note
Package Gradient Boosting began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Boost_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMCUSTOMGRAPH.xml inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
CSV file SUBFIT inserted successfully.
CSV file IMPORTANCE inserted successfully.
spk_PACKAGEINSERT_note
Package Reg test began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Reg2_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg2\EMCUSTOMGRAPH.xml inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
CSV file REGEFFECTS inserted successfully.
CSV file ESTIMATEDS inserted successfully.
spk_PACKAGEINSERT_note
Package Variable Selection began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Varsel_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Varsel\EMPUBLISHSCORE.sas inserted successfully.
CSV file R2 Values inserted successfully.
CSV file Effects in Model inserted successfully.
CSV file Variable Selection inserted successfully.
spk_PACKAGEINSERT_note
Package Neural Network began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Neural_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMPUBLISHSCORE.sas inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
CSV file PLOTDS inserted successfully.
CSV file WEIGHTDS inserted successfully.
CSV file HISTWEIGHT inserted successfully.
spk_PACKAGEINSERT_note
Package Model Comparison began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\MdlComp_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMNOTES.txt inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMTRAINCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMCUSTOMGRAPH.xml inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file RESIDUALSTAT inserted successfully.
CSV file COMPAREFIT inserted successfully.
spk_PACKAGEINSERT_note
Package Score began successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\Score_ReportDataModel.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMLOG.log inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMOUTPUT.out inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMFLOWSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\PATHFLOWSCORECODE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\OPTIMIZEDCODE.sas inserted successfully.
File C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Score\PATHPUBLISHSCORECODE.sas inserted successfully.
CSV file HISTPLOT inserted successfully.
CSV file BARPLOT inserted successfully.
CSV file SCOREINPUTVARS inserted successfully.
CSV file SCOREOUTPUTVARS inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\dsapi.sas inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\dsapimeta.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_1L_V3H0\layout.xml inserted successfully.
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\student\AppData\Local\Temp\SAS Temporary Files\_TD25104_WINDOWS-MLD7D7P_\Prc2\P_32LJEUZscore.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack3P5Z successfully.
Package Pack3P5Z ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F2HBTYTL;
MPRINT(EM_DIAGRAM):   filename F36ZJLCJ;
MPRINT(EM_DIAGRAM):   filename F15Q9M7E;
MPRINT(EM_DIAGRAM):   filename F1S0RCXY;
MPRINT(EM_DIAGRAM):   filename F2_YM2XM;
MPRINT(EM_DIAGRAM):   filename F00FWKM6;
MPRINT(EM_DIAGRAM):   filename F3M22Q3A;
MPRINT(EM_DIAGRAM):   filename F1YY7Q2K;
MPRINT(EM_DIAGRAM):   filename F3RJYDDH;
MPRINT(EM_DIAGRAM):   filename F28P8KB5;
MPRINT(EM_DIAGRAM):   filename F152JU3Q;
MPRINT(EM_DIAGRAM):   filename F05LEVC_;
MPRINT(EM_DIAGRAM):   filename F13CVRJK;
MPRINT(EM_DIAGRAM):   filename F2Z_CQ7Y;
MPRINT(EM_DIAGRAM):   filename F13FNPEO;
MPRINT(EM_DIAGRAM):   filename F0DO2IUG;
MPRINT(EM_DIAGRAM):   filename F2YHJPLO;
MPRINT(EM_DIAGRAM):   filename F00_AT2L;
MPRINT(EM_DIAGRAM):   filename F0V95ZP9;
MPRINT(EM_DIAGRAM):   filename F13OCYTS;
MPRINT(EM_DIAGRAM):   filename F0M2RUHG;
MPRINT(EM_DIAGRAM):   filename F2FTH2V3;
MPRINT(EM_DIAGRAM):   filename F2T4QZI7;
MPRINT(EM_DIAGRAM):   filename F3AZKC0F;
MPRINT(EM_DIAGRAM):   filename F1_MQLBW;
MPRINT(EM_DIAGRAM):   filename F1HRCUXE;
MPRINT(EM_DIAGRAM):   filename F1E9NU6M;
MPRINT(EM_DIAGRAM):   filename F1VXN_M5;
MPRINT(EM_DIAGRAM):   filename F298RMSZ;
MPRINT(EM_DIAGRAM):   filename F10MJCK9;
MPRINT(EM_DIAGRAM):   filename F2CT8SS7;
MPRINT(EM_DIAGRAM):   filename F2CDHPKP;
MPRINT(EM_DIAGRAM):   filename F3SR07QE;
MPRINT(EM_DIAGRAM):   filename F2D_7KHO;
MPRINT(EM_DIAGRAM):   filename F27YTL6Q;
MPRINT(EM_DIAGRAM):   filename F2KU6A_Y;
MPRINT(EM_DIAGRAM):   filename F034NC0E;
MPRINT(EM_DIAGRAM):   filename F3TN4S45;
MPRINT(EM_DIAGRAM):   filename F11TAQOD;
MPRINT(EM_DIAGRAM):   filename F2WA2I65;
MPRINT(EM_DIAGRAM):   filename F1UVWGQR;
MPRINT(EM_DIAGRAM):   filename F3K7IUXX;
MPRINT(EM_DIAGRAM):   filename F14BYOC7;
MPRINT(EM_DIAGRAM):   filename F0ZAR1E5;
MPRINT(EM_DIAGRAM):   filename F0I7EOU9;
MPRINT(EM_DIAGRAM):   filename F2438TJB;
MPRINT(EM_DIAGRAM):   filename F1Y5W1VM;
MPRINT(EM_DIAGRAM):   filename F1D5QHRT;
MPRINT(EM_DIAGRAM):   filename F1SDBUMO;
MPRINT(EM_DIAGRAM):   filename F1MOGHB2;
MPRINT(EM_DIAGRAM):   filename F3MT46QV;
MPRINT(EM_DIAGRAM):   filename F1QT7KWD;
MPRINT(EM_DIAGRAM):   filename F1LXOHID;
MPRINT(EM_DIAGRAM):   filename F3QGSR80;
MPRINT(EM_DIAGRAM):   filename F1EU2Y6K;
MPRINT(EM_DIAGRAM):   filename F086GPQT;
MPRINT(EM_DIAGRAM):   filename F2MZ97D1;
MPRINT(EM_DIAGRAM):   filename F2CEELDN;
MPRINT(EM_DIAGRAM):   filename F2K093JZ;
MPRINT(EM_DIAGRAM):   filename F0AAV94P;
MPRINT(EM_DIAGRAM):   filename F00W5VO9;
MPRINT(EM_DIAGRAM):   filename F13RJ3OW;
MPRINT(EM_DIAGRAM):   filename F2G66W4B;
MPRINT(EM_DIAGRAM):   filename F1CAEPER;
MPRINT(EM_DIAGRAM):   filename F2FWNEBV;
MPRINT(EM_DIAGRAM):   filename F07IC7ZT;
MPRINT(EM_DIAGRAM):   filename F0_DSC7N;
MPRINT(EM_DIAGRAM):   filename F18D2JMT;
MPRINT(EM_DIAGRAM):   filename F2EPHP1C;
MPRINT(EM_DIAGRAM):   filename F240HT_U;
MPRINT(EM_DIAGRAM):   filename F22UQAUL;
MPRINT(EM_DIAGRAM):   filename F19FU_N4;
MPRINT(EM_DIAGRAM):   filename F296E173;
MPRINT(EM_DIAGRAM):   filename F3DUTFFF;
MPRINT(EM_DIAGRAM):   filename F0OUO7NZ;
MPRINT(EM_DIAGRAM):   filename F31XW4WL;
MPRINT(EM_DIAGRAM):   filename F0EMI24A;
MPRINT(EM_DIAGRAM):   filename F09_ZO1M;
MPRINT(EM_DIAGRAM):   filename F0INR59X;
MPRINT(EM_DIAGRAM):   filename F3U94TS1;
MPRINT(EM_DIAGRAM):   filename F3PFH27X;
MPRINT(EM_DIAGRAM):   filename F1SIXKZ7;
MPRINT(EM_DIAGRAM):   filename F1CP42RZ;
MPRINT(EM_DIAGRAM):   filename F1R3A3M0;
MPRINT(EM_DIAGRAM):   filename F23BD1TC;
MPRINT(EM_DIAGRAM):   filename F2K2B0KF;
MPRINT(EM_DIAGRAM):   filename F1MYY68F;
MPRINT(EM_DIAGRAM):   filename F29KTF3H;
MPRINT(EM_DIAGRAM):   filename F1JBED06;
MPRINT(EM_DIAGRAM):   filename F2MIOMYS;
MPRINT(EM_DIAGRAM):   filename F0VJC6V6;
MPRINT(EM_DIAGRAM):   filename F0PO1P0X;
MPRINT(EM_DIAGRAM):   filename F1FAJ3XF;
MPRINT(EM_DIAGRAM):   filename F2KDS6DD;
MPRINT(EM_DIAGRAM):   filename F1SI9X0B;
MPRINT(EM_DIAGRAM):   filename F3SOINSV;
MPRINT(EM_DIAGRAM):   filename F0OATHLP;
MPRINT(EM_DIAGRAM):   filename F0Q1MN7H;
MPRINT(EM_DIAGRAM):   filename F28KQXXM;
MPRINT(EM_DIAGRAM):   filename F0YU6KFY;
MPRINT(EM_DIAGRAM):   filename F3D53GCS;
MPRINT(EM_DIAGRAM):   filename F2V3SEUI;
MPRINT(EM_DIAGRAM):   filename F0TMXOTG;
MPRINT(EM_DIAGRAM):   filename F0KTX1QO;
MPRINT(EM_DIAGRAM):   filename F1V10JV3;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
1 
550103     proc printto;
MPRINT(EM_DIAGRAM):    proc printto;
550104     run;
MPRINT(EM_DIAGRAM):   run;

