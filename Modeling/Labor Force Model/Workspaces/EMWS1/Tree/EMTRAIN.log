MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:17:35" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 09, 2019
Time:                16:17:35
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O21WN5H5 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O21WN5H5 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:17:35" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:17:35" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
40843      proc freq data=EMWS1.Tree_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree_VariableSet noprint;
40844      table ROLE*LEVEL/out=WORK.TreeMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TreeMETA;
40845      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

40846      proc print data=WORK.TreeMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TreeMETA label noobs;
40847      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
40848      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
40849      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40850      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
40851      run;

NOTE: There were 4 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

40852      title10;
MPRINT(EM_DIAGRAM):   title10;
40853      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "Sum_Labor_Force_Pop"." 
40854      proc print data = EMWS1.Ids_Sum_Labor_Force__DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_Sum_Labor_Force__DM noobs label;
40855      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
40856      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
40857      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
40858      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40859      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
40860      run;

NOTE: There were 3 observations read from the data set EMWS1.IDS_SUM_LABOR_FORCE__DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 12.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

40861      title10;
MPRINT(EM_DIAGRAM):   title10;
40862      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Labor Force Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Labor Force';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Sum_Labor_Force_Pop(label="Sum_Labor_Force_Pop");
MPRINT(EM_DECDATA):   length Sum_Labor_Force_Pop 8 ;
MPRINT(EM_DECDATA):   label Sum_Labor_Force_Pop= "Industry_Population" ;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=225000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=25077000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=12651000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
41367      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
41368      * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
41369      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
41370      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

41371      %let EMEXCEPTIONSTRING=;
41372      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
41373      * TRAIN: Tree;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree;
41374      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41375      %let EM_ACTION = TRAIN;
41376      %let syscc = 0;
41377      %macro main;
41378      
41379        %if %upcase(&EM_ACTION) = CREATE %then %do;
41380          filename temp catalog 'sashelp.emmodl.tree_create.source';
41381          %include temp;
41382          filename temp;
41383      
41384          %em_tree_create;
41385        %end;
41386      
41387         %else
41388         %if %upcase(&EM_ACTION) = TRAIN %then %do;
41389      
41390             filename temp catalog 'sashelp.emmodl.tree_train.source';
41391             %include temp;
41392             filename temp;
41393             %em_tree_train;
41394         %end;
41395      
41396        %else
41397        %if %upcase(&EM_ACTION) = SCORE %then %do;
41398          filename temp catalog 'sashelp.emmodl.tree_score.source';
41399          %include temp;
41400          filename temp;
41401      
41402          %em_tree_score;
41403      
41404        %end;
41405      
41406        %else
41407        %if %upcase(&EM_ACTION) = REPORT %then %do;
41408      
41409             filename temp catalog 'sashelp.emmodl.tree_report.source';
41410             %include temp;
41411             filename temp;
41412      
41413             %em_tree_report;
41414         %end;
41415      
41416        %else
41417        %if %upcase(&EM_ACTION) = OPENINT %then %do;
41418      
41419             filename temp catalog 'sashelp.emmodl.tree_actions.source';
41420             %include temp;
41421             filename temp;
41422             %EM_TREE_OPENTREEVIEWER;
41423      
41424         %end;
41425      
41426        %else
41427        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
41428      
41429             filename temp catalog 'sashelp.emmodl.tree_actions.source';
41430             %include temp;
41431             filename temp;
41432             %EM_TREE_CLOSETREEVIEWER;
41433      
41434         %end;
41435      
41436      
41437         %doendm:
41438      %mend main;
41439      
41440      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
41442     +%macro em_tree_train;
41444     +   %if &EM_IMPORT_DATA eq %then %do;
41445     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
41446     +       %put &em_codebar;
41447     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
41448     +       %put &errormsg;
41449     +       %put &em_codebar;
41450     +       %goto doendm;
41451     +   %end;
41452     +   %else
41453     +       %let EMEXCEPTIONSTRING =;
41455     +   %if  &EM_NUM_TARGET lt 1 %then %do;
41456     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
41457     +        %put &em_codebar;
41458     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
41459     +        %put &errormsg;
41460     +        %put &em_codebar;
41461     +        %goto doendm;
41462     +   %end;
41464     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
41465     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
41466     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
41467     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
41468     +        %put &em_codebar;
41469     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
41470     +        %put &errormsg;
41471     +        %put &em_codebar;
41472     +        %goto doendm;
41473     +   %end;
41475     +   /* Initialize property macro variables */
41476     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
41477     +   %include temp;
41478     +   filename temp;
41480     +   %EM_SetProperties;
41482     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
41483     +   %EM_GETNAME(key=EMTREE, type=DATA);
41484     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
41485     +     /* if import eq Y and no importtable defined, throw an exception */
41486     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
41487     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
41488     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
41489     +         %put &em_codebar;
41490     +         %put &errmsg;
41491     +         %put &em_codebar;
41492     +         %goto doendm;
41493     +      %end;
41494     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
41495     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
41496     +         %put &em_codebar;
41497     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
41498     +         %put &errormsg;
41499     +         %put &em_codebar;
41500     +         %goto doendm;
41501     +      %end;
41502     +      %else %do;
41503     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
41504     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
41505     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
41506     +         %let varnumX = %sysfunc(varnum(&dsid,X));
41507     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
41508     +         %let dsid = %sysfunc(close(&dsid));
41509     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
41510     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
41511     +            %put &em_codebar;
41512     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
41513     +            %put &errormsg;
41514     +            %put &em_codebar;
41515     +            %goto doendm;
41516     +         %end;
41517     +      %end;
41518     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
41519     +         proc delete data=&EM_USER_EMTREE;
41520     +         run;
41521     +      %end;
41522     +   %end;
41523     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
41524     +      proc delete data=&EM_USER_EMTREE;
41525     +      run;
41526     +   %end;
41528     +   /* load tree macros */
41529     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
41530     +   %include temp;
41531     +   filename temp;
41533     +   /* data sets */
41534     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
41535     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
41536     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
41538     +   /* files */
41539     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
41541     +   /* check actual num of target levels */
41542     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
41543     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
41544     +                              nLevel=_nTargetLevel );
41545     +      %if &_nTargetLevel  > 2 %then %do;
41546     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
41547     +        %put &em_codebar;
41548     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
41549     +        %put &errormsg;
41550     +        %put &em_codebar;
41551     +        %goto doendm;
41552     +      %end;
41553     +   %end;
41555     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
41556     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
41557     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
41558     +        %let costflag=0;
41559     +        data _null_;
41560     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
41561     +          if eof then call symput("costflag", _N_);
41562     +        run;
41563     +        %if &costflag gt 0 %then %do;
41564     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
41565     +          %put &em_codebar;
41566     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
41567     +          %put &errormsg;
41568     +          %put &em_codebar;
41569     +          %goto doendm;
41570     +       %end;
41571     +     %end;
41572     +   %end;
41574     +   /* determine if multiple targets will be processed */
41575     +   %let em_tree_multipleTargets=N;
41576     +   %let em_tree_numTarget = 1;
41577     +   %let em_tree_targetVars=;
41579     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
41580     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
41581     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
41582     +         %let em_tree_multipleTargets=N;
41583     +      %end;
41584     +      %else %do;
41585     +         /* create macro array of targets  */
41586     +         data _null_;
41587     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
41588     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
41589     +           if eof then
41590     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
41591     +        run;
41593     +        %if &em_tree_numTarget gt 1 %then %do;
41594     +           %let em_tree_multipleTargets=Y;
41595     +        %end;
41596     +      %end;
41597     +   %end;
41599     +   /* create view of only necessary variable for performance reasons */
41600     +   %let tempData = &EM_LIB..em_&EM_NODEID;
41601     +   data &tempData / view=&tempData;
41602     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
41603     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
41604     +       %EM_TARGET
41605     +     %end;
41606     +     %else %do;
41607     +       %if &em_tree_numTarget ne 0 %then %do;
41608     +         %do i=1 %to &em_tree_numTarget;
41609     +            &&em_tree_targetVars&i
41610     +         %end;
41611     +       %end;
41612     +     %end;
41613     +     );
41614     +   run;
41616     +   /* run Tree procedure */
41617     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
41619     +   /* Check return code and throw exception if error is detected */
41620     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
41621     +   %if &syserr %then %do;
41622     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
41623     +     %goto doendm;
41624     +   %end;
41626     +   /* add decision score code if multiple targets are processed */
41627     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
41628     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
41629     +   %end;
41631     +   /* create outfit dataset if multiple score statements have been executed */
41632     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
41634     +   /* create English Rules */
41635     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
41636     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
41637     +       %em_tree_makeEnglishRules;
41639     +       /* English Rules */
41640     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
41642     +     %end;
41643     +   filename x;
41645     +   %doendm:
41646     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
41647     +%macro EM_SetProperties;
41649     +   /* train properties */
41650     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
41651     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
41652     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
41653     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
41654     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
41655     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
41656     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
41657     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
41658     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
41659     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
41660     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
41661     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
41662     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
41663     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
41664     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
41665     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
41666     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
41667     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
41668     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
41669     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
41670     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
41671     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
41672     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
41673     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
41674     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
41675     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
41676     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
41677     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
41678     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
41679     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
41680     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
41681     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
41682     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
41683     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
41684     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
41685     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
41686     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
41687     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
41688     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
41689     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
41690     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
41692     +   /* properties for interactive sample */
41693     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
41694     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
41695     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
41696     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
41698     +   /* report properties */
41699     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
41700     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
41701     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
41702     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
41703     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
41704     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
41705     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
41706     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
41707     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
41708     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
41709     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
41710     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
41711     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
41713     +   /* score properties */
41714     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
41715     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
41717     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS1.Tree_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;

NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
41719     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
41720     +  %global &nLevel;
41721     +  proc dmdb batch data=&indata
41722     +    classout=_tmp_dmdbout;
41723     +    class &target;
41724     +  run;
41725     +  data _tmp_dmdbout;
41726     +    set _tmp_dmdbout;
41727     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
41728     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
41729     +  run;
41730     +  data _null_;
41731     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
41732     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
41733     +    %let dsid = %sysfunc(close(&dsid));
41734     +     call symput("&nLevel", put(&_obs, Best12.));
41735     +  run;
41737     +  proc datasets lib=work nolist;
41738     +     delete _tmp_dmdbout;
41739     +  run;
41740     +  quit;
41741     +%Mend EM_CheckBinaryTargetLevel;
41744     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
41746     +  /* determine the number of obs in training data */
41747     +  proc sql;
41748     +    reset noprint;
41749     +    select count(*) into :em_nobs from &indata;
41750     +  quit;
41752     +  /* determine the number of input variables */
41753     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
41754     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
41756     +  /* retrieve targetEvent from decmeta */
41757     +  %let targetEvent=;
41758     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
41759     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
41760     +      data _null_;
41761     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
41762     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
41763     +      run;
41764     +    %end;
41765     +  %end;
41767     +  /* create targetTable if multipleTar eq Y */
41768     +  data temptarget;
41769     +    set &EM_DATA_VARIABLESET;
41770     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
41771     +  run;
41773     + /* data sets */
41774     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
41775     + %EM_GETNAME(key=EMTREE,        type=DATA);
41776     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
41777     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
41778     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
41779     + %EM_GETNAME(key=OUTNODES,      type=DATA);
41780     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
41781     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
41782     + %EM_GETNAME(key=OUTPATH,       type=DATA);
41783     + %EM_GETNAME(key=OUTRULES,      type=DATA);
41785     + /* files */
41786     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
41787     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
41789     + /* turn on pmml if requested */
41790     + %let nnpmml=0;
41791     + %if %symexist(EM_PMML) %then %do;
41792     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
41793     +       %let nnpmml=1;
41795     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
41796     +   %end;
41797     +%end;
41799     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
41801     +%if &nnpmml or &numClassTarget %then %do;
41803     +    /* create dmdb needed for pmml generation */
41804     +    %let tree_maxlevel = 512;
41805     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
41806     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
41807     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
41808     +      %end;
41809     +    %end;
41810     +    %if &tree_maxlevel gt 0 %then %do;
41811     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
41812     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
41813     +    %end;
41815     +    %let targetOrderString =;
41816     +    %let targetString = ;
41817     +    data _null_;
41818     +       length orderString nameString $10000;
41819     +       retain orderString nameString;
41820     +       set &em_data_variableset end=eof;
41821     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
41822     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
41823     +       %end;
41824     +       %else %do;
41825     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
41826     +       %end;          select(order);
41827     +         when('')        order ='DESC';
41828     +         when('FMTASC')  order='ASCFMT';
41829     +         when('FMTDESC') order='DESFMT';
41830     +         otherwise;
41831     +       end;
41832     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
41833     +       nameString = trim(nameString)!!' '!!trim(NAME);
41835     +       if eof then do;
41836     +          call symput('targetOrderString', trim(orderString));
41837     +          call symput('targetString', trim(nameString));
41838     +       end;
41839     +    run;
41841     +    %let arborkluge= "work._treeDMDB";
41843     +    proc dmdb batch data=&indata
41844     +    %if &nnpmml %then %do;
41845     +        PMML
41846     +    %end;
41847     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
41849     +      %if &nnpmml %then %do;
41850     +           %if "%EM_ID" ne "" %then %do;
41851     +             id %EM_ID;
41852     +           %end;
41853     +           %if &EM_NUM_CLASS gt 0 %then %do;
41854     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
41855     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
41856     +                  &targetOrderString;
41857     +           %end;
41858     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
41859     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
41860     +           %end;
41861     +           target &targetString %EM_INTERVAL_TARGET;
41862     +           %if "%EM_FREQ" ne "" %then %do;
41863     +             freq %EM_FREQ;
41864     +           %end;
41865     +      %end;
41866     +      %else %do;
41867     +         class  &targetOrderString;
41868     +         target &targetString %EM_INTERVAL_TARGET;
41869     +      %end;
41870     +    run;
41871     +    quit;
41873     +    proc datasets lib=work nolist;
41874     +       delete classout varout;
41875     +    run;
41876     +    quit;
41878     + %end;
41881     + /* run Arbor procedure */
41882     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
41883     +  proc arbor data=&INDATA
41885     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
41886     +    Leafsize = &EM_PROPERTY_LEAFSIZE
41887     +  %end;
41889     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
41890     +    Splitsize = &EM_PROPERTY_SPLITSIZE
41891     +  %end;
41893     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
41894     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
41895     +  %end;
41897     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
41898     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
41899     +  %end;
41901     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
41902     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
41903     +  %end;
41905     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
41906     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
41907     +  %end;
41908     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
41909     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
41910     +  %end;
41911     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
41912     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
41913     +  %end;
41915     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
41916     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
41917     +      alpha = &EM_PROPERTY_SIGLEVEL
41918     +    %end;
41919     +  %end;
41921     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
41922     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
41923     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
41924     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
41925     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
41927     +        padjust =
41928     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
41929     +          &chaid
41930     +        %end;
41931     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
41932     +          DEPTH
41933     +        %end;
41934     +      %end;
41935     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
41936     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
41937     +         pvars = &num_inputs
41938     +      %end;
41939     +    %end;
41940     +  %end;
41941     +  %else %do;
41942     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
41943     +         padjust = NONE
41944     +      %end;
41945     +  %end;
41947     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
41948     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
41949     +    Maxrules = &num_nrules
41950     +  %end;
41952     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
41953     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
41954     +    Maxsurrs = &num_nsurrs
41955     +  %end;
41957     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
41958     +     Missing=&EM_PROPERTY_MISSINGVALUE
41959     +  %end;
41961     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
41962     +     USEVARONCE
41963     +  %end;
41965     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
41966     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
41967     +  %end;
41970     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
41971     +    event = "&targetEvent"
41972     +  %end;
41974     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
41975     +     DECSEARCH
41976     +  %end;
41978     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
41979     +     PRIORSSEARCH
41980     +  %end;
41982     +  %if &arbor_1 ne %then %do;
41983     +    &arbor_1
41984     +  %end;
41986     +  %if &em_arbor ne %then %do;
41987     +     &em_arbor
41988     +  %end;
41989     +  ;
41990     + %end;
41991     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
41992     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
41993     +       Performance &EM_PROPERTY_PERFORMANCE
41994     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
41995     +         nodesize=&EM_PROPERTY_NODESAMPLE
41996     +       %end;
41997     +       ;
41998     +       interact;
41999     + %end;
42000     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
42001     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
42002     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
42003     +    %put &em_codebar;
42004     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
42005     +    %put &errormsg;
42006     +    %put &em_codebar;
42007     +    %goto doendm;
42008     +   %end;
42009     +   %else %do;
42010     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
42011     +       Performance &EM_PROPERTY_PERFORMANCE
42012     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
42013     +         nodesize=&EM_PROPERTY_NODESAMPLE
42014     +       %end;
42015     +       ;
42016     +       interact;
42017     +   %end;
42018     + %end;
42020     + %else %do;
42021     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
42022     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
42023     +    %put &em_codebar;
42024     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
42025     +    %put &errormsg;
42026     +    %put &em_codebar;
42027     +    %goto doendm;
42028     +   %end;
42029     +   %else %do;
42030     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
42031     +       Performance &EM_PROPERTY_PERFORMANCE
42032     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
42033     +         nodesize=&EM_PROPERTY_NODESAMPLE
42034     +       %end;
42035     +       ;
42036     +        interact;
42037     +   %end;
42038     + %end;
42040     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
42041     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
42042     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
42043     +    %end;
42045     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
42046     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
42047     +    %end;
42049     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
42050     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
42051     +    %end;
42053     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
42054     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
42055     +    %end;
42057     +    %if "%EM_FREQ" ne "" %then %do;
42058     +       freq %EM_FREQ;
42059     +    %end;
42061     +    %if "&multipleTar" eq "Y" %then %do;
42062     +       /* cycle through all target vars in variableset */
42063     +       %let tdsid = %sysfunc(open(temptarget));
42064     +       %if &tdsid %then %do;
42065     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
42066     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
42067     +          %do %while(^ %sysfunc(fetch(&tdsid)));
42068     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
42069     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
42070     +             target &var / level = &lvl
42071     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
42072     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
42073     +             %end;
42074     +             %else %if "&lvl" eq "INTERVAL" %then %do;
42075     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
42076     +             %end;
42077     +             %else %if "&lvl" eq "ORDINAL" %then %do;
42078     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
42079     +             %end;
42080     +          %end;
42081     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
42082     +       %end;
42083     +       useTarget variable = %EM_TARGET;
42084     +    %end;
42085     +    %else %do;
42086     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
42087     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
42088     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
42089     +      %end;
42090     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
42091     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
42092     +      %end;
42093     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
42094     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
42095     +      %end;
42096     +    %end;
42098     +    %if "&multipleTar" eq "N" %then %do;
42099     +      &EM_DEC_STATEMENT;
42100     +    %end;
42102     +    Performance &EM_PROPERTY_PERFORMANCE
42103     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
42104     +      nodesize=&EM_PROPERTY_NODESAMPLE
42105     +    %end;
42106     +    ;
42108     +    %if "&intFlag" eq "Y" %then %do;
42109     +       INTERACT Largest;
42110     +       Train maxnewdepth=0;
42111     +    %end;
42113     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
42114     +         Assess
42115     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
42116     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
42117     +              %put &em_codebar;
42118     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
42119     +              %put &errormsg;
42120     +              %put &em_codebar;
42121     +            %end;
42122     +            %else %do;
42123     +               Validata=&EM_IMPORT_VALIDATE
42124     +            %end;
42125     +         %end;
42126     +         %else %do;
42127     +           NoValidata
42128     +         %end;
42129     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
42130     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
42131     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
42132     +               %if &dsid %then %do;
42133     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
42134     +                 %do %while(^ %sysfunc(fetch(&dsid)));
42135     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
42136     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
42137     +                   %else %do;
42138     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
42139     +                      %else %let measure= MISC;
42140     +                   %end;
42141     +                 %end;
42142     +               %end;
42143     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
42144     +            %end;
42145     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
42146     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
42147     +                 %let measure=ASE;
42148     +              %end;
42149     +              %else %do;
42150     +                 %let measure=MISC;
42151     +              %end;
42152     +            %end;
42153     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
42154     +              %let measure=ASE;
42155     +            %end;
42156     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
42157     +               %let measure = LIFT;
42158     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
42159     +               %if &dsid %then %do;
42160     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
42161     +                 %do %while(^ %sysfunc(fetch(&dsid)));
42162     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
42163     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
42164     +                 %end;
42165     +               %end;
42166     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
42167     +            %end;
42168     +            measure=&measure
42169     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
42170     +               event = "&targetEvent"
42171     +            %end;
42172     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
42173     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
42174     +            %end;
42175     +         %end;
42176     +         %if "&multipleTar" eq "N" %then %do;
42177     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
42178     +               CV
42179     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
42180     +                 CVNITer = &EM_PROPERTY_CVNITER
42181     +               %end;
42182     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
42183     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
42184     +               %end;
42185     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
42186     +                 CVSeed = &EM_PROPERTY_CVSEED
42187     +               %end;
42188     +            %end;
42189     +         %end;
42190     +       %end;
42191     +      ;
42193     +      %if "&intFlag" ne "Y" %then %do;
42194     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
42195     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
42196     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
42197     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
42199     +          SUBTREE &subtree
42200     +          %if "&subtree" eq "NLEAVES" %then %do;
42201     +            =&EM_PROPERTY_NSUBTREE
42202     +          %end;
42203     +          ;
42204     +        %end;
42206     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
42207     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
42208     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
42209     +          %end;
42210     +       %end;
42211     +      %end;
42212     + %end;
42215     + MakeMacro nleaves = nleaves;
42216     + save
42217     + %if "&EM_USER_EMTREE" ne "" %then %do;
42218     +   MODEL=&EM_USER_EMTREE
42219     + %end;
42220     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
42221     +   SEQUENCE=&EM_USER_OUTSEQ
42222     + %end;
42223     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
42224     +   IMPORTANCE=&EM_USER_OUTIMPORT
42225     + %end;
42226     + %if "&EM_USER_OUTNODES" ne "" %then %do;
42227     +   NODESTAT=&EM_USER_OUTNODES
42228     + %end;
42229     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
42230     +   SUMMARY=&EM_USER_OUTSUMMARY
42231     + %end;
42232     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
42233     +   STATSBYNODE=&EM_USER_OUTSTATS
42234     + %end;
42235     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
42236     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
42237     + %end;
42238     + %if "&EM_USER_OUTPATH" ne "" %then %do;
42239     +   Pathlistnonmissing=&EM_USER_OUTPATH
42240     + %end;
42241     + %if "&EM_USER_OUTRULES" ne "" %then %do;
42242     +   RULES = &EM_USER_OUTRULES
42243     + %end;
42244     + ;
42246     + %if "&intFlag" ne "Y" %then %do;
42248     +   %let lookupString = ;
42249     +   %if ^%symexist(EM_OPTION) %then
42250     +      %let EM_OPTION=;
42252     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
42253     +      %let lookupString = LOOKUP=SELECT;
42254     +   %end;
42256     +   %let codetext=;
42257     +   %let norescodetxt=;
42259     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
42260     +     %let codetext=&codetext DUMMY;
42261     +     %let norescodetxt=&norescodetxt DUMMY;
42262     +   %end;
42263     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
42264     +     %let codetext=&codetext NOLEAFID;
42265     +     %let norescodetxt=&norescodetxt NOLEAFID;
42266     +   %end;
42267     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
42268     +     %let norescodetxt=&norescodetxt NOPRED;
42269     +   %end;
42271     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
42272     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
42274     +   %if &nnpmml %then %do;
42275     +     code pmml;
42276     +   %end;
42278     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
42279     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
42280     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
42281     +   %end;
42282     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
42283     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
42284     +   %end;
42285     + %end;
42287     + run;
42288     + quit;
42290     + /*%em_checkerror(); */
42291     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
42292     +   /* Delete DMDB catalog */
42293     +   proc datasets lib=work nolist;
42294     +       delete _treeDMDB / mt=cat;
42295     +  run;
42296     +  %end;
42298     + %if &nnpmml %then %do;
42299     +    ods pmml close;
42300     + %end;
42302     +  %doendm:
42304     +%mend em_tree_runTreeProcedure;
42306     +%macro em_tree_createFitStats( multipleTar= );
42309     +  /* create targetTable is multipleTar eq Y */
42310     +  data temptarget;
42311     +    set &EM_DATA_VARIABLESET;
42312     +    where ROLE="TARGET";
42313     +  run;
42315     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
42316     +   data &EM_USER_EMOUTFIT;
42317     +     length target $32;
42318     +     merge work.fit_train
42319     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
42320     +       work.fit_valid
42321     +     %end;
42322     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
42323     +       work.fit_test
42324     +     %end;
42325     +     ;
42326     +     %if "&multipleTar" eq "N" %then %do;
42327     +       target="%EM_TARGET";
42328     +     %end;
42329     +     %else %do;
42330     +       target = _TARGET_;
42331     +     %end;
42332     +     drop _NW_ _SUMW_
42333     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
42334     +        _VSUMW_
42335     +     %end;
42336     +     ;
42337     +   run;
42339     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
42340     +     proc datasets library=work nolist;
42341     +       delete fit_valid;
42342     +     run;
42343     +   %end;
42344     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
42345     +     proc datasets library=work nolist;
42346     +       delete fit_test;
42347     +     run;
42348     +   %end;
42350     +%mend em_tree_createFitStats;
42353     +%macro em_tree_makeEnglishRules;
42355     +  %EM_GETNAME(key=OUTNODES, type=DATA);
42356     +  %EM_GETNAME(key=OUTPATH, type=DATA);
42358     +  /* verify that necessary tables exist and if not, skip processing */
42359     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
42360     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
42361     +    %goto doendm;
42362     +  %end;
42363     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
42364     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
42365     +    %goto doendm;
42366     +  %end;
42368     +  /* determine length of variable in outpath dataset */
42369     +  %let vlength= ;
42370     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
42371     +  %if &dsid ne %then %do;
42372     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
42373     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
42374     +  %end;
42375     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
42377     +  data tempoutpath;
42378     +    length varname $&vlength;
42379     +    retain varname;
42380     +    set &EM_USER_OUTPATH;
42382     +    if ^missing(variable) then varname=variable;
42383     +    else if ^missing(var_name) then varname=var_name;
42384     +    output;
42385     +  run;
42387     +  /* create an array of generated predicted variable names */
42388     +  %let tree_pred_vars = ;
42389     +  %let tree_pred_label = ;
42390     +  %let numpred= 0;
42391     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
42393     +    data _null_;
42394     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
42395     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
42396     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
42397     +     if eof then
42398     +       call symput('numpred', strip(put(_N_, BEST.)));
42399     +    run;
42400     +  %end;
42402     +  /* determine if NPRIORS exists in outnodes  */
42403     +  %local nprior_flag;
42404     +  data _null_;
42405     +    set &EM_USER_OUTNODES(obs=2) end=eof;
42406     +    if eof then do;
42407     +      call symput('nprior_flag', strip(put(npriors, best.)));
42408     +    end;
42409     +  run;
42411     +  proc sort data=tempoutpath; by node; run;
42412     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
42414     +  data tempoutpath;
42415     +    merge tempoutpath(in=_a) outnodes(keep= node
42416     +    %if "&nprior_flag" ne "." %then %do;
42417     +      NPRIORS
42418     +    %end;
42419     +    %else %do;
42420     +      N
42421     +    %end;
42422     +    %if &numpred gt 0 %then %do;
42423     +      %do i=1 %to &numpred;
42424     +        &&tree_pred_vars&i
42425     +      %end;
42426     +    %end;
42427     +    );
42428     +    by node;
42429     +    if _a;
42430     +  run;
42432     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
42434     +  data _null_;
42435     +    file x;
42436     +    set tempoutpath;
42437     +    by node descending varname;
42438     +    retain origvar oldnode string;
42439     +    length origvar $32 oldnode 8 string $200;
42441     +    if _N_ = 1 then do;
42442     +      origvar = varname;
42443     +      oldnode = node;
42444     +    end;
42446     +    if first.node then do;
42447     +       put "&EM_CODEBAR";
42448     +       put " Node = " node;
42449     +       put "&EM_CODEBAR";
42450     +    end;
42452     +      if first.varname then do;
42453     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
42454     +            if MISSING(CHARACTER_VALUE) then do;
42455     +             if NUMERIC_VALUE ne .  then do;
42456     +              if ^first.node then do;
42457     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
42458     +              end;
42459     +              else do;
42460     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
42461     +              end;
42462     +             end;
42463     +            end;
42464     +            else do;
42465     +              if ^first.node then do;
42466     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
42467     +              end;
42468     +              else do;
42469     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
42470     +              end;
42471     +             end;
42472     +         end;
42473     +         else if RELATION in ("=") then do;
42474     +            if ^first.node then do;
42475     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
42476     +            end;
42477     +            else do;
42478     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
42479     +            end;
42480     +         end;
42481     +         else if RELATION in ("ISMISSING") then do;
42482     +            if ^first.node then do;
42483     +              string = " AND "|| strip(varname) || " equals Missing";
42484     +            end;
42485     +            else do;
42486     +              string = "if "|| strip(varname) ||" equals Missing";
42487     +            end;
42488     +         end;
42489     +         else if RELATION in ("ISNOTMISSING") then do;
42490     +            if ^first.node then do;
42491     +              string = " AND "|| strip(varname) || " equals All Values";
42492     +            end;
42493     +            else do;
42494     +              string = "if "|| strip(varname) ||" equals All Values";
42495     +            end;
42496     +         end;
42497     +         if ^missing(varname) then origvar = varname;
42498     +         oldnode=node;
42500     +      end;
42501     +      else do;
42502     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
42503     +          if MISSING(CHARACTER_VALUE) then do;
42504     +           if  NUMERIC_VALUE ne .  then do;
42505     +            if ^MISSING(string) then
42506     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
42507     +            else
42508     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
42509     +           end;
42510     +          end;
42511     +          else do;
42512     +            if ^MISSING(string) then
42513     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
42514     +            else
42515     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
42516     +          end;
42518     +         end;
42519     +         else if RELATION in ("=") then do;
42520     +           string = strip(string)||", "||strip(character_value);
42521     +         end;
42522     +         else if RELATION in ("ISMISSING") then do;
42524     +         end;
42525     +         if ^missing(varname) then origvar = varname;
42526     +         oldnode=node;
42527     +      end;
42528     +      if last.varname then do;
42529     +         if RELATION in ("ISMISSING") then do;
42530     +           if ^first.varname then do;
42531     +             string = strip(string) || " or MISSING";
42532     +           end;
42533     +         end;
42534     +         put string;
42535     +         if ^missing(varname) then origvar = varname;
42536     +         oldnode=node;
42537     +      end;
42539     +      if last.node then do;
42540     +         put "then ";
42541     +         put " Tree Node Identifier   = " node;
42543     +         %if "&nprior_flag" ne "." %then %do;
42544     +           put " Number of Observations = " NPRIORS;
42545     +         %end;
42546     +         %else %do;
42547     +           put " Number of Observations = " N;
42548     +         %end;
42550     +         %if &numpred gt 0 %then %do;
42551     +           %do i=1 %to &numpred;
42552     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
42553     +           %end;
42554     +         %end;
42556     +         put " ";
42557     +         if ^missing(varname) then origvar = varname;
42558     +         oldnode=node;
42559     +      end;
42561     +  run;
42563     +  proc datasets lib=work nolist;
42564     +    delete tempoutpath outnodes;
42565     +  run;
42567     +  %doendm:
42568     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree / view=EMWS1.em_Tree;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Part_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =Age_group Industry Population Sum_Labor_Force_Pop Sum_Labor_Force_Pop );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree;
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: There were 196 observations read from the data set EMWS1.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree Leafsize = 5 MinCatSize = 5 MaxBranch = 10 MaxDepth = 10
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.05 padjust = CHAIDBEFORE DEPTH Maxrules = 3 Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   Population
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Age_group Industry
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   Sum_Labor_Force_Pop
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   INTERVAL
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBF;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.Part_VALIDATE measure=ASE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1580210 kilobytes of physical memory.
NOTE: Will use 196 out of 196 training cases.
NOTE: Using memory pool with 25596928 bytes.
NOTE: Passed training data 8 times.
NOTE: Training used 33416 bytes of work memory.
NOTE: The subtree sequence contains 21 subtrees. The largest has 36 nodes and 25 leaves.
NOTE: Using subtree with 34 nodes and 24 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 34 nodes and 24 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 24.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree_EMTREE SEQUENCE=EMWS1.Tree_OUTSEQ IMPORTANCE=EMWS1.Tree_OUTIMPORT NODESTAT=EMWS1.Tree_OUTNODES SUMMARY=EMWS1.Tree_OUTSUMMARY STATSBYNODE=EMWS1.Tree_OUTSTATS TOPOLOGY=EMWS1.Tree_OUTTOPOLOGY 
Pathlistnonmissing=EMWS1.Tree_OUTPATH RULES = EMWS1.Tree_OUTRULES ;
NOTE: The data set EMWS1.TREE_OUTIMPORT has 3 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 740 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 34 observations and 16 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 89 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 107 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 21 observations and 18 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 198 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 34 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\TREEFLOW.sas" res group=Tree ;
NOTE: External file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\TREEPUBLISH.sas" nores group=Tree ;
NOTE: External file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: There were 196 observations read from the data set EMWS1.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.18 seconds
      
NOTE: There were 196 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 196 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.23 seconds
      cpu time            0.20 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "Sum_Labor_Force_Pop";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $17;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 89 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 89 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Ids_Sum_Labor_Force__DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS_SUM_LABOR_FORCE__DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 89 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 89 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 34 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 34 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node N P_Sum_Labor_Force_Pop );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 89 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 34 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 89 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 89 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 89 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " N;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Sum_Labor_Force_Pop = " P_Sum_Labor_Force_Pop;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195   
NOTE: The file X is:
      Filename=C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=09Dec2019:16:17:37,
      Create Time=19Nov2019:16:03:14

NOTE: 250 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 87.
NOTE: There were 89 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
The SAS System

MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11873071134031;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42570      
42571      *------------------------------------------------------------*;
42572      * End TRAIN: Tree;
42573      *------------------------------------------------------------*;

42574      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42575      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
42576      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42577      ;
MPRINT(EM_DIAGRAM):   ;
42578      ;
MPRINT(EM_DIAGRAM):   ;
42579      ;
MPRINT(EM_DIAGRAM):   ;
42580      ;
MPRINT(EM_DIAGRAM):   ;
42581      quit;
MPRINT(EM_DIAGRAM):   quit;
42582      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42583      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
42584      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42585      /*; *"; *'; */
42586      ;
MPRINT(EM_DIAGRAM):   ;
42587      run;
MPRINT(EM_DIAGRAM):   run;
42588      quit;
MPRINT(EM_DIAGRAM):   quit;
42589      /* Reset EM Options */
42590      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
42591      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
42592      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
42593      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
42594      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
42595      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
