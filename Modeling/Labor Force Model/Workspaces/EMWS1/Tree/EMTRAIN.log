MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20:50:00" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 19, 2019
Time:                20:50:00
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1CQ85WK "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1CQ85WK new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20:50:00" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20:50:00" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
40770      proc freq data=EMWS1.Tree_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree_VariableSet noprint;
40771      table ROLE*LEVEL/out=WORK.TreeMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TreeMETA;
40772      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

40773      proc print data=WORK.TreeMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TreeMETA label noobs;
40774      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
40775      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
40776      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40777      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
40778      run;

NOTE: There were 5 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40779      title10;
MPRINT(EM_DIAGRAM):   title10;
40780      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "Sum_Labor_Force_Pop"." 
40781      proc print data = EMWS1.Ids_Sum_Labor_Force__DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_Sum_Labor_Force__DM noobs label;
40782      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
40783      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
40784      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
40785      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40786      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
40787      run;

NOTE: There were 3 observations read from the data set EMWS1.IDS_SUM_LABOR_FORCE__DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 12.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

40788      title10;
MPRINT(EM_DIAGRAM):   title10;
40789      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Labor Force Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Labor Force';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Sum_Labor_Force_Pop(label="Sum_Labor_Force_Pop");
MPRINT(EM_DECDATA):   length Sum_Labor_Force_Pop 8 ;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=225000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=25077000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=12651000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
41292      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
41293      * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
41294      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
41295      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

41296      %let EMEXCEPTIONSTRING=;
41297      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
41298      * TRAIN: Tree;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree;
41299      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41300      %let EM_ACTION = TRAIN;
41301      %let syscc = 0;
41302      %macro main;
41303      
41304        %if %upcase(&EM_ACTION) = CREATE %then %do;
41305          filename temp catalog 'sashelp.emmodl.tree_create.source';
41306          %include temp;
41307          filename temp;
41308      
41309          %em_tree_create;
41310        %end;
41311      
41312         %else
41313         %if %upcase(&EM_ACTION) = TRAIN %then %do;
41314      
41315             filename temp catalog 'sashelp.emmodl.tree_train.source';
41316             %include temp;
41317             filename temp;
41318             %em_tree_train;
41319         %end;
41320      
41321        %else
41322        %if %upcase(&EM_ACTION) = SCORE %then %do;
41323          filename temp catalog 'sashelp.emmodl.tree_score.source';
41324          %include temp;
41325          filename temp;
41326      
41327          %em_tree_score;
41328      
41329        %end;
41330      
41331        %else
41332        %if %upcase(&EM_ACTION) = REPORT %then %do;
41333      
41334             filename temp catalog 'sashelp.emmodl.tree_report.source';
41335             %include temp;
41336             filename temp;
41337      
41338             %em_tree_report;
41339         %end;
41340      
41341        %else
41342        %if %upcase(&EM_ACTION) = OPENINT %then %do;
41343      
41344             filename temp catalog 'sashelp.emmodl.tree_actions.source';
41345             %include temp;
41346             filename temp;
41347             %EM_TREE_OPENTREEVIEWER;
41348      
41349         %end;
41350      
41351        %else
41352        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
41353      
41354             filename temp catalog 'sashelp.emmodl.tree_actions.source';
41355             %include temp;
41356             filename temp;
41357             %EM_TREE_CLOSETREEVIEWER;
41358      
41359         %end;
41360      
41361      
41362         %doendm:
41363      %mend main;
41364      
41365      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
41367     +%macro em_tree_train;
41369     +   %if &EM_IMPORT_DATA eq %then %do;
41370     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
41371     +       %put &em_codebar;
41372     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
41373     +       %put &errormsg;
41374     +       %put &em_codebar;
41375     +       %goto doendm;
41376     +   %end;
41377     +   %else
41378     +       %let EMEXCEPTIONSTRING =;
41380     +   %if  &EM_NUM_TARGET lt 1 %then %do;
41381     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
41382     +        %put &em_codebar;
41383     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
41384     +        %put &errormsg;
41385     +        %put &em_codebar;
41386     +        %goto doendm;
41387     +   %end;
41389     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
41390     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
41391     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
41392     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
41393     +        %put &em_codebar;
41394     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
41395     +        %put &errormsg;
41396     +        %put &em_codebar;
41397     +        %goto doendm;
41398     +   %end;
41400     +   /* Initialize property macro variables */
41401     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
41402     +   %include temp;
41403     +   filename temp;
41405     +   %EM_SetProperties;
41407     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
41408     +   %EM_GETNAME(key=EMTREE, type=DATA);
41409     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
41410     +     /* if import eq Y and no importtable defined, throw an exception */
41411     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
41412     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
41413     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
41414     +         %put &em_codebar;
41415     +         %put &errmsg;
41416     +         %put &em_codebar;
41417     +         %goto doendm;
41418     +      %end;
41419     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
41420     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
41421     +         %put &em_codebar;
41422     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
41423     +         %put &errormsg;
41424     +         %put &em_codebar;
41425     +         %goto doendm;
41426     +      %end;
41427     +      %else %do;
41428     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
41429     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
41430     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
41431     +         %let varnumX = %sysfunc(varnum(&dsid,X));
41432     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
41433     +         %let dsid = %sysfunc(close(&dsid));
41434     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
41435     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
41436     +            %put &em_codebar;
41437     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
41438     +            %put &errormsg;
41439     +            %put &em_codebar;
41440     +            %goto doendm;
41441     +         %end;
41442     +      %end;
41443     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
41444     +         proc delete data=&EM_USER_EMTREE;
41445     +         run;
41446     +      %end;
41447     +   %end;
41448     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
41449     +      proc delete data=&EM_USER_EMTREE;
41450     +      run;
41451     +   %end;
41453     +   /* load tree macros */
41454     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
41455     +   %include temp;
41456     +   filename temp;
41458     +   /* data sets */
41459     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
41460     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
41461     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
41463     +   /* files */
41464     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
41466     +   /* check actual num of target levels */
41467     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
41468     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
41469     +                              nLevel=_nTargetLevel );
41470     +      %if &_nTargetLevel  > 2 %then %do;
41471     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
41472     +        %put &em_codebar;
41473     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
41474     +        %put &errormsg;
41475     +        %put &em_codebar;
41476     +        %goto doendm;
41477     +      %end;
41478     +   %end;
41480     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
41481     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
41482     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
41483     +        %let costflag=0;
41484     +        data _null_;
41485     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
41486     +          if eof then call symput("costflag", _N_);
41487     +        run;
41488     +        %if &costflag gt 0 %then %do;
41489     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
41490     +          %put &em_codebar;
41491     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
41492     +          %put &errormsg;
41493     +          %put &em_codebar;
41494     +          %goto doendm;
41495     +       %end;
41496     +     %end;
41497     +   %end;
41499     +   /* determine if multiple targets will be processed */
41500     +   %let em_tree_multipleTargets=N;
41501     +   %let em_tree_numTarget = 1;
41502     +   %let em_tree_targetVars=;
41504     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
41505     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
41506     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
41507     +         %let em_tree_multipleTargets=N;
41508     +      %end;
41509     +      %else %do;
41510     +         /* create macro array of targets  */
41511     +         data _null_;
41512     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
41513     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
41514     +           if eof then
41515     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
41516     +        run;
41518     +        %if &em_tree_numTarget gt 1 %then %do;
41519     +           %let em_tree_multipleTargets=Y;
41520     +        %end;
41521     +      %end;
41522     +   %end;
41524     +   /* create view of only necessary variable for performance reasons */
41525     +   %let tempData = &EM_LIB..em_&EM_NODEID;
41526     +   data &tempData / view=&tempData;
41527     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
41528     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
41529     +       %EM_TARGET
41530     +     %end;
41531     +     %else %do;
41532     +       %if &em_tree_numTarget ne 0 %then %do;
41533     +         %do i=1 %to &em_tree_numTarget;
41534     +            &&em_tree_targetVars&i
41535     +         %end;
41536     +       %end;
41537     +     %end;
41538     +     );
41539     +   run;
41541     +   /* run Tree procedure */
41542     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
41544     +   /* Check return code and throw exception if error is detected */
41545     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
41546     +   %if &syserr %then %do;
41547     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
41548     +     %goto doendm;
41549     +   %end;
41551     +   /* add decision score code if multiple targets are processed */
41552     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
41553     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
41554     +   %end;
41556     +   /* create outfit dataset if multiple score statements have been executed */
41557     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
41559     +   /* create English Rules */
41560     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
41561     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
41562     +       %em_tree_makeEnglishRules;
41564     +       /* English Rules */
41565     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
41567     +     %end;
41568     +   filename x;
41570     +   %doendm:
41571     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
41572     +%macro EM_SetProperties;
41574     +   /* train properties */
41575     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
41576     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
41577     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
41578     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
41579     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
41580     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
41581     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
41582     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
41583     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
41584     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
41585     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
41586     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
41587     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
41588     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
41589     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
41590     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
41591     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
41592     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
41593     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
41594     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
41595     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
41596     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
41597     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
41598     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
41599     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
41600     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
41601     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
41602     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
41603     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
41604     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
41605     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
41606     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
41607     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
41608     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
41609     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
41610     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
41611     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
41612     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
41613     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
41614     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
41615     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
41617     +   /* properties for interactive sample */
41618     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
41619     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
41620     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
41621     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
41623     +   /* report properties */
41624     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
41625     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
41626     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
41627     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
41628     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
41629     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
41630     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
41631     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
41632     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
41633     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
41634     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
41635     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
41636     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
41638     +   /* score properties */
41639     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
41640     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
41642     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS1.Tree_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;

NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
41644     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
41645     +  %global &nLevel;
41646     +  proc dmdb batch data=&indata
41647     +    classout=_tmp_dmdbout;
41648     +    class &target;
41649     +  run;
41650     +  data _tmp_dmdbout;
41651     +    set _tmp_dmdbout;
41652     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
41653     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
41654     +  run;
41655     +  data _null_;
41656     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
41657     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
41658     +    %let dsid = %sysfunc(close(&dsid));
41659     +     call symput("&nLevel", put(&_obs, Best12.));
41660     +  run;
41662     +  proc datasets lib=work nolist;
41663     +     delete _tmp_dmdbout;
41664     +  run;
41665     +  quit;
41666     +%Mend EM_CheckBinaryTargetLevel;
41669     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
41671     +  /* determine the number of obs in training data */
41672     +  proc sql;
41673     +    reset noprint;
41674     +    select count(*) into :em_nobs from &indata;
41675     +  quit;
41677     +  /* determine the number of input variables */
41678     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
41679     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
41681     +  /* retrieve targetEvent from decmeta */
41682     +  %let targetEvent=;
41683     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
41684     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
41685     +      data _null_;
41686     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
41687     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
41688     +      run;
41689     +    %end;
41690     +  %end;
41692     +  /* create targetTable if multipleTar eq Y */
41693     +  data temptarget;
41694     +    set &EM_DATA_VARIABLESET;
41695     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
41696     +  run;
41698     + /* data sets */
41699     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
41700     + %EM_GETNAME(key=EMTREE,        type=DATA);
41701     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
41702     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
41703     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
41704     + %EM_GETNAME(key=OUTNODES,      type=DATA);
41705     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
41706     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
41707     + %EM_GETNAME(key=OUTPATH,       type=DATA);
41708     + %EM_GETNAME(key=OUTRULES,      type=DATA);
41710     + /* files */
41711     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
41712     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
41714     + /* turn on pmml if requested */
41715     + %let nnpmml=0;
41716     + %if %symexist(EM_PMML) %then %do;
41717     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
41718     +       %let nnpmml=1;
41720     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
41721     +   %end;
41722     +%end;
41724     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
41726     +%if &nnpmml or &numClassTarget %then %do;
41728     +    /* create dmdb needed for pmml generation */
41729     +    %let tree_maxlevel = 512;
41730     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
41731     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
41732     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
41733     +      %end;
41734     +    %end;
41735     +    %if &tree_maxlevel gt 0 %then %do;
41736     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
41737     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
41738     +    %end;
41740     +    %let targetOrderString =;
41741     +    %let targetString = ;
41742     +    data _null_;
41743     +       length orderString nameString $10000;
41744     +       retain orderString nameString;
41745     +       set &em_data_variableset end=eof;
41746     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
41747     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
41748     +       %end;
41749     +       %else %do;
41750     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
41751     +       %end;          select(order);
41752     +         when('')        order ='DESC';
41753     +         when('FMTASC')  order='ASCFMT';
41754     +         when('FMTDESC') order='DESFMT';
41755     +         otherwise;
41756     +       end;
41757     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
41758     +       nameString = trim(nameString)!!' '!!trim(NAME);
41760     +       if eof then do;
41761     +          call symput('targetOrderString', trim(orderString));
41762     +          call symput('targetString', trim(nameString));
41763     +       end;
41764     +    run;
41766     +    %let arborkluge= "work._treeDMDB";
41768     +    proc dmdb batch data=&indata
41769     +    %if &nnpmml %then %do;
41770     +        PMML
41771     +    %end;
41772     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
41774     +      %if &nnpmml %then %do;
41775     +           %if "%EM_ID" ne "" %then %do;
41776     +             id %EM_ID;
41777     +           %end;
41778     +           %if &EM_NUM_CLASS gt 0 %then %do;
41779     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
41780     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
41781     +                  &targetOrderString;
41782     +           %end;
41783     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
41784     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
41785     +           %end;
41786     +           target &targetString %EM_INTERVAL_TARGET;
41787     +           %if "%EM_FREQ" ne "" %then %do;
41788     +             freq %EM_FREQ;
41789     +           %end;
41790     +      %end;
41791     +      %else %do;
41792     +         class  &targetOrderString;
41793     +         target &targetString %EM_INTERVAL_TARGET;
41794     +      %end;
41795     +    run;
41796     +    quit;
41798     +    proc datasets lib=work nolist;
41799     +       delete classout varout;
41800     +    run;
41801     +    quit;
41803     + %end;
41806     + /* run Arbor procedure */
41807     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
41808     +  proc arbor data=&INDATA
41810     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
41811     +    Leafsize = &EM_PROPERTY_LEAFSIZE
41812     +  %end;
41814     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
41815     +    Splitsize = &EM_PROPERTY_SPLITSIZE
41816     +  %end;
41818     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
41819     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
41820     +  %end;
41822     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
41823     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
41824     +  %end;
41826     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
41827     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
41828     +  %end;
41830     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
41831     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
41832     +  %end;
41833     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
41834     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
41835     +  %end;
41836     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
41837     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
41838     +  %end;
41840     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
41841     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
41842     +      alpha = &EM_PROPERTY_SIGLEVEL
41843     +    %end;
41844     +  %end;
41846     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
41847     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
41848     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
41849     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
41850     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
41852     +        padjust =
41853     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
41854     +          &chaid
41855     +        %end;
41856     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
41857     +          DEPTH
41858     +        %end;
41859     +      %end;
41860     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
41861     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
41862     +         pvars = &num_inputs
41863     +      %end;
41864     +    %end;
41865     +  %end;
41866     +  %else %do;
41867     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
41868     +         padjust = NONE
41869     +      %end;
41870     +  %end;
41872     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
41873     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
41874     +    Maxrules = &num_nrules
41875     +  %end;
41877     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
41878     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
41879     +    Maxsurrs = &num_nsurrs
41880     +  %end;
41882     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
41883     +     Missing=&EM_PROPERTY_MISSINGVALUE
41884     +  %end;
41886     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
41887     +     USEVARONCE
41888     +  %end;
41890     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
41891     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
41892     +  %end;
41895     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
41896     +    event = "&targetEvent"
41897     +  %end;
41899     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
41900     +     DECSEARCH
41901     +  %end;
41903     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
41904     +     PRIORSSEARCH
41905     +  %end;
41907     +  %if &arbor_1 ne %then %do;
41908     +    &arbor_1
41909     +  %end;
41911     +  %if &em_arbor ne %then %do;
41912     +     &em_arbor
41913     +  %end;
41914     +  ;
41915     + %end;
41916     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
41917     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
41918     +       Performance &EM_PROPERTY_PERFORMANCE
41919     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
41920     +         nodesize=&EM_PROPERTY_NODESAMPLE
41921     +       %end;
41922     +       ;
41923     +       interact;
41924     + %end;
41925     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
41926     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
41927     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
41928     +    %put &em_codebar;
41929     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
41930     +    %put &errormsg;
41931     +    %put &em_codebar;
41932     +    %goto doendm;
41933     +   %end;
41934     +   %else %do;
41935     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
41936     +       Performance &EM_PROPERTY_PERFORMANCE
41937     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
41938     +         nodesize=&EM_PROPERTY_NODESAMPLE
41939     +       %end;
41940     +       ;
41941     +       interact;
41942     +   %end;
41943     + %end;
41945     + %else %do;
41946     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
41947     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
41948     +    %put &em_codebar;
41949     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
41950     +    %put &errormsg;
41951     +    %put &em_codebar;
41952     +    %goto doendm;
41953     +   %end;
41954     +   %else %do;
41955     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
41956     +       Performance &EM_PROPERTY_PERFORMANCE
41957     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
41958     +         nodesize=&EM_PROPERTY_NODESAMPLE
41959     +       %end;
41960     +       ;
41961     +        interact;
41962     +   %end;
41963     + %end;
41965     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
41966     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
41967     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
41968     +    %end;
41970     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
41971     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
41972     +    %end;
41974     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
41975     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
41976     +    %end;
41978     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
41979     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
41980     +    %end;
41982     +    %if "%EM_FREQ" ne "" %then %do;
41983     +       freq %EM_FREQ;
41984     +    %end;
41986     +    %if "&multipleTar" eq "Y" %then %do;
41987     +       /* cycle through all target vars in variableset */
41988     +       %let tdsid = %sysfunc(open(temptarget));
41989     +       %if &tdsid %then %do;
41990     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
41991     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
41992     +          %do %while(^ %sysfunc(fetch(&tdsid)));
41993     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
41994     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
41995     +             target &var / level = &lvl
41996     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
41997     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
41998     +             %end;
41999     +             %else %if "&lvl" eq "INTERVAL" %then %do;
42000     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
42001     +             %end;
42002     +             %else %if "&lvl" eq "ORDINAL" %then %do;
42003     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
42004     +             %end;
42005     +          %end;
42006     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
42007     +       %end;
42008     +       useTarget variable = %EM_TARGET;
42009     +    %end;
42010     +    %else %do;
42011     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
42012     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
42013     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
42014     +      %end;
42015     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
42016     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
42017     +      %end;
42018     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
42019     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
42020     +      %end;
42021     +    %end;
42023     +    %if "&multipleTar" eq "N" %then %do;
42024     +      &EM_DEC_STATEMENT;
42025     +    %end;
42027     +    Performance &EM_PROPERTY_PERFORMANCE
42028     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
42029     +      nodesize=&EM_PROPERTY_NODESAMPLE
42030     +    %end;
42031     +    ;
42033     +    %if "&intFlag" eq "Y" %then %do;
42034     +       INTERACT Largest;
42035     +       Train maxnewdepth=0;
42036     +    %end;
42038     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
42039     +         Assess
42040     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
42041     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
42042     +              %put &em_codebar;
42043     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
42044     +              %put &errormsg;
42045     +              %put &em_codebar;
42046     +            %end;
42047     +            %else %do;
42048     +               Validata=&EM_IMPORT_VALIDATE
42049     +            %end;
42050     +         %end;
42051     +         %else %do;
42052     +           NoValidata
42053     +         %end;
42054     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
42055     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
42056     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
42057     +               %if &dsid %then %do;
42058     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
42059     +                 %do %while(^ %sysfunc(fetch(&dsid)));
42060     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
42061     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
42062     +                   %else %do;
42063     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
42064     +                      %else %let measure= MISC;
42065     +                   %end;
42066     +                 %end;
42067     +               %end;
42068     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
42069     +            %end;
42070     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
42071     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
42072     +                 %let measure=ASE;
42073     +              %end;
42074     +              %else %do;
42075     +                 %let measure=MISC;
42076     +              %end;
42077     +            %end;
42078     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
42079     +              %let measure=ASE;
42080     +            %end;
42081     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
42082     +               %let measure = LIFT;
42083     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
42084     +               %if &dsid %then %do;
42085     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
42086     +                 %do %while(^ %sysfunc(fetch(&dsid)));
42087     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
42088     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
42089     +                 %end;
42090     +               %end;
42091     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
42092     +            %end;
42093     +            measure=&measure
42094     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
42095     +               event = "&targetEvent"
42096     +            %end;
42097     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
42098     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
42099     +            %end;
42100     +         %end;
42101     +         %if "&multipleTar" eq "N" %then %do;
42102     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
42103     +               CV
42104     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
42105     +                 CVNITer = &EM_PROPERTY_CVNITER
42106     +               %end;
42107     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
42108     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
42109     +               %end;
42110     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
42111     +                 CVSeed = &EM_PROPERTY_CVSEED
42112     +               %end;
42113     +            %end;
42114     +         %end;
42115     +       %end;
42116     +      ;
42118     +      %if "&intFlag" ne "Y" %then %do;
42119     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
42120     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
42121     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
42122     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
42124     +          SUBTREE &subtree
42125     +          %if "&subtree" eq "NLEAVES" %then %do;
42126     +            =&EM_PROPERTY_NSUBTREE
42127     +          %end;
42128     +          ;
42129     +        %end;
42131     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
42132     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
42133     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
42134     +          %end;
42135     +       %end;
42136     +      %end;
42137     + %end;
42140     + MakeMacro nleaves = nleaves;
42141     + save
42142     + %if "&EM_USER_EMTREE" ne "" %then %do;
42143     +   MODEL=&EM_USER_EMTREE
42144     + %end;
42145     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
42146     +   SEQUENCE=&EM_USER_OUTSEQ
42147     + %end;
42148     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
42149     +   IMPORTANCE=&EM_USER_OUTIMPORT
42150     + %end;
42151     + %if "&EM_USER_OUTNODES" ne "" %then %do;
42152     +   NODESTAT=&EM_USER_OUTNODES
42153     + %end;
42154     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
42155     +   SUMMARY=&EM_USER_OUTSUMMARY
42156     + %end;
42157     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
42158     +   STATSBYNODE=&EM_USER_OUTSTATS
42159     + %end;
42160     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
42161     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
42162     + %end;
42163     + %if "&EM_USER_OUTPATH" ne "" %then %do;
42164     +   Pathlistnonmissing=&EM_USER_OUTPATH
42165     + %end;
42166     + %if "&EM_USER_OUTRULES" ne "" %then %do;
42167     +   RULES = &EM_USER_OUTRULES
42168     + %end;
42169     + ;
42171     + %if "&intFlag" ne "Y" %then %do;
42173     +   %let lookupString = ;
42174     +   %if ^%symexist(EM_OPTION) %then
42175     +      %let EM_OPTION=;
42177     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
42178     +      %let lookupString = LOOKUP=SELECT;
42179     +   %end;
42181     +   %let codetext=;
42182     +   %let norescodetxt=;
42184     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
42185     +     %let codetext=&codetext DUMMY;
42186     +     %let norescodetxt=&norescodetxt DUMMY;
42187     +   %end;
42188     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
42189     +     %let codetext=&codetext NOLEAFID;
42190     +     %let norescodetxt=&norescodetxt NOLEAFID;
42191     +   %end;
42192     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
42193     +     %let norescodetxt=&norescodetxt NOPRED;
42194     +   %end;
42196     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
42197     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
42199     +   %if &nnpmml %then %do;
42200     +     code pmml;
42201     +   %end;
42203     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
42204     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
42205     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
42206     +   %end;
42207     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
42208     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
42209     +   %end;
42210     + %end;
42212     + run;
42213     + quit;
42215     + /*%em_checkerror(); */
42216     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
42217     +   /* Delete DMDB catalog */
42218     +   proc datasets lib=work nolist;
42219     +       delete _treeDMDB / mt=cat;
42220     +  run;
42221     +  %end;
42223     + %if &nnpmml %then %do;
42224     +    ods pmml close;
42225     + %end;
42227     +  %doendm:
42229     +%mend em_tree_runTreeProcedure;
42231     +%macro em_tree_createFitStats( multipleTar= );
42234     +  /* create targetTable is multipleTar eq Y */
42235     +  data temptarget;
42236     +    set &EM_DATA_VARIABLESET;
42237     +    where ROLE="TARGET";
42238     +  run;
42240     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
42241     +   data &EM_USER_EMOUTFIT;
42242     +     length target $32;
42243     +     merge work.fit_train
42244     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
42245     +       work.fit_valid
42246     +     %end;
42247     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
42248     +       work.fit_test
42249     +     %end;
42250     +     ;
42251     +     %if "&multipleTar" eq "N" %then %do;
42252     +       target="%EM_TARGET";
42253     +     %end;
42254     +     %else %do;
42255     +       target = _TARGET_;
42256     +     %end;
42257     +     drop _NW_ _SUMW_
42258     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
42259     +        _VSUMW_
42260     +     %end;
42261     +     ;
42262     +   run;
42264     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
42265     +     proc datasets library=work nolist;
42266     +       delete fit_valid;
42267     +     run;
42268     +   %end;
42269     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
42270     +     proc datasets library=work nolist;
42271     +       delete fit_test;
42272     +     run;
42273     +   %end;
42275     +%mend em_tree_createFitStats;
42278     +%macro em_tree_makeEnglishRules;
42280     +  %EM_GETNAME(key=OUTNODES, type=DATA);
42281     +  %EM_GETNAME(key=OUTPATH, type=DATA);
42283     +  /* verify that necessary tables exist and if not, skip processing */
42284     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
42285     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
42286     +    %goto doendm;
42287     +  %end;
42288     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
42289     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
42290     +    %goto doendm;
42291     +  %end;
42293     +  /* determine length of variable in outpath dataset */
42294     +  %let vlength= ;
42295     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
42296     +  %if &dsid ne %then %do;
42297     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
42298     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
42299     +  %end;
42300     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
42302     +  data tempoutpath;
42303     +    length varname $&vlength;
42304     +    retain varname;
42305     +    set &EM_USER_OUTPATH;
42307     +    if ^missing(variable) then varname=variable;
42308     +    else if ^missing(var_name) then varname=var_name;
42309     +    output;
42310     +  run;
42312     +  /* create an array of generated predicted variable names */
42313     +  %let tree_pred_vars = ;
42314     +  %let tree_pred_label = ;
42315     +  %let numpred= 0;
42316     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
42318     +    data _null_;
42319     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
42320     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
42321     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
42322     +     if eof then
42323     +       call symput('numpred', strip(put(_N_, BEST.)));
42324     +    run;
42325     +  %end;
42327     +  /* determine if NPRIORS exists in outnodes  */
42328     +  %local nprior_flag;
42329     +  data _null_;
42330     +    set &EM_USER_OUTNODES(obs=2) end=eof;
42331     +    if eof then do;
42332     +      call symput('nprior_flag', strip(put(npriors, best.)));
42333     +    end;
42334     +  run;
42336     +  proc sort data=tempoutpath; by node; run;
42337     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
42339     +  data tempoutpath;
42340     +    merge tempoutpath(in=_a) outnodes(keep= node
42341     +    %if "&nprior_flag" ne "." %then %do;
42342     +      NPRIORS
42343     +    %end;
42344     +    %else %do;
42345     +      N
42346     +    %end;
42347     +    %if &numpred gt 0 %then %do;
42348     +      %do i=1 %to &numpred;
42349     +        &&tree_pred_vars&i
42350     +      %end;
42351     +    %end;
42352     +    );
42353     +    by node;
42354     +    if _a;
42355     +  run;
42357     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
42359     +  data _null_;
42360     +    file x;
42361     +    set tempoutpath;
42362     +    by node descending varname;
42363     +    retain origvar oldnode string;
42364     +    length origvar $32 oldnode 8 string $200;
42366     +    if _N_ = 1 then do;
42367     +      origvar = varname;
42368     +      oldnode = node;
42369     +    end;
42371     +    if first.node then do;
42372     +       put "&EM_CODEBAR";
42373     +       put " Node = " node;
42374     +       put "&EM_CODEBAR";
42375     +    end;
42377     +      if first.varname then do;
42378     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
42379     +            if MISSING(CHARACTER_VALUE) then do;
42380     +             if NUMERIC_VALUE ne .  then do;
42381     +              if ^first.node then do;
42382     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
42383     +              end;
42384     +              else do;
42385     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
42386     +              end;
42387     +             end;
42388     +            end;
42389     +            else do;
42390     +              if ^first.node then do;
42391     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
42392     +              end;
42393     +              else do;
42394     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
42395     +              end;
42396     +             end;
42397     +         end;
42398     +         else if RELATION in ("=") then do;
42399     +            if ^first.node then do;
42400     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
42401     +            end;
42402     +            else do;
42403     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
42404     +            end;
42405     +         end;
42406     +         else if RELATION in ("ISMISSING") then do;
42407     +            if ^first.node then do;
42408     +              string = " AND "|| strip(varname) || " equals Missing";
42409     +            end;
42410     +            else do;
42411     +              string = "if "|| strip(varname) ||" equals Missing";
42412     +            end;
42413     +         end;
42414     +         else if RELATION in ("ISNOTMISSING") then do;
42415     +            if ^first.node then do;
42416     +              string = " AND "|| strip(varname) || " equals All Values";
42417     +            end;
42418     +            else do;
42419     +              string = "if "|| strip(varname) ||" equals All Values";
42420     +            end;
42421     +         end;
42422     +         if ^missing(varname) then origvar = varname;
42423     +         oldnode=node;
42425     +      end;
42426     +      else do;
42427     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
42428     +          if MISSING(CHARACTER_VALUE) then do;
42429     +           if  NUMERIC_VALUE ne .  then do;
42430     +            if ^MISSING(string) then
42431     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
42432     +            else
42433     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
42434     +           end;
42435     +          end;
42436     +          else do;
42437     +            if ^MISSING(string) then
42438     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
42439     +            else
42440     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
42441     +          end;
42443     +         end;
42444     +         else if RELATION in ("=") then do;
42445     +           string = strip(string)||", "||strip(character_value);
42446     +         end;
42447     +         else if RELATION in ("ISMISSING") then do;
42449     +         end;
42450     +         if ^missing(varname) then origvar = varname;
42451     +         oldnode=node;
42452     +      end;
42453     +      if last.varname then do;
42454     +         if RELATION in ("ISMISSING") then do;
42455     +           if ^first.varname then do;
42456     +             string = strip(string) || " or MISSING";
42457     +           end;
42458     +         end;
42459     +         put string;
42460     +         if ^missing(varname) then origvar = varname;
42461     +         oldnode=node;
42462     +      end;
42464     +      if last.node then do;
42465     +         put "then ";
42466     +         put " Tree Node Identifier   = " node;
42468     +         %if "&nprior_flag" ne "." %then %do;
42469     +           put " Number of Observations = " NPRIORS;
42470     +         %end;
42471     +         %else %do;
42472     +           put " Number of Observations = " N;
42473     +         %end;
42475     +         %if &numpred gt 0 %then %do;
42476     +           %do i=1 %to &numpred;
42477     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
42478     +           %end;
42479     +         %end;
42481     +         put " ";
42482     +         if ^missing(varname) then origvar = varname;
42483     +         oldnode=node;
42484     +      end;
42486     +  run;
42488     +  proc datasets lib=work nolist;
42489     +    delete tempoutpath outnodes;
42490     +  run;
42492     +  %doendm:
42493     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree / view=EMWS1.em_Tree;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Part_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =Age_group Date Population_in_thousands Sum_Labor_Force_Pop Sum_Labor_Force_Pop );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree;
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 588 observations read from the data set EMWS1.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree Leafsize = 8 MinCatSize = 5 MaxBranch = 2 MaxDepth = 10
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 3 Maxsurrs = 2 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   Population_in_thousands
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Age_group Date
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   Sum_Labor_Force_Pop
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   INTERVAL
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBF;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.Part_VALIDATE measure=ASE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1579183 kilobytes of physical memory.
NOTE: Will use 588 out of 588 training cases.
NOTE: Using memory pool with 56605696 bytes.
NOTE: Passed training data 7 times.
NOTE: Training used 70728 bytes of work memory.
NOTE: The subtree sequence contains 4 subtrees. The largest has 7 nodes and 4 leaves.
NOTE: Using subtree with 5 nodes and 3 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 5 nodes and 3 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 3.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree_EMTREE SEQUENCE=EMWS1.Tree_OUTSEQ IMPORTANCE=EMWS1.Tree_OUTIMPORT NODESTAT=EMWS1.Tree_OUTNODES SUMMARY=EMWS1.Tree_OUTSUMMARY STATSBYNODE=EMWS1.Tree_OUTSTATS TOPOLOGY=EMWS1.Tree_OUTTOPOLOGY 
Pathlistnonmissing=EMWS1.Tree_OUTPATH RULES = EMWS1.Tree_OUTRULES ;
NOTE: The data set EMWS1.TREE_OUTIMPORT has 3 observations and 7 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 321 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 5 observations and 16 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 6 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 86 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 4 observations and 18 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 30 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 5 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\TREEFLOW.sas" res group=Tree ;
NOTE: External file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\TREEPUBLISH.sas" nores group=Tree ;
NOTE: External file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: There were 588 observations read from the data set EMWS1.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
      
NOTE: There were 588 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 588 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.18 seconds
      cpu time            0.17 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "Sum_Labor_Force_Pop";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $23;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Ids_Sum_Labor_Force__DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS_SUM_LABOR_FORCE__DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 5 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node N P_Sum_Labor_Force_Pop );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 5 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " N;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Sum_Labor_Force_Pop = " P_Sum_Labor_Force_Pop;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195   
NOTE: The file X is:
      Filename=C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=19Nov2019:20:50:01,
      Create Time=19Nov2019:16:03:14

NOTE: 27 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.17798025448712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
The SAS System


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42495      
42496      *------------------------------------------------------------*;
42497      * End TRAIN: Tree;
42498      *------------------------------------------------------------*;

42499      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42500      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
42501      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42502      ;
MPRINT(EM_DIAGRAM):   ;
42503      ;
MPRINT(EM_DIAGRAM):   ;
42504      ;
MPRINT(EM_DIAGRAM):   ;
42505      ;
MPRINT(EM_DIAGRAM):   ;
42506      quit;
MPRINT(EM_DIAGRAM):   quit;
42507      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42508      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
42509      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42510      /*; *"; *'; */
42511      ;
MPRINT(EM_DIAGRAM):   ;
42512      run;
MPRINT(EM_DIAGRAM):   run;
42513      quit;
MPRINT(EM_DIAGRAM):   quit;
42514      /* Reset EM Options */
42515      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
42516      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
42517      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
42518      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
42519      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
42520      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
