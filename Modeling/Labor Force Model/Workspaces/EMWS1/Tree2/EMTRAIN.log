MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 21, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:12:00" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 21, 2019
Time:                15:12:00
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0VW_8RY "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0VW_8RY new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 21, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:12:00" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 21, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:12:00" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
44027      proc freq data=EMWS1.Tree2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree2_VariableSet noprint;
44028      table ROLE*LEVEL/out=WORK.Tree2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Tree2META;
44029      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

44030      proc print data=WORK.Tree2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree2META label noobs;
44031      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
44032      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
44033      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
44034      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
44035      run;

NOTE: There were 5 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

44036      title10;
MPRINT(EM_DIAGRAM):   title10;
44037      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "Sum_Labor_Force_Pop"." 
44038      proc print data = EMWS1.Ids_Sum_Labor_Force__DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_Sum_Labor_Force__DM noobs label;
44039      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
44040      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
44041      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
44042      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
44043      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
44044      run;

NOTE: There were 3 observations read from the data set EMWS1.IDS_SUM_LABOR_FORCE__DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

44045      title10;
MPRINT(EM_DIAGRAM):   title10;
44046      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Labor Force Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Labor Force';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree2: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Sum_Labor_Force_Pop(label="Sum_Labor_Force_Pop");
MPRINT(EM_DECDATA):   length Sum_Labor_Force_Pop 8 ;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=225000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=25077000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=12651000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
44531      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
44532      * Tree2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree2: Generation of macros and macro variables;
44533      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
44534      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

44535      %let EMEXCEPTIONSTRING=;
44536      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
44537      * TRAIN: Tree2;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree2;
44538      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44539      %let EM_ACTION = TRAIN;
44540      %let syscc = 0;
44541      %macro main;
44542      
44543        %if %upcase(&EM_ACTION) = CREATE %then %do;
44544          filename temp catalog 'sashelp.emmodl.tree_create.source';
44545          %include temp;
44546          filename temp;
44547      
44548          %em_tree_create;
44549        %end;
44550      
44551         %else
44552         %if %upcase(&EM_ACTION) = TRAIN %then %do;
44553      
44554             filename temp catalog 'sashelp.emmodl.tree_train.source';
44555             %include temp;
44556             filename temp;
44557             %em_tree_train;
44558         %end;
44559      
44560        %else
44561        %if %upcase(&EM_ACTION) = SCORE %then %do;
44562          filename temp catalog 'sashelp.emmodl.tree_score.source';
44563          %include temp;
44564          filename temp;
44565      
44566          %em_tree_score;
44567      
44568        %end;
44569      
44570        %else
44571        %if %upcase(&EM_ACTION) = REPORT %then %do;
44572      
44573             filename temp catalog 'sashelp.emmodl.tree_report.source';
44574             %include temp;
44575             filename temp;
44576      
44577             %em_tree_report;
44578         %end;
44579      
44580        %else
44581        %if %upcase(&EM_ACTION) = OPENINT %then %do;
44582      
44583             filename temp catalog 'sashelp.emmodl.tree_actions.source';
44584             %include temp;
44585             filename temp;
44586             %EM_TREE_OPENTREEVIEWER;
44587      
44588         %end;
44589      
44590        %else
44591        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
44592      
44593             filename temp catalog 'sashelp.emmodl.tree_actions.source';
44594             %include temp;
44595             filename temp;
44596             %EM_TREE_CLOSETREEVIEWER;
44597      
44598         %end;
44599      
44600      
44601         %doendm:
44602      %mend main;
44603      
44604      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
44606     +%macro em_tree_train;
44608     +   %if &EM_IMPORT_DATA eq %then %do;
44609     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
44610     +       %put &em_codebar;
44611     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
44612     +       %put &errormsg;
44613     +       %put &em_codebar;
44614     +       %goto doendm;
44615     +   %end;
44616     +   %else
44617     +       %let EMEXCEPTIONSTRING =;
44619     +   %if  &EM_NUM_TARGET lt 1 %then %do;
44620     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
44621     +        %put &em_codebar;
44622     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
44623     +        %put &errormsg;
44624     +        %put &em_codebar;
44625     +        %goto doendm;
44626     +   %end;
44628     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
44629     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
44630     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
44631     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
44632     +        %put &em_codebar;
44633     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
44634     +        %put &errormsg;
44635     +        %put &em_codebar;
44636     +        %goto doendm;
44637     +   %end;
44639     +   /* Initialize property macro variables */
44640     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
44641     +   %include temp;
44642     +   filename temp;
44644     +   %EM_SetProperties;
44646     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
44647     +   %EM_GETNAME(key=EMTREE, type=DATA);
44648     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
44649     +     /* if import eq Y and no importtable defined, throw an exception */
44650     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
44651     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
44652     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
44653     +         %put &em_codebar;
44654     +         %put &errmsg;
44655     +         %put &em_codebar;
44656     +         %goto doendm;
44657     +      %end;
44658     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
44659     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
44660     +         %put &em_codebar;
44661     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
44662     +         %put &errormsg;
44663     +         %put &em_codebar;
44664     +         %goto doendm;
44665     +      %end;
44666     +      %else %do;
44667     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
44668     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
44669     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
44670     +         %let varnumX = %sysfunc(varnum(&dsid,X));
44671     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
44672     +         %let dsid = %sysfunc(close(&dsid));
44673     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
44674     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
44675     +            %put &em_codebar;
44676     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
44677     +            %put &errormsg;
44678     +            %put &em_codebar;
44679     +            %goto doendm;
44680     +         %end;
44681     +      %end;
44682     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
44683     +         proc delete data=&EM_USER_EMTREE;
44684     +         run;
44685     +      %end;
44686     +   %end;
44687     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
44688     +      proc delete data=&EM_USER_EMTREE;
44689     +      run;
44690     +   %end;
44692     +   /* load tree macros */
44693     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
44694     +   %include temp;
44695     +   filename temp;
44697     +   /* data sets */
44698     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
44699     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
44700     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
44702     +   /* files */
44703     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
44705     +   /* check actual num of target levels */
44706     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
44707     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
44708     +                              nLevel=_nTargetLevel );
44709     +      %if &_nTargetLevel  > 2 %then %do;
44710     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
44711     +        %put &em_codebar;
44712     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
44713     +        %put &errormsg;
44714     +        %put &em_codebar;
44715     +        %goto doendm;
44716     +      %end;
44717     +   %end;
44719     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
44720     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
44721     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
44722     +        %let costflag=0;
44723     +        data _null_;
44724     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
44725     +          if eof then call symput("costflag", _N_);
44726     +        run;
44727     +        %if &costflag gt 0 %then %do;
44728     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
44729     +          %put &em_codebar;
44730     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
44731     +          %put &errormsg;
44732     +          %put &em_codebar;
44733     +          %goto doendm;
44734     +       %end;
44735     +     %end;
44736     +   %end;
44738     +   /* determine if multiple targets will be processed */
44739     +   %let em_tree_multipleTargets=N;
44740     +   %let em_tree_numTarget = 1;
44741     +   %let em_tree_targetVars=;
44743     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
44744     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
44745     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
44746     +         %let em_tree_multipleTargets=N;
44747     +      %end;
44748     +      %else %do;
44749     +         /* create macro array of targets  */
44750     +         data _null_;
44751     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
44752     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
44753     +           if eof then
44754     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
44755     +        run;
44757     +        %if &em_tree_numTarget gt 1 %then %do;
44758     +           %let em_tree_multipleTargets=Y;
44759     +        %end;
44760     +      %end;
44761     +   %end;
44763     +   /* create view of only necessary variable for performance reasons */
44764     +   %let tempData = &EM_LIB..em_&EM_NODEID;
44765     +   data &tempData / view=&tempData;
44766     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
44767     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
44768     +       %EM_TARGET
44769     +     %end;
44770     +     %else %do;
44771     +       %if &em_tree_numTarget ne 0 %then %do;
44772     +         %do i=1 %to &em_tree_numTarget;
44773     +            &&em_tree_targetVars&i
44774     +         %end;
44775     +       %end;
44776     +     %end;
44777     +     );
44778     +   run;
44780     +   /* run Tree procedure */
44781     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
44783     +   /* Check return code and throw exception if error is detected */
44784     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
44785     +   %if &syserr %then %do;
44786     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
44787     +     %goto doendm;
44788     +   %end;
44790     +   /* add decision score code if multiple targets are processed */
44791     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
44792     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
44793     +   %end;
44795     +   /* create outfit dataset if multiple score statements have been executed */
44796     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
44798     +   /* create English Rules */
44799     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
44800     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
44801     +       %em_tree_makeEnglishRules;
44803     +       /* English Rules */
44804     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
44806     +     %end;
44807     +   filename x;
44809     +   %doendm:
44810     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
44811     +%macro EM_SetProperties;
44813     +   /* train properties */
44814     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
44815     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
44816     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
44817     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
44818     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
44819     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
44820     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
44821     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
44822     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
44823     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
44824     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
44825     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
44826     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
44827     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
44828     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
44829     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
44830     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
44831     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
44832     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
44833     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
44834     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
44835     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
44836     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
44837     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
44838     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
44839     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
44840     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
44841     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
44842     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
44843     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
44844     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
44845     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
44846     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
44847     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
44848     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
44849     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
44850     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
44851     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
44852     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
44853     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
44854     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
44856     +   /* properties for interactive sample */
44857     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
44858     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
44859     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
44860     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
44862     +   /* report properties */
44863     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
44864     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
44865     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
44866     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
44867     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
44868     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
44869     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
44870     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
44871     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
44872     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
44873     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
44874     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
44875     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
44877     +   /* score properties */
44878     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
44879     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
44881     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
44883     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
44884     +  %global &nLevel;
44885     +  proc dmdb batch data=&indata
44886     +    classout=_tmp_dmdbout;
44887     +    class &target;
44888     +  run;
44889     +  data _tmp_dmdbout;
44890     +    set _tmp_dmdbout;
44891     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
44892     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
44893     +  run;
44894     +  data _null_;
44895     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
44896     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
44897     +    %let dsid = %sysfunc(close(&dsid));
44898     +     call symput("&nLevel", put(&_obs, Best12.));
44899     +  run;
44901     +  proc datasets lib=work nolist;
44902     +     delete _tmp_dmdbout;
44903     +  run;
44904     +  quit;
44905     +%Mend EM_CheckBinaryTargetLevel;
44908     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
44910     +  /* determine the number of obs in training data */
44911     +  proc sql;
44912     +    reset noprint;
44913     +    select count(*) into :em_nobs from &indata;
44914     +  quit;
44916     +  /* determine the number of input variables */
44917     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
44918     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
44920     +  /* retrieve targetEvent from decmeta */
44921     +  %let targetEvent=;
44922     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
44923     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
44924     +      data _null_;
44925     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
44926     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
44927     +      run;
44928     +    %end;
44929     +  %end;
44931     +  /* create targetTable if multipleTar eq Y */
44932     +  data temptarget;
44933     +    set &EM_DATA_VARIABLESET;
44934     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
44935     +  run;
44937     + /* data sets */
44938     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
44939     + %EM_GETNAME(key=EMTREE,        type=DATA);
44940     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
44941     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
44942     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
44943     + %EM_GETNAME(key=OUTNODES,      type=DATA);
44944     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
44945     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
44946     + %EM_GETNAME(key=OUTPATH,       type=DATA);
44947     + %EM_GETNAME(key=OUTRULES,      type=DATA);
44949     + /* files */
44950     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
44951     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
44953     + /* turn on pmml if requested */
44954     + %let nnpmml=0;
44955     + %if %symexist(EM_PMML) %then %do;
44956     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
44957     +       %let nnpmml=1;
44959     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
44960     +   %end;
44961     +%end;
44963     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
44965     +%if &nnpmml or &numClassTarget %then %do;
44967     +    /* create dmdb needed for pmml generation */
44968     +    %let tree_maxlevel = 512;
44969     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
44970     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
44971     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
44972     +      %end;
44973     +    %end;
44974     +    %if &tree_maxlevel gt 0 %then %do;
44975     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
44976     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
44977     +    %end;
44979     +    %let targetOrderString =;
44980     +    %let targetString = ;
44981     +    data _null_;
44982     +       length orderString nameString $10000;
44983     +       retain orderString nameString;
44984     +       set &em_data_variableset end=eof;
44985     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
44986     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
44987     +       %end;
44988     +       %else %do;
44989     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
44990     +       %end;          select(order);
44991     +         when('')        order ='DESC';
44992     +         when('FMTASC')  order='ASCFMT';
44993     +         when('FMTDESC') order='DESFMT';
44994     +         otherwise;
44995     +       end;
44996     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
44997     +       nameString = trim(nameString)!!' '!!trim(NAME);
44999     +       if eof then do;
45000     +          call symput('targetOrderString', trim(orderString));
45001     +          call symput('targetString', trim(nameString));
45002     +       end;
45003     +    run;
45005     +    %let arborkluge= "work._treeDMDB";
45007     +    proc dmdb batch data=&indata
45008     +    %if &nnpmml %then %do;
45009     +        PMML
45010     +    %end;
45011     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
45013     +      %if &nnpmml %then %do;
45014     +           %if "%EM_ID" ne "" %then %do;
45015     +             id %EM_ID;
45016     +           %end;
45017     +           %if &EM_NUM_CLASS gt 0 %then %do;
45018     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
45019     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
45020     +                  &targetOrderString;
45021     +           %end;
45022     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
45023     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
45024     +           %end;
45025     +           target &targetString %EM_INTERVAL_TARGET;
45026     +           %if "%EM_FREQ" ne "" %then %do;
45027     +             freq %EM_FREQ;
45028     +           %end;
45029     +      %end;
45030     +      %else %do;
45031     +         class  &targetOrderString;
45032     +         target &targetString %EM_INTERVAL_TARGET;
45033     +      %end;
45034     +    run;
45035     +    quit;
45037     +    proc datasets lib=work nolist;
45038     +       delete classout varout;
45039     +    run;
45040     +    quit;
45042     + %end;
45045     + /* run Arbor procedure */
45046     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
45047     +  proc arbor data=&INDATA
45049     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
45050     +    Leafsize = &EM_PROPERTY_LEAFSIZE
45051     +  %end;
45053     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
45054     +    Splitsize = &EM_PROPERTY_SPLITSIZE
45055     +  %end;
45057     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
45058     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
45059     +  %end;
45061     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
45062     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
45063     +  %end;
45065     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
45066     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
45067     +  %end;
45069     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
45070     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
45071     +  %end;
45072     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
45073     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
45074     +  %end;
45075     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
45076     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
45077     +  %end;
45079     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
45080     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
45081     +      alpha = &EM_PROPERTY_SIGLEVEL
45082     +    %end;
45083     +  %end;
45085     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
45086     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
45087     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
45088     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
45089     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
45091     +        padjust =
45092     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
45093     +          &chaid
45094     +        %end;
45095     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
45096     +          DEPTH
45097     +        %end;
45098     +      %end;
45099     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
45100     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
45101     +         pvars = &num_inputs
45102     +      %end;
45103     +    %end;
45104     +  %end;
45105     +  %else %do;
45106     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
45107     +         padjust = NONE
45108     +      %end;
45109     +  %end;
45111     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
45112     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
45113     +    Maxrules = &num_nrules
45114     +  %end;
45116     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
45117     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
45118     +    Maxsurrs = &num_nsurrs
45119     +  %end;
45121     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
45122     +     Missing=&EM_PROPERTY_MISSINGVALUE
45123     +  %end;
45125     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
45126     +     USEVARONCE
45127     +  %end;
45129     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
45130     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
45131     +  %end;
45134     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
45135     +    event = "&targetEvent"
45136     +  %end;
45138     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
45139     +     DECSEARCH
45140     +  %end;
45142     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
45143     +     PRIORSSEARCH
45144     +  %end;
45146     +  %if &arbor_1 ne %then %do;
45147     +    &arbor_1
45148     +  %end;
45150     +  %if &em_arbor ne %then %do;
45151     +     &em_arbor
45152     +  %end;
45153     +  ;
45154     + %end;
45155     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
45156     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
45157     +       Performance &EM_PROPERTY_PERFORMANCE
45158     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
45159     +         nodesize=&EM_PROPERTY_NODESAMPLE
45160     +       %end;
45161     +       ;
45162     +       interact;
45163     + %end;
45164     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
45165     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
45166     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
45167     +    %put &em_codebar;
45168     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
45169     +    %put &errormsg;
45170     +    %put &em_codebar;
45171     +    %goto doendm;
45172     +   %end;
45173     +   %else %do;
45174     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
45175     +       Performance &EM_PROPERTY_PERFORMANCE
45176     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
45177     +         nodesize=&EM_PROPERTY_NODESAMPLE
45178     +       %end;
45179     +       ;
45180     +       interact;
45181     +   %end;
45182     + %end;
45184     + %else %do;
45185     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
45186     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
45187     +    %put &em_codebar;
45188     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
45189     +    %put &errormsg;
45190     +    %put &em_codebar;
45191     +    %goto doendm;
45192     +   %end;
45193     +   %else %do;
45194     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
45195     +       Performance &EM_PROPERTY_PERFORMANCE
45196     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
45197     +         nodesize=&EM_PROPERTY_NODESAMPLE
45198     +       %end;
45199     +       ;
45200     +        interact;
45201     +   %end;
45202     + %end;
45204     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
45205     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
45206     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
45207     +    %end;
45209     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
45210     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
45211     +    %end;
45213     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
45214     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
45215     +    %end;
45217     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
45218     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
45219     +    %end;
45221     +    %if "%EM_FREQ" ne "" %then %do;
45222     +       freq %EM_FREQ;
45223     +    %end;
45225     +    %if "&multipleTar" eq "Y" %then %do;
45226     +       /* cycle through all target vars in variableset */
45227     +       %let tdsid = %sysfunc(open(temptarget));
45228     +       %if &tdsid %then %do;
45229     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
45230     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
45231     +          %do %while(^ %sysfunc(fetch(&tdsid)));
45232     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
45233     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
45234     +             target &var / level = &lvl
45235     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
45236     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
45237     +             %end;
45238     +             %else %if "&lvl" eq "INTERVAL" %then %do;
45239     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
45240     +             %end;
45241     +             %else %if "&lvl" eq "ORDINAL" %then %do;
45242     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
45243     +             %end;
45244     +          %end;
45245     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
45246     +       %end;
45247     +       useTarget variable = %EM_TARGET;
45248     +    %end;
45249     +    %else %do;
45250     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
45251     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
45252     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
45253     +      %end;
45254     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
45255     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
45256     +      %end;
45257     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
45258     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
45259     +      %end;
45260     +    %end;
45262     +    %if "&multipleTar" eq "N" %then %do;
45263     +      &EM_DEC_STATEMENT;
45264     +    %end;
45266     +    Performance &EM_PROPERTY_PERFORMANCE
45267     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
45268     +      nodesize=&EM_PROPERTY_NODESAMPLE
45269     +    %end;
45270     +    ;
45272     +    %if "&intFlag" eq "Y" %then %do;
45273     +       INTERACT Largest;
45274     +       Train maxnewdepth=0;
45275     +    %end;
45277     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
45278     +         Assess
45279     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
45280     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
45281     +              %put &em_codebar;
45282     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
45283     +              %put &errormsg;
45284     +              %put &em_codebar;
45285     +            %end;
45286     +            %else %do;
45287     +               Validata=&EM_IMPORT_VALIDATE
45288     +            %end;
45289     +         %end;
45290     +         %else %do;
45291     +           NoValidata
45292     +         %end;
45293     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
45294     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
45295     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
45296     +               %if &dsid %then %do;
45297     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
45298     +                 %do %while(^ %sysfunc(fetch(&dsid)));
45299     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
45300     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
45301     +                   %else %do;
45302     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
45303     +                      %else %let measure= MISC;
45304     +                   %end;
45305     +                 %end;
45306     +               %end;
45307     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
45308     +            %end;
45309     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
45310     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
45311     +                 %let measure=ASE;
45312     +              %end;
45313     +              %else %do;
45314     +                 %let measure=MISC;
45315     +              %end;
45316     +            %end;
45317     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
45318     +              %let measure=ASE;
45319     +            %end;
45320     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
45321     +               %let measure = LIFT;
45322     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
45323     +               %if &dsid %then %do;
45324     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
45325     +                 %do %while(^ %sysfunc(fetch(&dsid)));
45326     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
45327     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
45328     +                 %end;
45329     +               %end;
45330     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
45331     +            %end;
45332     +            measure=&measure
45333     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
45334     +               event = "&targetEvent"
45335     +            %end;
45336     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
45337     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
45338     +            %end;
45339     +         %end;
45340     +         %if "&multipleTar" eq "N" %then %do;
45341     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
45342     +               CV
45343     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
45344     +                 CVNITer = &EM_PROPERTY_CVNITER
45345     +               %end;
45346     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
45347     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
45348     +               %end;
45349     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
45350     +                 CVSeed = &EM_PROPERTY_CVSEED
45351     +               %end;
45352     +            %end;
45353     +         %end;
45354     +       %end;
45355     +      ;
45357     +      %if "&intFlag" ne "Y" %then %do;
45358     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
45359     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
45360     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
45361     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
45363     +          SUBTREE &subtree
45364     +          %if "&subtree" eq "NLEAVES" %then %do;
45365     +            =&EM_PROPERTY_NSUBTREE
45366     +          %end;
45367     +          ;
45368     +        %end;
45370     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
45371     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
45372     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
45373     +          %end;
45374     +       %end;
45375     +      %end;
45376     + %end;
45379     + MakeMacro nleaves = nleaves;
45380     + save
45381     + %if "&EM_USER_EMTREE" ne "" %then %do;
45382     +   MODEL=&EM_USER_EMTREE
45383     + %end;
45384     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
45385     +   SEQUENCE=&EM_USER_OUTSEQ
45386     + %end;
45387     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
45388     +   IMPORTANCE=&EM_USER_OUTIMPORT
45389     + %end;
45390     + %if "&EM_USER_OUTNODES" ne "" %then %do;
45391     +   NODESTAT=&EM_USER_OUTNODES
45392     + %end;
45393     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
45394     +   SUMMARY=&EM_USER_OUTSUMMARY
45395     + %end;
45396     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
45397     +   STATSBYNODE=&EM_USER_OUTSTATS
45398     + %end;
45399     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
45400     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
45401     + %end;
45402     + %if "&EM_USER_OUTPATH" ne "" %then %do;
45403     +   Pathlistnonmissing=&EM_USER_OUTPATH
45404     + %end;
45405     + %if "&EM_USER_OUTRULES" ne "" %then %do;
45406     +   RULES = &EM_USER_OUTRULES
45407     + %end;
45408     + ;
45410     + %if "&intFlag" ne "Y" %then %do;
45412     +   %let lookupString = ;
45413     +   %if ^%symexist(EM_OPTION) %then
45414     +      %let EM_OPTION=;
45416     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
45417     +      %let lookupString = LOOKUP=SELECT;
45418     +   %end;
45420     +   %let codetext=;
45421     +   %let norescodetxt=;
45423     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
45424     +     %let codetext=&codetext DUMMY;
45425     +     %let norescodetxt=&norescodetxt DUMMY;
45426     +   %end;
45427     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
45428     +     %let codetext=&codetext NOLEAFID;
45429     +     %let norescodetxt=&norescodetxt NOLEAFID;
45430     +   %end;
45431     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
45432     +     %let norescodetxt=&norescodetxt NOPRED;
45433     +   %end;
45435     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
45436     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
45438     +   %if &nnpmml %then %do;
45439     +     code pmml;
45440     +   %end;
45442     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
45443     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
45444     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
45445     +   %end;
45446     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
45447     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
45448     +   %end;
45449     + %end;
45451     + run;
45452     + quit;
45454     + /*%em_checkerror(); */
45455     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
45456     +   /* Delete DMDB catalog */
45457     +   proc datasets lib=work nolist;
45458     +       delete _treeDMDB / mt=cat;
45459     +  run;
45460     +  %end;
45462     + %if &nnpmml %then %do;
45463     +    ods pmml close;
45464     + %end;
45466     +  %doendm:
45468     +%mend em_tree_runTreeProcedure;
45470     +%macro em_tree_createFitStats( multipleTar= );
45473     +  /* create targetTable is multipleTar eq Y */
45474     +  data temptarget;
45475     +    set &EM_DATA_VARIABLESET;
45476     +    where ROLE="TARGET";
45477     +  run;
45479     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
45480     +   data &EM_USER_EMOUTFIT;
45481     +     length target $32;
45482     +     merge work.fit_train
45483     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
45484     +       work.fit_valid
45485     +     %end;
45486     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
45487     +       work.fit_test
45488     +     %end;
45489     +     ;
45490     +     %if "&multipleTar" eq "N" %then %do;
45491     +       target="%EM_TARGET";
45492     +     %end;
45493     +     %else %do;
45494     +       target = _TARGET_;
45495     +     %end;
45496     +     drop _NW_ _SUMW_
45497     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
45498     +        _VSUMW_
45499     +     %end;
45500     +     ;
45501     +   run;
45503     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
45504     +     proc datasets library=work nolist;
45505     +       delete fit_valid;
45506     +     run;
45507     +   %end;
45508     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
45509     +     proc datasets library=work nolist;
45510     +       delete fit_test;
45511     +     run;
45512     +   %end;
45514     +%mend em_tree_createFitStats;
45517     +%macro em_tree_makeEnglishRules;
45519     +  %EM_GETNAME(key=OUTNODES, type=DATA);
45520     +  %EM_GETNAME(key=OUTPATH, type=DATA);
45522     +  /* verify that necessary tables exist and if not, skip processing */
45523     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
45524     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
45525     +    %goto doendm;
45526     +  %end;
45527     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
45528     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
45529     +    %goto doendm;
45530     +  %end;
45532     +  /* determine length of variable in outpath dataset */
45533     +  %let vlength= ;
45534     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
45535     +  %if &dsid ne %then %do;
45536     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
45537     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
45538     +  %end;
45539     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
45541     +  data tempoutpath;
45542     +    length varname $&vlength;
45543     +    retain varname;
45544     +    set &EM_USER_OUTPATH;
45546     +    if ^missing(variable) then varname=variable;
45547     +    else if ^missing(var_name) then varname=var_name;
45548     +    output;
45549     +  run;
45551     +  /* create an array of generated predicted variable names */
45552     +  %let tree_pred_vars = ;
45553     +  %let tree_pred_label = ;
45554     +  %let numpred= 0;
45555     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
45557     +    data _null_;
45558     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
45559     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
45560     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
45561     +     if eof then
45562     +       call symput('numpred', strip(put(_N_, BEST.)));
45563     +    run;
45564     +  %end;
45566     +  /* determine if NPRIORS exists in outnodes  */
45567     +  %local nprior_flag;
45568     +  data _null_;
45569     +    set &EM_USER_OUTNODES(obs=2) end=eof;
45570     +    if eof then do;
45571     +      call symput('nprior_flag', strip(put(npriors, best.)));
45572     +    end;
45573     +  run;
45575     +  proc sort data=tempoutpath; by node; run;
45576     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
45578     +  data tempoutpath;
45579     +    merge tempoutpath(in=_a) outnodes(keep= node
45580     +    %if "&nprior_flag" ne "." %then %do;
45581     +      NPRIORS
45582     +    %end;
45583     +    %else %do;
45584     +      N
45585     +    %end;
45586     +    %if &numpred gt 0 %then %do;
45587     +      %do i=1 %to &numpred;
45588     +        &&tree_pred_vars&i
45589     +      %end;
45590     +    %end;
45591     +    );
45592     +    by node;
45593     +    if _a;
45594     +  run;
45596     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
45598     +  data _null_;
45599     +    file x;
45600     +    set tempoutpath;
45601     +    by node descending varname;
45602     +    retain origvar oldnode string;
45603     +    length origvar $32 oldnode 8 string $200;
45605     +    if _N_ = 1 then do;
45606     +      origvar = varname;
45607     +      oldnode = node;
45608     +    end;
45610     +    if first.node then do;
45611     +       put "&EM_CODEBAR";
45612     +       put " Node = " node;
45613     +       put "&EM_CODEBAR";
45614     +    end;
45616     +      if first.varname then do;
45617     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
45618     +            if MISSING(CHARACTER_VALUE) then do;
45619     +             if NUMERIC_VALUE ne .  then do;
45620     +              if ^first.node then do;
45621     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
45622     +              end;
45623     +              else do;
45624     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
45625     +              end;
45626     +             end;
45627     +            end;
45628     +            else do;
45629     +              if ^first.node then do;
45630     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
45631     +              end;
45632     +              else do;
45633     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
45634     +              end;
45635     +             end;
45636     +         end;
45637     +         else if RELATION in ("=") then do;
45638     +            if ^first.node then do;
45639     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
45640     +            end;
45641     +            else do;
45642     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
45643     +            end;
45644     +         end;
45645     +         else if RELATION in ("ISMISSING") then do;
45646     +            if ^first.node then do;
45647     +              string = " AND "|| strip(varname) || " equals Missing";
45648     +            end;
45649     +            else do;
45650     +              string = "if "|| strip(varname) ||" equals Missing";
45651     +            end;
45652     +         end;
45653     +         else if RELATION in ("ISNOTMISSING") then do;
45654     +            if ^first.node then do;
45655     +              string = " AND "|| strip(varname) || " equals All Values";
45656     +            end;
45657     +            else do;
45658     +              string = "if "|| strip(varname) ||" equals All Values";
45659     +            end;
45660     +         end;
45661     +         if ^missing(varname) then origvar = varname;
45662     +         oldnode=node;
45664     +      end;
45665     +      else do;
45666     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
45667     +          if MISSING(CHARACTER_VALUE) then do;
45668     +           if  NUMERIC_VALUE ne .  then do;
45669     +            if ^MISSING(string) then
45670     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
45671     +            else
45672     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
45673     +           end;
45674     +          end;
45675     +          else do;
45676     +            if ^MISSING(string) then
45677     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
45678     +            else
45679     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
45680     +          end;
45682     +         end;
45683     +         else if RELATION in ("=") then do;
45684     +           string = strip(string)||", "||strip(character_value);
45685     +         end;
45686     +         else if RELATION in ("ISMISSING") then do;
45688     +         end;
45689     +         if ^missing(varname) then origvar = varname;
45690     +         oldnode=node;
45691     +      end;
45692     +      if last.varname then do;
45693     +         if RELATION in ("ISMISSING") then do;
45694     +           if ^first.varname then do;
45695     +             string = strip(string) || " or MISSING";
45696     +           end;
45697     +         end;
45698     +         put string;
45699     +         if ^missing(varname) then origvar = varname;
45700     +         oldnode=node;
45701     +      end;
45703     +      if last.node then do;
45704     +         put "then ";
45705     +         put " Tree Node Identifier   = " node;
45707     +         %if "&nprior_flag" ne "." %then %do;
45708     +           put " Number of Observations = " NPRIORS;
45709     +         %end;
45710     +         %else %do;
45711     +           put " Number of Observations = " N;
45712     +         %end;
45714     +         %if &numpred gt 0 %then %do;
45715     +           %do i=1 %to &numpred;
45716     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
45717     +           %end;
45718     +         %end;
45720     +         put " ";
45721     +         if ^missing(varname) then origvar = varname;
45722     +         oldnode=node;
45723     +      end;
45725     +  run;
45727     +  proc datasets lib=work nolist;
45728     +    delete tempoutpath outnodes;
45729     +  run;
45731     +  %doendm:
45732     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree2 / view=EMWS1.em_Tree2;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Part_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =Age_group Date Population_in_thousands Sum_Labor_Force_Pop Sum_Labor_Force_Pop );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS1.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree2;
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: There were 588 observations read from the data set EMWS1.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree2_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree2 Leafsize = 5 MinCatSize = 5 MaxBranch = 2 MaxDepth = 6
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 3 Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   Population_in_thousands
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Age_group Date
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   Sum_Labor_Force_Pop
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   INTERVAL
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBF;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.Part_VALIDATE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   measure=ASE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1583727 kilobytes of physical memory.
NOTE: Will use 588 out of 588 training cases.
NOTE: Using memory pool with 27247616 bytes.
NOTE: Passed training data 5 times.
NOTE: Training used 70728 bytes of work memory.
NOTE: The subtree sequence contains 4 subtrees. The largest has 7 nodes and 4 leaves.
NOTE: Using subtree with 5 nodes and 3 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 5 nodes and 3 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 3.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree2_EMTREE SEQUENCE=EMWS1.Tree2_OUTSEQ IMPORTANCE=EMWS1.Tree2_OUTIMPORT NODESTAT=EMWS1.Tree2_OUTNODES SUMMARY=EMWS1.Tree2_OUTSUMMARY STATSBYNODE=EMWS1.Tree2_OUTSTATS TOPOLOGY=EMWS1.Tree2_OUTTOPOLOGY 
Pathlistnonmissing=EMWS1.Tree2_OUTPATH RULES = EMWS1.Tree2_OUTRULES ;
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 3 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_EMTREE has 230 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTNODES has 5 observations and 16 variables.
NOTE: The data set EMWS1.TREE2_OUTPATH has 6 observations and 7 variables.
NOTE: The data set EMWS1.TREE2_OUTRULES has 40 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 4 observations and 18 variables.
NOTE: The data set EMWS1.TREE2_OUTSTATS has 30 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE2_OUTTOPOLOGY has 5 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\TREEFLOW.sas" res group=Tree2 ;
NOTE: External file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas" nores group=Tree2 ;
NOTE: External file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree2 out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 588 observations read from the data set EMWS1.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.20 seconds
      
NOTE: There were 588 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 588 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.24 seconds
      cpu time            0.22 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree2_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree2_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "Sum_Labor_Force_Pop";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $23;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree2_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set EMWS1.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Ids_Sum_Labor_Force__DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS_SUM_LABOR_FORCE__DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree2_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree2_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 5 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 5 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node N P_Sum_Labor_Force_Pop );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 5 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 6 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " N;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Sum_Labor_Force_Pop = " P_Sum_Labor_Force_Pop;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195   
NOTE: The file X is:
      Filename=C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=21Nov2019:15:12:01,
      Create Time=21Nov2019:15:12:01

NOTE: 27 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 6 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19025586042099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45734      
45735      *------------------------------------------------------------*;
45736      * End TRAIN: Tree2;
45737      *------------------------------------------------------------*;

45738      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
45739      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
45740      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45741      ;
MPRINT(EM_DIAGRAM):   ;
45742      ;
MPRINT(EM_DIAGRAM):   ;
45743      ;
MPRINT(EM_DIAGRAM):   ;
45744      ;
MPRINT(EM_DIAGRAM):   ;
45745      quit;
MPRINT(EM_DIAGRAM):   quit;
45746      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45747      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
45748      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45749      /*; *"; *'; */
45750      ;
MPRINT(EM_DIAGRAM):   ;
45751      run;
MPRINT(EM_DIAGRAM):   run;
45752      quit;
MPRINT(EM_DIAGRAM):   quit;
45753      /* Reset EM Options */
45754      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
45755      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
45756      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
45757      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
45758      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
45759      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
