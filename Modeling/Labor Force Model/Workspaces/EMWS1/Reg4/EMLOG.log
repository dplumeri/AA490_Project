*------------------------------------------------------------*
User:                student
Date:                December 08, 2019
Time:                17:53:52
Site:                70082322
Platform:            X64_10PRO
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 08, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:53:47" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 08, 2019
Time:                17:53:47
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1QKA3I5 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1QKA3I5 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 08, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:53:47" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 08, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:53:47" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
145320     proc freq data=EMWS1.Reg4_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Reg4_VariableSet noprint;
145321     table ROLE*LEVEL/out=WORK.Reg4META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Reg4META;
145322     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.REG4_VARIABLESET.
NOTE: The data set WORK.REG4META has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
145323     proc print data=WORK.Reg4META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg4META label noobs;
145324     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
145325     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
145326     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
145327     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
145328     run;
 
NOTE: There were 3 observations read from the data set WORK.REG4META.
NOTE: The PROCEDURE PRINT printed page 48.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
145329     title10;
MPRINT(EM_DIAGRAM):   title10;
145330     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN EMWS1 Trans_TRAIN
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN EMWS1 Trans_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
"No decisions defined for target "Sum_Labor_Force_Pop"."
145331     proc print data = EMWS1.Ids_Sum_Labor_Force__DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_Sum_Labor_Force__DM noobs label;
145332     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
145333     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
145334     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
145335     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
145336     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
145337     run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_SUM_LABOR_FORCE__DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 49.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
145338     title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg4: Preparing metadata for Training *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M1_WJW44;
MPRINT(EM_DIAGRAM):   set WORK.M1_WJW44;
MPRINT(EM_DIAGRAM):   where use = 'Y' or (role = 'INPUT' and use = 'D') ;
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if use = 'D' then use = 'Y';
MPRINT(EM_DIAGRAM):   run;
NOTE: There were 3 observations read from the data set EMWS1.IDS_SUM_LABOR_FORCE__DD.
NOTE: The data set WORK.SUM_LABOR_FORCE_POP has 3 observations and 1 variables.
NOTE: There were 3 observations read from the data set EMWS1.IDS_SUM_LABOR_FORCE__DD.
NOTE: The data set WORK.SUM_LABOR_FORCE_POP has 3 observations and 1 variables.
145348     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
145349     * Reg4: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Reg4: Create decision matrix;
145350     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145351     data WORK.Sum_Labor_Force_Pop(label="Sum_Labor_Force_Pop");
MPRINT(EM_DIAGRAM):   data WORK.Sum_Labor_Force_Pop(label="Sum_Labor_Force_Pop");
145352       length   Sum_Labor_Force_Pop                  8
145353                ;
MPRINT(EM_DIAGRAM):   length Sum_Labor_Force_Pop 8 ;
145354
145355       label    Sum_Labor_Force_Pop="Industry_Population"
145356                ;
MPRINT(EM_DIAGRAM):   label Sum_Labor_Force_Pop= "Industry_Population" ;
145357      Sum_Labor_Force_Pop=225000;
MPRINT(EM_DIAGRAM):   Sum_Labor_Force_Pop=225000;
145358     output;
MPRINT(EM_DIAGRAM):   output;
145359      Sum_Labor_Force_Pop=25077000;
MPRINT(EM_DIAGRAM):   Sum_Labor_Force_Pop=25077000;
145360     output;
MPRINT(EM_DIAGRAM):   output;
145361      Sum_Labor_Force_Pop=12651000;
MPRINT(EM_DIAGRAM):   Sum_Labor_Force_Pop=12651000;
145362     output;
MPRINT(EM_DIAGRAM):   output;
145363     ;
MPRINT(EM_DIAGRAM):   ;
145364     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SUM_LABOR_FORCE_POP has 3 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
145365     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
145366     modify Sum_Labor_Force_Pop(type=PROFIT label=Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
145367     run;
 
NOTE: MODIFY was successful for WORK.SUM_LABOR_FORCE_POP.DATA.
145368     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
145369     data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
145370     set EMWS1.Trans_TRAIN(keep=
145371     Age_group Industry Population Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN(keep= Age_group Industry Population Sum_Labor_Force_Pop);
145372     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg4: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
145373     *------------------------------------------------------------* ;
145374     * Reg4: DMDBClass Macro ;
145375     *------------------------------------------------------------* ;
145376     %macro DMDBClass;
145377         Age_group(ASC) Industry(ASC)
145378     %mend DMDBClass;
145379     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
145380     * Reg4: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Reg4: DMDBVar Macro ;
145381     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
145382     %macro DMDBVar;
145383         Population Sum_Labor_Force_Pop
145384     %mend DMDBVar;
145385     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145386     * Reg4: Create DMDB;
MPRINT(EM_DIAGRAM):   * Reg4: Create DMDB;
145387     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145388     proc dmdb batch data=WORK.EM_DMREG
145389     dmdbcat=WORK.Reg4_DMDB
145390     maxlevel = 513
145391     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Reg4_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
145392     class %DMDBClass;
MPRINT(DMDBCLASS):   Age_group(ASC) Industry(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
145393     var %DMDBVar;
MPRINT(DMDBVAR):   Population Sum_Labor_Force_Pop
MPRINT(EM_DIAGRAM):  ;
145394     target
145395     Sum_Labor_Force_Pop
145396     ;
MPRINT(EM_DIAGRAM):   target Sum_Labor_Force_Pop ;
145397     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 196   Memory used = 511K.
NOTE: There were 196 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 196 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 196 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
145398     quit;
145399     *--- end code ---*;
 
145400     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
145401     * Reg4: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Reg4: Run DMREG procedure;
145402     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145403     proc dmreg data=EM_DMREG dmdbcat=WORK.Reg4_DMDB
145404     validata = EMWS1.Trans_VALIDATE
145405     outest = EMWS1.Reg4_EMESTIMATE
145406     outterms = EMWS1.Reg4_OUTTERMS
145407     outmap= EMWS1.Reg4_MAPDS namelen=200
145408     ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Reg4_DMDB validata = EMWS1.Trans_VALIDATE outest = EMWS1.Reg4_EMESTIMATE outterms = EMWS1.Reg4_OUTTERMS outmap= EMWS1.Reg4_MAPDS namelen=200 ;
145409     class
145410     Age_group
145411     Industry
145412     ;
MPRINT(EM_DIAGRAM):   class Age_group Industry ;
145413     model Sum_Labor_Force_Pop =
145414     Age_group
145415     Industry
145416     Population
145417     /error=normal
145418     coding=DEVIATION
145419     nodesignprint
145420     selection=BACKWARD choose=NONE
145421     Hierarchy=CLASS
145422     Rule=NONE
145423     ;
MPRINT(EM_DIAGRAM):   model Sum_Labor_Force_Pop = Age_group Industry Population /error=normal coding=DEVIATION nodesignprint selection=BACKWARD choose=NONE Hierarchy=CLASS Rule=NONE ;
145424     ;
MPRINT(EM_DIAGRAM):   ;
145425     code file="C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMPUBLISHSCORE.sas"
145426     group=Reg4
145427     ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMPUBLISHSCORE.sas" group=Reg4 ;
145428     code file="C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas"
145429     group=Reg4
145430     residual
145431     ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas" group=Reg4 residual ;
145432     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: External file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMPUBLISHSCORE.sas opened.
NOTE: External file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas opened.
NOTE: View EMWS1.TRANS_VALIDATE.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.10 seconds
 
NOTE: There were 84 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 196 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.17 seconds
 
NOTE: There were 196 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 196 observations read from the data set WORK.EM_DMREG.
NOTE: There were 84 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: The data set EMWS1.REG4_EMESTIMATE has 9 observations and 43 variables.
NOTE: The data set EMWS1.REG4_OUTTERMS has 8 observations and 6 variables.
NOTE: The data set EMWS1.REG4_MAPDS has 2 observations and 10 variables.
NOTE: The PROCEDURE DMREG printed page 50.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           0.23 seconds
      cpu time            0.20 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
145433     quit;
 
145434     proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
145435     delete Reg4_DMDB;
MPRINT(EM_DIAGRAM):   delete Reg4_DMDB;
145436     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.REG4_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
145437     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
145438     proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
145439     delete Reg4_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Reg4_DMDB / memtype=catalog;
145440     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.REG4_DMDB (memtype=CATALOG).
145441     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
145442     data WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):    data WORK.ESTIMATE;
145443     length _NAME_ $32;
MPRINT(EM_DIAGRAM):   length _NAME_ $32;
145444     set EMWS1.Reg4_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EMESTIMATE;
145445     drop _AIC_--_VSUMW_
145446     ;
MPRINT(EM_DIAGRAM):   drop _AIC_--_VSUMW_ ;
145447     where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
145448     drop _STEP_ _CHOSEN_;
MPRINT(EM_DIAGRAM):   drop _STEP_ _CHOSEN_;
145449     select(_TYPE_);
MPRINT(EM_DIAGRAM):   select(_TYPE_);
145450     when('PARMS') _NAME_='Coefficient';
MPRINT(EM_DIAGRAM):   when('PARMS') _NAME_='Coefficient';
145451     when('T') _NAME_='tValue';
MPRINT(EM_DIAGRAM):   when('T') _NAME_='tValue';
145452     when('P') _NAME_='PValue';
MPRINT(EM_DIAGRAM):   when('P') _NAME_='PValue';
145453     otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
145454     end;
MPRINT(EM_DIAGRAM):   end;
145455     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG4_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set WORK.ESTIMATE has 3 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
145456     proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
145457     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 9 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
145458     proc transpose data=EMWS1.Reg4_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable
145459     ));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg4_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable ));
145460     var 'Age_group16_TO_24'n--'Population'n;
MPRINT(EM_DIAGRAM):   var 'Age_group16_TO_24'n--'Population'n;
145461     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG4_MAPDS.
NOTE: The data set WORK.MAP has 8 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
145462     proc sort data=WORK.MAP;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MAP;
145463     by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
145464     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.MAP.
NOTE: The data set WORK.MAP has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
145465     proc sort data=WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.ESTIMATE;
145466     by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
145467     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 9 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
145468     data EMWS1.Reg4_EFFECTS(rename=(_LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_EFFECTS(rename=(_LABEL_=EffectLabel));
145469     length Variable ClassLevel $32;
MPRINT(EM_DIAGRAM):   length Variable ClassLevel $32;
145470     merge WORK.ESTIMATE WORK.MAP;
MPRINT(EM_DIAGRAM):   merge WORK.ESTIMATE WORK.MAP;
145471     by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
145472     label Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Sign = "%sysfunc(sasmsg(sashelp.dmine, rpt_sign_vlabel, NOQUOTE))" ClassLevel =
145473        "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))" Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" _LABEL_ =
145474        "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" CODE = "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecodevar_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Effect = "Effect" Variable = "Variable" Sign = "Sign" ClassLevel = "Level" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" _LABEL_ = "Effect Label" CODE = "Score Code Variable";
145475     label tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))" PValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))"
145475   ! ;
MPRINT(EM_DIAGRAM):   label tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P Value";
145476     abstvalue = abs(tValue);
MPRINT(EM_DIAGRAM):   abstvalue = abs(tValue);
145477     if index(Effect, 'Intercept') then do;
MPRINT(EM_DIAGRAM):   if index(Effect, 'Intercept') then do;
145478     variable = 'Intercept';
MPRINT(EM_DIAGRAM):   variable = 'Intercept';
145479     classLevel = scan(_LABEL_, 2, '=');
MPRINT(EM_DIAGRAM):   classLevel = scan(_LABEL_, 2, '=');
145480     end;
MPRINT(EM_DIAGRAM):   end;
145481     if ^indexc(variable, '*') then do;
MPRINT(EM_DIAGRAM):   if ^indexc(variable, '*') then do;
145482     if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
MPRINT(EM_DIAGRAM):   if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
145483     end;
MPRINT(EM_DIAGRAM):   end;
145484     if Effect eq '' then Effect = Variable;
MPRINT(EM_DIAGRAM):   if Effect eq '' then Effect = Variable;
145485     if coefficient < 0 then sign = '-';
MPRINT(EM_DIAGRAM):   if coefficient < 0 then sign = '-';
145486     else sign = '+';
MPRINT(EM_DIAGRAM):   else sign = '+';
145487     abscoefficient = abs(coefficient);
MPRINT(EM_DIAGRAM):   abscoefficient = abs(coefficient);
145488     if _LABEL_ = '' then _LABEL_ = Effect;
MPRINT(EM_DIAGRAM):   if _LABEL_ = '' then _LABEL_ = Effect;
145489     if coefficient ne . then output;
MPRINT(EM_DIAGRAM):   if coefficient ne . then output;
145490     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 145476:13   1 at 145487:18
NOTE: There were 9 observations read from the data set WORK.ESTIMATE.
NOTE: There were 8 observations read from the data set WORK.MAP.
NOTE: The data set EMWS1.REG4_EFFECTS has 8 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
145491     proc sort data =EMWS1.Reg4_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg4_EFFECTS;
145492     by
145493     descending abstvalue;
MPRINT(EM_DIAGRAM):   by descending abstvalue;
145494     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG4_EFFECTS.
NOTE: The data set EMWS1.REG4_EFFECTS has 8 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
145495     data EMWS1.Reg4_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_EFFECTS;
145496     set EMWS1.Reg4_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EFFECTS;
145497     format TEffectNum 3.;
MPRINT(EM_DIAGRAM):   format TEffectNum 3.;
145498     label TEffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_teffectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TEffectNum = "TScore Number";
145499     retain TEffectNum;
MPRINT(EM_DIAGRAM):   retain TEffectNum;
145500     TEffectNum = _N_;
MPRINT(EM_DIAGRAM):   TEffectNum = _N_;
145501     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG4_EFFECTS.
NOTE: The data set EMWS1.REG4_EFFECTS has 8 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
145502     proc sort data =EMWS1.Reg4_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg4_EFFECTS;
145503     by
145504     descending absCoefficient;
MPRINT(EM_DIAGRAM):   by descending absCoefficient;
145505     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG4_EFFECTS.
NOTE: The data set EMWS1.REG4_EFFECTS has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
145506     data EMWS1.Reg4_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_EFFECTS;
145507     set EMWS1.Reg4_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EFFECTS;
145508     format EffectNum 3.;
MPRINT(EM_DIAGRAM):   format EffectNum 3.;
145509     label EffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectNum = "Effect Number";
145510     retain EffectNum;
MPRINT(EM_DIAGRAM):   retain EffectNum;
145511     EffectNum = _N_;
MPRINT(EM_DIAGRAM):   EffectNum = _N_;
145512     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG4_EFFECTS.
NOTE: The data set EMWS1.REG4_EFFECTS has 8 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
145513     proc transpose data=EMWS1.Reg4_EMESTIMATE out=EMWS1.Reg4_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect _LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg4_EMESTIMATE out=EMWS1.Reg4_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect _LABEL_=EffectLabel));
145514     where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
145515     var 'Age_group16_TO_24'n--'Population'n;
MPRINT(EM_DIAGRAM):   var 'Age_group16_TO_24'n--'Population'n;
145516     by _STEP_;
MPRINT(EM_DIAGRAM):   by _STEP_;
145517     id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
145518     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REG4_EMESTIMATE.
      WHERE (_CHOSEN_=' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set EMWS1.REG4_ESTIMATEGRID has 16 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
145519     data EMWS1.Reg4_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg4_ESTIMATEGRID;
145520     set EMWS1.Reg4_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_ESTIMATEGRID;
145521     if EffectLabel eq '' then EffectLabel = Effect;
MPRINT(EM_DIAGRAM):   if EffectLabel eq '' then EffectLabel = Effect;
145522     label EffectLabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))"
145523        Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))"
145523   ! PValue =
145524        "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectLabel = "Effect Label" Effect = "Effect" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P Value";
145525     AbsCoefficient = abs(Coefficient);
MPRINT(EM_DIAGRAM):   AbsCoefficient = abs(Coefficient);
145526     AbsTValue = abs(TValue);
MPRINT(EM_DIAGRAM):   AbsTValue = abs(TValue);
145527     where coefficient ne .;
MPRINT(EM_DIAGRAM):   where coefficient ne .;
145528     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable PValue is uninitialized.
NOTE: There were 15 observations read from the data set EMWS1.REG4_ESTIMATEGRID.
      WHERE coefficient not = .;
NOTE: The data set EMWS1.REG4_ESTIMATEGRID has 15 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 08, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:53:49" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 08, 2019
Time:                17:53:49
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O10JIZKI "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O10JIZKI new;
MPRINT(EM_DIAGRAM):   run;
145630     proc transpose data=EMWS1.Reg4_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg4_EMESTIMATE out=WORK.TEMPREG;
145631     where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
145632     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG4_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 40 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
145633     proc transpose data=EMWS1.Reg4_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg4_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
145634     var "Age_group16_TO_24"n--"Population"n;
MPRINT(EM_DIAGRAM):   var "Age_group16_TO_24"n--"Population"n;
145635     run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set EMWS1.REG4_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 8 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
145636     proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
145637     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
145638     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 40 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
145639     proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
145640     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
145641     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
145642     data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
145643     merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
145644     by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
145645     if (ina and inb) and Sum_Labor_Force_Pop ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and Sum_Labor_Force_Pop ne . then output;
145646     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 40 observations read from the data set WORK.TEMPREG.
NOTE: There were 8 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 7 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
145647     data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
145648     length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
145649     set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
145650     i=1;
MPRINT(EM_DIAGRAM):   i=1;
145651     do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
145652     term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
145653     i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
145654     output;
MPRINT(EM_DIAGRAM):   output;
145655     end;
MPRINT(EM_DIAGRAM):   end;
145656     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 7 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
145657     proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
145658     by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
145659     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.TEMPREG3.
NOTE: 5 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 2 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
145660     filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg4: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145661     *------------------------------------------------------------*;
145662     * Reg4: Scoring DATA data;
145663     *------------------------------------------------------------*;
145664     data EMWS1.Reg4_TRAIN
145665     / view=EMWS1.Reg4_TRAIN
145666     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_TRAIN / view=EMWS1.Reg4_TRAIN ;
145667     set EMWS1.Trans_TRAIN
145668     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN ;
145669     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas.
145670    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
145671    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
145672    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
145673    +
145674    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
145675    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
145676    +
145677    +drop _Y;
MPRINT(EM_DIAGRAM):   drop _Y;
145678    +_Y = Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   _Y = Sum_Labor_Force_Pop ;
145679    +
145680    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
145681    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
145682    +
145683    +*** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
145684    +drop _0_0 _0_1 _0_2 ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 _0_2 ;
145685    +if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
145686    +   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
145687    +   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
145688    +   _0_2 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
145689    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
145690    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145691    +end;
MPRINT(EM_DIAGRAM):   end;
145692    +else do;
MPRINT(EM_DIAGRAM):   else do;
145693    +   length _dm19 $ 19; drop _dm19 ;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
145694    +   %DMNORMCP( Age_group , _dm19 )
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
145695    +   if _dm19 = '45 TO 64'  then do;
MPRINT(EM_DIAGRAM):   if _dm19 = '45 TO 64' then do;
145696    +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
145697    +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
145698    +      _0_2 = 1;
MPRINT(EM_DIAGRAM):   _0_2 = 1;
145699    +   end;
MPRINT(EM_DIAGRAM):   end;
145700    +   else if _dm19 = '65+'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '65+' then do;
145701    +      _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
145702    +      _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
145703    +      _0_2 = -1;
MPRINT(EM_DIAGRAM):   _0_2 = -1;
145704    +   end;
MPRINT(EM_DIAGRAM):   end;
145705    +   else if _dm19 = '25 TO 44'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
145706    +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
145707    +      _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
145708    +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
145709    +   end;
MPRINT(EM_DIAGRAM):   end;
145710    +   else if _dm19 = '16 TO 24'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
145711    +      _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
145712    +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
145713    +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
145714    +   end;
MPRINT(EM_DIAGRAM):   end;
145715    +   else do;
MPRINT(EM_DIAGRAM):   else do;
145716    +      _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
145717    +      _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
145718    +      _0_2 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
145719    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
145720    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145721    +   end;
MPRINT(EM_DIAGRAM):   end;
145722    +end;
MPRINT(EM_DIAGRAM):   end;
145723    +
145724    +*** Generate dummy variables for Industry ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Industry ;
145725    +drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
145726    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
145727    +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
145728    +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
145729    +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
145730    +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
145731    +if missing( Industry ) then do;
MPRINT(EM_DIAGRAM):   if missing( Industry ) then do;
145732    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
145733    +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
145734    +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
145735    +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
145736    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
145737    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145738    +end;
MPRINT(EM_DIAGRAM):   end;
145739    +else do;
MPRINT(EM_DIAGRAM):   else do;
145740    +   length _dm32 $ 32; drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
145741    +   length _dm111 $ 111; drop _dm111;
MPRINT(EM_DIAGRAM):   length _dm111 $ 111;
MPRINT(EM_DIAGRAM):   drop _dm111;
145742    +   _dm111 = put( Industry , $CHAR111. );
MPRINT(EM_DIAGRAM):   _dm111 = put( Industry , $CHAR111. );
145743    +   %DMNORMCP( _dm111, _dm32 )
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
145744    +   if _dm32 = 'SALES AND OFFICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
145745    +      _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
145746    +   end;
MPRINT(EM_DIAGRAM):   end;
145747    +   else if _dm32 = 'SERVICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'SERVICE OCCUPATIONS' then do;
145748    +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
145749    +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
145750    +      _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
145751    +      _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
145752    +   end;
MPRINT(EM_DIAGRAM):   end;
145753    +   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
145754    +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
145755    +   end;
MPRINT(EM_DIAGRAM):   end;
145756    +   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
145757    +      _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
145758    +   end;
MPRINT(EM_DIAGRAM):   end;
145759    +   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
145760    +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
145761    +   end;
MPRINT(EM_DIAGRAM):   end;
145762    +   else do;
MPRINT(EM_DIAGRAM):   else do;
145763    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
145764    +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
145765    +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
145766    +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
145767    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
145768    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145769    +   end;
MPRINT(EM_DIAGRAM):   end;
145770    +end;
MPRINT(EM_DIAGRAM):   end;
145771    +
145772    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
145773    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
145774    +   _LP0 =     6986556.12244898;
MPRINT(EM_DIAGRAM):   _LP0 = 6986556.12244898;
145775    +   goto REG4DR1;
MPRINT(EM_DIAGRAM):   goto REG4DR1;
145776    +end;
MPRINT(EM_DIAGRAM):   end;
145777    +
145778    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
145779    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
145780    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
145781    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
145782    +
145783    +***  Effect: Age_group ;
MPRINT(EM_DIAGRAM):   *** Effect: Age_group ;
145784    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
145785    +_LP0 = _LP0 + (    -3050920.5611938) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3050920.5611938) * _TEMP * _0_0;
145786    +_LP0 = _LP0 + (    5715179.28557613) * _TEMP * _0_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5715179.28557613) * _TEMP * _0_1;
145787    +_LP0 = _LP0 + (    3344400.58625212) * _TEMP * _0_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3344400.58625212) * _TEMP * _0_2;
145788    +
145789    +***  Effect: Industry ;
MPRINT(EM_DIAGRAM):   *** Effect: Industry ;
145790    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
145791    +_LP0 = _LP0 + (    5305194.24829287) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5305194.24829287) * _TEMP * _1_0;
145792    +_LP0 = _LP0 + (    -3756132.0072696) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3756132.0072696) * _TEMP * _1_1;
145793    +_LP0 = _LP0 + (   -2725624.61923406) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2725624.61923406) * _TEMP * _1_2;
145794    +_LP0 = _LP0 + (    1992762.38030448) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1992762.38030448) * _TEMP * _1_3;
145795    +*--- Intercept ---*;
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
145796    +_LP0 = _LP0 + (    6791358.48762649);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6791358.48762649);
145797    +
145798    +REG4DR1:
145799    +
145800    +*** Predicted Value, Error, and Residual;
MPRINT(EM_DIAGRAM):   REG4DR1: *** Predicted Value, Error, and Residual;
145801    +label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
145802    +P_Sum_Labor_Force_Pop = _LP0;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = _LP0;
145803    +
145804    +drop _R;
MPRINT(EM_DIAGRAM):   drop _R;
145805    +if _Y = . then do;
MPRINT(EM_DIAGRAM):   if _Y = . then do;
145806    +   R_Sum_Labor_Force_Pop = .;
MPRINT(EM_DIAGRAM):   R_Sum_Labor_Force_Pop = .;
145807    +end;
MPRINT(EM_DIAGRAM):   end;
145808    +else do;
MPRINT(EM_DIAGRAM):   else do;
145809    +   _R = _Y - _LP0;
MPRINT(EM_DIAGRAM):   _R = _Y - _LP0;
145810    +    label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
145811    +   R_Sum_Labor_Force_Pop = _R;
MPRINT(EM_DIAGRAM):   R_Sum_Labor_Force_Pop = _R;
145812    +end;
MPRINT(EM_DIAGRAM):   end;
145813    +
145814    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
145815    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
145816    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
145817     run;
 
NOTE: DATA STEP view saved on file EMWS1.REG4_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
145818     quit;
145819     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
145820     filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg4: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
145821     *------------------------------------------------------------*;
145822     * Reg4: Scoring VALIDATE data;
145823     *------------------------------------------------------------*;
145824     data EMWS1.Reg4_VALIDATE
145825     / view=EMWS1.Reg4_VALIDATE
145826     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_VALIDATE / view=EMWS1.Reg4_VALIDATE ;
145827     set EMWS1.Trans_VALIDATE
145828     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_VALIDATE ;
145829     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMFLOWSCORE.sas.
145830    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
145831    +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
145832    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
145833    +
145834    +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
145835    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
145836    +
145837    +drop _Y;
MPRINT(EM_DIAGRAM):   drop _Y;
145838    +_Y = Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   _Y = Sum_Labor_Force_Pop ;
145839    +
145840    +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
145841    +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
145842    +
145843    +*** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
145844    +drop _0_0 _0_1 _0_2 ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 _0_2 ;
145845    +if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
145846    +   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
145847    +   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
145848    +   _0_2 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
145849    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
145850    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145851    +end;
MPRINT(EM_DIAGRAM):   end;
145852    +else do;
MPRINT(EM_DIAGRAM):   else do;
145853    +   length _dm19 $ 19; drop _dm19 ;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
145854    +   %DMNORMCP( Age_group , _dm19 )
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
145855    +   if _dm19 = '45 TO 64'  then do;
MPRINT(EM_DIAGRAM):   if _dm19 = '45 TO 64' then do;
145856    +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
145857    +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
145858    +      _0_2 = 1;
MPRINT(EM_DIAGRAM):   _0_2 = 1;
145859    +   end;
MPRINT(EM_DIAGRAM):   end;
145860    +   else if _dm19 = '65+'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '65+' then do;
145861    +      _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
145862    +      _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
145863    +      _0_2 = -1;
MPRINT(EM_DIAGRAM):   _0_2 = -1;
145864    +   end;
MPRINT(EM_DIAGRAM):   end;
145865    +   else if _dm19 = '25 TO 44'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
145866    +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
145867    +      _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
145868    +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
145869    +   end;
MPRINT(EM_DIAGRAM):   end;
145870    +   else if _dm19 = '16 TO 24'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
145871    +      _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
145872    +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
145873    +      _0_2 = 0;
MPRINT(EM_DIAGRAM):   _0_2 = 0;
145874    +   end;
MPRINT(EM_DIAGRAM):   end;
145875    +   else do;
MPRINT(EM_DIAGRAM):   else do;
145876    +      _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
145877    +      _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
145878    +      _0_2 = .;
MPRINT(EM_DIAGRAM):   _0_2 = .;
145879    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
145880    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145881    +   end;
MPRINT(EM_DIAGRAM):   end;
145882    +end;
MPRINT(EM_DIAGRAM):   end;
145883    +
145884    +*** Generate dummy variables for Industry ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Industry ;
145885    +drop _1_0 _1_1 _1_2 _1_3 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 ;
145886    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
145887    +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
145888    +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
145889    +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
145890    +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
145891    +if missing( Industry ) then do;
MPRINT(EM_DIAGRAM):   if missing( Industry ) then do;
145892    +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
145893    +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
145894    +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
145895    +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
145896    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
145897    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145898    +end;
MPRINT(EM_DIAGRAM):   end;
145899    +else do;
MPRINT(EM_DIAGRAM):   else do;
145900    +   length _dm32 $ 32; drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
145901    +   length _dm111 $ 111; drop _dm111;
MPRINT(EM_DIAGRAM):   length _dm111 $ 111;
MPRINT(EM_DIAGRAM):   drop _dm111;
145902    +   _dm111 = put( Industry , $CHAR111. );
MPRINT(EM_DIAGRAM):   _dm111 = put( Industry , $CHAR111. );
145903    +   %DMNORMCP( _dm111, _dm32 )
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
145904    +   if _dm32 = 'SALES AND OFFICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
145905    +      _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
145906    +   end;
MPRINT(EM_DIAGRAM):   end;
145907    +   else if _dm32 = 'SERVICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'SERVICE OCCUPATIONS' then do;
145908    +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
145909    +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
145910    +      _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
145911    +      _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
145912    +   end;
MPRINT(EM_DIAGRAM):   end;
145913    +   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
145914    +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
145915    +   end;
MPRINT(EM_DIAGRAM):   end;
145916    +   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
145917    +      _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
145918    +   end;
MPRINT(EM_DIAGRAM):   end;
145919    +   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
145920    +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
145921    +   end;
MPRINT(EM_DIAGRAM):   end;
145922    +   else do;
MPRINT(EM_DIAGRAM):   else do;
145923    +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
145924    +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
145925    +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
145926    +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
145927    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
145928    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
145929    +   end;
MPRINT(EM_DIAGRAM):   end;
145930    +end;
MPRINT(EM_DIAGRAM):   end;
145931    +
145932    +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
145933    +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
145934    +   _LP0 =     6986556.12244898;
MPRINT(EM_DIAGRAM):   _LP0 = 6986556.12244898;
145935    +   goto REG4DR1;
MPRINT(EM_DIAGRAM):   goto REG4DR1;
145936    +end;
MPRINT(EM_DIAGRAM):   end;
145937    +
145938    +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
145939    +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
145940    +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
145941    +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
145942    +
145943    +***  Effect: Age_group ;
MPRINT(EM_DIAGRAM):   *** Effect: Age_group ;
145944    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
145945    +_LP0 = _LP0 + (    -3050920.5611938) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3050920.5611938) * _TEMP * _0_0;
145946    +_LP0 = _LP0 + (    5715179.28557613) * _TEMP * _0_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5715179.28557613) * _TEMP * _0_1;
145947    +_LP0 = _LP0 + (    3344400.58625212) * _TEMP * _0_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3344400.58625212) * _TEMP * _0_2;
145948    +
145949    +***  Effect: Industry ;
MPRINT(EM_DIAGRAM):   *** Effect: Industry ;
145950    +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
145951    +_LP0 = _LP0 + (    5305194.24829287) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5305194.24829287) * _TEMP * _1_0;
145952    +_LP0 = _LP0 + (    -3756132.0072696) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3756132.0072696) * _TEMP * _1_1;
145953    +_LP0 = _LP0 + (   -2725624.61923406) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2725624.61923406) * _TEMP * _1_2;
145954    +_LP0 = _LP0 + (    1992762.38030448) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1992762.38030448) * _TEMP * _1_3;
145955    +*--- Intercept ---*;
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
145956    +_LP0 = _LP0 + (    6791358.48762649);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6791358.48762649);
145957    +
145958    +REG4DR1:
145959    +
145960    +*** Predicted Value, Error, and Residual;
MPRINT(EM_DIAGRAM):   REG4DR1: *** Predicted Value, Error, and Residual;
145961    +label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
145962    +P_Sum_Labor_Force_Pop = _LP0;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = _LP0;
145963    +
145964    +drop _R;
MPRINT(EM_DIAGRAM):   drop _R;
145965    +if _Y = . then do;
MPRINT(EM_DIAGRAM):   if _Y = . then do;
145966    +   R_Sum_Labor_Force_Pop = .;
MPRINT(EM_DIAGRAM):   R_Sum_Labor_Force_Pop = .;
145967    +end;
MPRINT(EM_DIAGRAM):   end;
145968    +else do;
MPRINT(EM_DIAGRAM):   else do;
145969    +   _R = _Y - _LP0;
MPRINT(EM_DIAGRAM):   _R = _Y - _LP0;
145970    +    label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
145971    +   R_Sum_Labor_Force_Pop = _R;
MPRINT(EM_DIAGRAM):   R_Sum_Labor_Force_Pop = _R;
145972    +end;
MPRINT(EM_DIAGRAM):   end;
145973    +
145974    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
145975    +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
145976    +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
145977     run;
 
NOTE: DATA STEP view saved on file EMWS1.REG4_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
145978     quit;
145979     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
145980     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
145981     * Reg4: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg4: Computing metadata for TRAIN data;
145982     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.REG4_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg4_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg4_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg4_TRAIN out=WORK.M0BNMZPS noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0BNMZPS;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0BNMZPS(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0BNMZPS;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0BNMZPS;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M37RTZDZ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M37RTZDZ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M37RTZDZ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M16G4API(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M37RTZDZ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M37RTZDZ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M37RTZDZ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M37RTZDZ;
MPRINT(EMADVISECOLUMNS):   set WORK.M37RTZDZ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg4";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_SUM_LABOR_FORCE_POP") creator = "Reg4";
MPRINT(EM_DIAGRAM):   when("R_SUM_LABOR_FORCE_POP") creator = "Reg4";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg4";
MPRINT(EM_DIAGRAM):   when("SUM_LABOR_FORCE_POP") model = "Reg4";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg4: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'AGE_GROUP' 'INDUSTRY' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg4: Rejected using backward selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
146340     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
146341     set EMWS1.Reg4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EMINFO;
146342     where DATA='Reg4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
146343     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.REG4_EMINFO.
      WHERE (DATA='Reg4') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
146344     data EMWS1.Reg4_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg4_EMINFO;
146345     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
146346     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
146347     cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.REG4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
146351     run;
146352     data EMWS1.Reg4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_EMINFO;
146353     set EMWS1.Reg4_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EMINFO WORK.MODELTEMP_INFO;
146354     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG4_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.REG4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
146355     proc sort data = EMWS1.Reg4_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg4_EMINFO NOTHREADS;
146356     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
146357     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG4_EMINFO.
NOTE: The data set EMWS1.REG4_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
146358     proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
146359     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
146360     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
146361     proc sort data = EMWS1.Reg4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
146362     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
146363     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.REG4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146364     data EMWS1.Reg4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_EMINFO;
146365     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
146366     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
146367     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.REG4_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
146368     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
146369     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
146370     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
146371     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.REG4_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS1.REG4_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 08, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:53:50" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                December 08, 2019
Time:                17:53:50
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1CQEULW "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Reg4\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1CQEULW new;
MPRINT(EM_DIAGRAM):   run;
146395     data EMWS1.Reg4_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg4_EMOUTFIT;
146396     length TARGET $32;
MPRINT(EM_DIAGRAM):   length TARGET $32;
146397     set EMWS1.Reg4_EMESTIMATE end=eof;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EMESTIMATE end=eof;
146398     where (_TYPE_='PARMS');
MPRINT(EM_DIAGRAM):   where (_TYPE_='PARMS');
146399     drop _STEP_--Population;
MPRINT(EM_DIAGRAM):   drop _STEP_--Population;
146400     if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
146401     TARGET = "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   TARGET = "Sum_Labor_Force_Pop";
146402     output;
MPRINT(EM_DIAGRAM):   output;
146403     end;
MPRINT(EM_DIAGRAM):   end;
146404     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG4_EMESTIMATE.
      WHERE _TYPE_='PARMS';
NOTE: The data set EMWS1.REG4_EMOUTFIT has 1 observations and 31 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
146405     data EMWS1.Reg4_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg4_EMOUTFIT;
146406     set EMWS1.Reg4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EMOUTFIT;
146407     length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
146408     label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
146409     if upcase(TARGET) eq "SUM_LABOR_FORCE_POP" then TargetLabel = 'Industry_Population';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SUM_LABOR_FORCE_POP" then TargetLabel = 'Industry_Population';
146410     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG4_EMOUTFIT.
NOTE: The data set EMWS1.REG4_EMOUTFIT has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
146411     proc sort data=EMWS1.Reg4_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg4_EMREPORTFIT nothreads;
146412     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
146413     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set EMWS1.REG4_EMREPORTFIT.
NOTE: The data set EMWS1.REG4_EMREPORTFIT has 19 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146414     %let _EMwarndup = 0;
146415     %let _EMtargetdup =;
146416     %let _EMASEtargetdup =;
146417     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
146418     set EMWS1.Reg4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EMOUTFIT;
146419     if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
146420     call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
146421     call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
146422     call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
146423     end;
MPRINT(EM_DIAGRAM):   end;
146424     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG4_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146425     proc sort data=EMWS1.Trans_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Trans_CMeta_TRAIN out=WORK.SUBSETINMETA;
146426     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146427     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.TRANS_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 5 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
146428     proc sort data=EMWS1.Reg4_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg4_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
146429     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146430     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.REG4_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 4 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
146431     data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
146432     merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
146433     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
146434     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 4 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 5 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
146435     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
146436     set EMWS1.Reg4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_CMeta_TRAIN;
146437     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
146438     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
146439     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
146440     set EMWS1.Reg4_TRAIN(keep=
146441     P_Sum_Labor_Force_Pop
146442     R_Sum_Labor_Force_Pop
146443     _WARN_
146444     Sum_Labor_Force_Pop
146445     );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_TRAIN(keep= P_Sum_Labor_Force_Pop R_Sum_Labor_Force_Pop _WARN_ Sum_Labor_Force_Pop );
146446     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 196 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.REG4_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 196 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 196 observations read from the data set EMWS1.REG4_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 196 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK._RESMETA;
MPRINT(EM_DIAGRAM):   length NAME $32 LEVEL $8 ROLE $32 type $1;
MPRINT(EM_DIAGRAM):   NAME="R_Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   ROLE='INPUT';
MPRINT(EM_DIAGRAM):   LEVEL='INTERVAL';
MPRINT(EM_DIAGRAM):   TYPE='N';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg4: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg4: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc stdize data = EM_temp_assessdata out=_null_ outstat=WORK.Reg4_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ) ;
MPRINT(EM_DIAGRAM):   var
MPRINT(STDIZEVAR):   R_Sum_Labor_Force_Pop
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Reg4_STAT;
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION', 'SCALE', 'P0', 'P5', 'P10', 'P15', 'P20' 'P25', 'P50', 'P75', 'P80', 'P85', 'P90', 'P95', 'P100');
MPRINT(EM_DIAGRAM):   if _TYPE_ = 'LOCATION' then _TYPE_='MEAN';
MPRINT(EM_DIAGRAM):   else if _TYPE_ = 'SCALE' then _TYPE_='STD';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Reg4BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Reg4BOXDATA out=WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   id _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   UPPERWHISKER = P75 + 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   LOWERWHISKER = P25 - 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   if P100<=UPPERWHISKER then do;
MPRINT(EM_DIAGRAM):   UPPERWHISKER=P100;
MPRINT(EM_DIAGRAM):   P100=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if P95<=UPPERWHISKER then P95=.;
MPRINT(EM_DIAGRAM):   if P90<=UPPERWHISKER then P90=.;
MPRINT(EM_DIAGRAM):   if P85<=UPPERWHISKER then P85=.;
MPRINT(EM_DIAGRAM):   if P80<=UPPERWHISKER then P80=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P0 then do;
MPRINT(EM_DIAGRAM):   LOWERWHISKER=P0;
MPRINT(EM_DIAGRAM):   P0=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P20 then P20=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P15 then P15=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P10 then P10=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P5 then P5=.;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Reg4BOXDATA out=WORK.Reg4BOXDATA(rename=(COL1=VALUE _name_=_VARIABLE_)) NAME=XLABEL;
MPRINT(EM_DIAGRAM):   by _NAME_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   length XLABEL $12;
MPRINT(EM_DIAGRAM):   set WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   label _VARIABLE_=;
MPRINT(EM_DIAGRAM):   label XLABEL=;
MPRINT(EM_DIAGRAM):   where VALUE ne .;
MPRINT(EM_DIAGRAM):   if XLABEL in('P100', 'P95', 'P90', 'P85', 'P80', 'P20', 'P15', 'P10', 'P5', 'P0') then XLABEL = 'OUTLIER';
MPRINT(EM_DIAGRAM):   else if XLABEL='P50' then XLABEL='MEDIAN';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Reg4BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by VALUE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg4_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200 DATAROLE $32;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label targetlabel = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   label VALUE = "Value";
MPRINT(EM_DIAGRAM):   label XLABEL = "Box Plot Marker";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Residual Variable";
MPRINT(EM_DIAGRAM):   set WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   TARGET = substr(_VARIABLE_, 3);
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SUM_LABOR_FORCE_POP" then TARGETLABEL = 'Industry_Population';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_Sum_Labor_Force__DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Sum_Labor_Force_Pop") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Sum_Labor_Force_Pop") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Sum_Labor_Force_Pop _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Sum_Labor_Force_Pop") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Sum_Labor_Force_Pop") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Sum_Labor_Force_Pop Sum_Labor_Force_Pop _tmpfreqvar_ WHERE = (Sum_Labor_Force_Pop > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Sum_Labor_Force_Pop ;
MPRINT(EM_ASSESS):   VAR Sum_Labor_Force_Pop ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST ( KEEP = TARGET P_LABEL LOWP UPP SCORE N _TARGETMEAN_ BIN _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_ _MAXP_ ) WORK._TEMPRANK (KEEP = BIN TARGET DATAROLE DECILE N _TARGETMEAN_ _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_
_MAXP_ ) ;
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... START OF RETAIN AREA. CONTINOUS DEP VAR ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN TARGET "Sum_Labor_Force_Pop" DATAROLE "TRAIN" NUMOBS1 - NUMOBS20 0 MAXTGT1 - MAXTGT20 . MINTGT1 - MINTGT20 . MNTGT1 - MNTGT20 0 MAXPTGT1 - MAXPTGT20 . MINPTGT1 - MINPTGT20 . MNPTGT1 - MNPTGT20 0 RNUMOBS1 - RNUMOBS20 0 RMAXTGT1
- RMAXTGT20 . RMINTGT1 - RMINTGT20 . RMNTGT1 - RMNTGT20 0 RMAXPTGT1 - RMAXPTGT20 . RMINPTGT1 - RMINPTGT20 . RMNPTGT1 - RMNPTGT20 0 ;
MPRINT(EM_ASSESS):   DROP _FREQ_ N1 NUMOBS1 - NUMOBS20 MAXTGT1 - MAXTGT20 MINTGT1 - MINTGT20 MNTGT1 - MNTGT20 MAXPTGT1 - MAXPTGT20 MINPTGT1 - MINPTGT20 MNPTGT1 - MNPTGT20 RNUMOBS1 - RNUMOBS20 RMAXTGT1 - RMAXTGT20 RMINTGT1 - RMINTGT20 RMNTGT1 - RMNTGT20
RMAXPTGT1 - RMAXPTGT20 RMINPTGT1 - RMINPTGT20 RMNPTGT1 - RMNPTGT20 ;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY MAXTGTS (20) MAXTGT1 - MAXTGT20;
MPRINT(EM_ASSESS):   ARRAY MINTGTS (20) MINTGT1 - MINTGT20;
MPRINT(EM_ASSESS):   ARRAY MNTGTS (20) MNTGT1 - MNTGT20;
MPRINT(EM_ASSESS):   ARRAY MAXPTGTS (20) MAXPTGT1 - MAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY MINPTGTS (20) MINPTGT1 - MINPTGT20;
MPRINT(EM_ASSESS):   ARRAY MNPTGTS (20) MNPTGT1 - MNPTGT20;
MPRINT(EM_ASSESS):   ARRAY RNUMOBSS (20) RNUMOBS1 - RNUMOBS20;
MPRINT(EM_ASSESS):   ARRAY RMAXTGTS (20) RMAXTGT1 - RMAXTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINTGTS (20) RMINTGT1 - RMINTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNTGTS (20) RMNTGT1 - RMNTGT20;
MPRINT(EM_ASSESS):   ARRAY RMAXPTGTS (20) RMAXPTGT1 - RMAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINPTGTS (20) RMINPTGT1 - RMINPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNPTGTS (20) RMNPTGT1 - RMNPTGT20;
MPRINT(EM_ASSESS):   IF _MEANTARGET > . THEN Sum_Labor_Force_Pop = _MEANTARGET ;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   N1 + _FREQ_;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .......... Outdist Processing For Interval Target;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCRBIN = MIN (CEIL (( P_Sum_Labor_Force_Pop - -2973432.83027755) / 1039258.24256387), 20);
MPRINT(EM_ASSESS):   IF SCRBIN <= 0 THEN SCRBIN = 1;
MPRINT(EM_ASSESS):   SCRBIN = 20 + 1 - SCRBIN;
MPRINT(EM_ASSESS):   NUMOBSS ( SCRBIN) = SUM (NUMOBSS ( SCRBIN) , _FREQ_ );
MPRINT(EM_ASSESS):   MNTGTS ( SCRBIN) = SUM (MNTGTS ( SCRBIN), Sum_Labor_Force_Pop * _FREQ_);
MPRINT(EM_ASSESS):   MAXTGTS ( SCRBIN) = MAX (MAXTGTS (SCRBIN), _MAXTARGET);
MPRINT(EM_ASSESS):   MINTGTS ( SCRBIN) = MIN (MINTGTS (SCRBIN), _MINTARGET);
MPRINT(EM_ASSESS):   MAXPTGTS ( SCRBIN) = MAX (MAXPTGTS ( SCRBIN), P_Sum_Labor_Force_Pop);
MPRINT(EM_ASSESS):   MINPTGTS ( SCRBIN) = MIN (MINPTGTS ( SCRBIN), P_Sum_Labor_Force_Pop);
MPRINT(EM_ASSESS):   MNPTGTS ( SCRBIN) = SUM (MNPTGTS ( SCRBIN), P_Sum_Labor_Force_Pop * _FREQ_);
MPRINT(EM_ASSESS):   BIN = CEIL (N1 * 20 / 196);
MPRINT(EM_ASSESS):   IF BIN <= 0 THEN BIN = 1;
MPRINT(EM_ASSESS):   IF BIN > 20 THEN BIN = 20;
MPRINT(EM_ASSESS):   IF BIN < 1 THEN BIN = 1;
MPRINT(EM_ASSESS):   BIN = 21 - BIN;
MPRINT(EM_ASSESS):   RNUMOBSS ( BIN) = SUM (RNUMOBSS ( BIN) , _FREQ_ );
MPRINT(EM_ASSESS):   RMNTGTS ( BIN) = SUM (RMNTGTS ( BIN), Sum_Labor_Force_Pop * _FREQ_);
MPRINT(EM_ASSESS):   RMAXTGTS ( BIN) = MAX (RMAXTGTS (BIN), _MAXTARGET);
MPRINT(EM_ASSESS):   RMINTGTS ( BIN) = MIN (RMINTGTS (BIN), _MINTARGET);
MPRINT(EM_ASSESS):   RMAXPTGTS ( BIN) = MAX (RMAXPTGTS ( BIN), P_Sum_Labor_Force_Pop);
MPRINT(EM_ASSESS):   RMINPTGTS ( BIN) = MIN (RMINPTGTS ( BIN), P_Sum_Labor_Force_Pop);
MPRINT(EM_ASSESS):   RMNPTGTS ( BIN) = SUM (RMNPTGTS ( BIN), P_Sum_Labor_Force_Pop * _FREQ_);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Start of Outdist Area, Continuous Dep Var;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   UPP = 17811732.021;
MPRINT(EM_ASSESS):   DO SCRBIN = 1 TO 20;
MPRINT(EM_ASSESS):   LOWP = UPP - 1039258.24256387;
MPRINT(EM_ASSESS):   N = NUMOBSS (SCRBIN);
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = MNTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = MNPTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = MINTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = MAXTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MINP_ = MINPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MAXP_ = MAXPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   SCORE = MEAN (UPP, LOWP);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (LOWP, 12.3)) || " - " || COMPBL (PUT (UPP, 12.3));
MPRINT(EM_ASSESS):   BIN = SCRBIN;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   UPP = LOWP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO SCRBIN = .... ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Output Outranks Continuous Case ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO BIN = 1 TO 20;
MPRINT(EM_ASSESS):   N = RNUMOBSS (BIN);
MPRINT(EM_ASSESS):   DECILE = BIN * 100 / 20;
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = RMNTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = RMNPTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = RMINTGTS (BIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = RMAXTGTS (BIN);
MPRINT(EM_ASSESS):   _MINP_ = RMINPTGTS (BIN);
MPRINT(EM_ASSESS):   _MAXP_ = RMAXPTGTS (BIN);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (_MINP_, 12.3)) || " - " || COMPBL (PUT (_MAXP_, 12.3));
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK;
MPRINT(EM_ASSESS):   END;
The SAS System
 
MPRINT(EM_ASSESS):   * ..... DO _K = 1 TO DECILEBIN ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... IF EOF ;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" _TARGETMAX_ = "Max Target" _TARGETMEAN_= "Mean Target" _TARGETMIN_ = "Min Target" DATAROLE = "Data Role" N = "Number of Observations"
TARGET = "Target Variable" LOWP = "Lower Bound" UPP = "Upper Bound" score = "Model Score" scrbin = "Bin" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Range for Predicted" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Industry_Population';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Industry_Population';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
150780     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
150781     set EMWS1.Reg4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_CMeta_TRAIN;
150782     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
150783     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
150784     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
150785     set EMWS1.Reg4_VALIDATE(keep=
150786     P_Sum_Labor_Force_Pop
150787     R_Sum_Labor_Force_Pop
150788     _WARN_
150789     Sum_Labor_Force_Pop
150790     );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_VALIDATE(keep= P_Sum_Labor_Force_Pop R_Sum_Labor_Force_Pop _WARN_ Sum_Labor_Force_Pop );
150791     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 84 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.REG4_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 84 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: There were 84 observations read from the data set EMWS1.REG4_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 84 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK._RESMETA;
MPRINT(EM_DIAGRAM):   length NAME $32 LEVEL $8 ROLE $32 type $1;
MPRINT(EM_DIAGRAM):   NAME="R_Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   ROLE='INPUT';
MPRINT(EM_DIAGRAM):   LEVEL='INTERVAL';
MPRINT(EM_DIAGRAM):   TYPE='N';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg4: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg4: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc stdize data = EM_temp_assessdata out=_null_ outstat=WORK.Reg4_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ) ;
MPRINT(EM_DIAGRAM):   var
MPRINT(STDIZEVAR):   R_Sum_Labor_Force_Pop
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Reg4_STAT;
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION', 'SCALE', 'P0', 'P5', 'P10', 'P15', 'P20' 'P25', 'P50', 'P75', 'P80', 'P85', 'P90', 'P95', 'P100');
MPRINT(EM_DIAGRAM):   if _TYPE_ = 'LOCATION' then _TYPE_='MEAN';
MPRINT(EM_DIAGRAM):   else if _TYPE_ = 'SCALE' then _TYPE_='STD';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Reg4BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Reg4BOXDATA out=WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   id _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   UPPERWHISKER = P75 + 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   LOWERWHISKER = P25 - 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   if P100<=UPPERWHISKER then do;
MPRINT(EM_DIAGRAM):   UPPERWHISKER=P100;
MPRINT(EM_DIAGRAM):   P100=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if P95<=UPPERWHISKER then P95=.;
MPRINT(EM_DIAGRAM):   if P90<=UPPERWHISKER then P90=.;
MPRINT(EM_DIAGRAM):   if P85<=UPPERWHISKER then P85=.;
MPRINT(EM_DIAGRAM):   if P80<=UPPERWHISKER then P80=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P0 then do;
MPRINT(EM_DIAGRAM):   LOWERWHISKER=P0;
MPRINT(EM_DIAGRAM):   P0=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P20 then P20=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P15 then P15=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P10 then P10=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P5 then P5=.;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Reg4BOXDATA out=WORK.Reg4BOXDATA(rename=(COL1=VALUE _name_=_VARIABLE_)) NAME=XLABEL;
MPRINT(EM_DIAGRAM):   by _NAME_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   length XLABEL $12;
MPRINT(EM_DIAGRAM):   set WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   label _VARIABLE_=;
MPRINT(EM_DIAGRAM):   label XLABEL=;
MPRINT(EM_DIAGRAM):   where VALUE ne .;
MPRINT(EM_DIAGRAM):   if XLABEL in('P100', 'P95', 'P90', 'P85', 'P80', 'P20', 'P15', 'P10', 'P5', 'P0') then XLABEL = 'OUTLIER';
MPRINT(EM_DIAGRAM):   else if XLABEL='P50' then XLABEL='MEDIAN';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Reg4BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by VALUE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200 DATAROLE $32;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label targetlabel = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   label VALUE = "Value";
MPRINT(EM_DIAGRAM):   label XLABEL = "Box Plot Marker";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Residual Variable";
MPRINT(EM_DIAGRAM):   set WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   TARGET = substr(_VARIABLE_, 3);
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SUM_LABOR_FORCE_POP" then TARGETLABEL = 'Industry_Population';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg4_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EMRESIDUAL WORK.Reg4BOXDATA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_Sum_Labor_Force__DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("Sum_Labor_Force_Pop") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("Sum_Labor_Force_Pop") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_Sum_Labor_Force_Pop _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_Sum_Labor_Force_Pop") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Sum_Labor_Force_Pop") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_Sum_Labor_Force_Pop Sum_Labor_Force_Pop _tmpfreqvar_ WHERE = (Sum_Labor_Force_Pop > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_Sum_Labor_Force_Pop ;
MPRINT(EM_ASSESS):   VAR Sum_Labor_Force_Pop ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST ( KEEP = TARGET P_LABEL LOWP UPP SCORE N _TARGETMEAN_ BIN _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_ _MAXP_ ) WORK._TEMPRANK (KEEP = BIN TARGET DATAROLE DECILE N _TARGETMEAN_ _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_
_MAXP_ ) ;
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... START OF RETAIN AREA. CONTINOUS DEP VAR ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN TARGET "Sum_Labor_Force_Pop" DATAROLE "VALIDATE" NUMOBS1 - NUMOBS20 0 MAXTGT1 - MAXTGT20 . MINTGT1 - MINTGT20 . MNTGT1 - MNTGT20 0 MAXPTGT1 - MAXPTGT20 . MINPTGT1 - MINPTGT20 . MNPTGT1 - MNPTGT20 0 RNUMOBS1 - RNUMOBS20 0
RMAXTGT1 - RMAXTGT20 . RMINTGT1 - RMINTGT20 . RMNTGT1 - RMNTGT20 0 RMAXPTGT1 - RMAXPTGT20 . RMINPTGT1 - RMINPTGT20 . RMNPTGT1 - RMNPTGT20 0 ;
MPRINT(EM_ASSESS):   DROP _FREQ_ N1 NUMOBS1 - NUMOBS20 MAXTGT1 - MAXTGT20 MINTGT1 - MINTGT20 MNTGT1 - MNTGT20 MAXPTGT1 - MAXPTGT20 MINPTGT1 - MINPTGT20 MNPTGT1 - MNPTGT20 RNUMOBS1 - RNUMOBS20 RMAXTGT1 - RMAXTGT20 RMINTGT1 - RMINTGT20 RMNTGT1 - RMNTGT20
RMAXPTGT1 - RMAXPTGT20 RMINPTGT1 - RMINPTGT20 RMNPTGT1 - RMNPTGT20 ;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY MAXTGTS (20) MAXTGT1 - MAXTGT20;
MPRINT(EM_ASSESS):   ARRAY MINTGTS (20) MINTGT1 - MINTGT20;
MPRINT(EM_ASSESS):   ARRAY MNTGTS (20) MNTGT1 - MNTGT20;
MPRINT(EM_ASSESS):   ARRAY MAXPTGTS (20) MAXPTGT1 - MAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY MINPTGTS (20) MINPTGT1 - MINPTGT20;
MPRINT(EM_ASSESS):   ARRAY MNPTGTS (20) MNPTGT1 - MNPTGT20;
MPRINT(EM_ASSESS):   ARRAY RNUMOBSS (20) RNUMOBS1 - RNUMOBS20;
MPRINT(EM_ASSESS):   ARRAY RMAXTGTS (20) RMAXTGT1 - RMAXTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINTGTS (20) RMINTGT1 - RMINTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNTGTS (20) RMNTGT1 - RMNTGT20;
MPRINT(EM_ASSESS):   ARRAY RMAXPTGTS (20) RMAXPTGT1 - RMAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINPTGTS (20) RMINPTGT1 - RMINPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNPTGTS (20) RMNPTGT1 - RMNPTGT20;
MPRINT(EM_ASSESS):   IF _MEANTARGET > . THEN Sum_Labor_Force_Pop = _MEANTARGET ;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   N1 + _FREQ_;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .......... Outdist Processing For Interval Target;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCRBIN = MIN (CEIL (( P_Sum_Labor_Force_Pop - -2973432.83027755) / 1039258.24256387), 20);
MPRINT(EM_ASSESS):   IF SCRBIN <= 0 THEN SCRBIN = 1;
MPRINT(EM_ASSESS):   SCRBIN = 20 + 1 - SCRBIN;
MPRINT(EM_ASSESS):   NUMOBSS ( SCRBIN) = SUM (NUMOBSS ( SCRBIN) , _FREQ_ );
MPRINT(EM_ASSESS):   MNTGTS ( SCRBIN) = SUM (MNTGTS ( SCRBIN), Sum_Labor_Force_Pop * _FREQ_);
MPRINT(EM_ASSESS):   MAXTGTS ( SCRBIN) = MAX (MAXTGTS (SCRBIN), _MAXTARGET);
MPRINT(EM_ASSESS):   MINTGTS ( SCRBIN) = MIN (MINTGTS (SCRBIN), _MINTARGET);
MPRINT(EM_ASSESS):   MAXPTGTS ( SCRBIN) = MAX (MAXPTGTS ( SCRBIN), P_Sum_Labor_Force_Pop);
MPRINT(EM_ASSESS):   MINPTGTS ( SCRBIN) = MIN (MINPTGTS ( SCRBIN), P_Sum_Labor_Force_Pop);
MPRINT(EM_ASSESS):   MNPTGTS ( SCRBIN) = SUM (MNPTGTS ( SCRBIN), P_Sum_Labor_Force_Pop * _FREQ_);
MPRINT(EM_ASSESS):   BIN = CEIL (N1 * 20 / 84);
MPRINT(EM_ASSESS):   IF BIN <= 0 THEN BIN = 1;
MPRINT(EM_ASSESS):   IF BIN > 20 THEN BIN = 20;
MPRINT(EM_ASSESS):   IF BIN < 1 THEN BIN = 1;
MPRINT(EM_ASSESS):   BIN = 21 - BIN;
MPRINT(EM_ASSESS):   RNUMOBSS ( BIN) = SUM (RNUMOBSS ( BIN) , _FREQ_ );
MPRINT(EM_ASSESS):   RMNTGTS ( BIN) = SUM (RMNTGTS ( BIN), Sum_Labor_Force_Pop * _FREQ_);
MPRINT(EM_ASSESS):   RMAXTGTS ( BIN) = MAX (RMAXTGTS (BIN), _MAXTARGET);
MPRINT(EM_ASSESS):   RMINTGTS ( BIN) = MIN (RMINTGTS (BIN), _MINTARGET);
MPRINT(EM_ASSESS):   RMAXPTGTS ( BIN) = MAX (RMAXPTGTS ( BIN), P_Sum_Labor_Force_Pop);
MPRINT(EM_ASSESS):   RMINPTGTS ( BIN) = MIN (RMINPTGTS ( BIN), P_Sum_Labor_Force_Pop);
MPRINT(EM_ASSESS):   RMNPTGTS ( BIN) = SUM (RMNPTGTS ( BIN), P_Sum_Labor_Force_Pop * _FREQ_);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Start of Outdist Area, Continuous Dep Var;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   UPP = 17811732.021;
MPRINT(EM_ASSESS):   DO SCRBIN = 1 TO 20;
MPRINT(EM_ASSESS):   LOWP = UPP - 1039258.24256387;
MPRINT(EM_ASSESS):   N = NUMOBSS (SCRBIN);
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = MNTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = MNPTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = MINTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = MAXTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MINP_ = MINPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MAXP_ = MAXPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   SCORE = MEAN (UPP, LOWP);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (LOWP, 12.3)) || " - " || COMPBL (PUT (UPP, 12.3));
MPRINT(EM_ASSESS):   BIN = SCRBIN;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   UPP = LOWP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO SCRBIN = .... ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Output Outranks Continuous Case ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO BIN = 1 TO 20;
MPRINT(EM_ASSESS):   N = RNUMOBSS (BIN);
MPRINT(EM_ASSESS):   DECILE = BIN * 100 / 20;
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = RMNTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = RMNPTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = RMINTGTS (BIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = RMAXTGTS (BIN);
MPRINT(EM_ASSESS):   _MINP_ = RMINPTGTS (BIN);
MPRINT(EM_ASSESS):   _MAXP_ = RMAXPTGTS (BIN);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (_MINP_, 12.3)) || " - " || COMPBL (PUT (_MAXP_, 12.3));
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO _K = 1 TO DECILEBIN ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... IF EOF ;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" _TARGETMAX_ = "Max Target" _TARGETMEAN_= "Mean Target" _TARGETMIN_ = "Min Target" DATAROLE = "Data Role" N = "Number of Observations"
TARGET = "Target Variable" LOWP = "Lower Bound" UPP = "Upper Bound" score = "Model Score" scrbin = "Bin" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Range for Predicted" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Industry_Population';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Industry_Population';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length P_LABEL $27;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
155135     %let _cn = %sysfunc(getoption(CENTER));
155136     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
155137     proc print data=EMWS1.Reg4_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg4_EMREPORTFIT noobs label;
155138     var STAT LABEL TRAIN
155139     VALIDATE
155140     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
155141     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
155142     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
155143     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
155144     run;
 
NOTE: There were 19 observations read from the data set EMWS1.REG4_EMREPORTFIT.
NOTE: At least one W.D format was too small for the number to be printed. The decimal may be shifted by the "BEST" format.
NOTE: The PROCEDURE PRINT printed page 51.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
155145     title10;
MPRINT(EM_DIAGRAM):   title10;
155146     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
155147     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
155148     modify Reg4_EMRANK;
MPRINT(EM_DIAGRAM):   modify Reg4_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
155149     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
155150     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
155151     run;
 
NOTE: MODIFY was successful for EMWS1.REG4_EMRANK.DATA.
155152     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
155153     %let _cn = %sysfunc(getoption(CENTER));
155154     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
155155     proc print data=EMWS1.Reg4_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg4_EMRANK label noobs;
155156     var
155157     decile N _targetMean_ _meanP_;
MPRINT(EM_DIAGRAM):   var decile N _targetMean_ _meanP_;
155158     by
155159     notsorted DATAROLE
155160     notsorted TARGET
155161     notsorted TARGETLABEL
155162     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
155163     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
155164     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
155165     run;
 
NOTE: There were 34 observations read from the data set EMWS1.REG4_EMRANK.
NOTE: The PROCEDURE PRINT printed page 52.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
155166     title10;
MPRINT(EM_DIAGRAM):   title10;
155167     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
155168     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
155169     modify Reg4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Reg4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
155170     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
155171     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
155172     run;
 
NOTE: MODIFY was successful for EMWS1.REG4_EMSCOREDIST.DATA.
155173     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg4_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label _targetMean_ _meanp_ n score;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "Sum_Labor_Force_Pop" );
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
