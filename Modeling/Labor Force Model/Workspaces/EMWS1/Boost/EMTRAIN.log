MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:13:27" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                December 09, 2019
Time:                18:13:27
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3IYSU_K "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3IYSU_K new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:13:27" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70082322";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:13:27" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                student";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Boost\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
41685      proc freq data=EMWS1.Boost_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Boost_VariableSet noprint;
41686      table ROLE*LEVEL/out=WORK.BoostMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.BoostMETA;
41687      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set EMWS1.BOOST_VARIABLESET.
NOTE: The data set WORK.BOOSTMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

41688      proc print data=WORK.BoostMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.BoostMETA label noobs;
41689      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
41690      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
41691      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
41692      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
41693      run;

NOTE: There were 4 observations read from the data set WORK.BOOSTMETA.
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

41694      title10;
MPRINT(EM_DIAGRAM):   title10;
41695      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "Sum_Labor_Force_Pop"." 
41696      proc print data = EMWS1.Ids_Sum_Labor_Force__DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_Sum_Labor_Force__DM noobs label;
41697      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
41698      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
41699      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
41700      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
41701      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
41702      run;

NOTE: There were 3 observations read from the data set EMWS1.IDS_SUM_LABOR_FORCE__DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

41703      title10;
MPRINT(EM_DIAGRAM):   title10;
41704      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Labor Force Model';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Labor Force';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Boost: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Sum_Labor_Force_Pop(label="Sum_Labor_Force_Pop");
MPRINT(EM_DECDATA):   length Sum_Labor_Force_Pop 8 ;
MPRINT(EM_DECDATA):   label Sum_Labor_Force_Pop= "Industry_Population" ;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=225000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=25077000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Sum_Labor_Force_Pop=12651000;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Sum_Labor_Force_Pop(type=PROFIT label= Sum_Labor_Force_Pop);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Sum_Labor_Force__DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Sum_Labor_Force__DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
42151      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42152      * Boost: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Boost: Generation of macros and macro variables;
42153      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
42154      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

42155      %let EMEXCEPTIONSTRING=;
42156      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42157      * TRAIN: Boost;
MPRINT(EM_DIAGRAM):   * TRAIN: Boost;
42158      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42159      %let EM_ACTION = TRAIN;
42160      %let syscc = 0;
42161      %macro main;
42162      
42163        filename temp catalog 'sashelp.emmodl.boost_macros.source';
42164        %include temp;
42165        filename temp;
42166      
42167        %setProperties;
42168      
42169        %if %upcase(&EM_ACTION) = CREATE %then %do;
42170          filename temp catalog 'sashelp.emmodl.boost_create.source';
42171          %include temp;
42172          filename temp;
42173      
42174          %create;
42175        %end;
42176      
42177         %else
42178         %if %upcase(&EM_ACTION) = TRAIN %then %do;
42179      
42180             filename temp catalog 'sashelp.emmodl.boost_train.source';
42181             %include temp;
42182             filename temp;
42183             %train;
42184         %end;
42185      
42186        %else
42187        %if %upcase(&EM_ACTION) = SCORE %then %do;
42188          filename temp catalog 'sashelp.emmodl.boost_score.source';
42189          %include temp;
42190          filename temp;
42191      
42192          %score;
42193      
42194        %end;
42195      
42196        %else
42197        %if %upcase(&EM_ACTION) = REPORT %then %do;
42198      
42199             filename temp catalog 'sashelp.emmodl.boost_report.source';
42200             %include temp;
42201             filename temp;
42202      
42203             %report;
42204         %end;
42205      
42206         %doendm:
42207      %mend main;
42208      
42209      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
42210     +
42211     +%macro SetProperties;
42212     +
42213     +     /* boost options */
42214     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
42215     +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
42216     +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
42217     +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
42218     +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
42219     +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
42220     +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
42221     +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
42222     +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
42223     +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
42224     +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
42225     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
42226     +
42227     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
42228     +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
42229     +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
42230     +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
42231     +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
42232     +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
42233     +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
42234     +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
42235     +
42236     +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
42237     +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
42238     +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
42239     +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
42240     +
42241     +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
42242     +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
42243     +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
42244     +
42245     +%mend SetProperties;
42246     +
42247     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
42249     +%macro train;
42251     +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
42252     +   %include temp;
42253     +   filename temp;
42255     +   %if &EM_IMPORT_DATA eq %then %do;
42256     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
42257     +       %put &em_codebar;
42258     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
42259     +       %put &errormsg;
42260     +       %put &em_codebar;
42261     +       %goto doendm;
42262     +   %end;
42263     +   %else
42264     +       %let EMEXCEPTIONSTRING =;
42266     +   %if  &EM_NUM_TARGET ne 1 %then %do;
42267     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
42268     +        %put &em_codebar;
42269     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
42270     +        %put &errormsg;
42271     +        %put &em_codebar;
42272     +        %goto doendm;
42273     +   %end;
42275     +   %let target_level = %EM_TARGET_LEVEL;
42276     +   %let target_var = %EM_TARGET;
42278     +   %if ("&target_Level" ne "INTERVAL") %then %do;
42279     +       %em_boost_makeDMDB(indata=&EM_IMPORT_DATA, target=&target_Var,
42280     +                             nLevel=_nTargetLevel);
42281     +   %end;
42283     +   /* check actual num of target levels */
42284     +   %if (&target_Level eq BINARY) %then %do;
42285     +      %if &_nTargetLevel  > 2 %then %do;
42286     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
42287     +        %put &em_codebar;
42288     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
42289     +        %put &errormsg;
42290     +        %put &em_codebar;
42291     +        %goto doendm;
42292     +      %end;
42293     +   %end;
42295     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
42296     +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
42297     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
42298     +        %put &em_codebar;
42299     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
42300     +        %put &errormsg;
42301     +        %put &em_codebar;
42302     +        %goto doendm;
42303     +   %end;
42305     +   /* Initialize property macro variables */
42306     +   %SetProperties;
42308     +   /* data sets */
42309     +   %EM_GETNAME(key=MODEL, type=DATA);
42310     +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
42311     +   %EM_GETNAME(key=SUBFIT, type=DATA);
42312     +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
42314     +   /* files
42315     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
42317     +   /* retrieve target information */
42318     +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
42320     +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
42321     +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
42322     +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
42323     +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
42324     +   %do %while(^ %sysfunc(fetch(&dsid)));
42325     +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
42326     +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
42327     +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
42328     +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
42329     +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
42330     +   %end;
42331     +   %let dsid = %sysfunc(close(&dsid));
42333     +   /* if target level is ORDINAL, throw run time exception -- proc boost does not support ordinal target */
42334     +   %if &Target_Level eq ORDINAL %then %do;
42335     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
42336     +        %put &em_codebar;
42337     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_invalidordinaltarget_note, NOQUOTE));
42338     +        %put &errormsg;
42339     +        %put &em_codebar;
42340     +        %goto doendm;
42341     +   %end;
42343     +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be thrown */
42344     +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq . )) %then %do;
42345     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
42346     +        %put &em_codebar;
42347     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note, NOQUOTE));
42348     +        %put &errormsg;
42349     +        %put &em_codebar;
42350     +        %goto doendm;
42351     +   %end;
42353     +   %runBoostProcedure;
42356     +   %doendm:
42357     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
42358     +%Macro em_boost_makeDMDB(indata=, target=,  nLevel= );
42359     +  %global &nLevel;
42361     +  %let targetLevel=;
42362     +  data _null_;
42363     +     length orderString $64;
42364     +     set &em_data_variableset end=eof;
42365     +     where NAME="&target";
42366     +     select(order);
42367     +            when('')        order ='DESC';
42368     +            when('FMTASC')  order='ASCFMT';
42369     +            when('FMTDESC') order='DESFMT';
42370     +            otherwise;
42371     +     end;
42372     +     if eof then do;
42373     +        call symput("targetOrder", trim(order));
42374     +        call symput("targetLevel", trim(Level));
42375     +     end;
42376     +  run;
42378     +  %if "&targetLevel" ne "INTERVAL" %then %do;
42379     +  proc dmdb batch data=&indata dmdbCat=_BoostDMDB
42380     +    classout=_tmp_dmdbout;
42381     +    class &target(&targetOrder);
42382     +    target &target;
42383     +  run;
42384     +  data _tmp_dmdbout;
42385     +    set _tmp_dmdbout;
42386     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
42387     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
42388     +  run;
42389     +  data _null_;
42390     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
42391     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
42392     +    %let dsid = %sysfunc(close(&dsid));
42393     +     call symput("&nLevel", put(&_obs, Best12.));
42394     +  run;
42396     +  proc datasets lib=work nolist;
42397     +     delete _tmp_dmdbout;
42398     +  run;
42399     +  quit;
42400     +  %end;
42402     +%Mend em_boost_makeDMDB;
42404     +%macro runBoostProcedure;
42406     +  proc sql;
42407     +    reset noprint;
42408     +    select count(*) into :nobs from &EM_IMPORT_DATA;
42409     +  quit;
42411     +  %let arborkluge= "work._BoostDMDB";
42412     +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
42414     +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
42415     +      iterations = &EM_PROPERTY_ITERATIONS
42416     +    %end;
42418     +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
42419     +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
42420     +       trainproportion = &tprop
42421     +    %end;
42423     +    %if &EM_PROPERTY_SEED ne %then %do;
42424     +       seed = &EM_PROPERTY_SEED
42425     +    %end;
42427     +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
42428     +       shrinkage = &EM_PROPERTY_SHRINKAGE
42429     +    %end;
42431     +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
42432     +      leaffraction = &EM_PROPERTY_LEAFFRACTION
42433     +    %end;
42435     +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
42436     +    %if &splitsize ge &nobs %then %do;
42437     +       %let splitsize= .;
42438     +    %end;
42439     +    %if &splitsize ne . %then %do;
42440     +      splitsize = &splitsize
42441     +    %end;
42443     +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
42444     +      mincatsize = &EM_PROPERTY_MINCATSIZE
42445     +    %end;
42447     +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
42448     +       maxbranch = &EM_PROPERTY_MAXBRANCH
42449     +    %end;
42451     +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
42452     +       maxdepth = &EM_PROPERTY_MAXDEPTH
42453     +    %end;
42455     +    %let nsurrs = ;
42456     +    %if &EM_PROPERTY_NSURRS ne %then %do;
42457     +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
42458     +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
42459     +      maxsurrs = &nsurrs
42460     +    %end;
42462     +    %if &EM_PROPERTY_MISSING ne %then %do;
42463     +      Missing = &EM_PROPERTY_MISSING
42464     +    %end;
42466     +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
42467     +      reusevar = &EM_PROPERTY_REUSEVAR
42468     +    %end;
42469     +/*
42470     +    %if &EM_PROPERTY_PRECISION ne %then %do;
42471     +      intervaldecimals=&EM_PROPERTY_PRECISION
42472     +    %end;
42473     +*/
42474     +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
42475     +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
42476     +    %end;
42478     +    %if &Target_Event ne %then %do;
42479     +      Event="&Target_Event"
42480     +    %end;
42482     +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
42483     +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
42484     +    %end;
42486     +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
42487     +      IntervalBins = &EM_PROPERTY_INTERVALBINS
42488     +    %end;
42490     +    %if &TARGET_LEVEL eq INTERVAL %then %do;
42491     +      %if &EM_PROPERTY_HUBER ne %then %do;
42492     +        Huber=&EM_PROPERTY_HUBER
42493     +      %end;
42494     +    %end;
42495     +    ;
42497     +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
42498     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
42499     +    %end;
42501     +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED ne  %then %do;
42502     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
42503     +    %end;
42505     +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
42506     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
42507     +    %end;
42509     +    %if %EM_FREQ ne %then %do;
42510     +       freq %EM_FREQ;
42511     +    %end;
42513     +    target %EM_TARGET / level = &TARGET_LEVEL;
42515     +    &EM_DEC_STATEMENT;
42517     +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
42518     +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
42519     +    %end;
42520     +    %if &EM_PROPERTY_NODESIZE ne %then %do;
42521     +       nodesize = &EM_PROPERTY_NODESIZE
42522     +    %end;
42523     +    ;
42524     +    save model=&EM_USER_MODEL;
42525     +  run;
42526     +  quit;
42527     +  %em_checkerror();
42529     +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
WARNING: Argument 2 to function GETVARC referenced by the %SYSFUNC or %QSYSFUNC macro function is out of range.
MPRINT(RUNBOOSTPROCEDURE):   proc sql;
MPRINT(RUNBOOSTPROCEDURE):   reset noprint;
MPRINT(RUNBOOSTPROCEDURE):   select count(*) into :nobs from EMWS1.Part_TRAIN;
MPRINT(RUNBOOSTPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(RUNBOOSTPROCEDURE):   proc arbor proc=treeboost data=EMWS1.Part_TRAIN iterations = 50 trainproportion = 0.6 seed = 12345 shrinkage = 0.1 leaffraction = 0.1 mincatsize = 5 maxbranch = 2 maxdepth = 2 maxsurrs = 0 Missing = USEINSEARCH reusevar = 1 
Exhaustive = 5000 CategoricalBins = 30 IntervalBins = 100 Huber=NO ;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   Population
MPRINT(RUNBOOSTPROCEDURE):  / level = interval;
MPRINT(RUNBOOSTPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   Age_group Industry
MPRINT(RUNBOOSTPROCEDURE):   / level = nominal;
MPRINT(RUNBOOSTPROCEDURE):   target
MPRINT(EM_TARGET):   Sum_Labor_Force_Pop
MPRINT(RUNBOOSTPROCEDURE):   / level = INTERVAL;
MPRINT(RUNBOOSTPROCEDURE):   ;
MPRINT(RUNBOOSTPROCEDURE):   performance workdatalocation = DISK nodesize = 20000 ;
MPRINT(RUNBOOSTPROCEDURE):   save model=EMWS1.Boost_MODEL;
NOTE: 1630882 kilobytes of physical memory.
NOTE: Will use 112 out of 112 training cases.
NOTE: Using memory pool with 25110528 bytes.
NOTE: Passed training data 250 times.
NOTE: Current TREEBOOST model contains 50 trees.
NOTE: Training used 14768 bytes of work memory.
NOTE: The data set EMWS1.BOOST_MODEL has 6679 observations and 4 variables.
MPRINT(RUNBOOSTPROCEDURE):   run;

MPRINT(RUNBOOSTPROCEDURE):   quit;

NOTE: There were 112 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;

42532      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKERROR):   
MPRINT(RUNBOOSTPROCEDURE):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Boost;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42533      *------------------------------------------------------------*;
42534      * End TRAIN: Boost;
42535      *------------------------------------------------------------*;
42536      

42537      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42538      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
42539      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42540      ;
MPRINT(EM_DIAGRAM):   ;
42541      ;
MPRINT(EM_DIAGRAM):   ;
42542      ;
MPRINT(EM_DIAGRAM):   ;
42543      ;
MPRINT(EM_DIAGRAM):   ;
42544      quit;
MPRINT(EM_DIAGRAM):   quit;
42545      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42546      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
42547      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42548      /*; *"; *'; */
42549      ;
MPRINT(EM_DIAGRAM):   ;
42550      run;
MPRINT(EM_DIAGRAM):   run;
42551      quit;
MPRINT(EM_DIAGRAM):   quit;
42552      /* Reset EM Options */
42553      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
42554      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
42555      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
