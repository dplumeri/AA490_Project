MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 10, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:43:48" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 10, 2019
Time:                15:43:48
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1WOSVO3 "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1WOSVO3 new;
MPRINT(EM_DIAGRAM):   run;
29418      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
29419      set EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTKEY;
29420      if upcase(ROLE) in('HIDDEN', 'STANDARD');
MPRINT(EM_DIAGRAM):   if upcase(ROLE) in('HIDDEN', 'STANDARD');
29421      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set EMWS1.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

29422      filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29423      *------------------------------------------------------------*;
29424      * Neural: Scoring DATA data;
29425      *------------------------------------------------------------*;
29426      data EMWS1.Neural_TRAIN
29427      / view=EMWS1.Neural_TRAIN
29428      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TRAIN / view=EMWS1.Neural_TRAIN ;
29429      set EMWS1.Varsel_TRAIN
29430      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_TRAIN ;
29431      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
29432     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
29433     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
29434     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
29435     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
29436     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
29437     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
29438     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
29439     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
29440     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
29441     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
29442     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
29443     +LENGTH _WARN_ $4
29444     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
29445     +      label S_Population = 'Standard: Population' ;
MPRINT(EM_DIAGRAM):   label S_Population = 'Standard: Population' ;
29446     +
29447     +      label Age_group16_to_24 = 'Dummy: Age_group=16 to 24' ;
MPRINT(EM_DIAGRAM):   label Age_group16_to_24 = 'Dummy: Age_group=16 to 24' ;
29448     +
29449     +      label Age_group25_to_44 = 'Dummy: Age_group=25 to 44' ;
MPRINT(EM_DIAGRAM):   label Age_group25_to_44 = 'Dummy: Age_group=25 to 44' ;
29450     +
29451     +      label Age_group45_to_64 = 'Dummy: Age_group=45 to 64' ;
MPRINT(EM_DIAGRAM):   label Age_group45_to_64 = 'Dummy: Age_group=45 to 64' ;
29452     +
29453     +      label IndustryManagement__profession =
29454     +'Dummy: Industry=Management, professional, and related occupations' ;
MPRINT(EM_DIAGRAM):   label IndustryManagement__profession = 'Dummy: Industry=Management, professional, and related occupations' ;
29455     +
29456     +      label IndustryNatural_resources__con = 'Dummy: Industry=Natural resourc
29457     +es, construction, and maintenance occupations' ;
MPRINT(EM_DIAGRAM):   label IndustryNatural_resources__con = 'Dummy: Industry=Natural resources, construction, and maintenance occupations' ;
29458     +
29459     +      label IndustryProduction__transporta = 'Dummy: Industry=Production, tra
29460     +nsportation, and material moving occupations' ;
MPRINT(EM_DIAGRAM):   label IndustryProduction__transporta = 'Dummy: Industry=Production, transportation, and material moving occupations' ;
29461     +
29462     +      label IndustrySales_and_office_occup =
29463     +'Dummy: Industry=Sales and office occupations' ;
MPRINT(EM_DIAGRAM):   label IndustrySales_and_office_occup = 'Dummy: Industry=Sales and office occupations' ;
29464     +
29465     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
29466     +
29467     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
29468     +
29469     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
29470     +
29471     +      label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
29472     +
29473     +      label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
29474     +
29475     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
29476     +
29477     +*** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
29478     +drop Age_group16_to_24 Age_group25_to_44 Age_group45_to_64 ;
MPRINT(EM_DIAGRAM):   drop Age_group16_to_24 Age_group25_to_44 Age_group45_to_64 ;
29479     +if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
29480     +   Age_group16_to_24 = .;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = .;
29481     +   Age_group25_to_44 = .;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = .;
29482     +   Age_group45_to_64 = .;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = .;
29483     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29484     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29485     +end;
MPRINT(EM_DIAGRAM):   end;
29486     +else do;
MPRINT(EM_DIAGRAM):   else do;
29487     +   length _dm19 $ 19; drop _dm19 ;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
29488     +   %DMNORMCP( Age_group , _dm19 )
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm19 = '45 TO 64' then do;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 1;
MPRINT(EM_DIAGRAM):   end;
29489     +   if _dm19 = '45 TO 64'  then do;
29490     +      Age_group16_to_24 = 0;
MPRINT(EM_DIAGRAM):   else if _dm19 = '65+' then do;
29491     +      Age_group25_to_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = -1;
29492     +      Age_group45_to_64 = 1;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = -1;
29493     +   end;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = -1;
29494     +   else if _dm19 = '65+'  then do;
MPRINT(EM_DIAGRAM):   end;
29495     +      Age_group16_to_24 = -1;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
29496     +      Age_group25_to_44 = -1;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 1;
29497     +      Age_group45_to_64 = -1;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 0;
29498     +   end;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 0;
29499     +   else if _dm19 = '16 TO 24'  then do;
MPRINT(EM_DIAGRAM):   end;
29500     +      Age_group16_to_24 = 1;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
29501     +      Age_group25_to_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 0;
29502     +      Age_group45_to_64 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 1;
29503     +   end;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 0;
29504     +   else if _dm19 = '25 TO 44'  then do;
MPRINT(EM_DIAGRAM):   end;
29505     +      Age_group16_to_24 = 0;
MPRINT(EM_DIAGRAM):   else do;
29506     +      Age_group25_to_44 = 1;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = .;
29507     +      Age_group45_to_64 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = .;
29508     +   end;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = .;
29509     +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29510     +      Age_group16_to_24 = .;
MPRINT(EM_DIAGRAM):   end;
29511     +      Age_group25_to_44 = .;
MPRINT(EM_DIAGRAM):   end;
29512     +      Age_group45_to_64 = .;
29513     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Industry ;
29514     +      _DM_BAD = 1;
29515     +   end;
MPRINT(EM_DIAGRAM):   drop IndustryManagement__profession IndustryNatural_resources__con IndustryProduction__transporta IndustrySales_and_office_occup ;
29516     +end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
29517     +
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = 0;
29518     +*** Generate dummy variables for Industry ;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = 0;
29519     +drop IndustryManagement__profession IndustryNatural_resources__con
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = 0;
29520     +        IndustryProduction__transporta IndustrySales_and_office_occup ;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = 0;
29521     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   if missing( Industry ) then do;
29522     +IndustryManagement__profession = 0;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = .;
29523     +IndustryNatural_resources__con = 0;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = .;
29524     +IndustryProduction__transporta = 0;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = .;
29525     +IndustrySales_and_office_occup = 0;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = .;
29526     +if missing( Industry ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29527     +   IndustryManagement__profession = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29528     +   IndustryNatural_resources__con = .;
MPRINT(EM_DIAGRAM):   end;
29529     +   IndustryProduction__transporta = .;
29530     +   IndustrySales_and_office_occup = .;
MPRINT(EM_DIAGRAM):   else do;
29531     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
29532     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
29533     +end;
MPRINT(EM_DIAGRAM):   length _dm111 $ 111;
29534     +else do;
MPRINT(EM_DIAGRAM):   drop _dm111;
MPRINT(EM_DIAGRAM):   _dm111 = put( Industry , $CHAR111. );
29535     +   length _dm32 $ 32; drop _dm32 ;
29536     +   length _dm111 $ 111; drop _dm111;
29537     +   _dm111 = put( Industry , $CHAR111. );
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
29538     +   %DMNORMCP( _dm111, _dm32 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm32 = 'SERVICE OCCUPATIONS' then do;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = -1;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = -1;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = -1;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = -1;
29539     +   if _dm32 = 'SERVICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   end;
29540     +      IndustryManagement__profession = -1;
29541     +      IndustryNatural_resources__con = -1;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
29542     +      IndustryProduction__transporta = -1;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = 1;
29543     +      IndustrySales_and_office_occup = -1;
MPRINT(EM_DIAGRAM):   end;
29544     +   end;
29545     +   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = 1;
29546     +      IndustrySales_and_office_occup = 1;
MPRINT(EM_DIAGRAM):   end;
29547     +   end;
29548     +   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = 1;
29549     +      IndustryProduction__transporta = 1;
MPRINT(EM_DIAGRAM):   end;
29550     +   end;
29551     +   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = 1;
29552     +      IndustryNatural_resources__con = 1;
MPRINT(EM_DIAGRAM):   end;
29553     +   end;
29554     +   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = .;
29555     +      IndustryManagement__profession = 1;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = .;
29556     +   end;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = .;
29557     +   else do;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
29558     +      IndustryManagement__profession = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29559     +      IndustryNatural_resources__con = .;
MPRINT(EM_DIAGRAM):   end;
29560     +      IndustryProduction__transporta = .;
MPRINT(EM_DIAGRAM):   end;
29561     +      IndustrySales_and_office_occup = .;
29562     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** *************************;
29563     +      _DM_BAD = 1;
29564     +   end;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
29565     +end;
29566     +
29567     +*** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( Population ) THEN DO;
29568     +*** Checking missing input Interval
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
29569     +*** *************************;
29570     +
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29571     +IF NMISS(
MPRINT(EM_DIAGRAM):   END;
29572     +   Population   ) THEN DO;
MPRINT(EM_DIAGRAM):   *** *************************;
29573     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
29574     +
MPRINT(EM_DIAGRAM):   *** *************************;
29575     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
29576     +END;
MPRINT(EM_DIAGRAM):   S_Population = -2.83964697481178 + 4.7992594103827E-8 * Population ;
29577     +*** *************************;
MPRINT(EM_DIAGRAM):   END;
29578     +*** Writing the Node intvl ;
29579     +*** *************************;
MPRINT(EM_DIAGRAM):   ELSE DO;
29580     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING( Population ) THEN S_Population = . ;
29581     +   S_Population  =    -2.83964697481178 +   4.7992594103827E-8 * Population ;
29582     +END;
29583     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE S_Population = -2.83964697481178 + 4.7992594103827E-8 * Population ;
MPRINT(EM_DIAGRAM):   END;
29584     +   IF MISSING( Population ) THEN S_Population  = . ;
MPRINT(EM_DIAGRAM):   *** *************************;
29585     +   ELSE S_Population  =    -2.83964697481178 +   4.7992594103827E-8 *
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
29586     +        Population ;
MPRINT(EM_DIAGRAM):   *** *************************;
29587     +END;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
29588     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29589     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
29590     +*** *************************;
MPRINT(EM_DIAGRAM):   H11 = -1.07683938427355 * S_Population ;
29591     +*** *************************;
MPRINT(EM_DIAGRAM):   H12 = -0.42418815980383 * S_Population ;
29592     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   H13 = 3.0458121085363 * S_Population ;
29593     +*** *************************;
29594     +IF _DM_BAD EQ 0 THEN DO;
29595     +   H11  =    -1.07683938427355 * S_Population ;
29596     +   H12  =    -0.42418815980383 * S_Population ;
29597     +   H13  =      3.0458121085363 * S_Population ;
29598     +   H11  = H11  +     8.13620736214956 * Age_group16_to_24
29599     +          +    -5.69040629530111 * Age_group25_to_44
MPRINT(EM_DIAGRAM):   H11 = H11 + 8.13620736214956 * Age_group16_to_24 + -5.69040629530111 * Age_group25_to_44 + -5.22627950724203 * Age_group45_to_64 + -8.20612991861404 * IndustryManagement__profession + 3.30962239961027 * IndustryNatural_resources__con 
+ 2.59408016791381 * IndustryProduction__transporta + 0.18418992149364 * IndustrySales_and_office_occup ;
29600     +          +    -5.22627950724203 * Age_group45_to_64
29601     +          +    -8.20612991861404 * IndustryManagement__profession
29602     +          +     3.30962239961027 * IndustryNatural_resources__con
29603     +          +     2.59408016791381 * IndustryProduction__transporta
29604     +          +     0.18418992149364 * IndustrySales_and_office_occup ;
29605     +   H12  = H12  +     1.36164859072813 * Age_group16_to_24
29606     +          +     -4.9915715407152 * Age_group25_to_44
MPRINT(EM_DIAGRAM):   H12 = H12 + 1.36164859072813 * Age_group16_to_24 + -4.9915715407152 * Age_group25_to_44 + 0.87612368059709 * Age_group45_to_64 + -0.19832109582943 * IndustryManagement__profession + 1.0202053535978 * IndustryNatural_resources__con + 
-0.28879843563274 * IndustryProduction__transporta + -0.37557781715296 * IndustrySales_and_office_occup ;
29607     +          +     0.87612368059709 * Age_group45_to_64
29608     +          +    -0.19832109582943 * IndustryManagement__profession
29609     +          +      1.0202053535978 * IndustryNatural_resources__con
29610     +          +    -0.28879843563274 * IndustryProduction__transporta
29611     +          +    -0.37557781715296 * IndustrySales_and_office_occup ;
29612     +   H13  = H13  +     84.2151951296337 * Age_group16_to_24
29613     +          +    -214.422271679173 * Age_group25_to_44
MPRINT(EM_DIAGRAM):   H13 = H13 + 84.2151951296337 * Age_group16_to_24 + -214.422271679173 * Age_group25_to_44 + 47.6963303243508 * Age_group45_to_64 + 5.49661823542271 * IndustryManagement__profession + -7.94703019484785 * IndustryNatural_resources__con 
+ 22.7643905758641 * IndustryProduction__transporta + -11.6169698318882 * IndustrySales_and_office_occup ;
29614     +          +     47.6963303243508 * Age_group45_to_64
MPRINT(EM_DIAGRAM):   H11 = 4.76991388120461 + H11 ;
29615     +          +     5.49661823542271 * IndustryManagement__profession
MPRINT(EM_DIAGRAM):   H12 = -2.62037956892498 + H12 ;
29616     +          +    -7.94703019484785 * IndustryNatural_resources__con
MPRINT(EM_DIAGRAM):   H13 = -79.9842004687623 + H13 ;
29617     +          +     22.7643905758641 * IndustryProduction__transporta
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
29618     +          +    -11.6169698318882 * IndustrySales_and_office_occup ;
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
29619     +   H11  =     4.76991388120461 + H11 ;
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
29620     +   H12  =    -2.62037956892498 + H12 ;
MPRINT(EM_DIAGRAM):   END;
29621     +   H13  =    -79.9842004687623 + H13 ;
29622     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   ELSE DO;
29623     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H11 = .;
29624     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H12 = .;
29625     +END;
MPRINT(EM_DIAGRAM):   H13 = .;
29626     +ELSE DO;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
29627     +   H11  = .;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
29628     +   H12  = .;
MPRINT(EM_DIAGRAM):   *** *************************;
29629     +   H13  = .;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
29630     +END;
29631     +*** *************************;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = -3873412.99092811 * H11 + -3446294.2697551 * H12 + -706714.692803363 * H13 ;
29632     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 5563212.759221 + P_Sum_Labor_Force_Pop ;
29633     +*** *************************;
MPRINT(EM_DIAGRAM):   END;
29634     +IF _DM_BAD EQ 0 THEN DO;
29635     +   P_Sum_Labor_Force_Pop  =    -3873412.99092811 * H11
MPRINT(EM_DIAGRAM):   ELSE DO;
29636     +          +     -3446294.2697551 * H12  +    -706714.692803363 * H13 ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = .;
29637     +   P_Sum_Labor_Force_Pop  =       5563212.759221 + P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   END;
29638     +END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
29639     +ELSE DO;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 6470696.42857143;
MPRINT(EM_DIAGRAM):   END;
29640     +   P_Sum_Labor_Force_Pop  = .;
MPRINT(EM_DIAGRAM):   *** *****************************;
29641     +END;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
29642     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   *** ******************************;
29643     +   P_Sum_Labor_Force_Pop  =     6470696.42857143;
MPRINT(EM_DIAGRAM):   IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop = . ;
29644     +END;
29645     +*** *****************************;
MPRINT(EM_DIAGRAM):   ELSE R_Sum_Labor_Force_Pop = Sum_Labor_Force_Pop - P_Sum_Labor_Force_Pop ;
29646     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   ********************************;
29647     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
29648     +IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop  = . ;
MPRINT(EM_DIAGRAM):   ********************************;
29649     +ELSE R_Sum_Labor_Force_Pop  = Sum_Labor_Force_Pop  - P_Sum_Labor_Force_Pop ;
29650     +********************************;
29651     +*** End Scoring Code for Neural;
29652     +********************************;
29653     +drop
MPRINT(EM_DIAGRAM):   drop S_Population H11 H12 H13 ;
29654     +S_Population
29655     +H11
29656     +H12
29657     +H13
29658     +;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
29659      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.09 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      

MPRINT(EM_DIAGRAM):   quit;
29660      quit;
29661      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
29662      filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29663      *------------------------------------------------------------*;
29664      * Neural: Scoring VALIDATE data;
29665      *------------------------------------------------------------*;
29666      data EMWS1.Neural_VALIDATE
29667      / view=EMWS1.Neural_VALIDATE
29668      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_VALIDATE / view=EMWS1.Neural_VALIDATE ;
29669      set EMWS1.Varsel_VALIDATE
29670      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_VALIDATE ;
29671      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
29672     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
29673     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
29674     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
29675     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
29676     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
29677     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
29678     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
29679     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
29680     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
29681     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
29682     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
29683     +LENGTH _WARN_ $4
29684     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
29685     +      label S_Population = 'Standard: Population' ;
MPRINT(EM_DIAGRAM):   label S_Population = 'Standard: Population' ;
29686     +
29687     +      label Age_group16_to_24 = 'Dummy: Age_group=16 to 24' ;
MPRINT(EM_DIAGRAM):   label Age_group16_to_24 = 'Dummy: Age_group=16 to 24' ;
29688     +
29689     +      label Age_group25_to_44 = 'Dummy: Age_group=25 to 44' ;
MPRINT(EM_DIAGRAM):   label Age_group25_to_44 = 'Dummy: Age_group=25 to 44' ;
29690     +
29691     +      label Age_group45_to_64 = 'Dummy: Age_group=45 to 64' ;
MPRINT(EM_DIAGRAM):   label Age_group45_to_64 = 'Dummy: Age_group=45 to 64' ;
29692     +
29693     +      label IndustryManagement__profession =
29694     +'Dummy: Industry=Management, professional, and related occupations' ;
MPRINT(EM_DIAGRAM):   label IndustryManagement__profession = 'Dummy: Industry=Management, professional, and related occupations' ;
29695     +
29696     +      label IndustryNatural_resources__con = 'Dummy: Industry=Natural resourc
29697     +es, construction, and maintenance occupations' ;
MPRINT(EM_DIAGRAM):   label IndustryNatural_resources__con = 'Dummy: Industry=Natural resources, construction, and maintenance occupations' ;
29698     +
29699     +      label IndustryProduction__transporta = 'Dummy: Industry=Production, tra
29700     +nsportation, and material moving occupations' ;
MPRINT(EM_DIAGRAM):   label IndustryProduction__transporta = 'Dummy: Industry=Production, transportation, and material moving occupations' ;
29701     +
29702     +      label IndustrySales_and_office_occup =
29703     +'Dummy: Industry=Sales and office occupations' ;
MPRINT(EM_DIAGRAM):   label IndustrySales_and_office_occup = 'Dummy: Industry=Sales and office occupations' ;
29704     +
29705     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
29706     +
29707     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
29708     +
29709     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
29710     +
29711     +      label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
29712     +
29713     +      label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
29714     +
29715     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
29716     +
29717     +*** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
29718     +drop Age_group16_to_24 Age_group25_to_44 Age_group45_to_64 ;
MPRINT(EM_DIAGRAM):   drop Age_group16_to_24 Age_group25_to_44 Age_group45_to_64 ;
29719     +if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
29720     +   Age_group16_to_24 = .;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = .;
29721     +   Age_group25_to_44 = .;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = .;
29722     +   Age_group45_to_64 = .;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = .;
29723     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29724     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29725     +end;
MPRINT(EM_DIAGRAM):   end;
29726     +else do;
MPRINT(EM_DIAGRAM):   else do;
29727     +   length _dm19 $ 19; drop _dm19 ;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
29728     +   %DMNORMCP( Age_group , _dm19 )
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
29729     +   if _dm19 = '45 TO 64'  then do;
MPRINT(EM_DIAGRAM):   if _dm19 = '45 TO 64' then do;
29730     +      Age_group16_to_24 = 0;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 0;
29731     +      Age_group25_to_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 0;
29732     +      Age_group45_to_64 = 1;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 1;
29733     +   end;
MPRINT(EM_DIAGRAM):   end;
29734     +   else if _dm19 = '65+'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '65+' then do;
29735     +      Age_group16_to_24 = -1;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = -1;
29736     +      Age_group25_to_44 = -1;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = -1;
29737     +      Age_group45_to_64 = -1;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = -1;
29738     +   end;
MPRINT(EM_DIAGRAM):   end;
29739     +   else if _dm19 = '16 TO 24'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
29740     +      Age_group16_to_24 = 1;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 1;
29741     +      Age_group25_to_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 0;
29742     +      Age_group45_to_64 = 0;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 0;
29743     +   end;
MPRINT(EM_DIAGRAM):   end;
29744     +   else if _dm19 = '25 TO 44'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
29745     +      Age_group16_to_24 = 0;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 0;
29746     +      Age_group25_to_44 = 1;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 1;
29747     +      Age_group45_to_64 = 0;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 0;
29748     +   end;
MPRINT(EM_DIAGRAM):   end;
29749     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29750     +      Age_group16_to_24 = .;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = .;
29751     +      Age_group25_to_44 = .;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = .;
29752     +      Age_group45_to_64 = .;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = .;
29753     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
29754     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29755     +   end;
MPRINT(EM_DIAGRAM):   end;
29756     +end;
MPRINT(EM_DIAGRAM):   end;
29757     +
29758     +*** Generate dummy variables for Industry ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Industry ;
29759     +drop IndustryManagement__profession IndustryNatural_resources__con
29760     +        IndustryProduction__transporta IndustrySales_and_office_occup ;
MPRINT(EM_DIAGRAM):   drop IndustryManagement__profession IndustryNatural_resources__con IndustryProduction__transporta IndustrySales_and_office_occup ;
29761     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
29762     +IndustryManagement__profession = 0;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = 0;
29763     +IndustryNatural_resources__con = 0;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = 0;
29764     +IndustryProduction__transporta = 0;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = 0;
29765     +IndustrySales_and_office_occup = 0;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = 0;
29766     +if missing( Industry ) then do;
MPRINT(EM_DIAGRAM):   if missing( Industry ) then do;
29767     +   IndustryManagement__profession = .;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = .;
29768     +   IndustryNatural_resources__con = .;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = .;
29769     +   IndustryProduction__transporta = .;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = .;
29770     +   IndustrySales_and_office_occup = .;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = .;
29771     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29772     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29773     +end;
MPRINT(EM_DIAGRAM):   end;
29774     +else do;
MPRINT(EM_DIAGRAM):   else do;
29775     +   length _dm32 $ 32; drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
29776     +   length _dm111 $ 111; drop _dm111;
MPRINT(EM_DIAGRAM):   length _dm111 $ 111;
MPRINT(EM_DIAGRAM):   drop _dm111;
29777     +   _dm111 = put( Industry , $CHAR111. );
MPRINT(EM_DIAGRAM):   _dm111 = put( Industry , $CHAR111. );
29778     +   %DMNORMCP( _dm111, _dm32 )
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
29779     +   if _dm32 = 'SERVICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   if _dm32 = 'SERVICE OCCUPATIONS' then do;
29780     +      IndustryManagement__profession = -1;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = -1;
29781     +      IndustryNatural_resources__con = -1;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = -1;
29782     +      IndustryProduction__transporta = -1;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = -1;
29783     +      IndustrySales_and_office_occup = -1;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = -1;
29784     +   end;
MPRINT(EM_DIAGRAM):   end;
29785     +   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
29786     +      IndustrySales_and_office_occup = 1;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = 1;
29787     +   end;
MPRINT(EM_DIAGRAM):   end;
29788     +   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
29789     +      IndustryProduction__transporta = 1;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = 1;
29790     +   end;
MPRINT(EM_DIAGRAM):   end;
29791     +   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
29792     +      IndustryNatural_resources__con = 1;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = 1;
29793     +   end;
MPRINT(EM_DIAGRAM):   end;
29794     +   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
29795     +      IndustryManagement__profession = 1;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = 1;
29796     +   end;
MPRINT(EM_DIAGRAM):   end;
29797     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29798     +      IndustryManagement__profession = .;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = .;
29799     +      IndustryNatural_resources__con = .;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = .;
29800     +      IndustryProduction__transporta = .;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = .;
29801     +      IndustrySales_and_office_occup = .;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = .;
29802     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
29803     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29804     +   end;
MPRINT(EM_DIAGRAM):   end;
29805     +end;
MPRINT(EM_DIAGRAM):   end;
29806     +
29807     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29808     +*** Checking missing input Interval
29809     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
29810     +
29811     +IF NMISS(
29812     +   Population   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Population ) THEN DO;
29813     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
29814     +
29815     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29816     +END;
MPRINT(EM_DIAGRAM):   END;
29817     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29818     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
29819     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29820     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
29821     +   S_Population  =    -2.83964697481178 +   4.7992594103827E-8 * Population ;
MPRINT(EM_DIAGRAM):   S_Population = -2.83964697481178 + 4.7992594103827E-8 * Population ;
29822     +END;
MPRINT(EM_DIAGRAM):   END;
29823     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
29824     +   IF MISSING( Population ) THEN S_Population  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Population ) THEN S_Population = . ;
29825     +   ELSE S_Population  =    -2.83964697481178 +   4.7992594103827E-8 *
29826     +        Population ;
MPRINT(EM_DIAGRAM):   ELSE S_Population = -2.83964697481178 + 4.7992594103827E-8 * Population ;
29827     +END;
MPRINT(EM_DIAGRAM):   END;
29828     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29829     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
29830     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29831     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29832     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
29833     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29834     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
29835     +   H11  =    -1.07683938427355 * S_Population ;
MPRINT(EM_DIAGRAM):   H11 = -1.07683938427355 * S_Population ;
29836     +   H12  =    -0.42418815980383 * S_Population ;
MPRINT(EM_DIAGRAM):   H12 = -0.42418815980383 * S_Population ;
29837     +   H13  =      3.0458121085363 * S_Population ;
MPRINT(EM_DIAGRAM):   H13 = 3.0458121085363 * S_Population ;
29838     +   H11  = H11  +     8.13620736214956 * Age_group16_to_24
29839     +          +    -5.69040629530111 * Age_group25_to_44
29840     +          +    -5.22627950724203 * Age_group45_to_64
29841     +          +    -8.20612991861404 * IndustryManagement__profession
29842     +          +     3.30962239961027 * IndustryNatural_resources__con
29843     +          +     2.59408016791381 * IndustryProduction__transporta
29844     +          +     0.18418992149364 * IndustrySales_and_office_occup ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 8.13620736214956 * Age_group16_to_24 + -5.69040629530111 * Age_group25_to_44 + -5.22627950724203 * Age_group45_to_64 + -8.20612991861404 * IndustryManagement__profession + 3.30962239961027 * IndustryNatural_resources__con 
+ 2.59408016791381 * IndustryProduction__transporta + 0.18418992149364 * IndustrySales_and_office_occup ;
29845     +   H12  = H12  +     1.36164859072813 * Age_group16_to_24
29846     +          +     -4.9915715407152 * Age_group25_to_44
29847     +          +     0.87612368059709 * Age_group45_to_64
29848     +          +    -0.19832109582943 * IndustryManagement__profession
29849     +          +      1.0202053535978 * IndustryNatural_resources__con
29850     +          +    -0.28879843563274 * IndustryProduction__transporta
29851     +          +    -0.37557781715296 * IndustrySales_and_office_occup ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 1.36164859072813 * Age_group16_to_24 + -4.9915715407152 * Age_group25_to_44 + 0.87612368059709 * Age_group45_to_64 + -0.19832109582943 * IndustryManagement__profession + 1.0202053535978 * IndustryNatural_resources__con + 
-0.28879843563274 * IndustryProduction__transporta + -0.37557781715296 * IndustrySales_and_office_occup ;
29852     +   H13  = H13  +     84.2151951296337 * Age_group16_to_24
29853     +          +    -214.422271679173 * Age_group25_to_44
29854     +          +     47.6963303243508 * Age_group45_to_64
29855     +          +     5.49661823542271 * IndustryManagement__profession
29856     +          +    -7.94703019484785 * IndustryNatural_resources__con
29857     +          +     22.7643905758641 * IndustryProduction__transporta
29858     +          +    -11.6169698318882 * IndustrySales_and_office_occup ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 84.2151951296337 * Age_group16_to_24 + -214.422271679173 * Age_group25_to_44 + 47.6963303243508 * Age_group45_to_64 + 5.49661823542271 * IndustryManagement__profession + -7.94703019484785 * IndustryNatural_resources__con 
+ 22.7643905758641 * IndustryProduction__transporta + -11.6169698318882 * IndustrySales_and_office_occup ;
29859     +   H11  =     4.76991388120461 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 4.76991388120461 + H11 ;
29860     +   H12  =    -2.62037956892498 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -2.62037956892498 + H12 ;
29861     +   H13  =    -79.9842004687623 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -79.9842004687623 + H13 ;
29862     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
29863     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
29864     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
29865     +END;
MPRINT(EM_DIAGRAM):   END;
29866     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
29867     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
29868     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
29869     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
29870     +END;
MPRINT(EM_DIAGRAM):   END;
29871     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29872     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
29873     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29874     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
29875     +   P_Sum_Labor_Force_Pop  =    -3873412.99092811 * H11
29876     +          +     -3446294.2697551 * H12  +    -706714.692803363 * H13 ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = -3873412.99092811 * H11 + -3446294.2697551 * H12 + -706714.692803363 * H13 ;
29877     +   P_Sum_Labor_Force_Pop  =       5563212.759221 + P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 5563212.759221 + P_Sum_Labor_Force_Pop ;
29878     +END;
MPRINT(EM_DIAGRAM):   END;
29879     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
29880     +   P_Sum_Labor_Force_Pop  = .;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = .;
29881     +END;
MPRINT(EM_DIAGRAM):   END;
29882     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
29883     +   P_Sum_Labor_Force_Pop  =     6470696.42857143;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 6470696.42857143;
29884     +END;
MPRINT(EM_DIAGRAM):   END;
29885     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
29886     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
29887     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
29888     +IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop = . ;
29889     +ELSE R_Sum_Labor_Force_Pop  = Sum_Labor_Force_Pop  - P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   ELSE R_Sum_Labor_Force_Pop = Sum_Labor_Force_Pop - P_Sum_Labor_Force_Pop ;
29890     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
29891     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
29892     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
29893     +drop
29894     +S_Population
29895     +H11
29896     +H12
29897     +H13
29898     +;
MPRINT(EM_DIAGRAM):   drop S_Population H11 H12 H13 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
29899      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_DIAGRAM):   quit;
29900      quit;
29901      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
29902      filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29903      *------------------------------------------------------------*;
29904      * Neural: Scoring TEST data;
29905      *------------------------------------------------------------*;
29906      data EMWS1.Neural_TEST
29907      / view=EMWS1.Neural_TEST
29908      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TEST / view=EMWS1.Neural_TEST ;
29909      set EMWS1.Varsel_TEST
29910      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_TEST ;
29911      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
29912     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
29913     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
29914     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
29915     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
29916     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
29917     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
29918     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
29919     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
29920     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
29921     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
29922     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
29923     +LENGTH _WARN_ $4
29924     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
29925     +      label S_Population = 'Standard: Population' ;
MPRINT(EM_DIAGRAM):   label S_Population = 'Standard: Population' ;
29926     +
29927     +      label Age_group16_to_24 = 'Dummy: Age_group=16 to 24' ;
MPRINT(EM_DIAGRAM):   label Age_group16_to_24 = 'Dummy: Age_group=16 to 24' ;
29928     +
29929     +      label Age_group25_to_44 = 'Dummy: Age_group=25 to 44' ;
MPRINT(EM_DIAGRAM):   label Age_group25_to_44 = 'Dummy: Age_group=25 to 44' ;
29930     +
29931     +      label Age_group45_to_64 = 'Dummy: Age_group=45 to 64' ;
MPRINT(EM_DIAGRAM):   label Age_group45_to_64 = 'Dummy: Age_group=45 to 64' ;
29932     +
29933     +      label IndustryManagement__profession =
29934     +'Dummy: Industry=Management, professional, and related occupations' ;
MPRINT(EM_DIAGRAM):   label IndustryManagement__profession = 'Dummy: Industry=Management, professional, and related occupations' ;
29935     +
29936     +      label IndustryNatural_resources__con = 'Dummy: Industry=Natural resourc
29937     +es, construction, and maintenance occupations' ;
MPRINT(EM_DIAGRAM):   label IndustryNatural_resources__con = 'Dummy: Industry=Natural resources, construction, and maintenance occupations' ;
29938     +
29939     +      label IndustryProduction__transporta = 'Dummy: Industry=Production, tra
29940     +nsportation, and material moving occupations' ;
MPRINT(EM_DIAGRAM):   label IndustryProduction__transporta = 'Dummy: Industry=Production, transportation, and material moving occupations' ;
29941     +
29942     +      label IndustrySales_and_office_occup =
29943     +'Dummy: Industry=Sales and office occupations' ;
MPRINT(EM_DIAGRAM):   label IndustrySales_and_office_occup = 'Dummy: Industry=Sales and office occupations' ;
29944     +
29945     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
29946     +
29947     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
29948     +
29949     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
29950     +
29951     +      label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label P_Sum_Labor_Force_Pop = 'Predicted: Sum_Labor_Force_Pop' ;
29952     +
29953     +      label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
MPRINT(EM_DIAGRAM):   label R_Sum_Labor_Force_Pop = 'Residual: Sum_Labor_Force_Pop' ;
29954     +
29955     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
29956     +
29957     +*** Generate dummy variables for Age_group ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Age_group ;
29958     +drop Age_group16_to_24 Age_group25_to_44 Age_group45_to_64 ;
MPRINT(EM_DIAGRAM):   drop Age_group16_to_24 Age_group25_to_44 Age_group45_to_64 ;
29959     +if missing( Age_group ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age_group ) then do;
29960     +   Age_group16_to_24 = .;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = .;
29961     +   Age_group25_to_44 = .;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = .;
29962     +   Age_group45_to_64 = .;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = .;
29963     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29964     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29965     +end;
MPRINT(EM_DIAGRAM):   end;
29966     +else do;
MPRINT(EM_DIAGRAM):   else do;
29967     +   length _dm19 $ 19; drop _dm19 ;
MPRINT(EM_DIAGRAM):   length _dm19 $ 19;
MPRINT(EM_DIAGRAM):   drop _dm19 ;
29968     +   %DMNORMCP( Age_group , _dm19 )
MPRINT(DMNORMCP):   _dm19=dmnorm(Age_group,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
29969     +   if _dm19 = '45 TO 64'  then do;
MPRINT(EM_DIAGRAM):   if _dm19 = '45 TO 64' then do;
29970     +      Age_group16_to_24 = 0;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 0;
29971     +      Age_group25_to_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 0;
29972     +      Age_group45_to_64 = 1;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 1;
29973     +   end;
MPRINT(EM_DIAGRAM):   end;
29974     +   else if _dm19 = '65+'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '65+' then do;
29975     +      Age_group16_to_24 = -1;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = -1;
29976     +      Age_group25_to_44 = -1;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = -1;
29977     +      Age_group45_to_64 = -1;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = -1;
29978     +   end;
MPRINT(EM_DIAGRAM):   end;
29979     +   else if _dm19 = '16 TO 24'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '16 TO 24' then do;
29980     +      Age_group16_to_24 = 1;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 1;
29981     +      Age_group25_to_44 = 0;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 0;
29982     +      Age_group45_to_64 = 0;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 0;
29983     +   end;
MPRINT(EM_DIAGRAM):   end;
29984     +   else if _dm19 = '25 TO 44'  then do;
MPRINT(EM_DIAGRAM):   else if _dm19 = '25 TO 44' then do;
29985     +      Age_group16_to_24 = 0;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = 0;
29986     +      Age_group25_to_44 = 1;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = 1;
29987     +      Age_group45_to_64 = 0;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = 0;
29988     +   end;
MPRINT(EM_DIAGRAM):   end;
29989     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29990     +      Age_group16_to_24 = .;
MPRINT(EM_DIAGRAM):   Age_group16_to_24 = .;
29991     +      Age_group25_to_44 = .;
MPRINT(EM_DIAGRAM):   Age_group25_to_44 = .;
29992     +      Age_group45_to_64 = .;
MPRINT(EM_DIAGRAM):   Age_group45_to_64 = .;
29993     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
29994     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29995     +   end;
MPRINT(EM_DIAGRAM):   end;
29996     +end;
MPRINT(EM_DIAGRAM):   end;
29997     +
29998     +*** Generate dummy variables for Industry ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Industry ;
29999     +drop IndustryManagement__profession IndustryNatural_resources__con
30000     +        IndustryProduction__transporta IndustrySales_and_office_occup ;
MPRINT(EM_DIAGRAM):   drop IndustryManagement__profession IndustryNatural_resources__con IndustryProduction__transporta IndustrySales_and_office_occup ;
30001     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
30002     +IndustryManagement__profession = 0;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = 0;
30003     +IndustryNatural_resources__con = 0;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = 0;
30004     +IndustryProduction__transporta = 0;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = 0;
30005     +IndustrySales_and_office_occup = 0;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = 0;
30006     +if missing( Industry ) then do;
MPRINT(EM_DIAGRAM):   if missing( Industry ) then do;
30007     +   IndustryManagement__profession = .;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = .;
30008     +   IndustryNatural_resources__con = .;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = .;
30009     +   IndustryProduction__transporta = .;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = .;
30010     +   IndustrySales_and_office_occup = .;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = .;
30011     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
30012     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
30013     +end;
MPRINT(EM_DIAGRAM):   end;
30014     +else do;
MPRINT(EM_DIAGRAM):   else do;
30015     +   length _dm32 $ 32; drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
30016     +   length _dm111 $ 111; drop _dm111;
MPRINT(EM_DIAGRAM):   length _dm111 $ 111;
MPRINT(EM_DIAGRAM):   drop _dm111;
30017     +   _dm111 = put( Industry , $CHAR111. );
MPRINT(EM_DIAGRAM):   _dm111 = put( Industry , $CHAR111. );
30018     +   %DMNORMCP( _dm111, _dm32 )
MPRINT(DMNORMCP):   _dm32=dmnorm(_dm111,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
30019     +   if _dm32 = 'SERVICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   if _dm32 = 'SERVICE OCCUPATIONS' then do;
30020     +      IndustryManagement__profession = -1;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = -1;
30021     +      IndustryNatural_resources__con = -1;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = -1;
30022     +      IndustryProduction__transporta = -1;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = -1;
30023     +      IndustrySales_and_office_occup = -1;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = -1;
30024     +   end;
MPRINT(EM_DIAGRAM):   end;
30025     +   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'SALES AND OFFICE OCCUPATIONS' then do;
30026     +      IndustrySales_and_office_occup = 1;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = 1;
30027     +   end;
MPRINT(EM_DIAGRAM):   end;
30028     +   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'PRODUCTION, TRANSPORTATION, AND' then do;
30029     +      IndustryProduction__transporta = 1;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = 1;
30030     +   end;
MPRINT(EM_DIAGRAM):   end;
30031     +   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'NATURAL RESOURCES, CONSTRUCTION,' then do;
30032     +      IndustryNatural_resources__con = 1;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = 1;
30033     +   end;
MPRINT(EM_DIAGRAM):   end;
30034     +   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = 'MANAGEMENT, PROFESSIONAL, AND RE' then do;
30035     +      IndustryManagement__profession = 1;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = 1;
30036     +   end;
MPRINT(EM_DIAGRAM):   end;
30037     +   else do;
MPRINT(EM_DIAGRAM):   else do;
30038     +      IndustryManagement__profession = .;
MPRINT(EM_DIAGRAM):   IndustryManagement__profession = .;
30039     +      IndustryNatural_resources__con = .;
MPRINT(EM_DIAGRAM):   IndustryNatural_resources__con = .;
30040     +      IndustryProduction__transporta = .;
MPRINT(EM_DIAGRAM):   IndustryProduction__transporta = .;
30041     +      IndustrySales_and_office_occup = .;
MPRINT(EM_DIAGRAM):   IndustrySales_and_office_occup = .;
30042     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
30043     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
30044     +   end;
MPRINT(EM_DIAGRAM):   end;
30045     +end;
MPRINT(EM_DIAGRAM):   end;
30046     +
30047     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30048     +*** Checking missing input Interval
30049     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
30050     +
30051     +IF NMISS(
30052     +   Population   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Population ) THEN DO;
30053     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
30054     +
30055     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
30056     +END;
MPRINT(EM_DIAGRAM):   END;
30057     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30058     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
30059     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30060     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
30061     +   S_Population  =    -2.83964697481178 +   4.7992594103827E-8 * Population ;
MPRINT(EM_DIAGRAM):   S_Population = -2.83964697481178 + 4.7992594103827E-8 * Population ;
30062     +END;
MPRINT(EM_DIAGRAM):   END;
30063     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30064     +   IF MISSING( Population ) THEN S_Population  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Population ) THEN S_Population = . ;
30065     +   ELSE S_Population  =    -2.83964697481178 +   4.7992594103827E-8 *
30066     +        Population ;
MPRINT(EM_DIAGRAM):   ELSE S_Population = -2.83964697481178 + 4.7992594103827E-8 * Population ;
30067     +END;
MPRINT(EM_DIAGRAM):   END;
30068     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30069     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
30070     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30071     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30072     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
30073     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30074     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
30075     +   H11  =    -1.07683938427355 * S_Population ;
MPRINT(EM_DIAGRAM):   H11 = -1.07683938427355 * S_Population ;
30076     +   H12  =    -0.42418815980383 * S_Population ;
MPRINT(EM_DIAGRAM):   H12 = -0.42418815980383 * S_Population ;
30077     +   H13  =      3.0458121085363 * S_Population ;
MPRINT(EM_DIAGRAM):   H13 = 3.0458121085363 * S_Population ;
30078     +   H11  = H11  +     8.13620736214956 * Age_group16_to_24
30079     +          +    -5.69040629530111 * Age_group25_to_44
30080     +          +    -5.22627950724203 * Age_group45_to_64
30081     +          +    -8.20612991861404 * IndustryManagement__profession
30082     +          +     3.30962239961027 * IndustryNatural_resources__con
30083     +          +     2.59408016791381 * IndustryProduction__transporta
30084     +          +     0.18418992149364 * IndustrySales_and_office_occup ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 8.13620736214956 * Age_group16_to_24 + -5.69040629530111 * Age_group25_to_44 + -5.22627950724203 * Age_group45_to_64 + -8.20612991861404 * IndustryManagement__profession + 3.30962239961027 * IndustryNatural_resources__con 
+ 2.59408016791381 * IndustryProduction__transporta + 0.18418992149364 * IndustrySales_and_office_occup ;
30085     +   H12  = H12  +     1.36164859072813 * Age_group16_to_24
30086     +          +     -4.9915715407152 * Age_group25_to_44
30087     +          +     0.87612368059709 * Age_group45_to_64
30088     +          +    -0.19832109582943 * IndustryManagement__profession
30089     +          +      1.0202053535978 * IndustryNatural_resources__con
30090     +          +    -0.28879843563274 * IndustryProduction__transporta
30091     +          +    -0.37557781715296 * IndustrySales_and_office_occup ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 1.36164859072813 * Age_group16_to_24 + -4.9915715407152 * Age_group25_to_44 + 0.87612368059709 * Age_group45_to_64 + -0.19832109582943 * IndustryManagement__profession + 1.0202053535978 * IndustryNatural_resources__con + 
-0.28879843563274 * IndustryProduction__transporta + -0.37557781715296 * IndustrySales_and_office_occup ;
30092     +   H13  = H13  +     84.2151951296337 * Age_group16_to_24
30093     +          +    -214.422271679173 * Age_group25_to_44
30094     +          +     47.6963303243508 * Age_group45_to_64
30095     +          +     5.49661823542271 * IndustryManagement__profession
30096     +          +    -7.94703019484785 * IndustryNatural_resources__con
30097     +          +     22.7643905758641 * IndustryProduction__transporta
30098     +          +    -11.6169698318882 * IndustrySales_and_office_occup ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 84.2151951296337 * Age_group16_to_24 + -214.422271679173 * Age_group25_to_44 + 47.6963303243508 * Age_group45_to_64 + 5.49661823542271 * IndustryManagement__profession + -7.94703019484785 * IndustryNatural_resources__con 
+ 22.7643905758641 * IndustryProduction__transporta + -11.6169698318882 * IndustrySales_and_office_occup ;
30099     +   H11  =     4.76991388120461 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 4.76991388120461 + H11 ;
30100     +   H12  =    -2.62037956892498 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -2.62037956892498 + H12 ;
30101     +   H13  =    -79.9842004687623 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -79.9842004687623 + H13 ;
30102     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
30103     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
30104     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
30105     +END;
MPRINT(EM_DIAGRAM):   END;
30106     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30107     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
30108     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
30109     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
30110     +END;
MPRINT(EM_DIAGRAM):   END;
30111     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30112     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
30113     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30114     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
30115     +   P_Sum_Labor_Force_Pop  =    -3873412.99092811 * H11
30116     +          +     -3446294.2697551 * H12  +    -706714.692803363 * H13 ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = -3873412.99092811 * H11 + -3446294.2697551 * H12 + -706714.692803363 * H13 ;
30117     +   P_Sum_Labor_Force_Pop  =       5563212.759221 + P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 5563212.759221 + P_Sum_Labor_Force_Pop ;
30118     +END;
MPRINT(EM_DIAGRAM):   END;
30119     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30120     +   P_Sum_Labor_Force_Pop  = .;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = .;
30121     +END;
MPRINT(EM_DIAGRAM):   END;
30122     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
30123     +   P_Sum_Labor_Force_Pop  =     6470696.42857143;
MPRINT(EM_DIAGRAM):   P_Sum_Labor_Force_Pop = 6470696.42857143;
30124     +END;
MPRINT(EM_DIAGRAM):   END;
30125     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
30126     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
30127     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
30128     +IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Sum_Labor_Force_Pop ) THEN R_Sum_Labor_Force_Pop = . ;
30129     +ELSE R_Sum_Labor_Force_Pop  = Sum_Labor_Force_Pop  - P_Sum_Labor_Force_Pop ;
MPRINT(EM_DIAGRAM):   ELSE R_Sum_Labor_Force_Pop = Sum_Labor_Force_Pop - P_Sum_Labor_Force_Pop ;
30130     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
30131     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
30132     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
30133     +drop
30134     +S_Population
30135     +H11
30136     +H12
30137     +H13
30138     +;
MPRINT(EM_DIAGRAM):   drop S_Population H11 H12 H13 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
30139      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARSEL_TEST.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):   quit;
30140      quit;
30141      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
30142      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
30143      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
30144      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural_TRAIN out=WORK.M3JFB4I9 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3JFB4I9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3JFB4I9(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3JFB4I9;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3JFB4I9;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2LDSD0R NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2LDSD0R;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2LDSD0R;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1WFK0OR(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2LDSD0R;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2LDSD0R;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2LDSD0R;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2LDSD0R;
MPRINT(EMADVISECOLUMNS):   set WORK.M2LDSD0R;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_SUM_LABOR_FORCE_POP") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_SUM_LABOR_FORCE_POP") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("SUM_LABOR_FORCE_POP") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
30492      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
30493      set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
30494      where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
30495      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE (DATA='Neural') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

30496      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMINFO;
30497      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
30498      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
30499      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
30503      run;
30504      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
30505      set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
30506      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

30507      proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
30508      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
30509      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

30510      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
30511      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
30512      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

30513      proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
30514      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
30515      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

30516      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
30517      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
30518      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
30519      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

30520      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
30521      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
30522      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
30523      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
      
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
      
NOTE: View EMWS1.NEURAL_TEST.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
