MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 10, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:48:51" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 10, 2019
Time:                15:48:51
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2PT7UUC "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2PT7UUC new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.REG2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS1.REG2_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
      
39101      /* Generate assessment metadata, which will be used to generate assessment data step */
39102      /* code, such as retrieving names of temporary variables and summary variables,      */
39103      /* labels, etc.  It is used in almost all the assessment computations such as lift,  */
39104      /* roc, index, scoreDist and could be thought as a global variable in assessment     */
39105      /* computation.                                                                      */
39106      data work.ASSESS_0VHTCKH_assessMeta_JpAao5;
MPRINT(EM_DIAGRAM):    data work.ASSESS_0VHTCKH_assessMeta_JpAao5;
39107      length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32
39107    ! RESULT_MAX_LABEL
39108         $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX 
$32 RESULT_MAX_LABEL $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
39109      VARIABLE = "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   VARIABLE = "Sum_Labor_Force_Pop";
39110      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
39111      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
39112      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
39113      LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
39114      PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
39115      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
39116      LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
39117      GEN_VAR_IN_TEMP_DATA = "Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "Sum_Labor_Force_Pop";
39118      RESULT_MEAN = "_targetMean_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_targetMean_";
39119      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Target";
39120      RESULT_MIN = "_targetMin_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_targetMin_";
39121      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Target";
39122      MIN_ADJUSTED = "Sum_Labo_minAdjusted_nH3RU6zjo";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "Sum_Labo_minAdjusted_nH3RU6zjo";
39123      RESULT_MAX = "_targetMax_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_targetMax_";
39124      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Target";
39125      MAX_ADJUSTED = "Sum_Labo_maxAdjusted_P8nyhECln";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "Sum_Labo_maxAdjusted_P8nyhECln";
39126      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
39127      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
39128      TEMPORARY_VARIABLE = "Sum_Labor_Force__WXTYEWiP_qNsLhb";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "Sum_Labor_Force__WXTYEWiP_qNsLhb";
39129      output;
MPRINT(EM_DIAGRAM):   output;
39130      VARIABLE = "P_Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_Sum_Labor_Force_Pop";
39131      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
39132      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
39133      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
39134      LEVEL = "";
MPRINT(EM_DIAGRAM):   LEVEL = "";
39135      PROPERTY = "PREDICTED";
MPRINT(EM_DIAGRAM):   PROPERTY = "PREDICTED";
39136      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
39137      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
39138      GEN_VAR_IN_TEMP_DATA = "P_Sum_Labor_Force_Pop";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_Sum_Labor_Force_Pop";
39139      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
39140      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Predicted";
39141      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
39142      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
39143      MIN_ADJUSTED = "P_Sum_La_minAdjusted_4_porFoLb";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_Sum_La_minAdjusted_4_porFoLb";
39144      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
39145      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
39146      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Predicted";
39147      MAX_ADJUSTED = "max_adjusted";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "max_adjusted";
39148      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
39149      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
39150      TEMPORARY_VARIABLE = "P_Sum_Labor_Forc_JBLJTp6zWjpaggi";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_Sum_Labor_Forc_JBLJTp6zWjpaggi";
39151      output;
MPRINT(EM_DIAGRAM):   output;
39152      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_0VHTCKH_ASSESSMETA_JPAAO5 has 2 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

39153      /* Generate temporary dataset and obtain summary statistics such as total number of   */
39154      /* obserations, frequency of target.  However, summary statistics for class reporting */
39155      /* variabels are not computed here since if there exist class reporting variables,    */
39156      /* then PROC DMDB will be called. And there is no need to compute interval reporting  */
39157      /* summary statisitcs, if any.                                                        */
39158      data work.ASSESS_0VHTCKH_normSD_hdER3B(drop=
39159      _numberOfObservation_
39160      _intervalTargetMin_ _intervalTargetMax_
39161      )
39162      work.ASSESS_0VHTCKH_meansAndTi_gTUD09 (keep=
39163      _numberOfObservation_
39164      _intervalTargetMin_ _intervalTargetMax_
39165      );
MPRINT(EM_DIAGRAM):    data work.ASSESS_0VHTCKH_normSD_hdER3B(drop= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ ) work.ASSESS_0VHTCKH_meansAndTi_gTUD09 (keep= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ );
39166      set EMWS1.Reg2_TRAIN(
39167      where=(
39168      (Sum_Labor_Force_Pop ^= .)
39169      and (P_Sum_Labor_Force_Pop ^= .)
39170      )
39171      ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_TRAIN( where=( (Sum_Labor_Force_Pop ^= .) and (P_Sum_Labor_Force_Pop ^= .) ) ) end=_lastObservation_;
39172      keep frequency_HZhT_K;
MPRINT(EM_DIAGRAM):   keep frequency_HZhT_K;
39173      frequency_HZhT_K = 1;
MPRINT(EM_DIAGRAM):   frequency_HZhT_K = 1;
39174      keep Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   keep Sum_Labor_Force_Pop;
39175      keep P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   keep P_Sum_Labor_Force_Pop;
39176      output work.ASSESS_0VHTCKH_normSD_hdER3B;
MPRINT(EM_DIAGRAM):   output work.ASSESS_0VHTCKH_normSD_hdER3B;
39177      keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
39178      retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
39179      _numberOfObservation_ + frequency_HZhT_K;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_HZhT_K;
39180      keep _intervalTargetMin_ _intervalTargetMax_;
MPRINT(EM_DIAGRAM):   keep _intervalTargetMin_ _intervalTargetMax_;
39181      retain _intervalTargetMin_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMin_ .;
39182      retain _intervalTargetMax_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMax_ .;
39183      if (_n_ = 1) then do;
MPRINT(EM_DIAGRAM):   if (_n_ = 1) then do;
39184      _intervalTargetMin_ = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Sum_Labor_Force_Pop;
39185      _intervalTargetMax_ = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Sum_Labor_Force_Pop;
39186      end;
MPRINT(EM_DIAGRAM):   end;
39187      else do;
MPRINT(EM_DIAGRAM):   else do;
39188      if (_intervalTargetMin_ > P_Sum_Labor_Force_Pop) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMin_ > P_Sum_Labor_Force_Pop) then do;
39189      _intervalTargetMin_ = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Sum_Labor_Force_Pop;
39190      end;
MPRINT(EM_DIAGRAM):   end;
39191      if (_intervalTargetMax_ < P_Sum_Labor_Force_Pop) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMax_ < P_Sum_Labor_Force_Pop) then do;
39192      _intervalTargetMax_ = P_Sum_Labor_Force_Pop;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Sum_Labor_Force_Pop;
39193      end;
MPRINT(EM_DIAGRAM):   end;
39194      end;
MPRINT(EM_DIAGRAM):   end;
39195      if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
39196      output work.ASSESS_0VHTCKH_meansAndTi_gTUD09;
MPRINT(EM_DIAGRAM):   output work.ASSESS_0VHTCKH_meansAndTi_gTUD09;
39197      end;
MPRINT(EM_DIAGRAM):   end;
39198      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 112 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.REG2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: There were 112 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 112 observations read from the data set EMWS1.REG2_TRAIN.
      WHERE (Sum_Labor_Force_Pop not = .) and (P_Sum_Labor_Force_Pop not = .);
NOTE: The data set WORK.ASSESS_0VHTCKH_NORMSD_HDER3B has 112 observations and 3 variables.
NOTE: The data set WORK.ASSESS_0VHTCKH_MEANSANDTI_GTUD09 has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      

39199      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
39200      set EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK;
39201      where MODEL = "Reg2" and TARGET = "Sum_Labor_Force_Pop" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Reg2" and TARGET = "Sum_Labor_Force_Pop" and dataRole="TRAIN";
39202      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.MDLCOMP_EMRANK.
      WHERE (MODEL='Reg2') and (TARGET='Sum_Labor_Force_Pop') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

39203      data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
39204      do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
39205      DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
39206      output;
MPRINT(EM_DIAGRAM):   output;
39207      end;
MPRINT(EM_DIAGRAM):   end;
39208      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

39209      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
39210      merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
39211      by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
39212      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

39213      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
39214      set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
39215      retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
39216      retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
39217      keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
39218      if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
39219      bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
39220      _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
39221      if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
39222      /* tied */
39223      _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
39224      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
39225      end;
MPRINT(EM_DIAGRAM):   end;
39226      else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
39227      /* next tied */
39228      _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
39229      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ ));
39230      end;
MPRINT(EM_DIAGRAM):   end;
39231      output;
MPRINT(EM_DIAGRAM):   output;
39232      *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
39233      * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
39234      *end;
MPRINT(EM_DIAGRAM):   *end;
39235      if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
39236      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
39237      end;
MPRINT(EM_DIAGRAM):   end;
39238      else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
39239      if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
39240      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
39241      end;
MPRINT(EM_DIAGRAM):   end;
39242      end;
MPRINT(EM_DIAGRAM):   end;
39243      bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
39244      /* correct the previous change */
39245      end;
MPRINT(EM_DIAGRAM):   end;
39246      if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
39247      _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
39248      output;
MPRINT(EM_DIAGRAM):   output;
39249      end;
MPRINT(EM_DIAGRAM):   end;
39250      _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
39251      _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
39252      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
The SAS System

      cpu time            0.00 seconds
      

39253      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
39254      set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
39255      by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
39256      retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
39257      if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
39258      _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
39259      end;
MPRINT(EM_DIAGRAM):   end;
39260      if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
39261      _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
39262      output;
MPRINT(EM_DIAGRAM):   output;
39263      end;
MPRINT(EM_DIAGRAM):   end;
39264      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
39265      filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG2_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39266      *------------------------------------------------------------*;
39267      * MdlComp: Scoring REG2_TRAIN data;
39268      *------------------------------------------------------------*;
39269      data EMWS1.MdlComp_TRAIN
39270      / view=EMWS1.MdlComp_TRAIN
39271      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_TRAIN / view=EMWS1.MdlComp_TRAIN ;
39272      set EMWS1.Reg2_TRAIN
39273      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_TRAIN ;
39274      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
39275     +if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
39276     +b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
39277     +end;
MPRINT(EM_DIAGRAM):   end;
39278     +else
39279     +if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
39280     +b_Sum_Labor_Force_ = 2;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 2;
39281     +end;
MPRINT(EM_DIAGRAM):   end;
39282     +else
39283     +if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
39284     +b_Sum_Labor_Force_ = 3;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 3;
39285     +end;
MPRINT(EM_DIAGRAM):   end;
39286     +else
39287     +if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
39288     +b_Sum_Labor_Force_ = 4;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 4;
39289     +end;
MPRINT(EM_DIAGRAM):   end;
39290     +else
39291     +if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
39292     +b_Sum_Labor_Force_ = 5;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 5;
39293     +end;
MPRINT(EM_DIAGRAM):   end;
39294     +else
39295     +if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
39296     +b_Sum_Labor_Force_ = 6;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 6;
39297     +end;
MPRINT(EM_DIAGRAM):   end;
39298     +else
39299     +if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
39300     +b_Sum_Labor_Force_ = 7;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 7;
39301     +end;
MPRINT(EM_DIAGRAM):   end;
39302     +else
39303     +if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
39304     +b_Sum_Labor_Force_ = 8;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 8;
39305     +end;
MPRINT(EM_DIAGRAM):   end;
39306     +else
39307     +if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
39308     +b_Sum_Labor_Force_ = 9;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 9;
39309     +end;
MPRINT(EM_DIAGRAM):   end;
39310     +else
39311     +if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
39312     +b_Sum_Labor_Force_ = 10;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 10;
39313     +end;
MPRINT(EM_DIAGRAM):   end;
39314     +else
39315     +if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
39316     +b_Sum_Labor_Force_ = 11;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 11;
39317     +end;
MPRINT(EM_DIAGRAM):   end;
39318     +else
39319     +if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
39320     +b_Sum_Labor_Force_ = 12;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 12;
39321     +end;
MPRINT(EM_DIAGRAM):   end;
39322     +else
39323     +if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
39324     +b_Sum_Labor_Force_ = 13;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 13;
39325     +end;
MPRINT(EM_DIAGRAM):   end;
39326     +else
39327     +if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
39328     +b_Sum_Labor_Force_ = 14;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 14;
39329     +end;
MPRINT(EM_DIAGRAM):   end;
39330     +else
39331     +if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
39332     +b_Sum_Labor_Force_ = 15;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 15;
39333     +end;
MPRINT(EM_DIAGRAM):   end;
39334     +else
39335     +if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
39336     +b_Sum_Labor_Force_ = 16;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 16;
39337     +end;
MPRINT(EM_DIAGRAM):   end;
39338     +else
39339     +if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
39340     +b_Sum_Labor_Force_ = 17;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 17;
39341     +end;
MPRINT(EM_DIAGRAM):   end;
39342     +else
39343     +if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
39344     +b_Sum_Labor_Force_ = 18;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 18;
39345     +end;
MPRINT(EM_DIAGRAM):   end;
39346     +else
39347     +if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
39348     +b_Sum_Labor_Force_ = 19;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 19;
39349     +end;
MPRINT(EM_DIAGRAM):   end;
39350     +else
39351     +do;
MPRINT(EM_DIAGRAM):   else do;
39352     +b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
39353     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
39354      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG2_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.11 seconds
      

MPRINT(EM_DIAGRAM):   quit;
39355      quit;
39356      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
39357      filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG2_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39358      *------------------------------------------------------------*;
39359      * MdlComp: Scoring REG2_VALIDATE data;
39360      *------------------------------------------------------------*;
39361      data EMWS1.MdlComp_VALIDATE
39362      / view=EMWS1.MdlComp_VALIDATE
39363      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_VALIDATE / view=EMWS1.MdlComp_VALIDATE ;
39364      set EMWS1.Reg2_VALIDATE
39365      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_VALIDATE ;
39366      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
39367     +if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
39368     +b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
39369     +end;
MPRINT(EM_DIAGRAM):   end;
39370     +else
39371     +if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
39372     +b_Sum_Labor_Force_ = 2;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 2;
39373     +end;
MPRINT(EM_DIAGRAM):   end;
39374     +else
39375     +if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
39376     +b_Sum_Labor_Force_ = 3;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 3;
39377     +end;
MPRINT(EM_DIAGRAM):   end;
39378     +else
39379     +if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
39380     +b_Sum_Labor_Force_ = 4;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 4;
39381     +end;
MPRINT(EM_DIAGRAM):   end;
39382     +else
39383     +if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
39384     +b_Sum_Labor_Force_ = 5;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 5;
39385     +end;
MPRINT(EM_DIAGRAM):   end;
39386     +else
39387     +if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
39388     +b_Sum_Labor_Force_ = 6;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 6;
39389     +end;
MPRINT(EM_DIAGRAM):   end;
39390     +else
39391     +if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
39392     +b_Sum_Labor_Force_ = 7;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 7;
39393     +end;
MPRINT(EM_DIAGRAM):   end;
39394     +else
39395     +if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
39396     +b_Sum_Labor_Force_ = 8;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 8;
39397     +end;
MPRINT(EM_DIAGRAM):   end;
39398     +else
39399     +if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
39400     +b_Sum_Labor_Force_ = 9;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 9;
39401     +end;
MPRINT(EM_DIAGRAM):   end;
39402     +else
39403     +if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
39404     +b_Sum_Labor_Force_ = 10;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 10;
39405     +end;
MPRINT(EM_DIAGRAM):   end;
39406     +else
39407     +if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
39408     +b_Sum_Labor_Force_ = 11;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 11;
39409     +end;
MPRINT(EM_DIAGRAM):   end;
39410     +else
39411     +if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
39412     +b_Sum_Labor_Force_ = 12;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 12;
39413     +end;
MPRINT(EM_DIAGRAM):   end;
39414     +else
39415     +if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
39416     +b_Sum_Labor_Force_ = 13;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 13;
39417     +end;
MPRINT(EM_DIAGRAM):   end;
39418     +else
39419     +if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
39420     +b_Sum_Labor_Force_ = 14;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 14;
39421     +end;
MPRINT(EM_DIAGRAM):   end;
39422     +else
39423     +if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
39424     +b_Sum_Labor_Force_ = 15;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 15;
39425     +end;
MPRINT(EM_DIAGRAM):   end;
39426     +else
39427     +if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
39428     +b_Sum_Labor_Force_ = 16;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 16;
39429     +end;
MPRINT(EM_DIAGRAM):   end;
39430     +else
39431     +if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
39432     +b_Sum_Labor_Force_ = 17;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 17;
39433     +end;
MPRINT(EM_DIAGRAM):   end;
39434     +else
39435     +if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
39436     +b_Sum_Labor_Force_ = 18;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 18;
39437     +end;
MPRINT(EM_DIAGRAM):   end;
39438     +else
39439     +if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
39440     +b_Sum_Labor_Force_ = 19;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 19;
39441     +end;
MPRINT(EM_DIAGRAM):   end;
39442     +else
39443     +do;
MPRINT(EM_DIAGRAM):   else do;
39444     +b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
39445     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
39446      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG2_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):   quit;
39447      quit;
39448      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
39449      filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG2_TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39450      *------------------------------------------------------------*;
39451      * MdlComp: Scoring REG2_TEST data;
39452      *------------------------------------------------------------*;
39453      data EMWS1.MdlComp_TEST
39454      / view=EMWS1.MdlComp_TEST
39455      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_TEST / view=EMWS1.MdlComp_TEST ;
39456      set EMWS1.Reg2_TEST
39457      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_TEST ;
39458      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
39459     +if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
MPRINT(EM_DIAGRAM):   if (P_Sum_Labor_Force_Pop ge 17029481.7978798) then do;
39460     +b_Sum_Labor_Force_ = 1;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 1;
39461     +end;
MPRINT(EM_DIAGRAM):   end;
39462     +else
39463     +if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 13206359.3878711) then do;
39464     +b_Sum_Labor_Force_ = 2;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 2;
39465     +end;
MPRINT(EM_DIAGRAM):   end;
39466     +else
39467     +if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 12065470.6673056) then do;
39468     +b_Sum_Labor_Force_ = 3;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 3;
39469     +end;
MPRINT(EM_DIAGRAM):   end;
39470     +else
39471     +if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 9865489.05309438) then do;
39472     +b_Sum_Labor_Force_ = 4;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 4;
39473     +end;
MPRINT(EM_DIAGRAM):   end;
39474     +else
39475     +if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7978342.83389718) then do;
39476     +b_Sum_Labor_Force_ = 5;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 5;
39477     +end;
MPRINT(EM_DIAGRAM):   end;
39478     +else
39479     +if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7662746.84197176) then do;
39480     +b_Sum_Labor_Force_ = 6;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 6;
39481     +end;
MPRINT(EM_DIAGRAM):   end;
39482     +else
39483     +if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 7109831.74806458) then do;
39484     +b_Sum_Labor_Force_ = 7;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 7;
39485     +end;
MPRINT(EM_DIAGRAM):   end;
39486     +else
39487     +if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6750725.60845963) then do;
39488     +b_Sum_Labor_Force_ = 8;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 8;
39489     +end;
MPRINT(EM_DIAGRAM):   end;
39490     +else
39491     +if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 6346681.38848996) then do;
39492     +b_Sum_Labor_Force_ = 9;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 9;
39493     +end;
MPRINT(EM_DIAGRAM):   end;
39494     +else
39495     +if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5937787.47135114) then do;
39496     +b_Sum_Labor_Force_ = 10;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 10;
39497     +end;
MPRINT(EM_DIAGRAM):   end;
39498     +else
39499     +if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 5320836.16568174) then do;
39500     +b_Sum_Labor_Force_ = 11;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 11;
39501     +end;
MPRINT(EM_DIAGRAM):   end;
39502     +else
39503     +if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 4037380.08198447) then do;
39504     +b_Sum_Labor_Force_ = 12;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 12;
39505     +end;
MPRINT(EM_DIAGRAM):   end;
39506     +else
39507     +if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2973715.76739902) then do;
39508     +b_Sum_Labor_Force_ = 13;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 13;
39509     +end;
MPRINT(EM_DIAGRAM):   end;
39510     +else
39511     +if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 2164424.14819361) then do;
39512     +b_Sum_Labor_Force_ = 14;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 14;
39513     +end;
MPRINT(EM_DIAGRAM):   end;
39514     +else
39515     +if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1958888.01750922) then do;
39516     +b_Sum_Labor_Force_ = 15;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 15;
39517     +end;
MPRINT(EM_DIAGRAM):   end;
39518     +else
39519     +if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1696780.98876606) then do;
39520     +b_Sum_Labor_Force_ = 16;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 16;
39521     +end;
MPRINT(EM_DIAGRAM):   end;
39522     +else
39523     +if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 1368543.29966416) then do;
39524     +b_Sum_Labor_Force_ = 17;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 17;
39525     +end;
MPRINT(EM_DIAGRAM):   end;
39526     +else
39527     +if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 938418.263691422) then do;
39528     +b_Sum_Labor_Force_ = 18;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 18;
39529     +end;
MPRINT(EM_DIAGRAM):   end;
39530     +else
39531     +if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
MPRINT(EM_DIAGRAM):   else if (P_Sum_Labor_Force_Pop ge 446728.34406193) then do;
39532     +b_Sum_Labor_Force_ = 19;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 19;
39533     +end;
MPRINT(EM_DIAGRAM):   end;
39534     +else
39535     +do;
MPRINT(EM_DIAGRAM):   else do;
39536     +b_Sum_Labor_Force_ = 20;
MPRINT(EM_DIAGRAM):   b_Sum_Labor_Force_ = 20;
39537     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
39538      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG2_TEST.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.11 seconds
      

MPRINT(EM_DIAGRAM):   quit;
39539      quit;
39540      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
39541      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
39542      * MdlComp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp: Computing metadata for TRAIN data;
39543      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.MdlComp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.MdlComp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.MdlComp_TRAIN out=WORK.M2T44SGC noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2T44SGC;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2T44SGC(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2T44SGC;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2T44SGC;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M313FLFE NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M313FLFE;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M313FLFE;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1K24IFY(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M313FLFE;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M313FLFE;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M313FLFE;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M313FLFE;
MPRINT(EMADVISECOLUMNS):   set WORK.M313FLFE;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Reg2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
      
NOTE: View EMWS1.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      
NOTE: View EMWS1.MDLCOMP_TEST.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
