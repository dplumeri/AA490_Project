MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "December 09, 2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:30:17" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                December 09, 2019
Time:                17:30:17
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3FG7W9H "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS2\MdlComp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3FG7W9H new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS2.REG2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS2.REG2_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
      
44341      /* Generate assessment metadata, which will be used to generate assessment data step */
44342      /* code, such as retrieving names of temporary variables and summary variables,      */
44343      /* labels, etc.  It is used in almost all the assessment computations such as lift,  */
44344      /* roc, index, scoreDist and could be thought as a global variable in assessment     */
44345      /* computation.                                                                      */
44346      data work.ASSESS_19AZ8A8_assessMeta_pcFYWj;
MPRINT(EM_DIAGRAM):    data work.ASSESS_19AZ8A8_assessMeta_pcFYWj;
44347      length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32
44347    ! RESULT_MAX_LABEL
44348         $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX 
$32 RESULT_MAX_LABEL $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
44349      VARIABLE = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   VARIABLE = "Cases_in_1000s";
44350      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
44351      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
44352      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
44353      LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
44354      PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
44355      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
44356      LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
44357      GEN_VAR_IN_TEMP_DATA = "Cases_in_1000s";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "Cases_in_1000s";
44358      RESULT_MEAN = "_targetMean_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_targetMean_";
44359      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Target";
44360      RESULT_MIN = "_targetMin_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_targetMin_";
44361      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Target";
44362      MIN_ADJUSTED = "Cases_in_minAdjusted_GKSmGrzdW";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "Cases_in_minAdjusted_GKSmGrzdW";
44363      RESULT_MAX = "_targetMax_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_targetMax_";
44364      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Target";
44365      MAX_ADJUSTED = "Cases_in_maxAdjusted_6fH8yewZU";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "Cases_in_maxAdjusted_6fH8yewZU";
44366      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
44367      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
44368      TEMPORARY_VARIABLE = "Cases_in_1000s_KBPPWiG1u3MQE1n";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "Cases_in_1000s_KBPPWiG1u3MQE1n";
44369      output;
MPRINT(EM_DIAGRAM):   output;
44370      VARIABLE = "P_Cases_in_1000s";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_Cases_in_1000s";
44371      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
44372      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
44373      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
44374      LEVEL = "";
MPRINT(EM_DIAGRAM):   LEVEL = "";
44375      PROPERTY = "PREDICTED";
MPRINT(EM_DIAGRAM):   PROPERTY = "PREDICTED";
44376      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
44377      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
44378      GEN_VAR_IN_TEMP_DATA = "P_Cases_in_1000s";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_Cases_in_1000s";
44379      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
44380      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Predicted";
44381      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
44382      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
44383      MIN_ADJUSTED = "P_Cases__minAdjusted_hDH6oIwqX";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_Cases__minAdjusted_hDH6oIwqX";
44384      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
44385      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
44386      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Predicted";
44387      MAX_ADJUSTED = "max_adjusted";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "max_adjusted";
44388      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
44389      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
44390      TEMPORARY_VARIABLE = "P_Cases_in_1000s_hVVRjiLi8RwW6E5";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_Cases_in_1000s_hVVRjiLi8RwW6E5";
44391      output;
MPRINT(EM_DIAGRAM):   output;
44392      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_19AZ8A8_ASSESSMETA_PCFYWJ has 2 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

44393      /* Generate temporary dataset and obtain summary statistics such as total number of   */
44394      /* obserations, frequency of target.  However, summary statistics for class reporting */
44395      /* variabels are not computed here since if there exist class reporting variables,    */
44396      /* then PROC DMDB will be called. And there is no need to compute interval reporting  */
44397      /* summary statisitcs, if any.                                                        */
44398      data work.ASSESS_19AZ8A8_normSD_C60c9c(drop=
44399      _numberOfObservation_
44400      _intervalTargetMin_ _intervalTargetMax_
44401      )
44402      work.ASSESS_19AZ8A8_meansAndTi_hR95TG (keep=
44403      _numberOfObservation_
44404      _intervalTargetMin_ _intervalTargetMax_
44405      );
MPRINT(EM_DIAGRAM):    data work.ASSESS_19AZ8A8_normSD_C60c9c(drop= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ ) work.ASSESS_19AZ8A8_meansAndTi_hR95TG (keep= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ );
44406      set EMWS2.Reg2_TRAIN(
44407      where=(
44408      (Cases_in_1000s ^= .)
44409      and (P_Cases_in_1000s ^= .)
44410      )
44411      ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_TRAIN( where=( (Cases_in_1000s ^= .) and (P_Cases_in_1000s ^= .) ) ) end=_lastObservation_;
44412      keep frequency_4eE0xZ;
MPRINT(EM_DIAGRAM):   keep frequency_4eE0xZ;
44413      frequency_4eE0xZ = 1;
MPRINT(EM_DIAGRAM):   frequency_4eE0xZ = 1;
44414      keep Cases_in_1000s;
MPRINT(EM_DIAGRAM):   keep Cases_in_1000s;
44415      keep P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   keep P_Cases_in_1000s;
44416      output work.ASSESS_19AZ8A8_normSD_C60c9c;
MPRINT(EM_DIAGRAM):   output work.ASSESS_19AZ8A8_normSD_C60c9c;
44417      keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
44418      retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
44419      _numberOfObservation_ + frequency_4eE0xZ;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_4eE0xZ;
44420      keep _intervalTargetMin_ _intervalTargetMax_;
MPRINT(EM_DIAGRAM):   keep _intervalTargetMin_ _intervalTargetMax_;
44421      retain _intervalTargetMin_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMin_ .;
44422      retain _intervalTargetMax_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMax_ .;
44423      if (_n_ = 1) then do;
MPRINT(EM_DIAGRAM):   if (_n_ = 1) then do;
44424      _intervalTargetMin_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Cases_in_1000s;
44425      _intervalTargetMax_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Cases_in_1000s;
44426      end;
MPRINT(EM_DIAGRAM):   end;
44427      else do;
MPRINT(EM_DIAGRAM):   else do;
44428      if (_intervalTargetMin_ > P_Cases_in_1000s) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMin_ > P_Cases_in_1000s) then do;
44429      _intervalTargetMin_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_Cases_in_1000s;
44430      end;
MPRINT(EM_DIAGRAM):   end;
44431      if (_intervalTargetMax_ < P_Cases_in_1000s) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMax_ < P_Cases_in_1000s) then do;
44432      _intervalTargetMax_ = P_Cases_in_1000s;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_Cases_in_1000s;
44433      end;
MPRINT(EM_DIAGRAM):   end;
44434      end;
MPRINT(EM_DIAGRAM):   end;
44435      if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
44436      output work.ASSESS_19AZ8A8_meansAndTi_hR95TG;
MPRINT(EM_DIAGRAM):   output work.ASSESS_19AZ8A8_meansAndTi_hR95TG;
44437      end;
MPRINT(EM_DIAGRAM):   end;
44438      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 500 observations read from the data set EMWS2.PART_TRAIN.
NOTE: View EMWS2.REG2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 500 observations read from the data set EMWS2.TRANS_TRAIN.
NOTE: There were 493 observations read from the data set EMWS2.REG2_TRAIN.
      WHERE (Cases_in_1000s not = .) and (P_Cases_in_1000s not = .);
NOTE: The data set WORK.ASSESS_19AZ8A8_NORMSD_C60C9C has 493 observations and 3 variables.
NOTE: The data set WORK.ASSESS_19AZ8A8_MEANSANDTI_HR95TG has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

44439      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
44440      set EMWS2.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS2.MdlComp_EMRANK;
44441      where MODEL = "Reg2" and TARGET = "Cases_in_1000s" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Reg2" and TARGET = "Cases_in_1000s" and dataRole="TRAIN";
44442      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS2.MDLCOMP_EMRANK.
      WHERE (MODEL='Reg2') and (TARGET='Cases_in_1000s') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

44443      data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
44444      do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
44445      DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
44446      output;
MPRINT(EM_DIAGRAM):   output;
44447      end;
MPRINT(EM_DIAGRAM):   end;
44448      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

44449      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
44450      merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
44451      by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
44452      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

44453      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
44454      set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
44455      retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
44456      retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
44457      keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
44458      if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
44459      bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
44460      _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
44461      if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
44462      /* tied */
44463      _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
44464      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
44465      end;
MPRINT(EM_DIAGRAM):   end;
44466      else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
44467      /* next tied */
44468      _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
44469      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ ));
44470      end;
MPRINT(EM_DIAGRAM):   end;
44471      output;
MPRINT(EM_DIAGRAM):   output;
44472      *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
44473      * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
44474      *end;
MPRINT(EM_DIAGRAM):   *end;
44475      if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
44476      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
44477      end;
MPRINT(EM_DIAGRAM):   end;
44478      else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
44479      if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
44480      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
44481      end;
MPRINT(EM_DIAGRAM):   end;
44482      end;
MPRINT(EM_DIAGRAM):   end;
44483      bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
44484      /* correct the previous change */
44485      end;
MPRINT(EM_DIAGRAM):   end;
44486      if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
44487      _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
44488      output;
MPRINT(EM_DIAGRAM):   output;
44489      end;
MPRINT(EM_DIAGRAM):   end;
44490      _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
44491      _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
44492      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

44493      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
44494      set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
44495      by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
44496      retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
44497      if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
44498      _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
44499      end;
MPRINT(EM_DIAGRAM):   end;
44500      if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
44501      _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
44502      output;
MPRINT(EM_DIAGRAM):   output;
44503      end;
MPRINT(EM_DIAGRAM):   end;
44504      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
44505      filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG2_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44506      *------------------------------------------------------------*;
44507      * MdlComp: Scoring REG2_TRAIN data;
44508      *------------------------------------------------------------*;
44509      data EMWS2.MdlComp_TRAIN
44510      / view=EMWS2.MdlComp_TRAIN
44511      ;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_TRAIN / view=EMWS2.MdlComp_TRAIN ;
44512      set EMWS2.Reg2_TRAIN
44513      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_TRAIN ;
44514      %inc emflow;
MPRINT(EM_DIAGRAM):   if (P_Cases_in_1000s ge 248.988598845476) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 138.588391611049) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 98.2205926537502) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 72.4533417364895) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 53.3192196934063) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 49.5140976874644) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 39.8600273843538) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 33.1388123004423) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 28.9554598757038) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 21.9170580907829) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 19.0472054759348) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 15.3024653434042) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 9.8032800325582) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 5.82012920885717) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 4.4813771267376) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 2.57051412195488) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 0.56694166723335) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -2.88114486560934) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -5.63510505727103) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 20;
MPRINT(EM_DIAGRAM):   end;
44594      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS2.MDLCOMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.REG2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
44595      quit;
44596      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
44597      filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG2_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44598      *------------------------------------------------------------*;
44599      * MdlComp: Scoring REG2_VALIDATE data;
44600      *------------------------------------------------------------*;
44601      data EMWS2.MdlComp_VALIDATE
44602      / view=EMWS2.MdlComp_VALIDATE
44603      ;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_VALIDATE / view=EMWS2.MdlComp_VALIDATE ;
44604      set EMWS2.Reg2_VALIDATE
44605      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_VALIDATE ;
44606      %inc emflow;
MPRINT(EM_DIAGRAM):   if (P_Cases_in_1000s ge 248.988598845476) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 138.588391611049) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 98.2205926537502) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 72.4533417364895) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 53.3192196934063) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 49.5140976874644) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 39.8600273843538) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 33.1388123004423) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 28.9554598757038) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 21.9170580907829) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 19.0472054759348) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 15.3024653434042) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 9.8032800325582) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 5.82012920885717) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 4.4813771267376) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 2.57051412195488) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 0.56694166723335) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -2.88114486560934) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -5.63510505727103) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 20;
MPRINT(EM_DIAGRAM):   end;
44686      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS2.MDLCOMP_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.REG2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_DIAGRAM):   quit;
44687      quit;
44688      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
44689      filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\student\Desktop\AA490\Project\AA490_Project\Modeling\Labor Force Model\Workspaces\EMWS2\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG2_TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44690      *------------------------------------------------------------*;
44691      * MdlComp: Scoring REG2_TEST data;
44692      *------------------------------------------------------------*;
44693      data EMWS2.MdlComp_TEST
44694      / view=EMWS2.MdlComp_TEST
44695      ;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_TEST / view=EMWS2.MdlComp_TEST ;
44696      set EMWS2.Reg2_TEST
44697      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Reg2_TEST ;
44698      %inc emflow;
MPRINT(EM_DIAGRAM):   if (P_Cases_in_1000s ge 248.988598845476) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 138.588391611049) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 98.2205926537502) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 72.4533417364895) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 53.3192196934063) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 49.5140976874644) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 39.8600273843538) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 33.1388123004423) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 28.9554598757038) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 21.9170580907829) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 19.0472054759348) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 15.3024653434042) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 9.8032800325582) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 5.82012920885717) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 4.4813771267376) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 2.57051412195488) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge 0.56694166723335) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -2.88114486560934) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_Cases_in_1000s ge -5.63510505727103) then do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Cases_in_1000s = 20;
MPRINT(EM_DIAGRAM):   end;
44778      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS2.MDLCOMP_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.REG2_TEST.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):   quit;
44779      quit;
44780      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
44781      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
44782      * MdlComp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp: Computing metadata for TRAIN data;
44783      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS2.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.MdlComp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.MdlComp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.MdlComp_TRAIN out=WORK.M0C98OG6 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0C98OG6;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0C98OG6(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0C98OG6;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0C98OG6;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1NO3AW2 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1NO3AW2;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1NO3AW2;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M35MG4_V(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1NO3AW2;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1NO3AW2;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1NO3AW2;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1NO3AW2;
MPRINT(EMADVISECOLUMNS):   set WORK.M1NO3AW2;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS2.Reg2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Reg2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS2.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
      
NOTE: View EMWS2.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
NOTE: View EMWS2.MDLCOMP_TEST.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
